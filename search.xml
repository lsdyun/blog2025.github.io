<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hibernate</title>
    <url>/blog2025.github.io/2025/04/02/Hibernate/</url>
    <content><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>Hibernate 是 Java 生态中广泛使用的 ‌<strong>ORM（对象关系映射）框架</strong>‌，用于简化数据库操作，将 Java 对象与关系型数据库表自动映射，提供高效、面向对象的数据访问能力。</p>
<p>结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   ├── com.example.model       # 实体类（如 User.java）‌</span><br><span class="line">│   │   ├── com.example.dao         # DAO 接口与实现类（如 UserDaoImpl）‌</span><br><span class="line">│   │   ├── com.example.service     # 业务逻辑类（如 UserService）‌</span><br><span class="line">│   │   └── com.example.util        # 工具类（如 HibernateUtil.java）‌</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── hibernate.cfg.xml       # Hibernate 主配置文件‌ </span><br><span class="line">│       └── com/example/model/      # 实体映射文件（如 User.hbm.xml，注解方式可省略）‌</span><br><span class="line">└── test/</span><br><span class="line">    └── java/</span><br><span class="line">        └── com.example.test        # 单元测试类（如 UserTest.java）‌</span><br></pre></td></tr></table></figure>



<h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><ol>
<li>‌<strong>ORM 映射</strong>-‌-&gt;O代表的是Objcet，R代表的是Relative，M代表的是Mapping<ul>
<li>自动将 Java 类映射到数据库表，属性映射到字段，<strong>减少手动 SQL 编写</strong>。</li>
<li>支持继承、多态等面向对象特性在关系型数据库中的实现。</li>
</ul>
</li>
<li>‌<strong>数据库无关性</strong>‌<ul>
<li>通过 <code>Hibernate Dialect</code> 适配不同数据库（如 MySQL、Oracle），切换数据库只需修改配置。</li>
</ul>
</li>
<li>‌<strong>高效性能</strong>‌<ul>
<li>提供一级缓存（Session 级别）、二级缓存（SessionFactory 级别）和查询缓存，减少数据库访问频率。</li>
<li>延迟加载（Lazy Loading）机制优化资源使用。</li>
</ul>
</li>
<li>‌<strong>简化事务管理</strong>‌<ul>
<li>与 Spring 框架无缝集成，支持声明式事务（<code>@Transactional</code>）。</li>
</ul>
</li>
</ol>
<h3 id="三、组件"><a href="#三、组件" class="headerlink" title="三、组件"></a>三、组件</h3><ol>
<li>‌<strong>配置文件</strong>‌<ul>
<li>‌**<code>hibernate.cfg.xml</code>**‌：全局配置数据库连接、缓存策略、Dialect 方言（不同于其他数据库的语言）等。</li>
<li>‌<strong>映射文件（<code>\*.hbm.xml</code>）或注解</strong>‌：定义对象与表的映射关系。</li>
</ul>
</li>
<li>‌<strong>核心接口与类</strong>‌<ul>
<li>‌**<code>SessionFactory</code>**‌：重量级对象，管理数据库连接池和二级缓存，全局唯一。</li>
<li>‌**<code>Session</code>**‌：轻量级对象，代表一次数据库会话，提供 CRUD 方法（如 <code>save()</code>, <code>get()</code>, <code>update()</code>）。</li>
<li>‌**<code>Transaction</code>**‌：管理事务的提交与回滚。</li>
<li>‌**<code>Query</code> &#x2F; <code>Criteria</code>**‌：执行 HQL（Hibernate Query Language）或 Criteria 查询。</li>
</ul>
</li>
</ol>
<h3 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h3><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Maven 依赖示例（Hibernate 5.x） --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.14.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p>**配置 <code>hibernate.cfg.xml</code>**‌</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接配置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- Dialect 配置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 显示 SQL 语句 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 其他，可写可不写 --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 格式化sql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动建表  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载所有映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/pojo/User.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义实体类与映射</strong></p>
<ul>
<li><p>‌**注解方式（推荐）**‌：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="comment">// Getter &amp; Setter  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>操作数据库</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 1. 创建 SessionFactory  </span></span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>()  </span><br><span class="line">                .configure(<span class="string">&quot;hibernate.cfg.xml&quot;</span>)  </span><br><span class="line">                .buildSessionFactory();  </span><br><span class="line">        <span class="comment">// 2. 获取 Session  </span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession()) &#123;  </span><br><span class="line">            <span class="comment">// 3. 开启事务  </span></span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();  </span><br><span class="line">            <span class="comment">// 4. 插入数据  </span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  </span><br><span class="line">            user.setName(<span class="string">&quot;Alice&quot;</span>);  </span><br><span class="line">            session.save(user);  </span><br><span class="line">            <span class="comment">// 5. 查询数据  </span></span><br><span class="line">            <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> session.get(User.class, <span class="number">1L</span>);  </span><br><span class="line">            System.out.println(result.getName());  </span><br><span class="line">            <span class="comment">// 6. 提交事务  </span></span><br><span class="line">            tx.commit();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、‌Hibernate和JDBC区别"><a href="#五、‌Hibernate和JDBC区别" class="headerlink" title="五、‌Hibernate和JDBC区别"></a>五、‌<strong>Hibernate</strong>和JDBC区别</h3><table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>JDBC</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>抽象级别</strong>‌</td>
<td>面向对象（ORM）</td>
<td>面向 SQL（低层 API）</td>
</tr>
<tr>
<td>‌<strong>开发效率</strong>‌</td>
<td>高（自动映射、代码生成）</td>
<td>低（手动编写 SQL 和映射）</td>
</tr>
<tr>
<td>‌<strong>性能</strong>‌</td>
<td>需合理配置缓存和查询</td>
<td>直接控制，理论上更高效</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>复杂业务对象模型、快速开发</td>
<td>简单操作、高性能要求场景</td>
</tr>
</tbody></table>
<h3 id="六、Hibernate和MyBatis区别"><a href="#六、Hibernate和MyBatis区别" class="headerlink" title="六、Hibernate和MyBatis区别"></a>六、Hibernate和MyBatis区别</h3><table>
<thead>
<tr>
<th><strong>组件&#x2F;文件</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>MyBatis</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>实体类</strong>‌</td>
<td>使用 JPA 注解（如 <code>@Entity</code>, <code>@Table</code>）或 XML 映射文件定义对象与表的映射关系，需包含关联关系配置（如 <code>@OneToMany</code>）‌</td>
<td>实体类通常为 POJO，无需复杂注解（仅需字段与表字段对应），关联关系通过 SQL 或 ResultMap 手动处理‌</td>
</tr>
<tr>
<td>‌<strong>配置文件</strong>‌</td>
<td>全局配置文件 <code>hibernate.cfg.xml</code>，管理数据库连接、缓存、Dialect 等‌</td>
<td>全局配置文件 <code>mybatis-config.xml</code>，定义数据源、插件及全局设置，每个 Mapper 接口需对应 XML 文件或注解 SQL‌</td>
</tr>
<tr>
<td>‌<strong>数据访问层</strong>‌</td>
<td>DAO 类通过 <code>Session</code> 操作数据库（如 <code>session.save()</code>），方法中无需显式 SQL‌</td>
<td>Mapper 接口与 XML 文件（或注解）绑定，需手动编写 SQL 语句及结果映射（如 <code>&lt;select id=&quot;...&quot;&gt;</code>）‌</td>
</tr>
<tr>
<td>‌<strong>工具类</strong>‌</td>
<td>需 <code>SessionFactory</code> 管理会话（如 <code>HibernateUtil</code>）‌</td>
<td>需 <code>SqlSessionFactory</code> 管理会话（如 <code>MyBatisUtil</code>），通常与 Spring 集成后自动管理‌</td>
</tr>
</tbody></table>
<ul>
<li><p>‌<strong>Hibernate</strong>‌</p>
<ul>
<li>‌<strong>自动 SQL 生成</strong>‌：通过实体类注解自动生成 DDL&#x2F;DML，减少手动 SQL 编写‌。</li>
<li>‌<strong>关联关系管理</strong>‌：支持级联操作（如 <code>CascadeType.ALL</code>）和延迟加载（<code>FetchType.LAZY</code>）‌。</li>
<li>‌<strong>事务整合</strong>‌：通常与 Spring 的 <code>@Transactional</code> 注解结合使用‌。</li>
</ul>
</li>
<li><p>‌<strong>MyBatis</strong>‌</p>
<ul>
<li>‌<strong>SQL 灵活性</strong>‌：需手动编写 SQL，支持动态 SQL（如 <code>&lt;if&gt;</code>, <code>&lt;foreach&gt;</code>）及存储过程调用‌。</li>
<li>‌<strong>结果集映射</strong>‌：通过 <code>&lt;resultMap&gt;</code> 或注解显式定义字段与对象属性的映射关系‌。</li>
<li>‌<strong>插件扩展</strong>‌：支持自定义插件（如分页插件 PageHelper）优化 SQL 执行流程‌。</li>
</ul>
</li>
<li><p>‌<strong>Hibernate</strong>‌</p>
<ul>
<li>‌<strong>适用场景</strong>‌：领域模型复杂、需快速开发且对 SQL 优化要求较低的项目（如企业内部系统）‌。</li>
<li>‌<strong>结构特点</strong>‌：代码简洁，ORM 配置集中，但可能因自动生成 SQL 导致性能优化困难‌。</li>
</ul>
</li>
<li><p>‌<strong>MyBatis</strong>‌</p>
<ul>
<li>‌<strong>适用场景</strong>‌：需高度 SQL 控制、复杂查询优化或遗留数据库迁移的项目（如互联网高并发系统）‌。</li>
<li>‌<strong>结构特点</strong>‌：SQL 分散在 XML 或注解中，灵活性高但维护成本增加‌。</li>
</ul>
</li>
</ul>
<h3 id="七、模板"><a href="#七、模板" class="headerlink" title="七、模板"></a>七、模板</h3><ol>
<li><p><strong>Maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hibernate 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.14.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（hibernate.cfg.xml）</strong></p>
<p>配置数据库连接和实体类：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test?useSSL=false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Hibernate 行为配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 自动更新表结构 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注册实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.example.model.User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类（User.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须有无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter &amp; Setter</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Hibernate 工具类（HibernateUtil.java）</strong></p>
<p>管理 <code>SessionFactory</code> 和 <code>Session</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory <span class="title function_">buildSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StandardServiceRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardServiceRegistryBuilder</span>()</span><br><span class="line">                .configure(<span class="string">&quot;hibernate.cfg.xml&quot;</span>) <span class="comment">// 默认加载类路径下的配置文件</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetadataSources</span>(registry).buildMetadata().buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            StandardServiceRegistryBuilder.destroy(registry);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;初始化 SessionFactory 失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title function_">getSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        getSessionFactory().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>DAO 层（UserDao.java）</strong></p>
<p>实现增删改查操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.save(user);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID查询用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            <span class="keyword">return</span> session.get(User.class, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.update(user);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.get(User.class, id);</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                session.delete(user);</span><br><span class="line">            &#125;</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用示例（Main.java）</strong></p>
<p>测试 CRUD 操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;alice@example.com&quot;</span>);</span><br><span class="line">        userDao.save(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.getById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询结果: &quot;</span> + user2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新用户</span></span><br><span class="line">        user2.setEmail(<span class="string">&quot;new_alice@example.com&quot;</span>);</span><br><span class="line">        userDao.update(user2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除用户</span></span><br><span class="line">        userDao.delete(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 SessionFactory</span></span><br><span class="line">        HibernateUtil.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>/blog2025.github.io/2025/03/19/JAVA/</url>
    <content><![CDATA[<h3 id="一-Java历史"><a href="#一-Java历史" class="headerlink" title="一.Java历史"></a>一.Java历史</h3><ol>
<li><p>运行流程：</p>
<p>&emsp;&emsp;代码——&gt;字节码——&gt;虚拟机——&gt;执行（一次编写，处处运行）</p>
</li>
<li><p>版本：</p>
<p>&emsp;&emsp;Java SE：标准版（JVM和标准库）；</p>
<p>&emsp;&emsp;Java EE：企业版（SE基础上增加大量API和库）Spring框架等；</p>
<p>&emsp;&emsp;Java ME：嵌入式版本。</p>
</li>
<li><p>JDK：（开发工具包）包含JRE、编译器、调试器等，</p>
<p>&emsp;&emsp;JRE：（开发环境）运行Java字节码的虚拟机、库。</p>
</li>
<li><p>第一个Java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
</ol>
<h3 id="二、Java基础"><a href="#二、Java基础" class="headerlink" title="二、Java基础"></a>二、Java基础</h3><ol>
<li><h4 id="命名格式："><a href="#命名格式：" class="headerlink" title="命名格式："></a>命名格式：</h4><p>类名格式：大写字母开头+数字&#x2F;下划线</p>
<p>方法名格式：小写字母开头+数字&#x2F;下划线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()：方法名</span><br><span class="line">String[]：参数类型</span><br><span class="line">args：参数名</span><br><span class="line"></span><br><span class="line">HelloWorld.java（源码）—编译—&gt;HelloWorld.class（字节码）—执行—&gt;JVM</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内容</span></span><br><span class="line"><span class="comment">/*内容*/</span></span><br><span class="line"><span class="comment">/**内容*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + a);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h4><table>
<thead>
<tr>
<th>类型</th>
<th></th>
<th>字节数</th>
<th>格式</th>
<th>包装（引用类型）</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>byte</td>
<td>1</td>
<td>127</td>
<td>java.lang.Byte</td>
</tr>
<tr>
<td></td>
<td>short</td>
<td>2</td>
<td>100</td>
<td>java.lang.Short</td>
</tr>
<tr>
<td></td>
<td>int</td>
<td>4</td>
<td>100</td>
<td>java.lang.Integer</td>
</tr>
<tr>
<td></td>
<td>long</td>
<td>8</td>
<td>100L</td>
<td>java.lang.Long</td>
</tr>
<tr>
<td>浮点型</td>
<td>float</td>
<td>4</td>
<td>3.14f</td>
<td>java.lang.Float</td>
</tr>
<tr>
<td></td>
<td>double</td>
<td>8</td>
<td>3.14</td>
<td>java.lang.Double</td>
</tr>
<tr>
<td>字符型</td>
<td>char</td>
<td>2</td>
<td></td>
<td>java.lang.Character</td>
</tr>
<tr>
<td>布尔型</td>
<td>boolean</td>
<td>1</td>
<td>true&#x2F;false</td>
<td>java.lang.Boolean</td>
</tr>
</tbody></table>
</li>
<li><h4 id="引用数据类型："><a href="#引用数据类型：" class="headerlink" title="引用数据类型："></a>引用数据类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String</span><br><span class="line"><span class="type">String</span> <span class="variable">sentence</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="省略变量类型："><a href="#省略变量类型：" class="headerlink" title="省略变量类型："></a>省略变量类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 代替方法名</span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> 方法名();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="运算："><a href="#运算：" class="headerlink" title="运算："></a>运算：</h4><p>简写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a += <span class="number">100</span>；等价于a = a + <span class="number">100</span>；</span><br><span class="line">a -+ <span class="number">100</span>；等价于a = a — <span class="number">100</span>；</span><br><span class="line">a *= <span class="number">100</span>；等价于a = a * <span class="number">100</span>；</span><br><span class="line">a /= <span class="number">100</span>；等价于a = a / <span class="number">100</span>；</span><br></pre></td></tr></table></figure>

<p>自增自减：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>；</span><br><span class="line">a++;	<span class="comment">//先引用a，再+1</span></span><br><span class="line">a--;	<span class="comment">//先引用a，再100</span></span><br><span class="line">++a;	<span class="comment">//先+1，再引用a</span></span><br><span class="line">--a;	<span class="comment">//先-1，再引用a</span></span><br></pre></td></tr></table></figure>

<p>三元运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt; <span class="number">1</span> ? a : <span class="number">50</span></span><br><span class="line">    判断a是否大于<span class="number">1</span>，若大于<span class="number">1</span>，则b = a，否则b = <span class="number">50</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="字符和字符串："><a href="#字符和字符串：" class="headerlink" title="字符和字符串："></a>字符和字符串：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">\：转义字符</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[个数];</span><br><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;等价于<span class="type">int</span> [] 变量名 = &#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&quot;王麻子&quot;</span>;	<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h3><ol>
<li><h4 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();	<span class="comment">//读取输入并获取字符串</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();		<span class="comment">//读取输入并获取整数</span></span><br><span class="line">输出：</span><br><span class="line">    System.out.println();		<span class="comment">//输出换行</span></span><br><span class="line">	System.out.print();			<span class="comment">//输出</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="if条件："><a href="#if条件：" class="headerlink" title="if条件："></a>if条件：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断相等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==		：比较值</span><br><span class="line">equals()：比较内存地址</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Switch多重选择："><a href="#Switch多重选择：" class="headerlink" title="Switch多重选择："></a>Switch多重选择：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="while循环："><a href="#while循环：" class="headerlink" title="while循环："></a>while循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先判断再执行：</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="do-while循环："><a href="#do-while循环：" class="headerlink" title="do while循环："></a>do while循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先执行再判断：</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;布尔表达式;自增或自减)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for each循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量类型 变量值 : 循环对象)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a : num)&#123;</span><br><span class="line">    sout(a);</span><br><span class="line">&#125;</span><br><span class="line">结果为：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="break、continue、return"><a href="#break、continue、return" class="headerlink" title="break、continue、return"></a>break、continue、return</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>：终止所有循环，跳出循环体。</span><br><span class="line"><span class="keyword">continue</span>：终止本次循环，开始下一次循环。</span><br><span class="line"><span class="keyword">return</span>：结束方法。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、数组："><a href="#四、数组：" class="headerlink" title="四、数组："></a>四、数组：</h3><ol>
<li><h4 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i&lt;num.length ; i++)&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num[i];</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n : num)&#123;</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java 标准库遍历：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sout(Arrays.toString(num));</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">各类排序算法：</span><br><span class="line">插入排序：</span><br><span class="line">    - 直接插入排序</span><br><span class="line">    - 希尔排序</span><br><span class="line">交换排序：</span><br><span class="line">    - 冒泡排序</span><br><span class="line">    - 快速排序</span><br><span class="line">选择排序：</span><br><span class="line">    - 简单选择排序</span><br><span class="line">    - 树形选择排序</span><br><span class="line">    - 堆排序</span><br><span class="line">归并排序</span><br><span class="line">基数排序 </span><br><span class="line"></span><br><span class="line">典型：</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num[i];</span><br><span class="line">	num[i] = num2[i+<span class="number">1</span>];</span><br><span class="line">	num2[i+<span class="number">1</span>] = temp;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java 标准库排序：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">Arrays.sort(num);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="多维数组："><a href="#多维数组：" class="headerlink" title="多维数组："></a>多维数组：</h4><p>二维数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多维数组从0开始</span><br><span class="line"> 	arr[0][0],arr[0][1],arr[0][2];</span><br><span class="line">    arr[1][0],arr[1][1],arr[1][2];</span><br><span class="line">	arr[2][0],arr[2][1],arr[2][2];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[][] num = new int[3][4];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] num = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">调用：sout(num[<span class="number">1</span>][<span class="number">2</span>]);=&gt;<span class="number">6</span></span><br><span class="line">    </span><br><span class="line">打印二维数组：<span class="keyword">for</span> each</span><br><span class="line"><span class="title function_">for</span><span class="params">(<span class="type">int</span>[] arr : num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n : arr)&#123;</span><br><span class="line">        sout(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java标准库打印：</span><br><span class="line">sout(Arrays.deepToString(num));</span><br></pre></td></tr></table></figure>

<p>三维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][][] num = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">16</span>,<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="number">18</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印：</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[][] arr : num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] arr2 : arr)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n : arr2)&#123;</span><br><span class="line">                sout(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h3><ol>
<li><h4 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:所有类可见</span><br><span class="line"><span class="keyword">private</span>:同一类可见（该种类只能通过get、set方法被外部类访问）</span><br><span class="line"><span class="keyword">protected</span>:对同一包内的类和所有子类可见</span><br><span class="line">    <span class="keyword">static</span>: 静态变量、方法</span><br><span class="line">    <span class="keyword">final</span>: 常量方法、类、变量（常量方法无法被继承、常量无法被修改）</span><br><span class="line">    <span class="keyword">abstract</span>: 抽象类和抽象方法</span><br><span class="line">    <span class="keyword">synchronized</span>: 该方法同一时间只能被一个线程访问</span><br><span class="line">    <span class="keyword">transient</span>: 不会持久化变量</span><br><span class="line">    <span class="keyword">volatile</span>: 线程访问中强制同步变量值</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="类：（对象的蓝图-原型）"><a href="#类：（对象的蓝图-原型）" class="headerlink" title="类：（对象的蓝图\原型）"></a>类：（对象的蓝图\原型）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="对象：（类的实例化）"><a href="#对象：（类的实例化）" class="headerlink" title="对象：（类的实例化）"></a>对象：（类的实例化）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span>  <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">访问成员：</span><br><span class="line">ps.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">ps.age = <span class="number">10</span>;</span><br><span class="line">ps.<span class="keyword">do</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="this关键字：（引用当前对象的实例）"><a href="#this关键字：（引用当前对象的实例）" class="headerlink" title="this关键字：（引用当前对象的实例）"></a>this关键字：（引用当前对象的实例）</h4><p>this必须在构造方法的首行，(static)静态方法中不能使用this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）指向当前对象的成员变量</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name1)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name1; <span class="comment">// this.name 是成员变量，name1 是参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）在构造方法中调用其他构造方法</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(<span class="number">10</span>, <span class="number">10</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.width = width;</span><br><span class="line">            <span class="built_in">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">（<span class="number">3</span>）<span class="built_in">this</span>在getter和setter中使用（JavaBean，在IDE中可以快速生成getter和setter）</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            </span><br><span class="line">            ps.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setAge(<span class="number">10</span>);</span><br><span class="line">            sout(ps.getName()+ps.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="静态方法和动态方法区别："><a href="#静态方法和动态方法区别：" class="headerlink" title="静态方法和动态方法区别："></a>静态方法和动态方法区别：</h4><table>
<thead>
<tr>
<th>静态方法</th>
<th>动态方法</th>
</tr>
</thead>
<tbody><tr>
<td>使用static修饰，属于类本身</td>
<td>不使用static修饰，属于对象实例</td>
</tr>
<tr>
<td>通过类名调用<br>MathUtils.add(1,1)</td>
<td>通过对象实例调用<br>Person ps &#x3D; new Pserson()<br>ps.getName()</td>
</tr>
<tr>
<td>只能访问静态变量、方法</td>
<td>可以访问实例变量、方法和静态变量、方法</td>
</tr>
<tr>
<td>不支持多态，无法重写</td>
<td>支持多态，可以被重写</td>
</tr>
</tbody></table>
</li>
<li><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numAdd</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;和为&quot;</span>+numAdd(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">HelloMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        HelloMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="构造方法：-方法名与类名相同"><a href="#构造方法：-方法名与类名相同" class="headerlink" title="构造方法：(方法名与类名相同)"></a>构造方法：(方法名与类名相同)</h4><p>无参数构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">		name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">        sout(name +<span class="string">&quot;&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>含参数构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//含参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="方法重载-Overload：（方法名称相同，参数不同）"><a href="#方法重载-Overload：（方法名称相同，参数不同）" class="headerlink" title="方法重载 Overload：（方法名称相同，参数不同）"></a>方法重载 Overload：（方法名称相同，参数不同）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三;</span></span><br><span class="line"><span class="string">    private int age=10;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1()&#123;</span></span><br><span class="line"><span class="string">        sout(&quot;</span>hah1<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1(String name)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func2(String name, int age)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot; + age)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><p>子类无法访问父类的private字段或者private方法，需要把private改为protected</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ww</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">        </span><br><span class="line">        dog1.ww();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="方法重写-Override：子类的方法覆盖父类中的方法。"><a href="#方法重写-Override：子类的方法覆盖父类中的方法。" class="headerlink" title="方法重写 Override：子类的方法覆盖父类中的方法。"></a>方法重写 Override：子类的方法覆盖父类中的方法。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="重写-运行时执行-和重载-编译时执行-的区别："><a href="#重写-运行时执行-和重载-编译时执行-的区别：" class="headerlink" title="重写(运行时执行)和重载(编译时执行)的区别："></a>重写(运行时执行)和重载(编译时执行)的区别：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD.png" alt="重写和重载"></p>
</li>
<li><h4 id="super关键字：（访问父类-超类中的方法、构造器、变量）"><a href="#super关键字：（访问父类-超类中的方法、构造器、变量）" class="headerlink" title="super关键字：（访问父类\超类中的方法、构造器、变量）"></a>super关键字：（访问父类\超类中的方法、构造器、变量）</h4><p><strong>super()必须在构造器第一行‌：与this()冲突，二者不能共存。</strong></p>
<p>(static)静态方法中不能使用super</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）访问父类的成员变量		</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">printNames</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">super</span>.name); <span class="comment">// 父类的name：输出 &quot;Animal&quot;</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);  <span class="comment">// 子类的name：输出 &quot;Dog&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）调用父类的方法</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.makeSound(); <span class="comment">// 先调用父类方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">3</span>）调用父类的构造器</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String breed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name); <span class="comment">// 调用父类有参构造器</span></span><br><span class="line">            <span class="built_in">this</span>.breed = breed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="抽象类和抽象方法-Abstract："><a href="#抽象类和抽象方法-Abstract：" class="headerlink" title="抽象类和抽象方法 Abstract："></a>抽象类和抽象方法 Abstract：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">抽象类：无法实例化的类</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类无法实例化，需要通过继承该抽象类才能访问该抽象类的成员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象构造函数</span></span><br><span class="line">    Animal()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//重写抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现抽象构造函数</span></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用抽象方法</span></span><br><span class="line">		<span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//抽象类无法实例化,需要通过继承该抽象类才能访问该抽象类的成员：</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//实现非抽象方法</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="接口-Interface：-一个类可以实现多个接口"><a href="#接口-Interface：-一个类可以实现多个接口" class="headerlink" title="接口 Interface：(一个类可以实现多个接口)"></a>接口 Interface：(一个类可以实现多个接口)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.sleep();</span><br><span class="line">        dog.eat(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h4><p>运行时多态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法重写Override   </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Dog</span>  <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">          dog.eat();</span><br><span class="line"></span><br><span class="line">          <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">          cat.eat();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>编译时多态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法重载：方法名相同，参数不同</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;food&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food,String drink)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;鱼&quot;</span>+drink+<span class="string">&quot;水&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="封装：（将字段和方法绑定到单个类中）"><a href="#封装：（将字段和方法绑定到单个类中）" class="headerlink" title="封装：（将字段和方法绑定到单个类中）"></a>封装：（将字段和方法绑定到单个类中）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用<span class="keyword">private</span>和<span class="keyword">protected</span>隐藏数据和方法，用于实现封装</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="内部类：（在一个类中定义另一个类）"><a href="#内部类：（在一个类中定义另一个类）" class="headerlink" title="内部类：（在一个类中定义另一个类）"></a>内部类：（在一个类中定义另一个类）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;内部类&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建外部类Outer的对象</span></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//使用外部类Outer创建内部类Inner的对象</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        sout(inner.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）"><a href="#匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）" class="headerlink" title="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）"></a>匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">havePet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建匿名类，继承Animal</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">                sout(<span class="string">&quot;匿名类内部+吃饭&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        ps.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======&gt;匿名类内部+吃饭</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="枚举类："><a href="#枚举类：" class="headerlink" title="枚举类："></a>枚举类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span>&#123;</span><br><span class="line">    Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常用工具类："><a href="#常用工具类：" class="headerlink" title="常用工具类："></a>常用工具类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math: 计算</span><br><span class="line">Random: 随机数</span><br><span class="line">DateUtils: 时间</span><br><span class="line">StringBuilder: 处理字符串(字符串拼装、增删改查、反转、)====&gt;非线程安全(常用)</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">1024</span>);  <span class="comment">// 初始容量1024</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">        .append(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">        .append(user.getName())</span><br><span class="line">        .append(<span class="string">&quot;! Your age is &quot;</span>)</span><br><span class="line">        .append(user.getAge())</span><br><span class="line">        .toString();</span><br><span class="line">=======&gt;Hello,Your age is </span><br><span class="line">StringBuffer: 多线程====&gt;线程安全(<span class="keyword">synchronized</span>保证线程安全)</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="反射：reflection"><a href="#反射：reflection" class="headerlink" title="反射：reflection"></a>反射：reflection</h4><p>允许程序在运行时动态<strong>获取类的信息并操作对象</strong>，</p>
<p>包括：类信息(类名、父类、接口、字段、方法、构造方法)；</p>
<p>&emsp;&emsp;&emsp;操作对象(创建实例、调用方法、修改字段值)；</p>
<p>&emsp;&emsp;&emsp;访问权限。</p>
<p>应用于：<strong>Spring依赖注入</strong>、动态配置与插件开发、动态代理与Spring AOP编程(日志和事务)、测试框架(<strong>JUnit</strong>自动运行测试方法)、<strong>序列化与反序列化(JSON&#x2F;XML)</strong>。</p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-reflection.html">链接</a></p>
</li>
</ol>
<h3 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h3><ol>
<li><h4 id="异常层次及类型："><a href="#异常层次及类型：" class="headerlink" title="异常层次及类型："></a>异常层次及类型：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%BC%82%E5%B8%B8.png"></p>
</li>
<li><h4 id="捕获异常："><a href="#捕获异常：" class="headerlink" title="捕获异常："></a>捕获异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType e<span class="comment">/*异常类型*/</span>)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e2)&#123;</span><br><span class="line"></span><br><span class="line">&#125;...<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1 | 异常类型 e2)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="throw抛出异常："><a href="#throw抛出异常：" class="headerlink" title="throw抛出异常："></a>throw抛出异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">实例化异常，再抛出异常</span><br><span class="line">例子：</span><br><span class="line">    <span class="type">NullPointerException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">	<span class="keyword">throw</span> e;</span><br><span class="line">或者：</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="throws声明其中可能发生的异常类型："><a href="#throws声明其中可能发生的异常类型：" class="headerlink" title="throws声明其中可能发生的异常类型："></a>throws声明其中可能发生的异常类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() <span class="keyword">throws</span> 异常类型<span class="number">1</span>，异常类型<span class="number">2</span>，异常类型<span class="number">3</span>&#123;</span><br><span class="line">    </span><br><span class="line">	&#125;</span><br><span class="line">例：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">继承RuntimeException或者Exception实现自定义异常。</span><br><span class="line">自定义的异常需要提供多个构造方法。</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message,Throwable cause)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">BaseException</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="断言-Assertion：调试"><a href="#断言-Assertion：调试" class="headerlink" title="断言 Assertion：调试"></a>断言 Assertion：调试</h4><p>参考:<a href="https://liaoxuefeng.com/books/java/exception/assert/index.html">链接</a></p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-assertions.html">链接</a></p>
</li>
<li><h4 id="日志-Logging：Log4j"><a href="#日志-Logging：Log4j" class="headerlink" title="日志 Logging：Log4j"></a>日志 Logging：Log4j</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(类名.class.getName());</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://liaoxuefeng.com/books/java/exception/jdk-logging/index.html">链接</a></p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-logging.html">链接</a></p>
</li>
</ol>
<h3 id="七、泛型"><a href="#七、泛型" class="headerlink" title="七、泛型"></a>七、泛型</h3><p>&emsp;&emsp;模板：用来适应任意类型，不必对类型进行强制转换。</p>
<h3 id="八、集合"><a href="#八、集合" class="headerlink" title="八、集合"></a>八、集合</h3><p><img src="/blog2025.github.io/2025/03/19/JAVA/JAVA%E9%9B%86%E5%90%88.png"></p>
<table>
<thead>
<tr>
<th>Collection</th>
<th>包含</th>
</tr>
</thead>
<tbody><tr>
<td>List（有序可重复）</td>
<td>ArrayList(查)、LinkedList(增，删)、Vector、Stack</td>
</tr>
<tr>
<td>Set（无序不可重复）</td>
<td>HashSet(去重)(无序)、TreeSet(用于排序)(有序)</td>
</tr>
<tr>
<td>Queue</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><h4 id="Collection："><a href="#Collection：" class="headerlink" title="Collection："></a>Collection：</h4><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素插入到集合中</span><br><span class="line">size() - 返回集合的大小</span><br><span class="line">remove() - 从集合中删除指定的元素</span><br><span class="line">iterator() - 返回一个迭代器以访问集合的元素</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">removeAll() - 从集合中删除指定集合的所有元素</span><br><span class="line">clear() - 删除集合中的所有元素</span><br><span class="line">sort() - 排序</span><br><span class="line">shuffle() - 随机输出</span><br><span class="line">reverse() - 反转元素的顺序</span><br><span class="line">fill() - 用指定的值替换集合中的每个元素</span><br><span class="line">copy() - 创建从指定源到目标的元素副本</span><br><span class="line">swap() - 交换集合中两个元素的位置</span><br><span class="line">binarySearch() - 搜索指定元素，返回该元素在集合中的位置</span><br><span class="line">disjoint() - 检查两个集合是否包含一些公共元素</span><br><span class="line">frequency() - 返回元素在集合中存在的次数计数</span><br><span class="line">min() - 查找最小元素</span><br><span class="line">max() - 查找最大元素</span><br></pre></td></tr></table></figure>

<h5 id="1-1-List"><a href="#1-1-List" class="headerlink" title="1.1 List:"></a>1.1 List:</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将元素添加到列表</span><br><span class="line">addAll() - 将一个列表的所有元素添加到另一个</span><br><span class="line">get() - 有助于从列表中随机访问元素</span><br><span class="line">iterator() - 返回迭代器对象，该对象可用于顺序访问列表的元素</span><br><span class="line">set() - 更改列表的元素</span><br><span class="line">remove() - 从列表中删除一个元素</span><br><span class="line">removeAll() - 从列表中删除所有元素</span><br><span class="line">clear() - 从列表中删除所有元素（比removeAll()效率更高）</span><br><span class="line">size() - 返回列表的长度</span><br><span class="line">toArray() - 将列表转换为数组</span><br><span class="line">contains() -  如果列表包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">indexOf</span><span class="params">()</span> - 返回元素第一次出现的索引</span><br><span class="line">lastIndexOf() - 返回元素最后一次出现的索引</span><br><span class="line">addFirst() - 将指定的元素添加到链接列表的开头</span><br><span class="line">addLast() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">getFirst() - 返回第一个元素</span><br><span class="line">getLast() - 返回最后一个元素</span><br><span class="line">removeFirst() - 删除第一个元素</span><br><span class="line">removeLast() - 删除最后一个元素</span><br><span class="line">peek() - 返回链表的第一个元素（头）</span><br><span class="line">poll() - 返回并从链表中删除第一个元素   </span><br><span class="line">offer() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">toString() - 转换为字符串</span><br><span class="line">clone() - 创建相同的新数组列表</span><br></pre></td></tr></table></figure>

<p>创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Linkedlist</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h6 id="（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）"><a href="#（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）" class="headerlink" title="（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）"></a>（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现ArrayList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//②使用ArrayList创建</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法①：for循环遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numbers.size();i++ )&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法②：迭代器遍历所有元素</span></span><br><span class="line">        <span class="comment">//boolean hasNext() - 判断是否有下一个元素；</span></span><br><span class="line">        <span class="comment">//next() - 返回下一个元素</span></span><br><span class="line">        <span class="comment">//remove() -删除next()返回的最后一个元素</span></span><br><span class="line">        <span class="comment">//forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Integer&gt; num = numbers.iterator();numbers.hasNext();)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> num.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法③：迭代器for each遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(String s : numbers)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法④：while循环</span></span><br><span class="line">        Iterator&lt;Integer&gt;  num = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">            System.out.print(num.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）LinkedList："><a href="#（2）LinkedList：" class="headerlink" title="（2）LinkedList："></a>（2）LinkedList：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现LinkedList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">//②使用LinkedList创建</span></span><br><span class="line">        LinkedList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用indexOf()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> numbers.indexOf(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;位置3的元素是 &quot;</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//和ArrayList遍历相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>List转换为Array：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p>Array转换为List：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);<span class="comment">//JDK11之后</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(array);<span class="comment">//JDK11之前</span></span><br></pre></td></tr></table></figure>

<h6 id="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"><a href="#（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）" class="headerlink" title="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"></a>（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）</h6><p>创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector&lt;Type&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vector&lt;String&gt; mammals= <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用add()方法</span></span><br><span class="line">        mammals.add(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        mammals.add(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用索引号</span></span><br><span class="line">        mammals.add(<span class="number">2</span>, <span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Vector: &quot;</span> + mammals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 addAll() 方法</span></span><br><span class="line">        Vector&lt;String&gt; animals = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        animals.add(<span class="string">&quot;Crocodile&quot;</span>);</span><br><span class="line"></span><br><span class="line">        animals.addAll(mammals);</span><br><span class="line">        System.out.println(<span class="string">&quot;New Vector: &quot;</span> + animals);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-Set："><a href="#1-2-Set：" class="headerlink" title="1.2 Set："></a>1.2 Set：</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素添加到集合中</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">iterator() -返回一个迭代器，该迭代器可用于顺序访问集合中的元素</span><br><span class="line">remove() - 从集合中移除指定的元素</span><br><span class="line">removeAll() - 从存在于另一个指定集合中的集合中删除所有元素</span><br><span class="line">keepAll()  -保留集合中所有还存在于另一个指定集合中的所有元素</span><br><span class="line">clear() - 从集合中删除所有元素</span><br><span class="line">size() - 返回集合的长度（元素数）</span><br><span class="line">toArray() - 返回包含集合中所有元素的数组</span><br><span class="line">contains() -  如果集合包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">containsAll</span><span class="params">()</span> - 如果集合包含指定集合的所有元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">hashCode</span><span class="params">()</span> -返回哈希码值（集合中元素的地址）</span><br><span class="line">retainAll() - 找出两个集合中的相同值</span><br></pre></td></tr></table></figure>

<h6 id="（1）HashSet："><a href="#（1）HashSet：" class="headerlink" title="（1）HashSet："></a>（1）HashSet：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到set1</span></span><br><span class="line">        set1.add(<span class="number">2</span>);</span><br><span class="line">        set1.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set1: &quot;</span> + set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用HashSet类创建另一个集合</span></span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set2.add(<span class="number">1</span>);</span><br><span class="line">        set2.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set2: &quot;</span> + set2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个集合的并集</span></span><br><span class="line">        set2.addAll(set1);</span><br><span class="line">        System.out.println(<span class="string">&quot;并集是: &quot;</span> + set2);</span><br><span class="line">        <span class="comment">//交集</span></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        <span class="comment">//差集</span></span><br><span class="line">        set1.removeAll(set2);</span><br><span class="line">        <span class="comment">//子集</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> set1.containsAll(set2);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//①迭代器循环：</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//②for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set1)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）TreeSet："><a href="#（2）TreeSet：" class="headerlink" title="（2）TreeSet："></a>（2）TreeSet：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将元素添加到set集合</span></span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用iterator()访问元素</span></span><br><span class="line">        System.out.print(<span class="string">&quot;使用iterator()访问元素: &quot;</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterate = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterate.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterate.next());</span><br><span class="line">            System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-迭代器："><a href="#1-3-迭代器：" class="headerlink" title="1.3 迭代器："></a>1.3 迭代器：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> - 判断是否有下一个元素；</span><br><span class="line">next() - 返回下一个元素</span><br><span class="line">remove() -删除next()返回的最后一个元素</span><br><span class="line">forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; num = numbers.iterator();</span><br><span class="line"><span class="comment">//迭代器1</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    System.out.print(num.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器2</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    num.forEachRemaining((value)-&gt;System.out.print(value+<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ListIterator:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hasNext() - 如果列表中存在元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span> - 返回列表的下一个元素</span><br><span class="line">nextIndex() - 返回next()方法将返回的元素的索引</span><br><span class="line">previous() - 返回列表的前一个元素</span><br><span class="line">previousIndex()- 返回previous()方法将返回的元素的索引</span><br><span class="line">remove()- 删除由next()或previous()返回的元素</span><br><span class="line">set() - 将next()或previous()返回的元素替换为指定的元素</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个ArrayList</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ListIterator的实例</span></span><br><span class="line">        ListIterator&lt;Integer&gt; iterate = numbers.listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用next()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> iterate.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素: &quot;</span> + number1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用nextIndex()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> iterate.nextIndex();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素位置: &quot;</span> + index1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用hasNext()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还有下一个元素吗? &quot;</span> + iterate.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-队列Queue：先进先出"><a href="#1-4-队列Queue：先进先出" class="headerlink" title="1.4 队列Queue：先进先出"></a>1.4 队列Queue：先进先出</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素插入队列。如果任务成功，则add()返回<span class="literal">true</span>，否则将引发异常。</span><br><span class="line">offer() - 将指定的元素插入队列。如果任务成功，则offer()返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line">element() - 返回队列的开头。如果队列为空，则引发异常。</span><br><span class="line">peek() - 返回队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">remove() - 返回并删除队列的头部。如果队列为空，则引发异常。</span><br><span class="line">poll() - 返回并删除队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">    </span><br><span class="line">Queue和PriorityQueue区别：</span><br><span class="line">    PriorityQueue的出队顺序与元素的优先级有关。</span><br><span class="line">    PriorityQueue 调用 remove()或 poll()方法，返回的总是优先级最高的元素。</span><br><span class="line">PriorityQueue的优先级默认（必须实现Comparable接口）为按照字符，但可以通过Comparator实现自定义。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Queue 使用LinkedList 类</span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 使用 ArrayDeque 创建</span></span><br><span class="line">		Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">// 使用PriorityQueue类创建队列 </span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加元素到 Queue</span></span><br><span class="line">        numbers.offer(<span class="number">1</span>);</span><br><span class="line">        numbers.offer(<span class="number">2</span>);</span><br><span class="line">        numbers.offer(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Queue: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问队列的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">accessedNumber</span> <span class="operator">=</span> numbers.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素： &quot;</span> + accessedNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队列中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素： &quot;</span> + removedNumber);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的 Queue： &quot;</span> + numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-栈Stack：先进后出"><a href="#1-5-栈Stack：先进后出" class="headerlink" title="1.5 栈Stack：先进后出"></a>1.5 栈Stack：先进后出</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;Type&gt; stacks = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到Stack</span></span><br><span class="line">        animals.push(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Stack: &quot;</span> + animals);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除堆栈元素，后进先出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从顶部访问元素，后进先出的原则</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;顶部元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//搜索元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> animals.search(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素Horse的位置: &quot;</span> + position);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//检查堆栈是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> animals.empty();</span><br><span class="line">        System.out.println(<span class="string">&quot;堆栈是空的吗? &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-其他"><a href="#1-6-其他" class="headerlink" title="1.6 其他"></a>1.6 其他</h5><p>双端队列Deque：参考:<a href="https://www.cainiaojc.com/java/java-deque.html">链接</a></p>
<p>堆栈ArrayDeque：参考:<a href="https://www.cainiaojc.com/java/java-arraydeque.html">链接</a></p>
</li>
<li><h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4><table>
<thead>
<tr>
<th>Map</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>HashMap（无序）（键值映射）</td>
<td></td>
</tr>
<tr>
<td>TreeMap（有序）（用于排序）</td>
<td></td>
</tr>
</tbody></table>
<p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Key, Value&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map包含Collection的所有方法，自己特殊方法：</span><br><span class="line">put(K,V) - 将键K和值V的关联插入到map中。如果键已经存在，则新值将替换旧值。</span><br><span class="line">putAll() - 将指定Map集合中的所有条目插入此Map集合中。</span><br><span class="line">putIfAbsent(K,V) - 如果键K尚未与value关联，则插入关联V。</span><br><span class="line">get(K) - 返回与指定键K关联的值。如果找不到该键，则返回<span class="literal">null</span>。</span><br><span class="line">getOrDefault(K,defaultValue) - 返回与指定键K关联的值。如果找不到键，则返回defaultValue。</span><br><span class="line">containsKey(K） - 检查指定的键K是否在map中。</span><br><span class="line">containsValue(V) - 检查指定的值V是否存在于map中。</span><br><span class="line">replace(K,V) - 将键K的值替换为新的指定值V。</span><br><span class="line">replace(K,oldValue,newValue) - 仅当键K与值oldValue相关联时，才用新值newValue替换键K的值。</span><br><span class="line">replaceAll(function) - 用指定函数的结果替换映射的每个值</span><br><span class="line">remove(K) - 从键K表示的Map中删除条目。</span><br><span class="line">remove(K,V) - 从Map集合中删除键K与值V相关联的条目。。</span><br><span class="line">keySet() -返回Map集合中存在的所有键的集合。</span><br><span class="line">values() -返回一组包含在Map集合中的所有值。</span><br><span class="line">entrySet() -返回map中存在的所有键/值映射的集合。</span><br><span class="line">compute() - 使用指定的函数计算新值。然后将计算值与指定的键相关联。</span><br><span class="line">computeIfAbsent() - 如果指定的键没有映射到任何值，该方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">computeIfPresent() - 如果指定的键已经映射到任何值，此方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">merge() - 方法将指定的值与指定的键关联。</span><br><span class="line">clear()	- 从映射中删除所有条目</span><br><span class="line">isEmpty() -	检查map是否为空并返回布尔值</span><br><span class="line">size()	- 返回map的大小</span><br></pre></td></tr></table></figure>

<h5 id="2-1-HashMap："><a href="#2-1-HashMap：" class="headerlink" title="2.1 HashMap："></a>2.1 HashMap：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity,loadFactor);</span><br><span class="line"></span><br><span class="line">capacity - HashMap的容量为<span class="number">8</span>。意味着，它可以存储<span class="number">8</span>个条目。</span><br><span class="line">loadFactor -  hashmap的负载因子为<span class="number">0.6</span>。这意味着，每当哈希表被填满<span class="number">60</span>%时，条目就会被移动到一个新哈希表，其大小是原始哈希表的两倍。</span><br><span class="line"></span><br><span class="line">HashMap为空时的容量默认为<span class="number">16</span>，负载因子为<span class="number">0.75</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashMap类创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素插入map集合</span></span><br><span class="line">        numbers.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        numbers.put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Map: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Keys: &quot;</span> + numbers.keySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Values: &quot;</span> + numbers.values());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的条目</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Entries: &quot;</span> + numbers.entrySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> numbers.remove(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的值是: &quot;</span> + value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String key : numbers.keySet())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for each循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry : numbers.entrySet())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器循环</span></span><br><span class="line">        <span class="comment">/*key-value*/</span></span><br><span class="line">        Iterator&lt;Entry&lt;String, Integer&gt;&gt; it = numbers.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*key*/</span></span><br><span class="line">        Iterator&lt;String&gt; it2 = numbers.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.println(it2.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*value*/</span></span><br><span class="line">        Iterator&lt;Integer&gt; it3 = numbers.values().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">            System.out.println(it3.nexy());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-TreeMap："><a href="#2-2-TreeMap：" class="headerlink" title="2.2 TreeMap："></a>2.2 TreeMap：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeMap创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; values = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入元素到map</span></span><br><span class="line">        values.put(<span class="string">&quot;Second&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        values.put(<span class="string">&quot;First&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用TreeMap创建map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换值</span></span><br><span class="line">        values.replace(<span class="string">&quot;First&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        values.replace(<span class="string">&quot;Second&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新的Map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedValue</span> <span class="operator">=</span> values.remove(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的值: &quot;</span> + removedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-其他"><a href="#2-3-其他" class="headerlink" title="2.3 其他"></a>2.3 其他</h5><p>双向链表LinkedHashMap：<a href="https://www.cainiaojc.com/java/java-linkedhashmap.html">链接</a></p>
</li>
</ol>
<h3 id="九、IO流"><a href="#九、IO流" class="headerlink" title="九、IO流"></a>九、IO流</h3><ol>
<li><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">字节流<span class="type">byte</span>：InputStream、OutputStream</span><br><span class="line">字符流<span class="type">char</span>：Reader、Writer</span><br><span class="line"></span><br><span class="line">同步：数据返回——&gt;执行后续代码，（代码编写简单，但CPU执行效率低。）上述的皆为同步。</span><br><span class="line">异步：发出请求——&gt;执行后续代码，（代码编写复杂，但CPU执行效率高。）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="File文件："><a href="#File文件：" class="headerlink" title="File文件："></a>File文件：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用路径创建File对象 </span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(String pathName);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">createNewFile() - 创建文件</span><br><span class="line">read() - 读取文件</span><br><span class="line">write() - 写入文件</span><br><span class="line">delete() - 删除文件</span><br><span class="line">    </span><br><span class="line">读文件：</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;文件名&quot;</span>)	<span class="comment">//创建Reader</span></span><br><span class="line">fr.read(字符)	<span class="comment">//读取字符</span></span><br><span class="line">fr.close()	<span class="comment">//关闭reader</span></span><br><span class="line">写文件：</span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;文件名&quot;</span>);	<span class="comment">//创建Writer</span></span><br><span class="line">fw.write(<span class="string">&quot;&quot;</span>)	<span class="comment">//将字符串写入文件</span></span><br><span class="line">fw.close()		<span class="comment">//关闭writer</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="InputStream："><a href="#InputStream：" class="headerlink" title="InputStream："></a>InputStream：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileInputStream</span><br><span class="line">    ByteArrayInputStream</span><br><span class="line">    ObjectInputStream</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个InputStream</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ead() - 从输入流中读取一个字节的数据</span><br><span class="line">read(<span class="type">byte</span>[] array) - 从流中读取字节并存储在指定的数组中</span><br><span class="line">available() - 返回输入流中可用的字节数</span><br><span class="line">mark() - 标记输入流中数据所在的位置</span><br><span class="line">reset() -将控制点返回到流中设置标记的点</span><br><span class="line">markSupported()- 检查流中是否支持mark()和reset()方法</span><br><span class="line">skips(数字) - 跳过和丢弃输入流中的指定字节数</span><br><span class="line">close() - 关闭输入流   </span><br></pre></td></tr></table></figure>

<p>FileInputStream：文件输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//InputStream使用FileInputStream</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件路径</span></span><br><span class="line">			<span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(stringPath);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件的对象</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File fileObject);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//返回可用字节数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件中的可用字节: &quot;</span> + input.available());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从输入流中读取字节</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;从文件读取的数据: &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字节数组转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            System.out.println(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ByteArrayInputStream ：数据数组输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取整个数组</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取数组的一部分</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> length);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read()  - 从输入流中存在的数组中读取单个字节</span><br><span class="line">read(<span class="type">byte</span>[] array)  - 从输入流中读取字节并存储在指定的数组中</span><br><span class="line">read(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length) - 从流中读取等于length的字节数，并从位置start开始存储在指定的数组中</span><br></pre></td></tr></table></figure>

<p>ObjectInputStream：对象输入流（相应的流转换为Java对象—&gt;<strong>反序列化</strong>）ObjectOutputStream<strong>序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建与指定文件链接的文件输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用文件输入流创建对象输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read() - 从输入流中读取一个字节的数据</span><br><span class="line">readBoolean() - 以布尔形式读取数据</span><br><span class="line">readChar() - 以字符形式读取数据</span><br><span class="line">readInt() - 以整数形式读取数据</span><br><span class="line">readObject() - 从输入流中读取对象 </span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="OutputStream："><a href="#OutputStream：" class="headerlink" title="OutputStream："></a>OutputStream：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileOutputStream</span><br><span class="line">    ByteArrayOutputStream</span><br><span class="line">    ObjectOutputStream</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将指定的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array) - 将指定数组中的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)-从位置start开始将等于length的字节数写入数组的输出流</span><br><span class="line">flush() -  强制将输出流中存在的所有数据写入目标</span><br><span class="line">close() - 关闭输出流</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;这是文件内的一行文本。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串转换为字节</span></span><br><span class="line">            <span class="type">byte</span>[] dataBytes = data.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数据写入输出流</span></span><br><span class="line">            out.write(dataBytes);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据被写入文件。&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输出流</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileOutputStream：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用文件路径</span></span><br><span class="line"><span class="comment">//包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path, <span class="type">boolean</span> value);</span><br><span class="line"><span class="comment">//不包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(File fileObject);</span><br></pre></td></tr></table></figure>

<p>ByteArrayOutputStream：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个默认大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="comment">//创建具有指定大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="type">int</span> size);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">writeTo(ByteArrayOutputStream out1) - 将当前输出流的全部数据写入指定的输出流</span><br><span class="line">toByteArray() - 返回输出流中存在的数组</span><br><span class="line">toString() - 以字符串形式返回输出流的全部数据</span><br></pre></td></tr></table></figure>

<p>ObjectOutputStream：Java对象转换为流—&gt;<strong>序列化</strong></p>
<p>ObjectOutputStream仅写入那些实现Serializable接口的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个FileOutputStream，其中写入ObjectOutputStream中的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String file);</span><br><span class="line"><span class="comment">//创建ObjectOutputStream</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将字节数据写入输出流</span><br><span class="line">writeBoolean() - 以布尔形式写入数据</span><br><span class="line">writeChar() - 以字符形式写入数据</span><br><span class="line">writeInt() - 以整数形式写入数据</span><br><span class="line">writeObject() - 将对象写入输出流</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Reader："><a href="#Reader：" class="headerlink" title="Reader："></a>Reader：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">BufferedReader</span><br><span class="line">InputStreamReader</span><br><span class="line">FileReader</span><br><span class="line">StringReader</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Reader</span></span><br><span class="line"><span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ready() - 检查Reader是否准备好读取</span><br><span class="line">read(<span class="type">char</span>[] array)  - 从流中读取字符并存储在指定的数组中</span><br><span class="line">read(<span class="type">char</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)- 从流中读取length相等的字符数，并从start开始存储在指定的数组中</span><br><span class="line">mark() - 标记流中已读取数据的位置</span><br><span class="line">reset() - 重置流。如果流已被标记，然后尝试进行标记，以重新定位。如果该流未被标注，然后尝试将其复位在适当的特定流的一些方法，例如通过将其重新定位到其起始点。</span><br><span class="line">skip() -从流中丢弃指定数量的字符</span><br><span class="line">close() - 关闭reader</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字符数组</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileReader创建Reader</span></span><br><span class="line">            <span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//检查Reader是否准备就绪 </span></span><br><span class="line">            System.out.println(<span class="string">&quot;流中有数据吗?  &quot;</span> + input.ready());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取字符</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;流中的数据:&quot;</span>);</span><br><span class="line">            System.out.println(array);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭reader</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>BufferedReader：磁盘读取字符—&gt;存储在内部缓冲区—&gt;单独读取字符。(更快地读取字符)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个FileReader</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String file);</span><br><span class="line"><span class="comment">//创建一个BufferedReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个具有指定大小的内部缓冲区的BufferdReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure>

<p>InputStreamReader：字节流和字符流之间的桥梁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个InputStream</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader，指定字符编码</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于在输入流中存储数据的编码类型</span><br></pre></td></tr></table></figure>

<p>FileReader：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(File fileObj);</span><br></pre></td></tr></table></figure>

<p>StringReader：从字符串读取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 StringReader</span></span><br><span class="line"><span class="type">StringReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(String data);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Writer："><a href="#Writer：" class="headerlink" title="Writer："></a>Writer：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    BufferedWriter</span><br><span class="line">	OutputStreamWriter</span><br><span class="line">	FileWriter</span><br><span class="line">	StringWriter</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Writer</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>();</span><br><span class="line">方法：</span><br><span class="line">write(<span class="type">char</span>[] array) - 将指定数组中的字符写入输出流</span><br><span class="line">write(String data) - 将指定的字符串写入写入器</span><br><span class="line">append(<span class="type">char</span> c) - 将指定字符插入当前写入器</span><br><span class="line">flush() - 强制将写入器中存在的所有数据写入相应的目的地</span><br><span class="line">close() - 关闭写入器</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;This is the data in the output file&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileWriter创建一个Writer</span></span><br><span class="line">            <span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串写入文件</span></span><br><span class="line">            output.write(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭写入器</span></span><br><span class="line">            output.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BufferedWriter：字符被写入内部缓冲区而不是磁盘，写入字符更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 FileWriter</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//创建 BufferedWriter</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(file);</span><br></pre></td></tr></table></figure>

<p>OutputStreamWriter：字节流和字符流之间的桥梁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter，指定字符编码</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于将数据写入输出流的编码类型</span><br></pre></td></tr></table></figure>

<p>FileWriter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringWriter<span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileWriter</span>  <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(File fileObj);</span><br></pre></td></tr></table></figure>

<p>StringWriter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"><span class="comment">//创建具有指定字符串缓冲区容量的StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(<span class="type">int</span> size);</span><br></pre></td></tr></table></figure>

<p>StringBuffer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getBuffer() - 返回字符串缓冲区中存在的数据</span><br><span class="line">toString() -将字符串缓冲区中存在的数据作为字符串返回</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回字符串缓冲区</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> output.getBuffer();</span><br><span class="line">System.out.println(<span class="string">&quot;StringBuffer: &quot;</span> + stringBuffer);</span><br><span class="line"><span class="comment">//以字符串形式返回字符串缓冲区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> output.toString();</span><br><span class="line">System.out.println(<span class="string">&quot;String: &quot;</span> + string);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="十、线程"><a href="#十、线程" class="headerlink" title="十、线程"></a>十、线程</h3><ol>
<li><p>状态</p>
<p>创建、就绪、执行、阻塞、终止、挂起、激活</p>
</li>
<li><p>创建线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通过实现 Runnable 接口；</span><br><span class="line">通过继承  Thread 类本身；</span><br><span class="line">通过 Callable 和 Future 创建线程。</span><br></pre></td></tr></table></figure>

<p>详细实现：<a href="https://www.cainiaojc.com/java/java-multithreading.html">链接</a></p>
</li>
</ol>
<h3 id="十一、泛型"><a href="#十一、泛型" class="headerlink" title="十一、泛型"></a>十一、泛型</h3><ol>
<li><p>集合框架中使用泛型，可以实现存储任类型的数据、代码可复用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">泛型类：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">fx</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">fx</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">泛型方法：</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fx</span><span class="params">(T data)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="十二、Lambda-表达式"><a href="#十二、Lambda-表达式" class="headerlink" title="十二、Lambda 表达式"></a>十二、Lambda 表达式</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameter list) -&gt; lambda body</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p>本文参考1:<a href="https://www.cainiaojc.com/java/java-tutorial.html">链接</a></p>
<p>本文参考2:<a href="https://liaoxuefeng.com/books/java/introduction/index.html">链接</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis-plus</title>
    <url>/blog2025.github.io/2025/04/04/MyBatis-plus/</url>
    <content><![CDATA[<h3 id="一、MyBatis-plus初级"><a href="#一、MyBatis-plus初级" class="headerlink" title="一、MyBatis-plus初级"></a>一、MyBatis-plus初级</h3><p><a href="https://baomidou.com/introduce/">官方网站</a></p>
<ol>
<li><h4 id="MyBatis-plus新功能"><a href="#MyBatis-plus新功能" class="headerlink" title="MyBatis-plus新功能"></a>MyBatis-plus新功能</h4><ul>
<li><p>增强版的MyBatis，简化开发，提高效率；</p>
</li>
<li><p>启动会自动注入CRUD，性能无损耗；</p>
</li>
<li><p>内置通用Mapper，通用Service；</p>
</li>
<li><p>支持Lambda形式调用；</p>
</li>
<li><p>支持主键自动生成；</p>
</li>
<li><p>内置代码生成器，可快速生成Mapper、Model、Service、Controller代码；</p>
</li>
<li><p>内置分页插件（MyBatis物理分页-LIMIT），支持多种数据库；</p>
</li>
<li><p>内置性能分析插件；</p>
</li>
<li><p>内置全局拦截插件；</p>
<span id="more"></span></li>
</ul>
</li>
<li><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Spring-Boot配置文件"><a href="#Spring-Boot配置文件" class="headerlink" title="Spring Boot配置文件"></a>Spring Boot配置文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_demo?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Spring-Boot启动类"><a href="#Spring-Boot启动类" class="headerlink" title="Spring Boot启动类"></a>Spring Boot启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul>
<li><p><strong><code>@MapperScan(&quot;com.example.mapper&quot;)</code></strong></p>
<p>扫描指定包下的Mapper接口，避免在每个Mapper接口上单独添加<code>@Mapper</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span> <span class="comment">// 扫描指定包下的Mapper接口</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@ComponentScan</code></strong></p>
<p>组件扫描扩展，自定义Spring组件扫描范围，但不直接关联MyBatis Mapper扫描。</p>
</li>
<li><p><strong><code>@TableName(&quot;数据库表名&quot;)</code></strong></p>
<p>在实体类中，用于表名注解，标识实体类对应的表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">			……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableId(value=&quot;id&quot;,type=&quot;IdType.AUTO&quot;)</code></strong></p>
<p>在实体类中，用于主键字段，<code>IdType.AUTO</code>自增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableField(&quot;数据库表中属性名&quot;)</code></strong></p>
<p><code>@TableField(value=&quot;name&quot;,fill=FieldFill.INSERT)</code></p>
<p><code>fill</code>：自动填充策略（插入&#x2F;更新时自动填充值）</p>
<ul>
<li><code>DEFAULT</code>：不处理</li>
<li><code>INSERT</code>：插入时填充</li>
<li><code>UPDATE</code>：更新时填充</li>
<li><code>INSERT_UPDATE</code>：插入和更新时填充</li>
</ul>
<p>在实体类中，用于字段注解上方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;stuname&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@EnumValue</code></strong></p>
<p>普通枚举类注解的枚举字段上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line">    <span class="meta">@EnumValue</span>  <span class="comment">// 存储到数据库的值</span></span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> GenderEnum gender;  <span class="comment">// 自动映射code值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@OrderBy</code></strong></p>
<p>内置 SQL 默认指定排序，优先级低于 wrapper 条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OrderBy(sort = 1, isDesc = true)</span> <span class="comment">// 优先级1，倒序</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableLogic</code></strong></p>
<p>表字段逻辑处理注解（逻辑删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@KeySequence</code></strong></p>
<p>序列主键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@KeySequence(value = &quot;SEQ_USER&quot;, clazz = Long.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@Version</code></strong></p>
<p>乐观锁注解字段，（更新时自动检查版本号）</p>
<p><em>乐观锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，只在更新的时候会判断一下在此期间别人有没有去更新这个数据。</em></p>
<p><a href="https://zhuanlan.zhihu.com/p/137818729">乐观锁和悲观锁</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;  <span class="comment">// 版本号字段</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@SqlParser</code></strong></p>
<p>SQL解析过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SqlParser(filter = true)</span>  <span class="comment">// 忽略多租户SQL解析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 自定义SQL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@InterceptorIgnore</code></strong> </p>
<p> 拦截器忽略，动态忽略 MyBatis-Plus 内置拦截器（如分页、多租户）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InterceptorIgnore(tenantLine = &quot;true&quot;)</span> <span class="comment">// 忽略多租户拦截器</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@AutoResultMap</code></strong> </p>
<p>自动生成结果映射，配合 <code>@TableName(autoResultMap = true)</code> 自动生成复杂映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableField(typeHandler = JsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">// Address对象转为JSON存储</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-ji5u3mgf.html">本文参考</a></p>
<h3 id="二、MyBatis-plus核心"><a href="#二、MyBatis-plus核心" class="headerlink" title="二、MyBatis-plus核心"></a>二、MyBatis-plus核心</h3><ol>
<li><h4 id="代码生成模板："><a href="#代码生成模板：" class="headerlink" title="代码生成模板："></a>代码生成模板：</h4><p><strong><code>依赖配置（pom.xml）</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus 代码生成器核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 模板引擎（必选） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动（以MySQL为例） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Lombok（可选） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>代码生成器主类（CodeGenerator.java）</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/your_database?useSSL=false&amp;serverTimezone=UTC&quot;</span>, </span><br><span class="line">                                <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">            .globalConfig(builder -&gt; </span><br><span class="line">                builder.author(<span class="string">&quot;YourName&quot;</span>)  <span class="comment">// 作者名</span></span><br><span class="line">                    .outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/java&quot;</span>)  <span class="comment">// 输出路径</span></span><br><span class="line">                    .disableOpenDir()  <span class="comment">// 生成后不打开目录</span></span><br><span class="line">            )</span><br><span class="line">            .packageConfig(builder -&gt; </span><br><span class="line">                builder.parent(<span class="string">&quot;com.example&quot;</span>)  <span class="comment">// 父包名</span></span><br><span class="line">                    .moduleName(<span class="string">&quot;system&quot;</span>)  <span class="comment">// 模块名（可选）</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, </span><br><span class="line">                        System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/mapper&quot;</span>))  <span class="comment">// XML文件路径(与application.yml 中 mapper-locations 配置一致)</span></span><br><span class="line">            )</span><br><span class="line">            .strategyConfig(builder -&gt; </span><br><span class="line">                builder.addInclude(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;order&quot;</span>)  <span class="comment">// 指定生成表名</span></span><br><span class="line">                    .addTablePrefix(<span class="string">&quot;t_&quot;</span>)  <span class="comment">// 忽略表前缀</span></span><br><span class="line">                    .entityBuilder()</span><br><span class="line">                        .enableLombok()  <span class="comment">// 启用Lombok</span></span><br><span class="line">                        .enableTableFieldAnnotation()  <span class="comment">// 字段添加@TableField注解</span></span><br><span class="line">                    .controllerBuilder()</span><br><span class="line">                        .enableRestStyle()  <span class="comment">// RestController风格</span></span><br><span class="line">                    .mapperBuilder()</span><br><span class="line">                        .enableMapperAnnotation()  <span class="comment">// Mapper接口添加@Mapper注解</span></span><br><span class="line">            )</span><br><span class="line">            .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())  <span class="comment">// 模板引擎（默认Freemarker）</span></span><br><span class="line">            .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行生成器</strong>‌<br>直接运行 <code>CodeGenerator.main()</code> 方法，控制台输出 <code>Success</code> 即表示生成成功‌</p>
<p><strong>生成文件结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com/example/system</span><br><span class="line">    ├── controller/UserController.java  # REST接口</span><br><span class="line">    ├── entity/User.java                # 实体类（带Lombok注解）</span><br><span class="line">    ├── mapper/UserMapper.java          # Mapper接口</span><br><span class="line">    └── service/UserService.java        # Service接口与实现类</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h4><p><font color="red"><em>通过继承 <strong>BaseMapper</strong> 获得通用 CRUD 方法，不需要写SQL代码</em></font></p>
<ul>
<li><p>查</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>T selectById(Serializable id)</code></td>
<td>根据 ID 查询</td>
<td><code>userMapper.selectById(1L)</code></td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectBatchIds(Collection&lt;?&gt; idList)</code></td>
<td>批量查询（根据 ID 列表）</td>
<td><code>userMapper.selectBatchIds(Arrays.asList(1,2,3))</code></td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectByMap(Map&lt;String, Object&gt; columnMap)</code></td>
<td>根据字段名-值的 Map 条件查询‌</td>
<td><code>Map.of(&quot;status&quot;, 1)</code> → 查询 status&#x3D;1 的记录</td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectList(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据 <code>Wrapper</code> 条件查询列表‌</td>
<td>结合 <code>QueryWrapper</code> 动态构建条件‌</td>
</tr>
<tr>
<td><code>T selectOne(Wrapper&lt;T&gt; wrapper)</code></td>
<td>查询单条记录（需确保结果唯一）‌</td>
<td>动态条件查询唯一用户</td>
</tr>
<tr>
<td><code>Long selectCount(Wrapper&lt;T&gt; wrapper)</code></td>
<td>统计符合条件的数据总数‌</td>
<td>统计 <code>age &gt; 25</code> 的用户数量‌</td>
</tr>
</tbody></table>
</li>
<li><p>增加</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int insert(T entity)</code></td>
<td>插入一条记录</td>
<td><code>userMapper.insert(user)</code></td>
</tr>
<tr>
<td><code>int insertBatch(Collection&lt;T&gt; list)</code></td>
<td>批量插入（需数据库驱动支持批量操作）</td>
<td><code>userMapper.insertBatch(users)</code></td>
</tr>
</tbody></table>
</li>
<li><p>修改</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int updateById(T entity)</code></td>
<td>根据 ID 更新记录</td>
<td><code>userMapper.updateById(user)</code></td>
</tr>
<tr>
<td><code>int update(T entity, Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件更新记录</td>
<td><code>userMapper.update(user, new UpdateWrapper&lt;User&gt;().eq(&quot;name&quot;, &quot;Alice&quot;))</code></td>
</tr>
<tr>
<td><code>int updateBatchById(Collection&lt;T&gt; entityList);</code></td>
<td>根据ID 批量更新</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>删除</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int deleteById(Serializable id)</code></td>
<td>根据 ID 删除</td>
<td><code>userMapper.deleteById(1L)</code></td>
</tr>
<tr>
<td><code>int deleteBatchIds(Collection&lt;?&gt; idList)</code></td>
<td>批量删除（根据 ID 列表）</td>
<td><code>userMapper.deleteBatchIds(Arrays.asList(1,2,3))</code></td>
</tr>
<tr>
<td><code>int deleteByMap(Map&lt;String, Object&gt; columnMap)</code></td>
<td>根据字段名-值的 Map 条件删除‌</td>
<td><code>Map.of(&quot;age&quot;, 20)</code> → 删除 age&#x3D;20 的记录</td>
</tr>
<tr>
<td><code>int delete(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件构造器 <code>Wrapper</code> 删除‌</td>
<td>结合 <code>QueryWrapper</code> 构建动态条件‌</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-o6xn3mgo.html">更多接口</a></p>
<ul>
<li>Save</li>
<li>Remove</li>
<li>Get</li>
<li>List</li>
<li>Count</li>
<li>Page</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h4><ul>
<li><p>通过 <code>QueryWrapper</code> 或 <code>LambdaQueryWrapper</code> 构建动态条件：</p>
<p>查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询年龄大于 20 且状态为激活的用户</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .eq(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        .orderByDesc(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将名字包含 &quot;Tom&quot; 的用户的年龄设置为 25</span></span><br><span class="line">userMapper.update(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>().setAge(<span class="number">25</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="扩展接口"><a href="#扩展接口" class="headerlink" title="扩展接口"></a>扩展接口</h4><ul>
<li><p>分页查询</p>
<p>需先配置分页插件（<code>PaginationInterceptor</code>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = userMapper.selectPage(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">10</span>), <span class="comment">// 当前页, 每页条数</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">);</span><br><span class="line">List&lt;User&gt; records = page.getRecords(); <span class="comment">// 分页数据</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();          <span class="comment">// 总记录数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>链式查询</p>
<p>通过 <code>QueryChainWrapper</code> 实现链式调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = userMapper.query()</span><br><span class="line">    .eq(<span class="string">&quot;dept_id&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    .ge(<span class="string">&quot;create_time&quot;</span>, <span class="string">&quot;2023-01-01&quot;</span>)</span><br><span class="line">    .list();</span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑删除</p>
<p>在实体类字段上添加 <code>@TableLogic</code> 注解后，自动启用逻辑删除：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="MyBatisX插件"><a href="#MyBatisX插件" class="headerlink" title="MyBatisX插件"></a>MyBatisX插件</h4><p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-6sxw3ml0.html">插件</a></p>
</li>
<li><h4 id="Spring-Boot-3-x-MyBatis-Plus-5-x-可运行-CRUD-接口模板"><a href="#Spring-Boot-3-x-MyBatis-Plus-5-x-可运行-CRUD-接口模板" class="headerlink" title="Spring Boot 3.x + MyBatis-Plus 5.x 可运行 CRUD 接口模板"></a>Spring Boot 3.x + MyBatis-Plus 5.x 可运行 CRUD 接口模板</h4><ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类与 Mapper 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span> <span class="comment">// 关联数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">// 主键自增</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer userAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123; </span><br><span class="line">    <span class="comment">// 继承 BaseMapper 获得通用 CRUD 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Service 层与 Controller 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(<span class="literal">null</span>); <span class="comment">// 查询全部数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.listUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test_db?useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true # 自动驼峰命名转换</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="三、Spring-Boot-MyBatis-plus模板"><a href="#三、Spring-Boot-MyBatis-plus模板" class="headerlink" title="三、Spring Boot+MyBatis-plus模板"></a>三、Spring Boot+MyBatis-plus模板</h3><ol>
<li><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com.example.demo</span><br><span class="line">│   ├── config         # 配置类 （插件等等）</span><br><span class="line">│   │   ├── MybatisPlusConfig.java</span><br><span class="line">│   │   └── SwaggerConfig.java</span><br><span class="line">│   ├── controller     # 控制器层</span><br><span class="line">│   │   └── UserController.java</span><br><span class="line">│   ├── entity         # 实体类</span><br><span class="line">│   │   └── User.java</span><br><span class="line">│   ├── mapper         # Mapper接口</span><br><span class="line">│   │   └── UserMapper.java</span><br><span class="line">│   ├── service        # 服务层</span><br><span class="line">│   │   ├── UserService.java</span><br><span class="line">│   │   └── impl</span><br><span class="line">│   │       └── UserServiceImpl.java</span><br><span class="line">│   └── DemoApplication.java  # 启动类</span><br><span class="line">resources</span><br><span class="line">├── application.yml    # 配置文件</span><br><span class="line">└── generator           # 代码生成器配置（可选）</span><br><span class="line">    └── generator-config.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="各模块代码："><a href="#各模块代码：" class="headerlink" title="各模块代码："></a>各模块代码：</h4><p><strong><code>pom.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基础配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis-Plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Swagger 3（可选） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类<code>DemoApplication.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件<code>application.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_demo?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 打印SQL日志</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>         <span class="comment"># 主键自增</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span>  <span class="comment"># 逻辑删除字段</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span>        <span class="comment"># 删除状态</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span>    <span class="comment"># 未删除状态</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br></pre></td></tr></table></figure>

<p><strong>配置类<code>MyBatisPlusConfig.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动填充处理器（可选）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MetaObjectHandler <span class="title function_">metaObjectHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetaObjectHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实体类<code>User.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;        <span class="comment">// 逻辑删除字段</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 自动填充</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime; <span class="comment">// 自动填充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mapper接口<code>UserMapper.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 可自定义复杂SQL</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE age &gt; #&#123;age&#125;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUsersOlderThan</span><span class="params">(Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service层<code>UserService.java</code>+<code>UserServiceImpl.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 自定义业务方法</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUsersOlderThan</span><span class="params">(Integer age)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsersOlderThan</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectUsersOlderThan(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>控制器<code>UserController.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;User&gt; <span class="title function_">pageUsers</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer pageNum,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>Swagger 配置（可选）SwaggerConfig.java</code></strong></p>
<p>在前后端分离开发的过程中，前端和后端需要进行api对接进行交互，就需要一个<strong>api规范文档</strong>，方便前后端的交互，但api文档不能根据代码的变化发生实时动态的改变，这样后端修改了接口，前端不能及时获取最新的接口，导致调用出错，需要手动维护<strong>api文档</strong>，加大了开发的工作量和困难，而swagger的出现就是为了解决这一系列的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build()</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            .title(<span class="string">&quot;MyBatis-Plus Demo API&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/iqiuq/p/14883839.html">Swagger教程</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/blog2025.github.io/2025/04/03/MyBatis/</url>
    <content><![CDATA[<h3 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h3><ol>
<li><h4 id="MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。"><a href="#MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。" class="headerlink" title="MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。"></a>MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。</h4></li>
<li><h4 id="MyBatis核心对象："><a href="#MyBatis核心对象：" class="headerlink" title="MyBatis核心对象："></a>MyBatis核心对象：</h4><h5 id="（1）核心接口和类："><a href="#（1）核心接口和类：" class="headerlink" title="（1）核心接口和类："></a><strong>（1）核心接口和类：</strong></h5><ul>
<li><p><strong>SqlSessionFactoryBuilder</strong>：临时工具类，用完即销毁，无状态，无需长期持有。</p>
</li>
<li><p><strong>SqlSessionFactory</strong>：线程安全，与应用同生命周期，通常只初始化一次，避免重复解析配置；缓存数据库配置、Mapper 映射等元信息；由 IoC 容器管理其生命周期。</p>
</li>
<li><p><strong>SqlSession</strong>：线程不安全，需在方法内创建并使用后立即关闭；代表一次数据库会话，用于执行 SQL、管理事务、获取 Mapper 接口。</p>
<ul>
<li><p><strong>构建阶段</strong>‌：<code>SqlSessionFactoryBuilder</code> 读取配置文件 → 创建 <code>SqlSessionFactory</code>。</p>
</li>
<li><p><strong>运行阶段</strong>‌：<code>SqlSessionFactory</code> 生产 <code>SqlSession</code> → <code>SqlSession</code> 执行 SQL。</p>
</li>
<li><p><strong>销毁阶段</strong>‌：<code>SqlSession</code> 执行完毕后关闭，<code>SqlSessionFactory</code> 随应用关闭销毁。</p>
<span id="more"></span></li>
</ul>
</li>
</ul>
<h5 id="（2）MyBatis核心配置文件（mybatis-config-xml）"><a href="#（2）MyBatis核心配置文件（mybatis-config-xml）" class="headerlink" title="（2）MyBatis核心配置文件（mybatis-config.xml）"></a><strong>（2）MyBatis核心配置文件（mybatis-config.xml）</strong></h5><ul>
<li><p><code>&lt;properties resource=&quot;相对路径&quot;/&gt;</code>:指定外部文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;database.properties&quot;</span>/&gt;</span></span><br><span class="line">database.properties:数据库连接的相关配置</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;environment&gt;</code>：环境配置，包括<code>&lt;transactionmanager&gt;</code>，<code>&lt;dataSource&gt;</code>。</p>
</li>
<li><p><code>&lt;settings&gt;</code>：配置，例;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 延迟加载的全局开关,在特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;typeAliases&gt;</code>：指定别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给&quot;com.example.Student&quot;起别名为&quot;Student&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span> = <span class="string">&quot;Student&quot;</span> <span class="attr">type</span> = <span class="string">&quot;com.example.Student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;transactionManager&gt;</code>：事务管理器，提交、回滚。</p>
</li>
<li><p><code>&lt;dataSource&gt;</code>：配置数据库中的连接属性，包括驱动程序名称、URL、用户名、密码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type=&quot;&quot;</span></span><br><span class="line"><span class="comment">			UNPOOLED：没有数据库连接池，效率低下，通常应用于简单的应用程序。 </span></span><br><span class="line"><span class="comment">			POOLED：MyBatis对每个数据库的操作都会用数据池，减少创建新连接时间。</span></span><br><span class="line"><span class="comment">			JNDI：JNDI 数据源？？？(动态绑定外部资源)</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接数据库的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;mapper&gt;</code>:指定SQL映射文件的路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/mapper/Student.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（3）SQL映射文件（mapper-xml）"><a href="#（3）SQL映射文件（mapper-xml）" class="headerlink" title="（3）SQL映射文件（mapper.xml）"></a><strong>（3）SQL映射文件（mapper.xml）</strong></h5><ul>
<li><p>映射器-XML文件方式</p>
<ul>
<li><p>定义参数类型</p>
</li>
<li><p>配置缓存</p>
</li>
<li><p>提供 SQL 语句和动态 SQL</p>
</li>
<li><p>定义查询结果和 POJO 的映射关系</p>
</li>
<li><p>例：StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有网站信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还需要在Mybatis配置xml中添加资源路径，引入XML文件，生成映射器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper resource=<span class="string">&quot;com/example/mapper/StudentMapper.xml&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>映射器-注解方式</p>
<ul>
<li><p><code>@Select</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(value = &quot;select * from student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Insert</td>
<td>实现新增</td>
</tr>
<tr>
<td>@Delete</td>
<td>实现删除</td>
</tr>
<tr>
<td>@Update</td>
<td>实现更新</td>
</tr>
<tr>
<td>@Select</td>
<td>实现查询</td>
</tr>
<tr>
<td>@Result</td>
<td>实现结果集封装</td>
</tr>
<tr>
<td>@Results</td>
<td>可以与@Result 一起使用，封装多个结果集</td>
</tr>
<tr>
<td>@ResultMap</td>
<td>实现引用@Results 定义的封装</td>
</tr>
<tr>
<td>@One</td>
<td>实现一对一结果集封装，（@Result（one&#x3D;@One）（）））</td>
</tr>
<tr>
<td>@Many</td>
<td>实现一对多结果集封装，（@Result（many&#x3D;@many）（）））</td>
</tr>
</tbody></table>
<p><a href="https://blog.csdn.net/weixin_43883917/article/details/113830667">更多注解</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="执行SQL方式"><a href="#执行SQL方式" class="headerlink" title="执行SQL方式"></a>执行SQL方式</h4><ul>
<li>通过 SqlSession 发送 SQL</li>
<li>通过 SqlSession 获取 Mapper 接口，通过 Mapper 接口发送 SQL**（主流）**</li>
</ul>
</li>
<li><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><ul>
<li><h5 id=""><a href="#" class="headerlink" title="&lt;select&gt;"></a><code>&lt;select&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME,FROM student WHERE NAME LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>id</code>：尽量和Mapper.java的方法名相同。</p>
</li>
<li><p><code>resultType</code>：返回结果类型。（字段名与对象属性名完全一致时，自动映射到 entity）</p>
</li>
<li><p><code>resultMap</code>：映射规则、级联。（字段名与属性名不一致，手动映射），一对一、一对多；返回的可以是<code>resultMap</code>也可以是是<code>resultType</code></p>
<p><em><strong>MyBatis 的每一个查询映射的返回类型都是 resultMap,当提供的是resultType时，MyBatis会自动把值赋给resultType所指定的属性；当提供的是resultMap时，MyBatis会自动映射。</strong></em></p>
<p><font color="red"><em><strong>resultMap 和 resultType 不能同时使用。</strong></em></font></p>
</li>
<li><p><code>resultSetType</code>：FORWARD_ONLY（只允许向前访问）、SCROLL_SENSITIVE（双向滚动，但不及时更新）、SCROLLJNSENSITIVE（双向滚动，及时更新）。</p>
</li>
<li><p><code>parameterType</code>：int、float、String、JavaBean、Map。</p>
</li>
<li><p><code>fetchSize</code>：限制获取的总记录数。</p>
</li>
<li><p><code>timeout</code>：设置超时参数，单位秒，超时则报错。</p>
</li>
</ul>
<p><strong>3种传递参数方式：</strong></p>
<p><strong>StudentMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> &gt;</span></span><br><span class="line">    SELECT id,FROM student WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME FROM student WHERE name = #&#123;name&#125; AND id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME FROM student WHERE id = #&#123;id&#125; AND name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByJavaBean&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name,age FROM student WHERE name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 级联ResultMap查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对多关联学生关联课程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.example.entity.Class&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_id&quot;</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStuWithClass&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithClass&quot;</span>&gt;</span></span><br><span class="line">	SELECT name FROM student</span><br><span class="line">    LEFT JOIN class on student.id = class.student_id</span><br><span class="line">    WHERE student.id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>StudentMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Student <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByMap</span><span class="params">(Map&lt;String,id&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByJavaBean</span><span class="params">(Student student)</span>;</span><br><span class="line"><span class="comment">//级联ResultMap查询</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">selectStuWithClass</span><span class="params">(<span class="type">int</span> studentId)</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-1"><a href="#-1" class="headerlink" title="&lt;insert&gt;"></a><code>&lt;insert&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    insert into student(name)</span><br><span class="line">    values(#&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>id</code>：尽量和Mapper.java的方法名相同。</li>
<li><code>parameterType</code>：int、float、String、JavaBean、Map。</li>
<li><code>timeout</code>：设置超时参数，单位秒，超时则报错。</li>
</ul>
<p><strong>3种传递参数方式：</strong></p>
<p><strong>StudentMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id) values (#&#123;name&#125;,#&#123;id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id) values (#&#123;name&#125;,#&#123;id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id,age) values (#&#123;name&#125;,#&#123;id&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>StudentMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数		</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByMap</span><span class="params">(Map&lt;String,id&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用		</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-2"><a href="#-2" class="headerlink" title="&lt;update&gt;"></a><code>&lt;update&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>            </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3种传递参数方式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;,age= #&#123;age&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;,age= #&#123;age&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    update student </span><br><span class="line">    set </span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>age= #&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByMap</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-3"><a href="#-3" class="headerlink" title="&lt;delete&gt;"></a><code>&lt;delete&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3种传递参数方式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByMap</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;class&quot;)</span> <span class="type">int</span> class)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="仅支持查询"><a href="#仅支持查询" class="headerlink" title="&lt;resultMap&gt;仅支持查询"></a><code>&lt;resultMap&gt;</code>仅支持查询</h5><p>用于解决实体类属性名和数据库表中字段名不一致的情况。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span><span class="comment">&lt;!-- 类再实例化时用来注入结果到构造方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span>&gt;</span><span class="tag">&lt;/<span class="name">idArg</span>&gt;</span><span class="comment">&lt;!-- ID参数，结果为ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span>&gt;</span><span class="tag">&lt;/<span class="name">arg</span>&gt;</span><span class="comment">&lt;!-- 注入到构造方法的一个普通结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 用于表示哪个列是主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span><span class="comment">&lt;!-- 注入到字段或JavaBean属性的普通结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span><span class="comment">&lt;!-- 用于一对一关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span><span class="comment">&lt;!-- 用于一对多、多对多关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="comment">&lt;!-- 使用结果值来决定使用哪个结果映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span><span class="comment">&lt;!-- 基于某些值的结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&lt;resultMap&gt;</code>的type&#x3D;”实体类的相对路径”</p>
</li>
<li><p><code>&lt;id&gt;</code>和<code>&lt;result&gt;</code>包含：</p>
<table>
<thead>
<tr>
<th align="left">元素</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">property</td>
<td align="left">映射到列结果的字段或属性。如果 POJO 的属性和 SQL 列名（column元素）是相同的，那么 MyBatis 就会映射到 POJO 上</td>
</tr>
<tr>
<td align="left">column</td>
<td align="left">对应 SQL 列</td>
</tr>
</tbody></table>
</li>
</ul>
<p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联ResultMap查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键映射 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通字段映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>一对一映射</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Room room; <span class="comment">// 一对一关联对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roomName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithRoomMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 association 映射单个对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;room&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Room&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;room_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roomName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;room_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserWithRoom&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithRoomMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        stu.id, stu.name, </span><br><span class="line">        r.room_id, r.room_name </span><br><span class="line">    FROM student stu</span><br><span class="line">    LEFT JOIN room r ON stu.room_id = r.room_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 通过用户ID查询用户及其部门信息</span></span><br><span class="line">    User <span class="title function_">selectUserWithRoom</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一对多映射</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&gt; class; <span class="comment">// 一对一关联对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对多使用 collection 映射集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;class&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Class&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStuWithClass&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithClass&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        stu.id, stu.name, </span><br><span class="line">        c.class_id, c.class_name </span><br><span class="line">    FROM student stu</span><br><span class="line">    LEFT JOIN class c ON stu.id = c.stu_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 通过用户ID查询用户及其所有订单</span></span><br><span class="line">    User <span class="title function_">selectStuWithClass</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多对多映射</strong>：</p>
<ul>
<li>查询学生及其所有老师</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer studentId;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Teacher&gt; teachers;  <span class="comment">// 多对多关联</span></span><br><span class="line">    <span class="comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;  <span class="comment">// 反向关联（可选）</span></span><br><span class="line">    <span class="comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithTeachersMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联老师集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teachers&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithTeachersById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithTeachersMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        s.student_id, s.student_name,</span><br><span class="line">        t.teacher_id, t.teacher_name</span><br><span class="line">    FROM student s</span><br><span class="line">    LEFT JOIN student_teacher st ON s.student_id = st.student_id</span><br><span class="line">    LEFT JOIN teacher t ON st.teacher_id = t.teacher_id</span><br><span class="line">    WHERE s.student_id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StudentMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据学生ID查询学生及其老师</span></span><br><span class="line">    Student <span class="title function_">selectStudentWithTeachersById</span><span class="params">(Integer studentId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询老师及其所有学生</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherWithStudentsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联学生集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTeacherWithStudentsById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherWithStudentsMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        t.teacher_id, t.teacher_name,</span><br><span class="line">        s.student_id, s.student_name</span><br><span class="line">    FROM teacher t</span><br><span class="line">    LEFT JOIN student_teacher st ON t.teacher_id = st.teacher_id</span><br><span class="line">    LEFT JOIN student s ON st.student_id = s.student_id</span><br><span class="line">    WHERE t.teacher_id = #&#123;teacherId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据老师ID查询老师及其学生</span></span><br><span class="line">    Teacher <span class="title function_">selectTeacherWithStudentsById</span><span class="params">(Integer teacherId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ResultMap 对比 ResultType</strong>:</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>ResultMap</strong>‌</th>
<th>‌<strong>ResultType</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>字段名与属性名不一致</td>
<td>✅ 必须使用</td>
<td>❌ 无法直接映射</td>
</tr>
<tr>
<td>一对一关联查询</td>
<td>✅ 通过 <code>&lt;association&gt;</code> 实现</td>
<td>❌ 无法嵌套对象</td>
</tr>
<tr>
<td>一对多关联查询</td>
<td>✅ 通过 <code>&lt;collection&gt;</code> 实现</td>
<td>❌ 无法映射集合</td>
</tr>
<tr>
<td>动态复杂映射</td>
<td>✅ 灵活定义映射规则</td>
<td>❌ 仅支持简单自动映射</td>
</tr>
<tr>
<td>代码简洁性</td>
<td>❌ 配置较多</td>
<td>✅ 直接指定实体类</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><table>
<thead>
<tr>
<th align="left">元素</th>
<th align="left">作用</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">if</td>
<td align="left">判断语句</td>
<td align="left">单条件分支判断</td>
</tr>
<tr>
<td align="left">choose（when、otherwise）</td>
<td align="left">相当于 Java 中的 switch case 语句</td>
<td align="left">多条件分支判断</td>
</tr>
<tr>
<td align="left">trim、where</td>
<td align="left">辅助元素</td>
<td align="left">用于处理一些SQL拼装问题</td>
</tr>
<tr>
<td align="left">foreach</td>
<td align="left">循环语句</td>
<td align="left">在in语句等列举条件常用</td>
</tr>
<tr>
<td align="left">bind</td>
<td align="left">辅助元素</td>
<td align="left">拼接参数</td>
</tr>
</tbody></table>
<ul>
<li><p><code>&lt;if&gt;/&lt;where&gt;</code></p>
<p><em><strong><code>where</code>的引入是为了解决1&#x3D;1这个问题，当条件多个时，不采用1&#x3D;1，会使SQL语句中出现多余的词如：AND。</strong></em></p>
<p><em><strong><code>&lt;where&gt;</code>自动去除条件中的AND&#x2F;OR</strong></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;判断条件&quot;</span>&gt;</span></span><br><span class="line">    SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND where name like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">        AND where age like #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;choose&gt;/&lt;when&gt;/&lt;otherwise&gt;/&lt;where&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件1&quot;</span>&gt;</span></span><br><span class="line">        SQL语句1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件2&quot;</span>&gt;</span></span><br><span class="line">        SQL语句2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件3&quot;</span>&gt;</span></span><br><span class="line">        SQL语句3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        SQL语句4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findstudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>AND name = #&#123;name&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>AND age = #&#123;age&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>AND status = 1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;foreach&gt;</code>批量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list|array|map key&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    参数值</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>item：表示集合中每一个元素进行迭代时的别名。</li>
<li>index：指定一个名字，表示在迭代过程中每次迭代到的位置。</li>
<li>open：表示该语句以什么开始（既然是 in 条件语句，所以必然以(开始）。</li>
<li>separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以,作为分隔符）。</li>
<li>close：表示该语句以什么结束（既然是 in 条件语句，所以必然以“)”开始）</li>
<li>collection：必选属性，分为3种情况list、array、map</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  WHERE id IN</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量插入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsertStudent&quot;</span>&gt;</span></span><br><span class="line">  INSERT INTO student (name, age) VALUES</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (#&#123;student.name&#125;, #&#123;student.age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;batchUpdateStudent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;student&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    UPDATE user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;student.name != null&quot;</span>&gt;</span>name = #&#123;student.name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;student.age != null&quot;</span>&gt;</span>age = #&#123;student.age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;student.id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;where&gt;</code></p>
<p>自动去除首条条件的 <code>AND</code>&#x2F;<code>OR</code>，若无条件则忽略 <code>WHERE</code>。</p>
</li>
<li><p><code>&lt;set&gt;</code></p>
<p>自动去除末尾逗号，用于更新语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span>&gt;</span></span><br><span class="line">  UPDATE student</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>age = #&#123;age&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;trim&gt;</code>自定义截取规则，代替<code>&lt;if&gt;</code>+<code>&lt;where&gt;/&lt;set&gt;</code>多条件查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;前缀&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;后缀&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;忽略前缀字符&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;忽略后缀字符&quot;</span>&gt;</span></span><br><span class="line">    SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">prefix</td>
<td align="left">给SQL语句拼接的前缀，为 trim 包含的内容加上前缀</td>
</tr>
<tr>
<td align="left">suffix</td>
<td align="left">给SQL语句拼接的后缀，为 trim 包含的内容加上后缀</td>
</tr>
<tr>
<td align="left">prefixOverrides</td>
<td align="left">去除 SQL 语句前面的关键字或字符，该关键字或者字符由 prefixOverrides 属性指定。</td>
</tr>
<tr>
<td align="left">suffixOverrides</td>
<td align="left">去除 SQL 语句后面的关键字或者字符，该关键字或者字符由 suffixOverrides 属性指定。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>AND name = #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>OR age = #&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;bind&gt;</code>在 SQL 中复用表达式或处理复杂逻辑（如模糊查询），或者说拼接||。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + keyword + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  WHERE name LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>value：对应传入实体类的某个字段，可以进行字符串拼接等特殊处理。</li>
<li>name：给对应参数取的别名。</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h4><ul>
<li><p>物理分页，MySQL的<code>LIMIT</code>和<code>OFFSET</code>—<em><strong>大数据量</strong></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM users </span><br><span class="line">  LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">// 当前页码  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;  </span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;  </span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">params.put(<span class="string">&quot;offset&quot;</span>, offset);  </span><br><span class="line">params.put(<span class="string">&quot;pageSize&quot;</span>, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectUsers(params);</span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑分页，MyBatis的<code>RowBounds</code>—<em><strong>小数据量</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectUsersWithRowBounds</span><span class="params">(RowBounds rowBounds)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(offset, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectUsersWithRowBounds(rowBounds);</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页插件<code>PageHelper</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis 配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用分页</span></span><br><span class="line">PageHelper.startPage(page, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectAllUsers();  </span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(users);</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis-Plus 分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, pageSize);  </span><br><span class="line">IPage&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);  </span><br><span class="line">List&lt;User&gt; users = userPage.getRecords();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li><p><strong>参数处理与占位符</strong></p>
<p>**<code>#&#123;&#125;</code> vs <code>$&#123;&#125;</code>**‌</p>
<ul>
<li><code>#&#123;&#125;</code> 使用预编译防止 SQL 注入，适用于参数值传递（如 <code>WHERE id = #&#123;id&#125;</code>）‌。</li>
<li><code>$&#123;&#125;</code> 直接替换 SQL 片段，适用于动态表名或排序字段（如 <code>ORDER BY $&#123;sortColumn&#125;</code>），需手动过滤风险参数‌。</li>
</ul>
</li>
<li><p><strong>参数类型匹配</strong>‌</p>
<ul>
<li>简单类型（如 <code>int</code>, <code>String</code>）可直接传递；多参数需用 <code>@Param</code> 注解或封装为 Map&#x2F;ENTITY。</li>
<li>批量操作时，集合参数通过 <code>&lt;foreach&gt;</code> 遍历处理（如 <code>IN</code> 查询）‌。</li>
</ul>
</li>
<li><p>‌<strong>避免过度嵌套</strong></p>
<ul>
<li>优先使用 <code>&lt;where&gt;</code>、<code>&lt;set&gt;</code> 自动处理前缀，减少冗余条件（如 <code>AND</code>&#x2F;<code>OR</code> 前缀）‌。</li>
<li>复杂逻辑用 <code>&lt;choose&gt;</code> 替代多层 <code>&lt;if&gt;</code>，提高可读性‌。</li>
</ul>
</li>
<li><p><strong>性能优化</strong></p>
<ul>
<li><p>减少动态标签数量，避免 SQL 语句频繁变化导致数据库硬解析‌。</p>
</li>
<li><p>模糊查询用 <code>&lt;bind&gt;</code> 或数据库函数（如 <code>CONCAT</code>）统一处理，而非拼接 <code>%</code>‌。</p>
<p><code>WHERE NAME LIKE CONCAT (&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</code></p>
</li>
<li><p>分页时优先物理分页（如 <code>LIMIT</code>），而非逻辑分页（<code>RowBounds</code>）‌。</p>
</li>
</ul>
</li>
<li><p><strong>字段名映射</strong></p>
<ul>
<li><p><code>mybatis-config.xml</code>启用驼峰命名自动转换（<code>mapUnderscoreToCamelCase=true</code>），避免手动别名‌。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键配置：启用驼峰命名映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂对象使用 <code>&lt;resultMap&gt;</code> 显式映射，尤其多表关联查询‌。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><a href="https://www.cainiaoplus.com/mybatis/mybatis-info.html">本文参考</a></p>
<h3 id="二、项目结构及模板"><a href="#二、项目结构及模板" class="headerlink" title="二、项目结构及模板"></a>二、项目结构及模板</h3><ol>
<li><h4 id="Spring-MVC搭配MyBatis"><a href="#Spring-MVC搭配MyBatis" class="headerlink" title="Spring MVC搭配MyBatis"></a>Spring MVC搭配MyBatis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssm-template/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   │   └── com.example/</span><br><span class="line">│   │   │           ├── controller/           # 控制层（SpringMVC 处理HTTP请求）</span><br><span class="line">│   │   │           ├── service/              # 业务层接口</span><br><span class="line">│   │   │           ├── service/impl/         # 业务层实现类</span><br><span class="line">│   │   │           ├── dao/                  # MyBatis Mapper接口</span><br><span class="line">│   │   │           └── entity/               # 实体类</span><br><span class="line">│   │   ├── resources/</span><br><span class="line">│   │   │   ├── spring/                       # Spring配置</span><br><span class="line">│   │   │   │   ├── spring-mvc.xml            # Spring MVC配置（视图解析器、拦截器等）</span><br><span class="line">│   │   │   │   └── spring-mybatis.xml        # MyBatis配置</span><br><span class="line">│   │   │   ├── mapper/                       # MyBatis XML映射文件（UserMapper.xml等）</span><br><span class="line">│   │   │   ├── database.properties           # 数据库连接配置</span><br><span class="line">│   │   │   └── log4j.properties              # 日志配置</span><br><span class="line">│   │   └── webapp/</span><br><span class="line">│   │       └── WEB-INF/</span><br><span class="line">│   │       │   ├── views/        			  # JSP/HTML视图文件</span><br><span class="line">│   │       │   └── web.xml                   # Servlet配置</span><br><span class="line">│   │       └── static/          			  # 静态资源（CSS/JS/图片）</span><br><span class="line">│   └── test/                                  # 单元测试</span><br><span class="line">└── pom.xml                                    # Maven依赖管理</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>User实体层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Controller层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Model model)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>Service层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>DAO层（Mapper接口）UserMapper.java或UserDao.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-mybatis.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载数据库参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关键配置：启用驼峰命名映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源（以Druid为例） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper接口扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>database.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库驱动类名（根据数据库类型调整）</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JDBC连接URL（格式：jdbc:数据库类型://IP:端口/数据库名?参数）</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可选：连接池配置（以Druid为例）</span></span><br><span class="line"><span class="attr">jdbc.initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">jdbc.minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">jdbc.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">jdbc.maxWait</span>=<span class="string">60000</span></span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>部署至Tomcat</strong>‌</p>
<ul>
<li>将项目打包为WAR文件，放入Tomcat的<code>webapps</code>目录，启动服务‌</li>
</ul>
<p><strong>访问测试</strong>‌</p>
<ul>
<li>浏览器访问 <code>http://localhost:8080/……</code>，若返回用户详情页面则成功‌</li>
</ul>
</li>
<li><h4 id="Spring-Boot搭配MyBatis"><a href="#Spring-Boot搭配MyBatis" class="headerlink" title="Spring Boot搭配MyBatis"></a>Spring Boot搭配MyBatis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-mybatis-demo/   # 项目根目录</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/           # Java 源代码</span><br><span class="line">│   │   │   └── com.example/</span><br><span class="line">│   │   │           ├── Application.java         		# Spring Boot 启动类</span><br><span class="line">│   │   │           ├── controller/UserController.java  # Controller 层（API入口）</span><br><span class="line">│   │   │           ├── service/UserService.java  		# Service 层（业务逻辑）</span><br><span class="line">│   │   │           ├── mapper/UserMapper.java  		# Mapper 接口（MyBatis DAO层）</span><br><span class="line">│   │   │           └── entity/User.java          	    # 实体类（POJO）</span><br><span class="line">│   │   └── resources/      # 资源文件</span><br><span class="line">│   │       ├── mapper/      # MyBatis XML 映射文件（如 UserMapper.xml）</span><br><span class="line">│   │       ├── static/      # 静态资源（CSS/JS/图片）</span><br><span class="line">│   │       ├── templates/   # 模板文件（如 Thymeleaf/FreeMarker）</span><br><span class="line">│   │       ├── application.yml或application.properties # 主配置文件（数据源、MyBatis配置）</span><br><span class="line">│   │       └── application-dev.yml   # 开发环境配置（可选）</span><br><span class="line">│   └── test/               # 单元测试</span><br><span class="line">│       └── java/</span><br><span class="line">│           └── com.example/</span><br><span class="line">│                   ├── controller/</span><br><span class="line">│                   └── service/</span><br><span class="line">├── target/                 # 编译输出目录（自动生成）</span><br><span class="line">├── pom.xml                 # Maven 依赖管理（或 build.gradle）</span><br><span class="line">└── README.md               # 项目文档</span><br></pre></td></tr></table></figure>

<p><strong>Application.java（启动类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span>  <span class="comment">// 必须声明 Mapper 接口扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User.java（实体类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// Lombok 自动生成 Getter/Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserController.java（Controller 层）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.demo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserService.java（Service 层）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.java（Mapper 接口）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 注解方式实现 SQL（或使用 XML）</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可在此补充复杂 SQL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml‌</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_db?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span>  <span class="comment"># XML 映射文件路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span>  <span class="comment"># 实体类包别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  <span class="comment"># 开启驼峰命名映射</span></span><br></pre></td></tr></table></figure>

<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-mybatis-template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis Starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok（可选） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h4><table>
<thead>
<tr>
<th><strong>对比维度</strong>‌</th>
<th>‌<strong>SpringMVC+MyBatis</strong>‌</th>
<th>‌<strong>SpringBoot+MyBatis</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>核心定位</td>
<td>传统企业级应用，需精细控制‌</td>
<td>快速构建现代化应用，强调开箱即用‌</td>
</tr>
<tr>
<td>配置复杂度</td>
<td>高（需手动配置多个组件）‌</td>
<td>低（自动配置）‌</td>
</tr>
<tr>
<td>依赖管理</td>
<td>手动维护，易冲突‌</td>
<td>Starter依赖自动管理‌</td>
</tr>
<tr>
<td>部署方式</td>
<td><strong>WAR</strong>包部署至外部容器‌</td>
<td>内嵌容器，<strong>JAR</strong>包独立运行‌</td>
</tr>
<tr>
<td>最佳适用场景</td>
<td>复杂业务定制、遗留系统维护‌</td>
<td>微服务、快速迭代项目‌</td>
</tr>
<tr>
<td>配置文件</td>
<td>多个XML文件（spring-mvc.xml等）</td>
<td>单一<code>application.properties</code>或YAML</td>
</tr>
<tr>
<td>启动类</td>
<td>无，依赖外部容器启动</td>
<td>需<code>@SpringBootApplication</code>主类</td>
</tr>
<tr>
<td>内嵌服务器</td>
<td>无，需外部Tomcat</td>
<td>支持内嵌Tomcat&#x2F;Jetty</td>
</tr>
<tr>
<td>依赖管理</td>
<td>手动管理版本</td>
<td>通过<code>starter</code>自动管理</td>
</tr>
<tr>
<td>启动入口</td>
<td>依赖外部Servlet容器（如Tomcat）通过 <code>web.xml</code> 触发‌</td>
<td>通过 <code>@SpringBootApplication</code> 主类调用 <code>SpringApplication.run()</code>‌</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/blog2025.github.io/2025/04/02/JDBC/</url>
    <content><![CDATA[<h3 id="一、什么是JDBC？"><a href="#一、什么是JDBC？" class="headerlink" title="一、什么是JDBC？"></a>一、什么是JDBC？</h3><p>JDBC（Java Database Connectivity）是 Java 语言用于连接和操作关系型数据库的标准 API，提供了一套统一接口，支持与多种数据库交互‌。</p>
<h3 id="二、模板"><a href="#二、模板" class="headerlink" title="二、模板"></a>二、模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">    <span class="comment">//MySQL8.0：&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//MySQL8.0：com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2. 获得数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.操作数据库，实现增删改查</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM student&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有数据，rs.next()返回true</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot; 年龄：&quot;</span>+rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        rs.close();  </span><br><span class="line">		stmt.close();  </span><br><span class="line">		conn.close();  <span class="comment">// 防止连接泄漏‌:ml-citation&#123;ref=&quot;2,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE student SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);  </span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;John&quot;</span>);  </span><br><span class="line">pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line">pstmt.executeUpdate();  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM student WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, age FROM user&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();        </span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;ID: %d, Name: %s, Age: %d\n&quot;</span>, id, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详解：</p>
<ul>
<li><strong><code>Driver</code> 接口</strong>：‌定义驱动能力，需通过 <code>Class.forName()</code> 加载驱动类（如 <code>com.mysql.jdbc.Driver</code>）‌。</li>
<li>‌**<code>DriverManager</code> 类**‌：管理驱动并创建数据库连接（<code>Connection</code>）‌。</li>
<li>‌**<code>Connection</code> 接口**：‌代表与数据库的会话，用于创建 <code>Statement</code> 或 <code>PreparedStatement</code>‌。</li>
<li>‌**<code>Statement</code> 与 <code>PreparedStatement</code>**：‌执行 SQL 语句，后者可预编译并防止 SQL 注入‌。</li>
<li>‌**<code>ResultSet</code> 接口**：‌封装查询结果集，支持遍历和操作数据‌。</li>
</ul>
<h3 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h3><ol>
<li><strong>事务管理：</strong><ul>
<li>‌<strong>开启事务</strong>‌：<code>conn.setAutoCommit(false);</code></li>
<li>‌<strong>提交&#x2F;回滚</strong>‌：<code>conn.commit();</code> 或 <code>conn.rollback();</code>‌</li>
</ul>
</li>
<li><strong>防止 SQL 注入：</strong><ul>
<li>使用 <code>PreparedStatement</code> 替代 <code>Statement</code>，预编译 SQL 并参数化输入‌。</li>
</ul>
</li>
<li><strong>连接泄漏：</strong><ul>
<li>‌使用 <code>try-with-resources</code> 自动关闭资源‌。</li>
</ul>
</li>
<li><strong>编码问题：</strong><ul>
<li>‌在 JDBC URL 中指定字符集（如 <code>useUnicode=true&amp;characterEncoding=UTF-8</code>）‌</li>
</ul>
</li>
</ol>
<h3 id="四、JdbcTemplate模板"><a href="#四、JdbcTemplate模板" class="headerlink" title="四、JdbcTemplate模板"></a>四、JdbcTemplate模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplate</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库连接配置（建议抽取到配置文件）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);  <span class="comment">// 加载驱动（MySQL 8.0+）</span></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> id, String newName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setString(<span class="number">1</span>, newName);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;更新成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, age FROM user&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">             <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;ID: %d, Name: %s, Age: %d\n&quot;</span>, id, name, age);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        demo.insert(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);  <span class="comment">// 插入</span></span><br><span class="line">        demo.update(<span class="number">1</span>, <span class="string">&quot;Bob&quot;</span>);     <span class="comment">// 更新</span></span><br><span class="line">        demo.delete(<span class="number">2</span>);            <span class="comment">// 删除</span></span><br><span class="line">        demo.queryAll();           <span class="comment">// 查询</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/blog2025.github.io/2025/04/01/Spring/</url>
    <content><![CDATA[<h3 id="一、JavaBean（Bean-豆子）"><a href="#一、JavaBean（Bean-豆子）" class="headerlink" title="一、JavaBean（Bean&#x2F;豆子）"></a>一、JavaBean（Bean&#x2F;豆子）</h3><ol>
<li><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一个固定模式的Java类，用于封装数据，包含：</p>
<p>①一个无参构造函数；</p>
<p>②需要序列化（数据结构或对象转换为字节流）并实现Serializable接口；</p>
<p>③可读写属性；</p>
<p>④getter和setter方法方便外部程序读取和修改。</p>
<p>范例：StudentsBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsBean</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">StudentsBean</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
</li>
<li><h4 id="JSP调用"><a href="#JSP调用" class="headerlink" title="JSP调用"></a>JSP调用</h4><p>导入JavaBean组件：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;包名&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>访问JavaBean组件：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;bean 的名字&quot;</span> class=<span class="string">&quot;JavaBean的完整类名(包名)&quot;</span> scope=<span class="string">&quot;bean 的作用域&quot;</span> &gt;&lt;/jsp:useBean&gt;</span><br><span class="line">&lt;!-- scope 的值可以是 page，request，session 或 application --&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;person&quot;</span> class=<span class="string">&quot;com.bean.Person&quot;</span>&gt;&lt;/jsp:useBean&gt;</span><br><span class="line">相当于对象的实例化：</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>设置和访问JavaBean组件中的属性：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;id&quot;</span> class=<span class="string">&quot;bean 编译的类&quot;</span> scope=<span class="string">&quot;bean 作用域&quot;</span>&gt;</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">&quot;bean 的 id&quot;</span> property=<span class="string">&quot;属性名&quot;</span>  value=<span class="string">&quot;value&quot;</span>/&gt;</span><br><span class="line">   &lt;jsp:getProperty name=<span class="string">&quot;bean 的 id&quot;</span> property=<span class="string">&quot;属性名&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;person&quot;</span> property=<span class="string">&quot;name&quot;</span>  value=<span class="string">&quot;jack&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;person&quot;</span> property=<span class="string">&quot;name&quot;</span> /&gt;</span><br><span class="line">相当于：</span><br><span class="line">&lt;%</span><br><span class="line">person.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">person.getName();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>参考1：<a href="https://www.runoob.com/jsp/jsp-javabean.html">https://www.runoob.com/jsp/jsp-javabean.html</a></p>
<p>参考2：<a href="https://blog.csdn.net/keep12moving/article/details/92666633">https://blog.csdn.net/keep12moving/article/details/92666633</a></p>
<p>参考3：<a href="https://blog.csdn.net/wu920604/article/details/72673832">https://blog.csdn.net/wu920604/article/details/72673832</a></p>
</li>
</ol>
<h3 id="二、Spring是什么？能做什么？"><a href="#二、Spring是什么？能做什么？" class="headerlink" title="二、Spring是什么？能做什么？"></a>二、Spring是什么？能做什么？</h3><ol>
<li><h4 id="Spring是什么？（万能工具箱）"><a href="#Spring是什么？（万能工具箱）" class="headerlink" title="Spring是什么？（万能工具箱）"></a>Spring是什么？（万能工具箱）</h4><p>解释①：用来装JavaBean的一种<strong>容器</strong>，即用来管理JavaBean实例化对象的一种容器。</p>
<p><strong>可以通过@bean自动完成对象的实例化。</strong></p>
<p>解释②：为了解决对象的创建和管理。</p>
<p>解释③：Spring 让 Java 开发从“手工作坊”变成“现代化工厂”，专注业务逻辑，而不是重复造轮子。</p>
<p>三层架构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Web层：Spring MVC</span><br><span class="line">业务层：Spring的IoC</span><br><span class="line">持久层：Spring的JDBC、ORM、等持久层框架</span><br></pre></td></tr></table></figure>

<p>核心：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">控制反转：IoC || 依赖注入：DI</span><br><span class="line">面向切面编程：AOP</span><br></pre></td></tr></table></figure>

<p>参考1：<a href="https://blog.csdn.net/lin_whl/article/details/103010425">https://blog.csdn.net/lin_whl/article/details/103010425</a></p>
<p>参考2：<a href="https://blog.csdn.net/YKorey/article/details/80629291">https://blog.csdn.net/YKorey/article/details/80629291</a></p>
</li>
<li><h4 id="Spring能做什么？"><a href="#Spring能做什么？" class="headerlink" title="Spring能做什么？"></a>Spring能做什么？</h4><p>①预定模板||依赖注入（如数据库操作只需要直接让Spring准备好即可，不需要去自己去写。）</p>
<p>②解耦、简化开发、易于测试；</p>
<p>③对事务进行声明；（事务是逻辑上的一组操作，要么都执行，要么都不执行）（如对数据库操作）等。</p>
<p><strong>如果把写代码比作造房子‌，传统方式需要自己搬砖、砌墙、接电线，而 Spring 提供了：</strong></p>
<ul>
<li>‌<strong>预制板</strong>‌（依赖注入）：直接组装现成的模块。</li>
<li>‌<strong>智能管家</strong>‌（AOP）：自动处理水电安装、刷墙等重复工作。</li>
<li>‌<strong>装修模板</strong>‌（Spring Boot）：一键生成基础户型，省去画图纸的时间。</li>
<li>用 ‌<strong>Spring Cloud</strong>‌ 可以快速构建分布式系统（比如电商中的订单、支付等独立服务），解决服务调用、负载均衡等问题。</li>
<li>通过 ‌<strong>Spring MVC</strong>‌ 框架，可以轻松处理网页的请求、响应、路由等，让前后端协作更清晰。<strong>Spring Boot</strong>‌ 进一步简化配置，可以更快启动一个Web项目。</li>
<li><strong>Spring</strong> 整合了 JDBC、JPA 等工具，让数据库操作（增删改查）变得更简单，减少繁琐代码。提供 ‌<strong>事务管理</strong>‌，保证数据库操作的一致性（比如转账失败时自动回滚，避免数据错误）。</li>
</ul>
</li>
</ol>
<h3 id="三、Spring详解："><a href="#三、Spring详解：" class="headerlink" title="三、Spring详解："></a>三、Spring详解：</h3><ol>
<li><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p><font color="red"><strong>Spring将各种功能封装为Bean&#x2F;豆子，使用时自动去调用这个Bean即可</strong></font></p>
<p>更准确的说Spring 的核心机制确实是通过 ‌**“Bean”<strong>‌ 和 ‌</strong>“IoC（控制反转）容器”**‌ 来管理对象。</p>
<p>**（1）Bean 是什么？**‌</p>
<ul>
<li>‌<strong>Bean 是 Spring 管理的对象</strong>‌：比如你的数据库工具类、网络请求处理器、配置参数等，都可以声明为 Bean。</li>
<li>‌<strong>Bean 不是普通的 new 出来的对象</strong>‌：它由 Spring 的 IoC 容器创建、组装和管理，生命周期由容器控制。</li>
</ul>
<p>**（2）IoC 容器：Spring 的<font color="red">“智能仓库”生产零件</font>**‌</p>
<ul>
<li>‌<strong>传统方式</strong>‌：你需要自己手动 <code>new</code> 对象，并层层传递依赖（比如 <code>A</code> 依赖 <code>B</code>，<code>B</code> 依赖 <code>C</code>，需要手动把 <code>C</code> 传给 <code>B</code>，再把 <code>B</code> 传给 <code>A</code>）。</li>
<li>‌<strong>Spring 的做法</strong>‌：你只需告诉 Spring 哪些类是 Bean（通过注解或配置），‌<strong>容器会自动创建这些 Bean，并按需注入它们之间的依赖</strong>‌，就像“智能仓库”自动给你配送零件。</li>
</ul>
<p> **（3）依赖注入（DI）：自动“装配”Bean<font color="red">|拼装零件为产品</font>**‌</p>
<ul>
<li><p>‌<strong>你只需要定义 Bean</strong>‌（比如用 <code>@Component</code> 标记一个类），然后告诉 Spring：“我的类需要某个 Bean”（比如用 <code>@Autowired</code> 注解）。</p>
</li>
<li><p><strong>‌Spring 会自动完成两件事</strong>：</p>
<p>①<strong>创建 Bean</strong>‌：根据配置或扫描路径，实例化对象。</p>
<p>②<strong>注入依赖</strong>‌：如果 Bean A 依赖 Bean B，Spring 会自动把 B 注入到 A 中（无需手动 <code>A.setB(new B())</code>）。</p>
</li>
</ul>
<p><strong>例：</strong></p>
<p>传统写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法：手动管理依赖</span></span><br><span class="line"><span class="type">DatabaseUtil</span> <span class="variable">dbUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseUtil</span>();</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(dbUtil);</span><br></pre></td></tr></table></figure>

<p>Spring写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明为 Bean（交给 Spring 管理）</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseUtil</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 自动注入依赖的 Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DatabaseUtil dbUtil;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>①创建 <code>DatabaseUtil</code> 实例（Bean）。</p>
<p>②创建 <code>UserService</code> 实例（Bean）。</p>
<p>③将 <code>DatabaseUtil</code> 的 Bean 注入到 <code>UserService</code> 中。</p>
</li>
<li><h4 id="IoC控制反转：Inversion-of-Control（第三方大管家-相亲婚介所）"><a href="#IoC控制反转：Inversion-of-Control（第三方大管家-相亲婚介所）" class="headerlink" title="IoC控制反转：Inversion of Control（第三方大管家&#x2F;相亲婚介所）"></a>IoC控制反转：Inversion of Control（第三方大管家&#x2F;相亲婚介所）</h4><p><img src="/blog2025.github.io/2025/04/01/Spring/IoC.png"></p>
<ul>
<li><p>**‌定义：**IoC容器负责实例化，配置和组装对象。 IoC容器从XML文件获取信息并相应地工作。</p>
</li>
<li><p>**任务：**实例化应用程序类、配置对象、组装对象之间的依赖关系</p>
</li>
<li><p>**IoC容器类型：**BeanFactory、ApplicationContext(功能更强大，推荐使用)</p>
<p>BeanFactory：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Resource resource=new ClassPathResource(&quot;applicationContext.xml&quot;);</span><br><span class="line">BeanFactory factory=new XmlBeanFactory(resource);</span><br></pre></td></tr></table></figure>

<p>ApplicationContext：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = </span><br><span class="line">    new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>传统控制权在程序员</strong>‌：你决定何时创建对象、如何传递依赖。</p>
</li>
<li><p>‌<strong>Spring 控制权反转</strong>‌：你只定义 Bean 和依赖关系，由 Spring 决定何时创建、如何注入。这就是“‌<strong>你不用找依赖，依赖会找你</strong>‌”的核心思想。</p>
</li>
</ul>
<p><strong>Bean的创建注解：</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>将修饰的资源交予spring管理。value属性：为资源命名（唯一标识）</td>
</tr>
<tr>
<td>@Controller</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰表示层的资源。</td>
</tr>
<tr>
<td>@Service</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰业务逻辑层的资源。</td>
</tr>
<tr>
<td>@Repository</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰数据访问层的资源。</td>
</tr>
</tbody></table>
<p>参考1：<a href="https://blog.csdn.net/ivan820819/article/details/79744797">https://blog.csdn.net/ivan820819/article/details/79744797</a></p>
<p>参考2：<a href="https://blog.csdn.net/xianyu120/article/details/120611838">https://blog.csdn.net/xianyu120/article/details/120611838</a></p>
<p>IoC和DI简单理解：<a href="https://blog.csdn.net/bestone0213/article/details/47424255">https://blog.csdn.net/bestone0213/article/details/47424255</a></p>
</li>
<li><h4 id="DI依赖注入：3种（IoC的其他角度描述）"><a href="#DI依赖注入：3种（IoC的其他角度描述）" class="headerlink" title="DI依赖注入：3种（IoC的其他角度描述）"></a>DI依赖注入：3种（IoC的其他角度描述）</h4><p><strong>Bean的注入风格：（XML、Java配置、注解）</strong></p>
<p><strong>Bean的注入方式：（字段注入、构造函数注入、Setter注入）</strong></p>
<ul>
<li><p>‌**（1）XML 配置**‌（早期方式）：在 XML 文件中声明 Bean 和依赖关系。</p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello: &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②创建XML文件student-beans.xml；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用注解扫描（指定包路径） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 或者手动声明 Bean（无需注解） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;/&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 构造器注入示例 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg value=&quot;John Doe&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Setter 注入示例 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;Jane Smith&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③调用Bean中的方法。<strong>IoC控制反转</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//方法1：</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Resource resource=new ClassPathResource(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">        BeanFactory factory=new XmlBeanFactory(resource);</span></span><br><span class="line"><span class="comment">        Student student=(Student)factory.getBean(&quot;student-beans&quot;);</span></span><br><span class="line"><span class="comment">        student.displayInfo();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">//方法2：</span></span><br><span class="line">        <span class="comment">// 加载 XML 配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;student-beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 从容器中获取 Student Bean</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">        <span class="comment">// 使用 Bean</span></span><br><span class="line">        student.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        student.displayInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌**（2）Java 配置**‌：通过 <code>@Configuration</code> 和 <code>@Bean</code> 在代码中显式定义。</p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②创建配置类AppConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pojo&quot;)</span> <span class="comment">// 指定扫描包路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不想用 @Component，也可以手动声明 Bean</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="comment">// public Student student() &#123;</span></span><br><span class="line">    <span class="comment">//     return new Student();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③初始化容器并获取Bean；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 Java 配置类</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Bean</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Bean</span></span><br><span class="line">        student.setName(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        student.displayInfo(); <span class="comment">// 输出：Hello: Jerry</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>（3）注解</strong>‌（主流方式）：用 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等注解标记类为Bean，其他类使用时用 <code>@Autowired</code> 注入Bean。<font color="red">在传统 Spring 框架（非 Spring Boot）中，使用注解时‌<strong>必须显式启用组件扫描</strong></font></p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②写<strong>XML配置</strong>文件或者<strong>AppConfig.java</strong>文件启动组件扫描（同上）</p>
<p>③定义依赖类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line">    <span class="comment">// 字段注入（不推荐，仅示例）</span></span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器注入（推荐）</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">    public StudentService(Student student) &#123;</span></span><br><span class="line"><span class="comment">        this.student = student;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter注入（需手动添加）</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	<span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">	public void setStudent(Student student) &#123;</span></span><br><span class="line"><span class="comment">    	this.student = student;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        student.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        student.displayInfo(); <span class="comment">// 输出：Hello: Alice</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 或使用 Java 配置类：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(StudentService.class);</span><br><span class="line">        service.useStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="DI依赖注入-自动装配类型：4种"><a href="#DI依赖注入-自动装配类型：4种" class="headerlink" title="DI依赖注入-自动装配类型：4种"></a>DI依赖注入-自动装配类型：4种</h4><p>xml文件中修改:</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>这是默认的自动装配模式。这意味着默认情况下没有自动装配。</td>
</tr>
<tr>
<td>byName</td>
<td>byName模式根据bean的名称注入对象依赖项。在这种情况下，属性名称和bean名称id必须相同。它在内部调用setter方法。<strong>（@Resource默认按照Name注入，但也可以通过Type注入）</strong></td>
</tr>
<tr>
<td>byType</td>
<td>byType模式根据类型注入对象依赖项。因此属性名称和bean名称id可以不同。它在内部调用setter方法。<strong>（@AutoWired仅按照Type注入）</strong></td>
</tr>
<tr>
<td>constructor</td>
<td>构造函数模式通过调用类的构造函数来注入依赖项。它会调用具有大量参数的构造函数。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;&quot;,type=&quot;&quot;)</span></span><br><span class="line"><span class="meta">@AutoWired(type=&quot;&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="IoC控制反转和DI依赖注入的区别："><a href="#IoC控制反转和DI依赖注入的区别：" class="headerlink" title="IoC控制反转和DI依赖注入的区别："></a>IoC控制反转和DI依赖注入的区别：</h4><p>分工：</p>
<table>
<thead>
<tr>
<th>‌<strong>步骤</strong>‌</th>
<th>‌<strong>执行者</strong>‌</th>
<th>‌<strong>行为</strong>‌</th>
<th>‌<strong>技术体现</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>Bean 的创建</strong>‌</td>
<td>IoC 容器</td>
<td>根据配置（XML&#x2F;Java配置&#x2F;注解）实例化 Bean</td>
<td><code>ApplicationContext</code>、<code>BeanFactory</code></td>
</tr>
<tr>
<td>‌<strong>依赖的注入</strong>‌</td>
<td>DI 机制</td>
<td>将其他 Bean 或值注入到目标 Bean 的属性中</td>
<td><code>@Autowired</code>、构造器参数、Setter 方法</td>
</tr>
</tbody></table>
<p><strong>形象类比：</strong></p>
<ul>
<li>‌<strong>IoC 容器</strong>‌ 像‌<strong>工厂车间</strong>‌：负责生产零件（Bean）。</li>
<li>‌<strong>DI 机制</strong>‌ 像‌<strong>组装流水线</strong>‌：将零件（依赖的 Bean）拼装成完整产品。</li>
</ul>
<p>**IoC 和 DI 是协作关系：**‌</p>
<ul>
<li>‌<strong>IoC 是前提</strong>‌：没有 IoC 容器创建 Bean，DI 将无对象可注入。</li>
<li>‌<strong>DI 是手段</strong>‌：通过依赖注入，IoC 容器才能管理对象间的复杂依赖关系。</li>
</ul>
<p>**总结：**‌</p>
<ul>
<li>‌<strong>IoC 创建 Bean</strong>‌：容器掌控对象的生死（实例化、销毁）。</li>
<li>‌<strong>DI 注入 Bean</strong>‌：容器解决对象的依赖（自动装配）。</li>
</ul>
</li>
<li><h4 id="Bean的作用域："><a href="#Bean的作用域：" class="headerlink" title="Bean的作用域："></a>Bean的作用域：</h4><p>（1）单例模式：引用同一个对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）多例模式：引用不同的对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）@Bean配合@Configuration使用（依赖注入的Java配置文件）可以代替XML配置；</p>
<p>（4）@Bean通过方法参数自动注入其他依赖；</p>
<p>（5）@Bean的核心作用是将一个方法的返回值注册为 Spring 容器管理的 Bean；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">userDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring 自动将 userDao() 方法的返回值注入此处</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Bean(name&#x3D;”指定Bean的名称”,initMethod&#x3D;”配置初始化方法”,destoryMethod&#x3D;”配置销毁方法”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pojo&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod=&quot;start&quot;,destoryMethod=&quot;destory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@PostConstruct</td>
<td>初始化方法，项目启动时执行，只会被调用一次。</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>销毁方法，项目关闭时执行，只会被调用一次。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="AOP面向切面编程：Aspect-Oriented-Programming"><a href="#AOP面向切面编程：Aspect-Oriented-Programming" class="headerlink" title="AOP面向切面编程：Aspect Oriented Programming"></a>AOP面向切面编程：<strong>Aspect Oriented Programming</strong></h4><ul>
<li><p>**定义：**模块化功能，把程序重复的代码抽取出来，在需要执行的时候，使用代理的技术，<strong>在不修改原来代码的基础上，对已有方法进行增强</strong>。</p>
</li>
<li><p><strong>核心思想：正是通过“横向切入”的方式，在程序执行的前后（或特定位置）统一添加公共功能</strong>‌。</p>
</li>
<li><p><strong>注解：</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Aspect</td>
<td>把当前类声明成切面类</td>
</tr>
<tr>
<td>@Before</td>
<td>把当前方法看成是前置通知</td>
</tr>
<tr>
<td>@AfterReturning</td>
<td>把当前方法看成是后置通知。</td>
</tr>
<tr>
<td>@AfterThrowing</td>
<td>把当前方法看成是异常通知</td>
</tr>
<tr>
<td>@After</td>
<td>把当前方法看成是最终通知</td>
</tr>
<tr>
<td>@Around</td>
<td>把当前方法看成是环绕通知</td>
</tr>
<tr>
<td>@Pointcut</td>
<td>指定切入点表达式</td>
</tr>
</tbody></table>
<p>代码详解：<a href="https://www.cainiaojc.com/spring/spring-aop-aspectj-annotation-example.html">https://www.cainiaojc.com/spring/spring-aop-aspectj-annotation-example.html</a></p>
</li>
<li><p><strong>核心概念：</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>术语</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>类比</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌**切面（Aspect）**‌</td>
<td>封装公共功能的模块（如日志记录工具类）。</td>
<td>类似一个“插件包”。</td>
</tr>
<tr>
<td>‌**连接点（Join Point）**‌</td>
<td>程序执行过程中的特定点（如方法调用、异常抛出）。</td>
<td>代码中可插入切面的“锚点”。</td>
</tr>
<tr>
<td>‌**切点（Pointcut）**‌</td>
<td>通过表达式匹配需要增强的连接点（例如所有 <code>UserService</code> 的方法）。</td>
<td>定义“在哪些锚点插入功能”。</td>
</tr>
<tr>
<td>‌**通知（Advice）**‌</td>
<td>切面在连接点执行的具体动作（如前置日志、后置事务提交）。</td>
<td>插件包中的具体“功能代码”。</td>
</tr>
<tr>
<td><strong>目标（Target）</strong></td>
<td>代理的目标对象。通俗点讲：你需要增强的类，这个类就是目标对象</td>
<td></td>
</tr>
<tr>
<td><strong>代理（Proxy）</strong></td>
<td>一个类被AOP增强后，就产生一个结果代理类。</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h3 id="四、Spring高级："><a href="#四、Spring高级：" class="headerlink" title="四、Spring高级："></a>四、Spring高级：</h3><ol>
<li><h4 id="数据库事务："><a href="#数据库事务：" class="headerlink" title="数据库事务："></a>数据库事务：</h4><ul>
<li>**原子性Atomicity：**事务是一个不可分割的工作单位，事务中的操作要么都成功，要么都失败。‌</li>
<li>**一致性Consistency：**事务前后数据的完整性必须保持一致。</li>
<li>**隔离性Isolation：**多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务干扰，多个并发事务之间数据要相互隔离。</li>
<li>**持久性Durability：**一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
</li>
<li><h4 id="并发问题："><a href="#并发问题：" class="headerlink" title="并发问题："></a>并发问题：</h4><ul>
<li>**脏读：**事务A读取了事务B ‌未提交的修改‌，若事务B回滚，事务A读取的数据无效‌。‌</li>
<li>**不可重复读：**事务A多次读取同一数据，因事务B的 更新&#x2F;删除操作已提交‌，导致两次结果不一致‌</li>
<li>**幻读：**事务A在范围查询中，因事务B ‌插入新数据并提交‌，导致两次结果集不一致‌</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>问题类型</strong>‌</th>
<th>‌<strong>核心差异</strong>‌</th>
<th>‌<strong>隔离级别要求</strong>‌</th>
<th>‌<strong>技术手段</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>脏读</strong>‌</td>
<td>读取未提交数据</td>
<td><code>READ_COMMITTED</code> 及以上</td>
<td>悲观锁、提交前禁止读取‌</td>
</tr>
<tr>
<td>‌<strong>不可重复读</strong>‌</td>
<td>同一数据被修改&#x2F;删除</td>
<td><code>REPEATABLE_READ</code> 及以上</td>
<td>MVCC、行级锁‌</td>
</tr>
<tr>
<td>‌<strong>幻读</strong>‌</td>
<td>范围查询中出现新数据</td>
<td><code>SERIALIZABLE</code></td>
<td>间隙锁、索引范围锁‌</td>
</tr>
</tbody></table>
<ol start="3">
<li><h4 id="声明式事务管理："><a href="#声明式事务管理：" class="headerlink" title="声明式事务管理："></a>声明式事务管理：</h4><p><code>@Transactional</code> 是 Spring 框架中用于 ‌<strong>声明式事务管理</strong>‌ 的核心注解，通过自动管理事务的开启、提交和回滚，简化数据库操作的原子性和一致性保障。</p>
<p>（1）<strong>核心功能</strong></p>
<ul>
<li>‌<strong>事务原子性保障</strong>‌<br>确保方法内的数据库操作作为一个整体执行：‌<strong>全部成功则提交，任意失败则回滚</strong>‌，符合 ACID 原则的原子性要求‌。</li>
<li>‌<strong>声明式事务管理</strong>‌<br>替代传统编程式事务（手动提交&#x2F;回滚），通过注解配置实现事务逻辑与业务逻辑的解耦‌。</li>
</ul>
<p>（2）<strong>关键特性</strong></p>
<ul>
<li><p><strong>传播行为（Propagation）</strong></p>
<p>定义事务的边界策略，例如：</p>
<ul>
<li><code>REQUIRED</code>（默认）：若当前存在事务则加入，否则新建事务‌。</li>
<li><code>REQUIRES_NEW</code>：始终新建独立事务，挂起当前事务（适用需隔离的场景）‌。</li>
</ul>
</li>
<li><p><strong>隔离级别（Isolation）</strong></p>
</li>
</ul>
<p>  控制事务并发时的数据可见性，如：</p>
<ul>
<li><p><code>READ_COMMITTED</code>：防止脏读（默认级别）‌。</p>
</li>
<li><p><code>SERIALIZABLE</code>：最高隔离级别，避免幻读但性能较低‌。</p>
</li>
<li><p><strong>回滚规则（Rollback）</strong></p>
</li>
<li><p><strong>默认规则</strong>‌：仅回滚 <code>RuntimeException</code> 和 <code>Error</code>‌。</p>
</li>
<li><p><strong>自定义规则</strong>‌：通过 <code>rollbackFor</code> 指定触发回滚的异常类型（如 <code>rollbackFor = Exception.class</code>）‌。‌</p>
</li>
<li><p><strong>超时与只读</strong></p>
</li>
<li><p><code>timeout</code>：设置事务超时时间（秒），超时自动回滚‌。</p>
</li>
<li><p><code>readOnly = true</code>：优化查询操作，禁止写入（部分数据库支持性能优化）‌。</p>
</li>
</ul>
<p>（3）<strong>应用场景</strong></p>
<ul>
<li><strong>数据更新操作</strong>‌<br>如转账业务（扣款与入账需原子性）‌。</li>
<li>‌<strong>批量操作</strong>‌<br>批量插入&#x2F;更新时，事务确保整体成功或回滚‌。</li>
<li>‌<strong>多数据源协调</strong>‌<br>跨多个数据库或微服务调用时，通过分布式事务管理器扩展（需结合其他组件）‌。</li>
</ul>
<p>（4）<strong>使用规范</strong></p>
<p>Spring 通过 AOP 动态代理实现事务管理，‌<strong>自调用（同类方法调用）不触发事务</strong>。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="meta">        isolation = Isolation.READ_COMMITTED,</span></span><br><span class="line"><span class="meta">        rollbackFor = SQLException.class,</span></span><br><span class="line"><span class="meta">        timeout = 30</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/blog2025.github.io/2025/04/02/SpringBoot/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/cuiqwei/article/details/118188540">SpringBoot2教程1</a><br><a href="https://www.cainiaojc.com/springboot/springboot-tutorial.html">SpringBoot2教程2</a></p>
<h3 id="一、Spring-Boot："><a href="#一、Spring-Boot：" class="headerlink" title="一、Spring Boot："></a>一、Spring Boot：</h3><ol>
<li><h4 id="Spring-Boot是什么？"><a href="#Spring-Boot是什么？" class="headerlink" title="Spring Boot是什么？"></a>Spring Boot是什么？</h4><ul>
<li><p>微框架—微服务。</p>
</li>
<li><p><strong>Spring Boot</strong> &#x3D; <strong>Spring</strong> + <strong>Tomcat&#x2F;Jetty</strong>(Http Servers) + <strong>XML</strong>(Configuration)</p>
</li>
<li><p>起因：Spring的开发需要配置繁琐的XML文件、整合配置第三方框架，导致了开发和配置效率的降低。</p>
</li>
<li><p>特征：</p>
<ul>
<li><p>Spring Boot集成了大量常用的第三方库配置，零配置开箱即用；</p>
</li>
<li><p>Spring Boot不需要很多XML配置；</p>
</li>
<li><p>Spring Boot旨在尽可能地快速启动和运行，需要最少的Spring前期配置；</p>
<p><img src="/blog2025.github.io/2025/04/02/SpringBoot/1.png"></p>
<p>Spring Boot：<em>Build Anything</em>， Build任何东西；</p>
<p>SpringCloud：<em>Coordinate Anything</em>，协调任何事情；</p>
<p>SpringCloud Data Flow：<em>Connect everything</em>，连接任何东西。</p>
<span id="more"></span></li>
</ul>
</li>
<li><p>优点：</p>
<ul>
<li><p>继承了Spring框架的优秀特点，可以更快搭建Spring框架；</p>
</li>
<li><p>简化编码，一个<code>spring-boot-starter-web</code>则可以包含多个需要的依赖；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>简化配置，Spring Boot相较于Spring更多的采用Java Config配置方式，而非XML方式；</p>
<p><strong>Spring Boot使用<code>@Configuration</code>、<code>@Bean</code>等注解替代XML的<code>&lt;bean&gt;</code>标签；</strong></p>
<p><strong>Spring Boot使用<code>application.properties</code>或<code>application.yml</code>代替XML的<code>&lt;context:property-placeholder&gt;</code>‌；</strong></p>
</li>
<li><p>简化部署，Spring Boot内嵌了Tomcat，只需要将项目打包为<strong>jar</strong>包，即可启动项目；Spring则需要打包为<strong>war</strong>包再部署到Tomcat上；（jar包适用于微服务场景）</p>
</li>
<li><p>简化监控，引入 <code>spring-boot-start-actuator</code>依赖，直接使用REST方式获取进程的运行期性能参数，从而达到监控的目的；同时需要Spring Cloud的<strong>服务发现与注册的配套功能</strong>，<strong>外围监控集成方案</strong>，<strong>外围安全管理方案</strong>搭配使用。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Spring和Spring-Boot"><a href="#Spring和Spring-Boot" class="headerlink" title="Spring和Spring Boot"></a>Spring和Spring Boot</h4><table>
<thead>
<tr>
<th>Spring</th>
<th>Spring Boot</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Spring Framework</strong>是用于构建应用程序的广泛使用的Java EE框架。</td>
<td><strong>SpringBoot Framework</strong> 被广泛用于开发 <strong>REST API</strong> 。</td>
</tr>
<tr>
<td>它旨在简化Java EE开发，从而使开发人员更加高效。</td>
<td>它旨在缩短代码长度，并提供开发 <strong>Web应用程序</strong>的最简单方法。</td>
</tr>
<tr>
<td>Spring Framework的主要功能是<strong>依赖注入</strong>和<strong>控制反转</strong>(IoC)</td>
<td>Spring Boot的主要功能是<strong>自动配置</strong>。它会根据需求自动配置类。</td>
</tr>
<tr>
<td>通过允许我们开发<strong>松耦合</strong>应用程序，可以使事情变得更简单。</td>
<td>它有助于创建配置更少的<strong>独立</strong>应用。</td>
</tr>
<tr>
<td>开发人员编写了大量代码(<strong>模板代码</strong>)来完成最小的任务。</td>
<td>它<strong>减少</strong>样板代码。</td>
</tr>
<tr>
<td>要测试Spring项目，我们需要显式设置服务器。</td>
<td>SpringBoot提供了<strong>嵌入式服务器</strong>，例如 <strong>Jetty</strong> 和 <strong>Tomcat</strong> 等。</td>
</tr>
<tr>
<td>它不支持内存数据库。</td>
<td>它提供了多个插件来处理嵌入式和<strong>内存中</strong>数据库，例如 <strong>H2</strong> 。</td>
</tr>
<tr>
<td>开发人员在 <strong>pom.xml</strong> 中为Spring项目手动定义依赖项。</td>
<td>Spring Boot在pom.xml文件中带有 <strong>starter</strong> 概念，该概念内部负责根据Spring Boot要求下载依赖项 <strong>JAR</strong> 。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="Spring-Boot和Spring-MVC"><a href="#Spring-Boot和Spring-MVC" class="headerlink" title="Spring Boot和Spring MVC"></a>Spring Boot和Spring MVC</h4><table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringMVC</th>
</tr>
</thead>
<tbody><tr>
<td><strong>SpringBoot</strong> 是Spring的模块，用于使用合理的默认值打包基于Spring的应用程序。</td>
<td><strong>SpringMVC</strong> 是Spring框架下基于模型视图控制器的Web框架。</td>
</tr>
<tr>
<td>它提供了用于构建 <strong>Spring-powered</strong> 框架的默认配置。</td>
<td>它提供了<strong>易于使用</strong>功能来构建Web应用程序。</td>
</tr>
<tr>
<td>无需手动构建配置。</td>
<td>它需要手动进行构建配置。</td>
</tr>
<tr>
<td><strong>不需要</strong>部署描述符。</td>
<td><strong>必需</strong>。</td>
</tr>
<tr>
<td>它避免了样板代码，并将依赖项包装在一个单元中。</td>
<td>它分别指定每个依赖项。</td>
</tr>
<tr>
<td>它<strong>减少</strong>开发时间并提高生产率。</td>
<td>要花费相同的时间，要花费<strong>更多</strong>。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="Spring-Boot项目结构"><a href="#Spring-Boot项目结构" class="headerlink" title="Spring Boot项目结构"></a>Spring Boot项目结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/</span><br><span class="line">├── java/</span><br><span class="line">│   └── com.example/</span><br><span class="line">│       ├── controller/			</span><br><span class="line">│       ├── service/			</span><br><span class="line">│       ├── dao/				</span><br><span class="line">│       └── Application.java  # 启动类（含 @SpringBootApplication）</span><br><span class="line">├── resources/</span><br><span class="line">│   ├── static/</span><br><span class="line">│   ├── templates/</span><br><span class="line">│   └── application.properties</span><br><span class="line">└── test/java</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、Spring-Boot开发："><a href="#二、Spring-Boot开发：" class="headerlink" title="二、Spring Boot开发："></a>二、Spring Boot开发：</h3><ol>
<li><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul>
<li><p><strong><code>@SpringBootApplication</code></strong>：入口标识，是下列三个注解的整合：</p>
<ul>
<li><p><strong><code>@EnableAutoConfiguration</code></strong>：启用自动配置，自动配置类路径中存在的bean，自动配置Spring应用上下文，根据依赖自动加载组件（如数据源、Web MVC）‌；</p>
</li>
<li><p><strong><code>@ComponentScan</code></strong>：组件扫描，扫描软件包中的bean；</p>
</li>
<li><p><strong><code>@Configuration</code></strong>：声明配置类，替代传统XML配置文件，内部通过<code>@Bean</code>方法注册组件‌；</p>
</li>
</ul>
</li>
<li><p>‌**<code>@Component</code>**系列：将Java类标记为Bean</p>
<ul>
<li><p><strong><code>@Controller</code></strong>：控制层。通常与 <code>@RequestMapping</code> 注解一起使用。（返回字符串）</p>
</li>
<li><p><strong><code>@Service</code></strong>：业务层</p>
</li>
<li><p><strong><code>@Repository</code></strong>：持久层</p>
</li>
<li><p><strong><code>@RestController</code></strong>：组合<font color="red"><code>@Controller</code>与<code>@ResponseBody</code></font>，用于构建RESTful API‌</p>
</li>
</ul>
</li>
<li><p>路径映射：</p>
<ul>
<li><strong><code>@RequestMapping(&quot;/&quot;)</code></strong>：通用HTTP请求映射，支持定义路径、方法类型（GET&#x2F;POST等）‌；</li>
<li><strong><code>@GetMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</li>
<li><strong><code>@PostMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</li>
<li><strong><code>@PutMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</li>
<li><strong><code>@DeleteMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</li>
<li><strong><code>@PatchMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</li>
</ul>
</li>
<li><p>参数处理：</p>
<ul>
<li><p><strong><code>@PathVariable</code></strong>：用于从URL路径中提取参数（如&#x2F;user&#x2F;{id}）；</p>
</li>
<li><p><strong><code>@RequestHeader</code></strong>：用于获取有关HTTP请求标头的详细信息；</p>
</li>
<li><p><strong><code>@RequestAttribute</code></strong>：用于将方法参数绑定到请求属性；</p>
</li>
<li><p><strong><code>@RequestParam</code></strong>：用于从URL提取查询参数或表单数据‌；</p>
</li>
<li><p><strong><code>@RequestBody</code></strong>：将请求体<font color="red"><strong>反序列化</strong></font>为Java对象‌；（<strong>JSON&#x3D;&gt;对象</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123; </span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;User created&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>响应处理：</p>
<ul>
<li><p><strong><code>@ResponseBody</code></strong>：将方法返回值直接写入HTTP响应体（如JSON&#x2F;XML）‌<font color="red"><strong>序列化</strong></font>（<strong>对象&#x3D;&gt;JSON</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// 等效于@Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id); <span class="comment">// 返回User对象自动转为JSON</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>方向</strong>‌</th>
<th>‌<strong>作用阶段</strong>‌</th>
<th>‌<strong>数据转换类型</strong>‌</th>
<th>‌<strong>底层实现</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌**@ResponseBody**‌</td>
<td>服务端 → 客户端</td>
<td>处理‌<strong>响应</strong>‌时</td>
<td>‌<strong>序列化</strong>‌</td>
<td>使用<code>HttpMessageConverter</code>（如Jackson的<code>MappingJackson2HttpMessageConverter</code>）将Java对象转为JSON&#x2F;XML等格式</td>
</tr>
<tr>
<td>‌**@RequestBody**‌</td>
<td>客户端 → 服务端</td>
<td>处理‌<strong>请求</strong>‌时</td>
<td>‌<strong>反序列化</strong>‌</td>
<td>使用<code>HttpMessageConverter</code>将请求体中的JSON&#x2F;XML等数据转为Java对象</td>
</tr>
</tbody></table>
<ul>
<li><p><strong><code>@Required</code></strong>：在配置时使用必需的属性填充；</p>
</li>
<li><p><strong><code>@Autowired</code></strong>：自动注入依赖，默认按类型匹配‌；<strong>byType注入</strong></p>
</li>
<li><p><strong><code>@Qualifier</code></strong>：指定具体Bean名称解决注入歧义‌；</p>
</li>
<li><p><strong><code>@Resource</code></strong>：自动注入依赖，默认按名称匹配‌；<strong>byName注入</strong></p>
</li>
<li><p><strong><code>@Bean</code></strong> :在配置类中声明方法返回值作为Bean，支持自定义初始化逻辑‌；</p>
</li>
<li><p>外部配置：</p>
<ul>
<li><strong><code>@PropertySource</code></strong>：加载自定义配置文件（如<code>config.properties</code>）‌；</li>
<li><strong><code>@Value</code></strong>：注入配置文件中的属性值‌；</li>
</ul>
</li>
<li><p>条件化注册：</p>
<ul>
<li><strong><code>@ConditionalOnProperty</code></strong>：根据配置属性存在性决定是否注册Bean‌；</li>
<li><strong><code>@ConditionalOnClass</code></strong>：类路径存在指定类时生效‌；</li>
<li><strong><code>@Profile</code></strong>：根据环境激活配置（如<code>dev</code>&#x2F;<code>prod</code>）‌；</li>
</ul>
</li>
<li><p>其他：</p>
<table>
<thead>
<tr>
<th><strong>分类</strong>‌</th>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>功能</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>数据访问</strong>‌</td>
<td><code>@Transactional</code></td>
<td>声明事务管理‌</td>
</tr>
<tr>
<td>‌<strong>AOP</strong>‌</td>
<td><code>@Aspect</code>&#x2F;<code>@Around</code></td>
<td>定义切面与环绕通知‌</td>
</tr>
<tr>
<td>‌<strong>测试</strong>‌</td>
<td><code>@SpringBootTest</code></td>
<td>标记Spring Boot集成测试类‌</td>
</tr>
<tr>
<td>‌<strong>监控</strong>‌</td>
<td><code>@EnableActuator</code></td>
<td>启用健康检查、性能监控端点（需配合<code>spring-boot-actuator</code>依赖）‌</td>
</tr>
</tbody></table>
</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数据封装：jackson"><a href="#数据封装：jackson" class="headerlink" title="数据封装：jackson"></a>数据封装：jackson</h4><ul>
<li><p>项目开发的接口与接口之间，数据传输使用JSON格式，Spring Boot使用<font color="red"><strong>序列化‌@ResponseBody</strong></font>（<strong>对象&#x3D;&gt;JSON</strong>）和<font color="red"><strong>反序列化@RequestBody</strong></font>（<strong>JSON&#x3D;&gt;对象</strong>）实现数据的传输；</p>
<p>fastJson：阿里巴巴JSON处理工具；</p>
</li>
<li><p>状态码code、信息msg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = <span class="string">&quot;操作成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，可以人为指定状态码和提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(String code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回时，状态码为0，默认提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = <span class="string">&quot;操作成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回，状态码为0，人为指定提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(T data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jsonresult&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResultController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">    &quot;data&quot;:&#123;&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,</span></span><br><span class="line"><span class="comment">    &quot;msg&quot;:&quot;操作成功！&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;测试课&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userList, <span class="string">&quot;获取用户列表成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">	&quot;data&quot;:[</span></span><br><span class="line"><span class="comment">                &#123;&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,									&#123;&quot;id&quot;:2,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;达人课&quot;&#125;</span></span><br><span class="line"><span class="comment">		   ],</span></span><br><span class="line"><span class="comment">	&quot;msg&quot;:&quot;获取用户列表成功&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Map&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;用户&quot;</span>, user);</span><br><span class="line">        map.put(<span class="string">&quot;年龄&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;备注&quot;</span>, <span class="string">&quot;哈哈哈哈哈&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(map);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">	&quot;data&quot;:&#123;</span></span><br><span class="line"><span class="comment">			&quot;用户&quot;:&#123;&quot;id&quot;:1,&quot;password&quot;:&quot;&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,</span></span><br><span class="line"><span class="comment">			&quot;年龄&quot;:null,</span></span><br><span class="line"><span class="comment">			&quot;备注&quot;:&quot;哈哈哈哈哈&quot;</span></span><br><span class="line"><span class="comment">		   &#125;,</span></span><br><span class="line"><span class="comment">	&quot;msg&quot;:&quot;操作成功！&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="日志：slf4j框架（简单日志门面）-风格：logback-默认-或log4j-需要引入依赖"><a href="#日志：slf4j框架（简单日志门面）-风格：logback-默认-或log4j-需要引入依赖" class="headerlink" title="日志：slf4j框架（简单日志门面）|风格：logback(默认)或log4j(需要引入依赖)"></a>日志：<em>slf4j</em>框架（简单日志门面）|风格：<em>logback</em>(默认)或log4j(需要引入依赖)</h4><p><a href="https://springdoc.cn/spring-boot-logging-tutorial/#google_vignette">日志1</a></p>
<p><a href="https://springdoc.cn/spring-boot-logging/">日志2</a></p>
<p>阿里巴巴默认使用slf4j+logback</p>
<ul>
<li><p>步骤一：使用LoggerFactory 创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤二：日志的配置</p>
<ul>
<li><p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、日志级别设置</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">WARN          # 全局日志级别</span></span><br><span class="line"><span class="attr">logging.level.com.example</span>=<span class="string">DEBUG  # 指定包路径日志级别</span></span><br><span class="line"><span class="comment"># 支持的级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL‌</span></span><br><span class="line"><span class="comment"># 2、日志文件输出</span></span><br><span class="line"><span class="attr">logging.file.name</span>=<span class="string">/var/log/app.log  # 指定日志文件名（自动创建）</span></span><br><span class="line"><span class="attr">logging.file.max-size</span>=<span class="string">10MB          # 单个文件最大容量</span></span><br><span class="line"><span class="attr">logging.file.max-history</span>=<span class="string">30         # 保留历史文件数</span></span><br><span class="line"><span class="comment"># 3、日志格式自定义</span></span><br><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n  # 控制台格式</span></span><br><span class="line"><span class="attr">logging.pattern.file</span>=<span class="string">%d&#123;ISO8601&#125; [%t] %level %c&#123;0&#125; - %m%n  # 文件格式</span></span><br><span class="line"><span class="comment"># 在配置文件中启用异步日志，提升性能</span></span><br><span class="line"><span class="attr">logging.async.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">logging.async.queue-capacity</span>=<span class="string">1000  # 队列容量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yml</code> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">WARN</span>                 <span class="comment"># 全局日志级别</span></span><br><span class="line"><span class="comment"># 级别：TRACE&lt;DEBUG&lt; INFO(默认)&lt;WARN(低于 WARN 的信息都不会输出)&lt;ERROR&lt;FATAL。</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">DEBUG</span>         <span class="comment"># 指定包路径日志级别</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/var/log/app.log</span>     <span class="comment"># 日志文件路径（自动创建）</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">10MB</span>             <span class="comment"># 单个文件最大容量</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">30</span>            <span class="comment"># 保留历史文件数</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>  <span class="comment"># 控制台格式</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">&quot;%d&#123;ISO8601&#125; [%t] %level %c&#123;0&#125; - %m%n&quot;</span>                                 <span class="comment"># 文件格式</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">logback.xml</span>			<span class="comment"># 用来指定项目启动的时候，读取哪个配置文件</span></span><br><span class="line">  <span class="attr">async:</span>						<span class="comment"># 启用异步日志（需搭配spring-boot-starter-aop依赖）</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">queue-capacity:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Debug message&quot;</span>);  <span class="comment">// 输出调试信息</span></span><br><span class="line">        logger.info(<span class="string">&quot;Info message&quot;</span>);    <span class="comment">// 输出普通信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// 自动生成名为log的Logger对象</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;Warning message&quot;</span>);  <span class="comment">// 直接使用log对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日志使用模板</strong>：</p>
<ul>
<li><p>项目依赖（<code>pom.xml</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok简化日志代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Actuator用于动态调整日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	&lt;!-- 排除默认Logback依赖： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 切换为Log4j2依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	 --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日志配置文件（<code>application.yml</code>）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span>                  <span class="comment"># 全局默认级别</span></span><br><span class="line">    <span class="attr">com.example.demo:</span> <span class="string">DEBUG</span>      <span class="comment"># 指定包路径的日志级别</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">logs/app.log</span>          <span class="comment"># 日志文件路径（自动创建logs目录）</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">50MB</span>              <span class="comment"># 单个日志文件最大大小</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">30</span>             <span class="comment"># 保留最近30天的历史日志</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %highlight(%-5level) %cyan(%logger&#123;40&#125;) - %msg%n&quot;</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Actuator配置（动态调整日志级别）</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">loggers,health</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">loggers:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多环境配置示例</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">WARN</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/opt/logs/prod-app.log</span>  <span class="comment"># 生产环境日志路径</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日志代码示例（Controller层）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// Lombok自动生成log对象</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testLog</span><span class="params">()</span> &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Trace级别日志&quot;</span>);  <span class="comment">// 默认不输出</span></span><br><span class="line">        log.debug(<span class="string">&quot;Debug级别日志&quot;</span>);  <span class="comment">// 仅在com.example.demo包下输出</span></span><br><span class="line">        log.info(<span class="string">&quot;Info级别日志&quot;</span>);    <span class="comment">// 全局可见</span></span><br><span class="line">        log.error(<span class="string">&quot;Error级别日志&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;日志测试成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义日志配置（<code>logback-spring.xml</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件滚动策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logs/app-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境关闭DEBUG日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Spring-Boot项目属性"><a href="#Spring-Boot项目属性" class="headerlink" title="Spring Boot项目属性"></a>Spring Boot项目属性</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-properties.html">属性</a></p>
<ul>
<li><p><strong><code>applicaiton.properties</code>模板</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========== 服务器配置 ==========</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080                       # 应用启动端口</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/api       # 应用上下文路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 数据源配置 ==========</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">10  # Hikari连接池最大连接数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== JPA/Hibernate配置 ==========</span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update    # DDL策略（none/update/create-drop）</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true                # 显示SQL语句</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true  # 格式化SQL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 缓存配置 ==========</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=<span class="string">redis                 # 使用Redis缓存</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=                  <span class="string"># 密码（无密码则留空）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 日志配置 ==========</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">INFO</span></span><br><span class="line"><span class="attr">logging.level.com.example</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">logging.file.name</span>=<span class="string">logs/app.log          # 日志文件路径</span></span><br><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== Actuator监控配置 ==========</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">health,info,metrics</span></span><br><span class="line"><span class="attr">management.endpoint.health.show-details</span>=<span class="string">always  # 显示健康检查详情</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 安全配置 ==========</span></span><br><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>application.yml</code> 模板</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========== 服务器配置 ==========</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>                   <span class="comment"># 应用启动端口</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span>         <span class="comment"># 应用上下文路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 数据源配置 ==========</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">10</span>    <span class="comment"># Hikari连接池最大连接数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ========== JPA/Hibernate配置 ==========</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span>         <span class="comment"># DDL策略（none/update/create-drop）</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span>             <span class="comment"># 显示SQL语句</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span>       <span class="comment"># 格式化SQL</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ========== 缓存配置 ==========</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span>                <span class="comment"># 使用Redis缓存</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span>                  <span class="comment"># 密码（无密码则留空）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 日志配置 ==========</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">logs/app.log</span>         <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== Actuator监控配置 ==========</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">health,info,metrics</span>  <span class="comment"># 暴露的监控端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span>     <span class="comment"># 显示健康检查详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 安全配置 ==========</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><p>当开发人员开发新的接口或者更新旧的接口后，方便统一前后端API接口，方便前后端开发人员及时在线测试接口数据。</p>
<p><a href="https://zhuanlan.zhihu.com/p/98560871">使用指南</a></p>
</li>
<li><h4 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h4><p>SpringMVC中常用Thymeleaf模板引擎渲染页面；现代前后端分离的项目中，更多采用Vue+后端API开发。</p>
<table>
<thead>
<tr>
<th>‌<strong>方案</strong>‌</th>
<th>‌<strong>优势</strong>‌</th>
<th>‌<strong>典型场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>Thymeleaf</strong>‌</td>
<td>开发简单、与 Spring Boot 无缝集成</td>
<td>中小型后台系统、内部工具开发‌</td>
</tr>
<tr>
<td>‌<strong>Vue&#x2F;React + API</strong>‌</td>
<td>高交互性、组件化、团队协作友好</td>
<td>复杂业务系统、大型企业级平台‌</td>
</tr>
</tbody></table>
<p><a href="https://www.cnblogs.com/swzx-1213/p/12726432.html">使用指南</a></p>
</li>
<li><h4 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h4><ul>
<li><strong>自动重启</strong><ul>
<li>当类路径（<code>src/main/java</code>、<code>src/main/resources</code> 等）下的代码或配置文件发生修改时，DevTools 会自动触发应用重启。与传统重启不同，DevTools 通过类加载器替换实现‌<strong>快速重启</strong>‌（仅重新加载变更的类），大幅缩短等待时间‌。</li>
</ul>
</li>
<li><strong>实时重载</strong><ul>
<li>对静态资源（如 HTML、CSS、JS 文件）的修改会触发浏览器自动刷新，无需手动刷新页面即可查看更新效果‌。</li>
</ul>
</li>
<li><strong>开发环境优化</strong><ul>
<li>默认禁用模板引擎的缓存（如 Thymeleaf、Freemarker），确保修改后直接生效‌；</li>
<li>提供开发者友好的调试日志配置（如启用 Web 组的调试日志）‌。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>优势</strong>‌</th>
<th>‌<strong>典型用例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>本地开发调试</strong>‌</td>
<td>快速验证代码修改，减少手动操作成本</td>
<td>频繁修改业务逻辑或页面样式‌</td>
</tr>
<tr>
<td>‌<strong>团队协作开发</strong>‌</td>
<td>统一开发环境配置，提升协作效率</td>
<td>新成员快速搭建本地开发环境‌</td>
</tr>
<tr>
<td>‌<strong>轻量级热部署需求</strong>‌</td>
<td>无需复杂工具链即可实现基本热更新</td>
<td>中小型项目或原型开发‌</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>总结</strong>‌</p>
<p>Spring Boot DevTools 通过‌<strong>自动化重启与资源重载</strong>‌、‌<strong>开发环境优化</strong>‌等机制，显著提升本地开发效率，适用于需要快速迭代的场景‌。但需注意，其核心定位是‌<strong>开发辅助工具</strong>‌，不适用于生产环境‌。</p>
</li>
</ul>
</li>
<li><h4 id="‌Lombok"><a href="#‌Lombok" class="headerlink" title="‌Lombok"></a>‌<strong>Lombok</strong></h4><p>Lombok 通过注解自动生成 Java 类的 ‌样板代码‌（如 Getter&#x2F;Setter、构造函数、toString() 等），减少重复编码，提升开发效率‌；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 按需选择版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    <span class="comment">&lt;!-- 仅编译和测试阶段生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>@Data</code></td>
<td>生成所有字段的 Getter&#x2F;Setter、<code>equals</code>、<code>hashCode</code>、<code>toString</code></td>
<td><code>@Data public class User &#123; private String name; &#125;</code>‌</td>
</tr>
<tr>
<td><code>@Getter</code> &#x2F; <code>@Setter</code></td>
<td>单独生成 Getter 或 Setter 方法</td>
<td><code>@Getter @Setter private Integer id;</code>‌</td>
</tr>
<tr>
<td><code>@NoArgsConstructor</code></td>
<td>生成无参构造函数</td>
<td><code>@NoArgsConstructor public class User &#123;&#125;</code>‌</td>
</tr>
<tr>
<td><code>@AllArgsConstructor</code></td>
<td>生成全参构造函数</td>
<td><code>@AllArgsConstructor public class User &#123; ... &#125;</code>‌</td>
</tr>
<tr>
<td><code>@Builder</code></td>
<td>支持链式构建对象</td>
<td><code>User user = User.builder().name(&quot;Tom&quot;).build();</code>‌78</td>
</tr>
<tr>
<td><code>@Slf4j</code></td>
<td>自动注入日志对象 <code>log</code></td>
<td><code>@Slf4j public class Service &#123; ... log.info(&quot;message&quot;); &#125;</code>‌</td>
</tr>
</tbody></table>
</li>
<li><h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><ul>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com.example</span><br><span class="line">│   ├── exception          // 异常处理模块</span><br><span class="line">│   │   ├── GlobalExceptionHandler.java</span><br><span class="line">│   │   └── BusinessException.java</span><br><span class="line">│   └── Application.java   // Spring Boot 主类</span><br><span class="line">│   └── controller         // 测试接口</span><br><span class="line">│       └── TestController.java</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven 依赖 (<code>pom.xml</code>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全局异常处理器 (<code>GlobalExceptionHandler.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一错误响应格式</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ErrorResult</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ErrorResult</span><span class="params">(<span class="type">int</span> code, String message, String path)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.path = path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理自定义业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleBusinessException</span><span class="params">(BusinessException e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(e.getCode(), e.getMessage(), request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数校验异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleBindException</span><span class="params">(BindException e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getFieldError() != <span class="literal">null</span> </span><br><span class="line">                ? e.getFieldError().getDefaultMessage() </span><br><span class="line">                : <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(<span class="number">40000</span>, message, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理其他所有异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(<span class="number">50000</span>, <span class="string">&quot;系统繁忙&quot;</span>, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义业务异常 (<code>BusinessException.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试控制器 (<code>TestController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试业务异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">triggerError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">40001</span>, <span class="string">&quot;业务逻辑错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试参数校验</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@Min(value = 1, message = &quot;ID必须大于0&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试系统异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">triggerException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预期响应</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">40001</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;业务逻辑错误&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/error&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数校验异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">40000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ID必须大于0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/param&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">50000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统繁忙&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/exception&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>错误码范围</strong>‌</th>
<th>‌<strong>含义</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>40000-40099</td>
<td>客户端参数错误</td>
<td>40001&#x3D;手机号格式错误</td>
</tr>
<tr>
<td>40100-40199</td>
<td>认证&#x2F;权限问题</td>
<td>40101&#x3D;Token过期</td>
</tr>
<tr>
<td>40400-40499</td>
<td>资源不存在</td>
<td>40401&#x3D;用户不存在</td>
</tr>
<tr>
<td>50000-50099</td>
<td>服务端未分类错误</td>
<td>50000&#x3D;系统错误</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="JAR、WAR、EAR包"><a href="#JAR、WAR、EAR包" class="headerlink" title="JAR、WAR、EAR包"></a>JAR、WAR、EAR包</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-packaging.html">介绍</a></p>
</li>
<li><h4 id="SpringBoot事件监听机制"><a href="#SpringBoot事件监听机制" class="headerlink" title="SpringBoot事件监听机制"></a>SpringBoot<strong>事件监听机制</strong></h4><p><strong>事件监听机制</strong>‌是实现模块解耦、异步处理、系统监控的核心功能。</p>
<ul>
<li><p>原生事件监听</p>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>触发时机</th>
<th>典型场景</th>
</tr>
</thead>
<tbody><tr>
<td><code>ApplicationStartingEvent</code></td>
<td>应用启动开始时</td>
<td>初始化全局配置</td>
</tr>
<tr>
<td><code>ApplicationStartedEvent</code></td>
<td>应用上下文创建完成，CommandLineRunner 执行前</td>
<td>数据库连接预热</td>
</tr>
<tr>
<td><code>ApplicationReadyEvent</code></td>
<td>应用已完全启动，可接收外部请求</td>
<td>通知运维系统启动成功</td>
</tr>
<tr>
<td><code>ApplicationFailedEvent</code></td>
<td>启动过程中发生异常导致失败</td>
<td>发送告警通知</td>
</tr>
</tbody></table>
<p>监听实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppLifecycleListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式1：实现 ApplicationListener 接口</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StartingListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationStartingEvent&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationStartingEvent event)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;应用开始启动，环境：&quot;</span> + event.getSpringApplication().getEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式2：使用 @EventListener 注解（推荐）</span></span><br><span class="line">    <span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAppReady</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用已就绪，开始加载缓存数据...&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化缓存或预加载数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件开发</p>
<ul>
<li><strong>定义事件类</strong></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户注册成功事件（继承 ApplicationEvent）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRegisterEvent</span><span class="params">(Object source, String username)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>发布事件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// 用户注册逻辑...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户注册成功：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, username));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>监听自定义事件</strong></p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步监听（默认）</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleSyncEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[同步] 发送欢迎邮件至：&quot;</span> + event.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步监听（需启用@Async）</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAsyncEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[异步] 记录用户注册日志：&quot;</span> + event.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高级监听配置</p>
<ul>
<li><p><strong>异步事件处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>条件化监听</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.username.startsWith(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAdminEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;管理员账号注册：&quot;</span> + event.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Servlet 监听器扩展</p>
<ul>
<li><p><strong>监听 HTTP 请求生命周期</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLogListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求开始 =&gt; &quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求结束 =&gt; &quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册自定义 Servlet 监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;RequestLogListener&gt; <span class="title function_">loggingListener</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">RequestLogListener</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>生产环境最佳实践</p>
<ul>
<li><strong>事件监听与事务边界</strong></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAfterCommit</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 事务提交成功后发送通知</span></span><br><span class="line">    notificationService.sendPaymentSuccess(event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>监控集成（Prometheus + Grafana）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trackMetrics</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 上报事件到监控系统</span></span><br><span class="line">    metricsCounter.increment(<span class="string">&quot;spring.events.&quot;</span> + event.getClass().getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>调试与验证</p>
<ul>
<li><p><strong>单元测试示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testEventPublish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRegisterEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, <span class="string">&quot;testUser&quot;</span>);</span><br><span class="line">        eventPublisher.publishEvent(event);</span><br><span class="line">        <span class="comment">// 验证监听器是否执行...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>例子模板：</p>
<ul>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com.example</span><br><span class="line">    ├── Application.java            # Spring Boot主类</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── AsyncConfig.java        # 异步线程池配置</span><br><span class="line">    ├── event</span><br><span class="line">    │   ├── OrderPaidEvent.java     # 自定义事件（订单支付）</span><br><span class="line">    │   └── publisher</span><br><span class="line">    │       └── OrderEventPublisher.java  # 事件发布者</span><br><span class="line">    ├── listener</span><br><span class="line">    │   ├── EmailListener.java     # 邮件通知监听器</span><br><span class="line">    │   └── LogListener.java       # 日志记录监听器</span><br><span class="line">    └── controller</span><br><span class="line">        └── OrderController.java   # 测试接口</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven依赖 (<code>pom.xml</code>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主类 (<code>Application.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步监听支持</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件 (<code>OrderPaidEvent.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPaidEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Double amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPaidEvent</span><span class="params">(Object source, Long orderId, Double amount)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getOrderId</span><span class="params">()</span> &#123; <span class="keyword">return</span> orderId; &#125;</span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getAmount</span><span class="params">()</span> &#123; <span class="keyword">return</span> amount; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件发布者 (<code>OrderEventPublisher.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.event.publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventPublisher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEventPublisher</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishOrderPaid</span><span class="params">(Long orderId, Double amount)</span> &#123;</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(<span class="built_in">this</span>, orderId, amount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听器实现</p>
<ul>
<li>同步监听 - 邮件通知 (<code>EmailListener.java</code>)</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPaymentEmail</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[同步] 发送订单支付邮件：订单ID=%d, 金额=%.2f\n&quot;</span>, </span><br><span class="line">            event.getOrderId(), event.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>异步监听 - 日志记录 (<code>LogListener.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPayment</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[异步] 记录支付日志：订单ID=%d, 金额=%.2f\n&quot;</span>,</span><br><span class="line">            event.getOrderId(), event.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>异步线程池配置 (<code>AsyncConfig.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;event-async-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试接口 (<code>OrderController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.publisher.OrderEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderController</span><span class="params">(OrderEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payOrder</span><span class="params">(<span class="meta">@RequestParam</span> Long orderId, </span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam</span> Double amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟支付逻辑</span></span><br><span class="line">        eventPublisher.publishOrderPaid(orderId, amount);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;订单%d支付成功，金额%.2f&quot;</span>, orderId, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高级功能扩展</p>
<ul>
<li><p>条件过滤监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.amount &gt; 500&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLargePayment</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;大额支付预警：&quot;</span> + event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务边界监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCommitHandler</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;事务提交后处理：&quot;</span> + event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听应用生命周期事件</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAppReady</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;应用启动完成，开始初始化...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-caching.html">指南1</a></p>
<p><a href="https://www.cnblogs.com/JiangLai/p/9999811.html">指南2</a></p>
</li>
<li><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>**定义：**专门拦截对动态资源的后台请求，即拦截对控制层的请求，更多用于是判断用户是否有权限请求后台。</p>
<p><a href="https://blog.csdn.net/o0way0o/article/details/135320565">WebMvcConfigurer(可部分实现—推荐) 和 WebMvcConfigurationSupport(全部重写—复杂)</a></p>
<p><a href="https://developer.aliyun.com/article/1233256">WebMvcConfigurer 和 WebMvcConfigurationSupport 2</a></p>
<p><strong>包括：</strong></p>
<ul>
<li>定义拦截器（<code>implements HandlerInterceptor</code>）</li>
<li>配置拦截器（<code>implements WebMvcConfigurer</code>）。</li>
</ul>
<p><strong>方法：</strong></p>
<ul>
<li><p><code>preHandle(……)</code> 方法：</p>
<ul>
<li><p><strong>执行时机</strong>‌：在控制器方法执行前触发，用于请求预处理‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：权限校验、请求日志记录、参数预处理</p>
</li>
<li><p>‌返回值意义</p>
<ul>
<li><code>true</code>：继续执行后续拦截器和控制器方法</li>
<li><code>false</code>：立即中断请求处理流程‌</li>
</ul>
</li>
<li><p>‌<strong>典型应用</strong>‌：验证请求头中的Token有效性‌</p>
</li>
</ul>
</li>
<li><p><code>postHandle(……)</code> 方法：</p>
<ul>
<li><p>‌<strong>执行时机</strong>‌：在控制器方法执行后触发，视图渲染前执行‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：响应数据加工、修改ModelAndView对象</p>
</li>
<li><p>‌<strong>限制说明</strong>‌：在<code>@ResponseBody</code>或异步请求中不会触发‌</p>
</li>
<li><p>‌<strong>典型应用</strong>‌：统一添加响应头信息、修改返回数据格式‌</p>
</li>
</ul>
</li>
<li><p><code>afterCompletion(……)</code> 方法：</p>
<ul>
<li><p><strong>执行时机</strong>‌：在整个请求完成后触发（视图渲染后）‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：资源清理、最终日志记录、异常跟踪</p>
</li>
<li><p>‌<strong>执行条件</strong>‌：仅在<code>preHandle</code>返回<code>true</code>时执行‌</p>
</li>
<li><p>‌<strong>典型应用</strong>‌：记录请求总耗时、释放数据库连接资源‌</p>
</li>
</ul>
</li>
</ul>
<p><strong>方法执行顺序示意图：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preHandle → 控制器方法 → postHandle → 视图渲染 → afterCompletion</span><br></pre></td></tr></table></figure>

<p><strong>模板：</strong></p>
<ul>
<li><p>项目结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com.example</span><br><span class="line">    ├── Application.java          # Spring Boot主类</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── WebMvcConfig.java     # 拦截器配置</span><br><span class="line">    ├── interceptor</span><br><span class="line">    │   ├── LogInterceptor.java   # 日志拦截器</span><br><span class="line">    │   └── AuthInterceptor.java  # 权限拦截器</span><br><span class="line">    └── controller</span><br><span class="line">        └── UserController.java   # 测试接口</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志拦截器 (<code>LogInterceptor.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                             HttpServletResponse response, </span></span><br><span class="line"><span class="params">                             Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录请求开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 请求开始 =&gt; &#123;&#125; &#123;&#125;&quot;</span>, request.getMethod(), request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                           HttpServletResponse response,</span></span><br><span class="line"><span class="params">                           Object handler,</span></span><br><span class="line"><span class="params">                           ModelAndView modelAndView)</span> &#123;</span><br><span class="line">        <span class="comment">// 控制器方法执行后触发（视图渲染前）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">controllerTime</span> <span class="operator">=</span> System.currentTimeMillis() - (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录核心数据</span></span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 控制器处理完成 =&gt; 耗时&#123;&#125;ms | 状态码: &#123;&#125; | 视图: &#123;&#125;&quot;</span>, </span><br><span class="line">            controllerTime, </span><br><span class="line">            response.getStatus(),</span><br><span class="line">            (modelAndView != <span class="literal">null</span>) ? modelAndView.getViewName() : <span class="string">&quot;N/A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                Object handler, </span></span><br><span class="line"><span class="params">                                Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算请求处理时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 请求结束 =&gt; &#123;&#125;ms &#123;&#125;&quot;</span>, duration, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限拦截器 (<code>AuthInterceptor.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || !token.equals(<span class="string">&quot;123456&quot;</span>)) &#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;: 401, \&quot;msg\&quot;: \&quot;未授权访问\&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态资源拦截器 <code>StaticResourceInterceptor.java</code>（用于放行资源请求）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticResourceInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义静态资源路径前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] STATIC_PATHS = &#123;<span class="string">&quot;/css/&quot;</span>, <span class="string">&quot;/js/&quot;</span>, <span class="string">&quot;/images/&quot;</span>, <span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;/public/&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测是否为静态资源请求</span></span><br><span class="line">        <span class="keyword">for</span> (String prefix : STATIC_PATHS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.startsWith(prefix)) &#123;</span><br><span class="line">                <span class="comment">// 标记为已处理（实际开发中可添加缓存控制等逻辑）</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;static_resource&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 放行但不做后续处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 非静态资源继续后续流程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录拦截器 <code>LoginInterceptor.java</code>（用于会话验证）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从会话中获取登录标记</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;LOGIN_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未登录时重定向到登录页</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 中断请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器配置 (<code>WebMvcConfig.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.AuthInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.LogInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.StaticResourceInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LogInterceptor logInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthInterceptor authInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StaticResourceInterceptor staticResourceInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebMvcConfig</span><span class="params">(LogInterceptor logInterceptor, </span></span><br><span class="line"><span class="params">                       AuthInterceptor authInterceptor</span></span><br><span class="line"><span class="params">                       StaticResourceInterceptor staticResourceInterceptor,</span></span><br><span class="line"><span class="params">                       LoginInterceptor loginInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.logInterceptor = logInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.authInterceptor = authInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.staticResourceInterceptor = staticResourceInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.loginInterceptor = loginInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志拦截器（拦截所有请求）</span></span><br><span class="line">        registry.addInterceptor(logInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限拦截器（排除/login）</span></span><br><span class="line">        registry.addInterceptor(authInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">// 静态资源拦截器（优先注册）</span></span><br><span class="line">        registry.addInterceptor(staticResourceInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .order(<span class="number">0</span>); <span class="comment">// 最高优先级</span></span><br><span class="line">        <span class="comment">// 登录拦截器（后注册）</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                    <span class="string">&quot;/login&quot;</span>,         <span class="comment">// 登录页</span></span><br><span class="line">                    <span class="string">&quot;/api/login&quot;</span>,     <span class="comment">// 登录接口</span></span><br><span class="line">                    <span class="string">&quot;/error&quot;</span>,         <span class="comment">// 错误页</span></span><br><span class="line">                    <span class="string">&quot;/favicon.ico&quot;</span>,   <span class="comment">// 网站图标</span></span><br><span class="line">                    <span class="string">&quot;/static/**&quot;</span>,     <span class="comment">// 静态资源</span></span><br><span class="line">                    <span class="string">&quot;/public/**&quot;</span>      <span class="comment">// 公共资源</span></span><br><span class="line">                )</span><br><span class="line">                .order(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拦截顺序控制:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过order值控制执行顺序（值越小优先级越高）</span></span><br><span class="line">registry.addInterceptor(logInterceptor).order(<span class="number">1</span>);</span><br><span class="line">registry.addInterceptor(authInterceptor).order(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试接口 (<code>UserController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/profile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">profile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="集成Redis"><a href="#集成Redis" class="headerlink" title="集成Redis"></a>集成Redis</h4><p>Redis 是一种非关系型数据库（NoSQL）,NoSQL 是以 key-value 的形式存储的.</p>
<p>NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。</p>
<table>
<thead>
<tr>
<th><strong>对比维度</strong>‌</th>
<th>‌<strong>Redis</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>存储介质</strong>‌</td>
<td>基于内存（支持持久化到磁盘）</td>
<td>基于磁盘（数据持久化存储）</td>
</tr>
<tr>
<td>‌<strong>数据模型</strong>‌</td>
<td>键值对、哈希、列表、集合、有序集合等丰富数据结构</td>
<td>关系型数据模型（表格结构，支持 JOIN 和复杂查询）</td>
</tr>
<tr>
<td>‌<strong>读写性能</strong>‌</td>
<td>内存操作，QPS 可达 10万+（适合高并发场景）</td>
<td>依赖磁盘 I&#x2F;O，QPS 通常在千级（适合低频复杂操作）</td>
</tr>
<tr>
<td>‌<strong>事务支持</strong>‌</td>
<td>单命令原子性，无完整 ACID（仅支持简单批量操作）</td>
<td>完整 ACID 事务（支持复杂事务逻辑，如转账、库存扣减）</td>
</tr>
<tr>
<td>‌<strong>数据一致性</strong>‌</td>
<td>最终一致性（主从同步可能存在延迟）</td>
<td>强一致性（通过锁机制和事务保障）</td>
</tr>
<tr>
<td>‌<strong>持久化方式</strong>‌</td>
<td>RDB（快照）和 AOF（日志追加）两种方式</td>
<td>默认通过 binlog 和 redo log 持久化</td>
</tr>
<tr>
<td>‌<strong>扩展性</strong>‌</td>
<td>支持主从复制和集群分片（横向扩展）</td>
<td>通过主从复制、分库分表扩展（复杂度较高）</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>1. 缓存加速（热点数据） 2. 实时统计（计数器、排行榜） 3. 分布式锁、消息队列</td>
<td>1. 核心业务数据存储（订单、用户） 2. 复杂查询和事务处理 3. 数据分析</td>
</tr>
<tr>
<td>‌<strong>资源消耗</strong>‌</td>
<td>内存占用高（需控制数据量）</td>
<td>磁盘和 CPU 消耗为主（适合大数据量存储）</td>
</tr>
<tr>
<td>‌<strong>典型应用</strong>‌</td>
<td>用户会话缓存、商品秒杀库存、实时在线人数统计</td>
<td>银行交易记录、电商订单系统、用户关系管理</td>
</tr>
</tbody></table>
<p>‌<strong>协作模式示例</strong>:‌</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>Redis 角色</strong>‌</th>
<th>‌<strong>MySQL 角色</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>用户登录</td>
<td>缓存 Session 信息（快速验证）</td>
<td>存储用户详细信息（密码、地址等）</td>
</tr>
<tr>
<td>商品详情页</td>
<td>缓存商品基础数据（名称、价格）</td>
<td>存储库存、评价、交易记录等关联数据</td>
</tr>
<tr>
<td>订单支付</td>
<td>分布式锁（防止重复支付）</td>
<td>事务处理（扣减库存、生成订单记录）</td>
</tr>
</tbody></table>
<p>‌<strong>总结</strong>‌</p>
<ul>
<li>‌<strong>Redis 核心价值</strong>‌：内存高速读写、灵活数据结构，解决高并发实时性问题。</li>
<li>‌<strong>MySQL 核心价值</strong>‌：强一致性、复杂查询与事务，保障核心业务数据安全。</li>
<li>‌<strong>协作逻辑</strong>‌：Redis 作为 MySQL 的缓存层和实时数据处理层，提升整体性能与用户体验。</li>
</ul>
<p><strong>Spring Boot+Redis模板：</strong></p>
<ul>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com/example/demo</span><br><span class="line">│   ├── config/RedisConfig.java      # Redis配置</span><br><span class="line">│   ├── entity/User.java             # 实体类</span><br><span class="line">│   ├── service/UserService.java     # 业务逻辑</span><br><span class="line">│   └── DemoApplication.java         # 启动类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加依赖（<code>pom.xml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认使用 Lettuce 客户端 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
</li>
</ul>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># redis数据库索引(默认为0)，我们使用索引为3的数据库，避免和其他数据库冲突</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># redis服务器地址（默认为localhost）</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.73</span><span class="number">.12</span></span><br><span class="line">    <span class="comment"># redis端口（默认为6379）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># redis访问密码（默认为空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">pwd123</span></span><br><span class="line">    <span class="comment"># redis连接超时时间（单位毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># redis连接池配置</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="comment"># 最大可用连接数（默认为8，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最大空闲连接数（默认为8，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最小空闲连接数（默认为0，该值只有为正数才有用）</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>实体类（<code>User.java</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  <span class="comment">// 必须实现序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、Getter/Setter省略（需自行补充）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis配置类（解决序列化问题）（<code>RedisConfig.java</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Key 序列化为字符串</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// Value 序列化为 JSON</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决 Redis 存储乱码问题，支持 JSON 格式数据 ‌</p>
</li>
<li><p><strong>业务层使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(String userId, User user)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user:&quot;</span> + userId, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查用户是否存在</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">existsUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试用例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testStringOps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        opsForValue()：字符串操作</span></span><br><span class="line"><span class="comment">        opsForHash()：哈希表操作（如 hPut, hGetAll</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;demoKey&quot;</span>, <span class="string">&quot;Hello Redis&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;demoKey&quot;</span>);</span><br><span class="line">        System.out.println(value);  <span class="comment">// 输出: Hello Redis</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCRUD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsan@example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试保存</span></span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">foundUser</span> <span class="operator">=</span> userService.getUser(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询结果: &quot;</span> + foundUser.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试存在性检查</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户是否存在: &quot;</span> + userService.existsUser(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试删除</span></span><br><span class="line">        userService.deleteUser(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户删除后是否存在: &quot;</span> + userService.existsUser(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="ActiveMQ消息队列"><a href="#ActiveMQ消息队列" class="headerlink" title="ActiveMQ消息队列"></a>ActiveMQ消息队列</h4><p><a href="https://blog.csdn.net/spd96363/article/details/108645809">指南</a></p>
<ul>
<li><p>定义：</p>
<p>发送者把消息发送给消息服务器，消息服务器将消息存放在若干队列&#x2F;主题topic中，在合适的时候，消息服务器回将消息转发给接受者。在这个过程中，发送和接收是异步的，也就是发送无需等待，而且发送者和接受者的生命周期也没有必然的关系。</p>
<p>比较常见的消息队列有：ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ。</p>
<p>Spring Boot的starter中专门集成了ActiveMQ。</p>
</li>
<li><p>用途：</p>
<p>解决应用耦合、异步消息、流量削锋等问题。</p>
</li>
<li><p>分为队列Queue和主题模式Topic。</p>
</li>
<li><p>模板：</p>
<ul>
<li><p><strong>添加依赖（<code>pom.xml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 JSON 消息时需添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
</li>
</ul>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span>  <span class="comment"># ActiveMQ服务地址</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span>                        <span class="comment"># 默认用户名（无密码可留空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">packages:</span>                          <span class="comment"># 信任所有包（生产环境需限制）</span></span><br><span class="line">      <span class="attr">trust-all:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span>                   <span class="comment"># 禁用连接池（默认Lettuce）</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">  	<span class="attr">pub-sub-domain:</span> <span class="literal">false</span>			   <span class="comment"># 队列模式</span></span><br><span class="line">  	<span class="attr">pub-sub-domain:</span> <span class="literal">true</span>			   <span class="comment"># 主题模式</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>代码实现</strong></p>
<ul>
<li><p><strong>定义消息队列与主题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点对点队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">sampleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQQueue</span>(<span class="string">&quot;demo.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布/订阅主题</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Topic <span class="title function_">sampleTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQTopic</span>(<span class="string">&quot;demo.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消息生产者（发送消息）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送队列消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueueMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">&quot;demo.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送主题消息（JSON格式）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopicMessage</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">&quot;demo.topic&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消息消费者（监听消息）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列消息</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;demo.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveQueueMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到队列消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 监听主题消息（JSON反序列化）</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;demo.topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTopicMessage</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到主题消息: &quot;</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 持久化订阅（主题模式）</span></span><br><span class="line">    <span class="comment">// @JmsListener(destination = &quot;demo.topic&quot;, subscription = &quot;my-subscription&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActiveMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        producer.sendQueueMessage(<span class="string">&quot;Hello ActiveMQ&quot;</span>);</span><br><span class="line">        producer.sendTopicMessage(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><ul>
<li><p>定义：</p>
<p>Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障</p>
</li>
<li><p>Shiro和Spring Security：</p>
<p><a href="https://cloud.tencent.com/developer/article/1819901">Shiro和Spring Security选择</a></p>
<p><a href="https://developer.aliyun.com/article/1436929">Shiro和Spring Security选择</a></p>
<ul>
<li><p><strong>核心特性对比</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>Spring Security</strong>‌</th>
<th>‌<strong>Shiro</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位</strong>‌</td>
<td>Spring 官方推荐的安全框架，深度集成 Spring 生态</td>
<td>轻量级通用安全框架，支持多种应用场景</td>
</tr>
<tr>
<td>‌<strong>功能复杂度</strong>‌</td>
<td>功能强大，支持 OAuth2、LDAP、方法级权限控制等</td>
<td>功能简洁，核心聚焦认证与基础授权</td>
</tr>
<tr>
<td>‌<strong>配置复杂度</strong>‌</td>
<td>配置复杂，需理解过滤器链、安全上下文等概念</td>
<td>配置简单，API 设计直观</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>企业级应用、微服务架构、需复杂权限控制场景</td>
<td>小型项目、快速开发场景</td>
</tr>
<tr>
<td>‌<strong>Spring Boot 集成</strong>‌</td>
<td>原生支持，通过 Starter 快速集成</td>
<td>需手动配置，或使用第三方 Starter（简化有限）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h5 id="Shiro："><a href="#Shiro：" class="headerlink" title="Shiro："></a>Shiro：</h5><p><a href="https://blog.csdn.net/qq_48989313/article/details/119561860">指南</a></p>
<p><strong><code>ShiroFilterFactoryBean</code>会拦截前端请求交给<code>DefaultWebSecurityManager</code>，再交给<code>MyRealm</code>进行<font color="red"><em>认证和授权</em></font>处理</strong></p>
<ul>
<li><p>依赖<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>核心配置类<code>ShiroConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置过滤器链</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilter</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factory.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 拦截规则示例</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/admin/**&quot;</span>, <span class="string">&quot;roles[admin]&quot;</span>);</span><br><span class="line">        factory.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		anon:  无需认证就可以访问</span></span><br><span class="line"><span class="comment">		authc: 必须认证了才能访问</span></span><br><span class="line"><span class="comment">		user:  必须拥有 记住我 功能才能用</span></span><br><span class="line"><span class="comment">		perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">		role:  拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        </span><br><span class="line">        factory.setLoginUrl(<span class="string">&quot;/login&quot;</span>);    <span class="comment">// 登录页地址</span></span><br><span class="line">        factory.setUnauthorizedUrl(<span class="string">&quot;/index&quot;</span>); <span class="comment">// 权限不足跳转</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm realm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类<code>MyRealm.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证逻辑（登录验证）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPassword(), getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权逻辑（权限加载）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) principals.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">// 从数据库加载角色与权限</span></span><br><span class="line">        info.addRoles(user.getRoles());</span><br><span class="line">        info.setStringPermissions(userService.getUserPermissions(user.getId()));</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录控制器<code>AuthController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(<span class="meta">@RequestParam</span> String username, </span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam</span> String password)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);  <span class="comment">// 触发Realm认证逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/dashboard&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/login?error=&quot;</span> + e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><ol>
<li><h4 id="Spring-Boot跨域请求处理："><a href="#Spring-Boot跨域请求处理：" class="headerlink" title="Spring Boot跨域请求处理："></a>Spring Boot跨域请求处理：</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.cors.allowed-origins</span>=<span class="string">http://front.com</span></span><br><span class="line"><span class="attr">spring.mvc.cors.allowed-methods</span>=<span class="string">GET,POST</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot异步处理：默认启用异步支持。</p>
</li>
<li><h4 id="重定向和转发："><a href="#重定向和转发：" class="headerlink" title="重定向和转发："></a>重定向和转发：</h4><p><strong>请求次数与客户端行为</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>‌<strong>两次请求</strong>‌：客户端浏览器先向服务器发送请求，服务器返回新URL后，客户端再次发起新请求‌。</li>
<li>‌<strong>客户端驱动</strong>‌：由浏览器主动跳转，地址栏显示<strong>新URL‌</strong>。</li>
</ul>
</li>
<li>‌转发<ul>
<li>‌<strong>单次请求</strong>‌：服务器内部直接将请求转发到目标资源，客户端无感知‌。</li>
<li>‌<strong>地址栏不变</strong>‌：客户端浏览器始终显示<strong>原始请求的URL</strong>。</li>
</ul>
</li>
</ul>
<p><strong>数据传递能力</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>‌<strong>默认不传递数据</strong>‌：两次请求相互独立，需通过<code>Session</code>或<code>RedirectAttributes</code>显式传参‌。</li>
<li>示例：登录成功后重定向到主页，防止表单重复提交‌。</li>
</ul>
</li>
<li>转发<ul>
<li>通过<code>request</code>对象共享数据，所有参数和属性在转发链中可传递‌。</li>
<li>示例：用户权限验证后转发到不同页面，传递用户信息‌。</li>
</ul>
</li>
</ul>
<p> <strong>资源访问范围</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>可跳转到任意资源（包括外部站点），如<code>https://www.baidu.com</code>‌</li>
</ul>
</li>
<li>转发<ul>
<li>仅限当前Web应用内的资源，无法跨域‌。</li>
<li>示例：<code>/user/list</code>只能转发到同一项目的其他路径（如<code>/user/detail</code>）‌。</li>
</ul>
</li>
</ul>
<p>‌<strong>典型应用场景</strong>‌</p>
<ul>
<li>‌适用重定向的场景<ul>
<li>防止重复提交表单（如支付成功后跳转到结果页）‌。</li>
<li>资源迁移（旧URL重定向到新URL）‌。</li>
</ul>
</li>
<li>‌适用转发的场景<ul>
<li>服务器内部逻辑处理（如权限校验后显示不同视图）‌。</li>
<li>共享请求数据（如查询结果传递到展示页）‌。</li>
</ul>
</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>‌<strong>核心差异</strong>‌：转发是服务器内部跳转（<strong>单次请求</strong>），重定向是客户端跳转（<strong>两次请求</strong>）‌。</li>
<li><strong>‌选择原则</strong>：<ul>
<li>需跨域或避免重复提交 → 重定向‌。</li>
<li>需共享请求数据或保持URL隐蔽 → 转发‌。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="四、Spring-Boot-3-x-Shiro-MyBatis-Vue实现登录验证"><a href="#四、Spring-Boot-3-x-Shiro-MyBatis-Vue实现登录验证" class="headerlink" title="四、Spring Boot 3.x + Shiro+ MyBatis + Vue实现登录验证"></a>四、Spring Boot 3.x + Shiro+ MyBatis + Vue实现登录验证</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端:"></a>后端:</h4><ol>
<li>依赖配置（pom.xml）</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Shiro --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>数据库配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro_demo?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo.entity</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Shiro配置类（ShiroConfig.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Realm <span class="title function_">jwtRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtRealm</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtRealm</span>();</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">credentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(jwtRealm());</span><br><span class="line">        manager.setSessionManager(sessionManager());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionManager <span class="title function_">sessionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">        sessionManager.setSessionIdCookieEnabled(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/api/auth/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/api/auth/register&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		anon:  无需认证就可以访问</span></span><br><span class="line"><span class="comment">		authc: 必须认证了才能访问</span></span><br><span class="line"><span class="comment">		user:  必须拥有 记住我 功能才能用</span></span><br><span class="line"><span class="comment">		perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">		role:  拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义JWT Realm（JwtReal.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JwtUtil.getUsername(principals.toString());</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">// 添加角色权限</span></span><br><span class="line">        info.setRoles(userService.getUserRoles(username));</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span><br><span class="line">        <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> (String) token.getCredentials();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JwtUtil.getUsername(jwtToken);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!JwtUtil.verify(jwtToken, username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(<span class="string">&quot;Token验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(jwtToken, jwtToken, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT工具类（JwtUtil.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;your-secret-key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token, String username)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET_KEY)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">            <span class="keyword">return</span> claims.getSubject().equals(username);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(SECRET_KEY)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody()</span><br><span class="line">                .getSubject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户服务接口（UserService.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    Set&lt;String&gt; <span class="title function_">getUserRoles</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器（AuthController.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; login(<span class="meta">@RequestBody</span> LoginRequest request) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(request.username());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || !passwordMatches(request.password(), user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.generateToken(request.username());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(Map.of(</span><br><span class="line">            <span class="string">&quot;token&quot;</span>, token,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>, user.getUsername()</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">passwordMatches</span><span class="params">(String input, String stored)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现密码验证逻辑（需与Shiro加密方式一致）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sha256Hash</span>(input, <span class="literal">null</span>, <span class="number">3</span>).toString().equals(stored);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">LoginRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><ol>
<li><p>登录组件（Login.vue）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;handleLogin&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; setToken &#125; from &#x27;@/utils/auth&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [&#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          axios.post(&#x27;/api/auth/login&#x27;, this.form)</span><br><span class="line">            .then(res =&gt; &#123;</span><br><span class="line">              setToken(res.data.token);</span><br><span class="line">              this.$router.push(&#x27;/dashboard&#x27;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(() =&gt; &#123;</span><br><span class="line">              this.$message.error(&#x27;登录失败&#x27;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求拦截器（src&#x2F;utils&#x2F;request.js）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="title function_">getToken</span>();</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h4><ol>
<li><pre><code class="language-sql">CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    roles VARCHAR(200)
);

-- 测试用户（密码123456加密后）
INSERT INTO users(username, password, roles) 
VALUES (&#39;admin&#39;, &#39;a7d3df693039ef6e6aedb1e8b1234326f9d297c3b6d91d5d&#39;, &#39;admin,user&#39;);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 测试：</span><br><span class="line"></span><br><span class="line">1. ```http</span><br><span class="line">   POST http://localhost:8080/api/auth/login</span><br><span class="line">   Content-Type: application/json</span><br><span class="line">   </span><br><span class="line">   &#123;</span><br><span class="line">     &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">     &quot;password&quot;: &quot;123456&quot;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/blog2025.github.io/2025/04/07/SpringCloud/</url>
    <content><![CDATA[<p>title: Spring Cloud<br>date: 2025-04-07 11:38:41<br>categories:</p>
<ul>
<li>Spring<br>typora-root-url: SpringCloud</li>
</ul>
<p><a href="https://blog.csdn.net/cuiqwei/article/details/118329609">参考一-写的好</a></p>
<p><a href="https://c.biancheng.net/springcloud/micro-service.html">参考二-写的最好</a></p>
<p><a href="https://www.cainiaoya.com/spring/spring-cloud-jiaocheng.html">参考三</a></p>
<h3 id="一、微服务"><a href="#一、微服务" class="headerlink" title="一、微服务"></a>一、微服务</h3><ol>
<li>定义：微服务架构是一种应用程序开发风格，一个单一的应用程序被分解为多个小服务，这些小服务在各自独立的进程中运行，且通过轻量级通信机制（HTTP RESTFUL API）进行通讯。</li>
<li>特征：<ul>
<li><strong>易于维护</strong>：微服务规模小，应该只处理单个业务任务。</li>
<li><strong>独立的扩展和部署</strong>：微服务有其各自的部署模式和节奏。因此，每个服务都可以根据该服务应该满足的负载进行扩展。每个服务都可以根据其计划进行部署。<ul>
<li><em>每个服务都可以独立的部署到各种环境中。（开发、测试、生产环境）</em></li>
<li><em>每个服务都能独立启动或销毁而不会对其他服务造成影响。</em></li>
<li><em>当用户量和并发量的增加时，我们还可以将微服务集群化部署，从而增加系统的负载能力。</em></li>
</ul>
</li>
<li><strong>独立技术的使用</strong>：微服务的代码库与部署环境分离，因此可以根据用例决定微服务需要使用的语言和技术。无需在所有微服务中使用通用堆栈。<ul>
<li><em>即不同的服务可以采用不同的技术、编程语言。</em></li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/04/07/SpringCloud/1.png" alt="image-20250407115822298"></p>
<p><a href="https://www.processon.com/view/67b4259ababf5a32685b6884">图示来源</a></p>
<ol start="3">
<li><p>微服务和传统单体架构</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>微服务架构</th>
<th>单体架构</th>
</tr>
</thead>
<tbody><tr>
<td>团队规模</td>
<td>微服务架构可以将传统模式下的单个应用拆分为多个独立的服务，每个微服务都可以单独开发、部署和维护。每个服务从设计、开发到维护所需的团队规模小，团队管理成本小。</td>
<td>单体架构的应用程序通常需要一个大型团队，围绕一个庞大的应用程序工作，团队管理的成本大。</td>
</tr>
<tr>
<td>数据存储方式</td>
<td>不同的微服务可以使用不同的数据存储方式，例如有的用 Redis，有的使用 MYSQL</td>
<td>单一架构的所有模块共享同一个公共数据库，存储方式相对单一。</td>
</tr>
<tr>
<td>部署方式</td>
<td>微服务架构中每个服务都可以独立部署，也可以独立于其他服务进行扩展。如果部署得当，基于微服务的架构可以帮助企业提高应用程序的部署效率。</td>
<td>采用单体架构的应用程序的每一次功能更改或 bug 修复都必须对整个应用程序重新进行部署。</td>
</tr>
<tr>
<td>开发模式</td>
<td>在采用微服务架构的应用程序中，不同模块可以使用不同的技术或语言进行开发，开发模式更加灵活。</td>
<td>在采用单体架构的应用程序中，所有模块使用的技术和语言必须相同，开发模式受限。</td>
</tr>
<tr>
<td>故障隔离</td>
<td>在微服务架构中，故障被隔离在单个服务中，避免系统的整体崩溃。</td>
<td>在单体架构中，当一个组件出现故障时，故障很可能会在进程中蔓延，导致系统全局不可用。</td>
</tr>
<tr>
<td>项目结构</td>
<td>微服务架构将单个应用程序拆分为多个独立的小型服务，每个服务都可以独立的开发、部署和维护，每个服务都能完成一项特定的业务需求。</td>
<td>单体架构的应用程序，所有的业务逻辑都集中在同一个工程中。</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="二、Spring-Cloud是什么？"><a href="#二、Spring-Cloud是什么？" class="headerlink" title="二、Spring Cloud是什么？"></a>二、Spring Cloud是什么？</h3><ol>
<li><p>出现缘由：</p>
<ul>
<li>对于同一个微服务问题，各个公司提出的解决方案不同。</li>
<li>针对不同场景出现的不同问题的解决方案也不同。</li>
<li>一个微服务框架或解决方案都只能解决微服务中的某一个或某几个问题。</li>
</ul>
</li>
<li><p>定义：</p>
<ul>
<li>Spring Cloud 被称为构建分布式微服务系统的“全家桶”，它并不是某一门技术，而是一系列微服务解决方案或框架的有序集合。它将市面上成熟的、经过验证的微服务框架整合起来，并通过 Spring Boot 的思想进行再封装，屏蔽调其中复杂的配置和实现原理，最终为开发人员提供了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li>
</ul>
<p>即：<em><strong>Spring Cloud就是个容器，只是将第三方提出的微服务解决方案集成，不重复造轮子。</strong></em></p>
<ul>
<li>Spring Cloud 中包含了 spring-cloud-config、spring-cloud-bus 等近 20 个子项目，提供了服务治理、服务网关、智能路由、负载均衡、断路器、监控跟踪、分布式消息队列、配置管理等领域的解决方案。</li>
</ul>
</li>
<li><p>Spring Cloud核心组件</p>
<ul>
<li><strong>服务治理体系</strong>‌<ul>
<li>（1）服务注册与发现：<strong>Eureka</strong>&#x2F;Nacos‌</li>
<li>（6）配置中心：<strong>Spring Cloud Config</strong>&#x2F;Nacos Config</li>
<li>（5）服务网关：<strong>Gateway</strong>&#x2F;Zuul‌</li>
</ul>
</li>
<li><strong>服务通信机制</strong>‌<ul>
<li>（2）负载均衡：<strong>LoadBalancer(新版本自带这个)</strong>||<strong>Ribbon‌</strong>&#x2F;Dubbo‌</li>
<li>（3）服务调用：<strong>OpenFeign</strong>&#x2F;Dubbo‌</li>
<li>消息总线：Spring Cloud Bus‌❌‌</li>
</ul>
</li>
<li>‌<strong>容错处理机制</strong><ul>
<li>（4）熔断降级：<strong>Hystrix</strong>&#x2F;Sentinel‌</li>
<li>服务限流与流量控制‌</li>
</ul>
</li>
</ul>
</li>
<li><p>分布式系统</p>
<ul>
<li><strong>分布式事务</strong>‌<ul>
<li>掌握Seata框架的AT&#x2F;TCC模式‌</li>
<li>理解BASE理论（最终一致性）‌❌‌</li>
</ul>
</li>
<li>‌<strong>链路追踪与监控</strong>❌‌<ul>
<li>Sleuth+Zipkin实现调用链追踪‌❌‌‌</li>
<li>Admin+Prometheus监控系统健康状态‌❌‌‌</li>
</ul>
</li>
<li>‌<strong>安全认证体系</strong>❌‌‌<ul>
<li>OAuth2.0授权协议‌❌‌‌</li>
<li>JWT令牌的集成使用‌❌‌‌</li>
</ul>
</li>
</ul>
</li>
<li><p>云原生技术扩展</p>
<ul>
<li><strong>容器化部署</strong>‌<ul>
<li>Docker容器技术基础‌❓</li>
<li>Kubernetes集群管理‌❓</li>
</ul>
</li>
<li>‌<strong>服务网格</strong>❌‌‌<ul>
<li>了解Service Mesh架构原理‌❌‌‌</li>
<li>学习Istio的服务治理能力‌❌‌‌</li>
</ul>
</li>
</ul>
</li>
<li><p>消息队列：消息的搬运工（中间件）</p>
<ul>
<li><strong>RabbitMQ</strong>（7）</li>
<li><strong>Kafka‌</strong>（7）</li>
</ul>
</li>
</ol>
<h3 id="三、服务注册与发现"><a href="#三、服务注册与发现" class="headerlink" title="三、服务注册与发现"></a>三、服务注册与发现</h3><h4 id="Spring-Cloud-Eureka组件："><a href="#Spring-Cloud-Eureka组件：" class="headerlink" title="Spring Cloud Eureka组件："></a>Spring Cloud Eureka组件：</h4><ul>
<li><strong>Eureka Server</strong>：服务注册中心，当微服务启动时，会将自己的服务注册到 Eureka Server。</li>
<li><strong>Eureka Client</strong>：客户端，通常指的是微服务系统中各个微服务。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳（默认周期为 30 秒）。若 Eureka Server 在多个心跳周期内没有接收到某个 Eureka Client 的心跳，Eureka Server 将它从可用服务列表中移除（默认 90 秒）</li>
</ul>
<h4 id="Eureka原理："><a href="#Eureka原理：" class="headerlink" title="Eureka原理："></a>Eureka原理：</h4><ul>
<li><strong>服务注册中心（Register Service）</strong>：它是一个 <em>Eureka Server</em>，用于提供服务注册和发现功能。</li>
<li><strong>服务提供者（Provider Service）</strong>：它是一个 <em>Eureka Client</em>，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。</li>
<li><strong>服务消费者（Consumer Service）</strong>：它是一个 <em>Eureka Client</em>，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/07/SpringCloud/2" alt="image-20250407125804782"></p>
<h4 id="Eureka流程："><a href="#Eureka流程：" class="headerlink" title="Eureka流程："></a>Eureka流程：</h4><ol>
<li>搭建Eureka Server作为服务注册中心，</li>
<li>服务提供者Eureka Client启动，将当前提供者Client的信息以服务名name的方式注册到Server。</li>
<li>服务消费者Eureka Client启动，将当前消费者Client的信息以消费者name的方式注册到Server。</li>
<li>服务消费者会获得当前可用服务列表（包含所有注册到Server的Client即<strong>Provider</strong>和<strong>Consumer</strong>都有）。</li>
<li>服务消费者获得可用服务列表后，<strong>Consumer</strong>通过HTTP或者消息中间件远程调用<strong>Provider</strong>提供的服务。</li>
</ol>
<h4 id="Eureka注解："><a href="#Eureka注解：" class="headerlink" title="Eureka注解："></a>Eureka注解：</h4><ul>
<li>**<code>@EnableEurekaServer</code>**‌：服务器注解<ul>
<li>用于标记 Spring Boot 主启动类，声明当前应用为 Eureka 服务注册中心‌。</li>
<li>启用后，Eureka Server 会维护服务注册表，接收其他服务的注册信息，并提供服务发现能力。</li>
</ul>
</li>
<li>**<code>@EnableEurekaClient</code>**‌：服务提供者或消费者注解<ul>
<li>标记服务提供者或消费者，使其向 Eureka Server 注册自身信息（如 IP、端口等）并定期发送心跳‌。</li>
<li><strong>注：Spring Cloud 后续版本推荐使用通用注解 <code>@EnableDiscoveryClient</code> 替代，以支持多种注册中心（如 Nacos、Consul）‌</strong></li>
</ul>
</li>
<li><strong><code>@LoadBalanced</code></strong>：负载均衡<ul>
<li>结合 <code>RestTemplate</code> 使用，为 HTTP 请求添加客户端负载均衡能力（默认轮询策略），通过服务名调用其他注册的服务‌</li>
</ul>
</li>
</ul>
<h4 id="Eureka项目："><a href="#Eureka项目：" class="headerlink" title="Eureka项目："></a>Eureka项目：</h4><ul>
<li><p><strong>Eureka Server模板</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父工程依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（EurekaServerApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span>  <span class="comment"># Eureka 默认端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span>  <span class="comment"># 服务端标识</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 不向自身注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>        <span class="comment"># 不拉取注册表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># 单机模式自指向</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>  <span class="comment"># 关闭自我保护（测试环境推荐）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Eureka Client模板（服务提供者&#x2F;消费者）</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（ServiceApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>  <span class="comment">// 或 @EnableDiscoveryClient（兼容多注册中心）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment"># 服务端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">demo-service</span>  <span class="comment"># 服务唯一标识</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># 指向Eureka服务端</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment"># 注册IP而非主机名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span>  <span class="comment"># 实例ID格式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>服务调用示例（使用 RestTemplate）</strong></p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 开启客户端负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用其他服务示例（通过服务名访问）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://demo-service/api/data&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动服务器，访问<code>http://localhost:8761</code></p>
</li>
<li><p>启动客户端，确认服务 <code>demo-service</code> 已注册‌</p>
</li>
<li><p>跨服务调用测试，通过 <code>http://localhost:8080/api/call</code> 触发服务间调用，观察日志及响应结果‌</p>
</li>
<li><p><font color="red"><em><strong>若需集群部署，修改 <code>application.yml</code>的<code>defaultZone</code> 指向多个 Eureka 节点即可‌</strong></em></font></p>
<ul>
<li><p><strong>多节点互注册机制</strong></p>
<ul>
<li><p><strong>非分区集群（单Zone）</strong>：适用于单一机房场景，简化配置复杂度‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 节点1配置（端口8761）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://node2:8762/eureka,http://node3:8763/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># 允许向其他节点注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>        <span class="comment"># 拉取注册表信息</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>  <span class="comment"># 测试环境可关闭自我保护</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分区集群（Zone-Based）</strong>：客户端配置优先访问同区域节点，降低跨区调用延迟‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端配置示例</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">prefer-same-zone:</span> <span class="literal">true</span>  <span class="comment"># 优先选择同zone节点</span></span><br><span class="line">    <span class="attr">availability-zones:</span></span><br><span class="line">      <span class="attr">yantian:</span> <span class="string">http://node1:8761/eureka</span></span><br><span class="line">      <span class="attr">luohu:</span> <span class="string">http://node2:8762/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>集群</strong>这里又有了<strong>Ribbon 或 Spring Cloud LoadBalancer 实现客户端负载均衡‌</strong></p>
</li>
<li><p>启用 <strong>Actuator</strong> 健康端点，确保 Eureka 准确感知服务状态‌</p>
</li>
<li><p>通过 <strong>Kubernetes Service</strong> 暴露 Eureka 节点，实现动态节点发现‌</p>
</li>
<li><p>配置 <code>livenessProbe</code> 和 <code>readinessProbe</code> 保障容器化部署稳定性‌</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Eureka集群："><a href="#Eureka集群：" class="headerlink" title="Eureka集群："></a>Eureka集群：</h4><ul>
<li><p>缘由：若十几甚至几十个服务全部注册到同一个 Eureka Server 中，就极有可能导致 Eureka Server 因不堪重负而崩溃，最终导致整个系统瘫痪。</p>
</li>
<li><p>所有的Eureka Client、Eureka Server都会往Server中注册自己的信息。可通过配置保证不被注册。</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false 表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原理：</p>
<p> <img src="/blog2025.github.io/2025/04/07/SpringCloud/2.png"></p>
<p> 服务注册中心Server A和B互相注册为集群，服务提供者 A注册到Server A时，也会同步到Server B，当服务消费者 B请求服务时，一旦Server A崩溃，也可以去向Server B获取服务。</p>
<p> 注：服务消费者B也会注册到Server中，这里没画而已。</p>
</li>
</ul>
<h4 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h4><ul>
<li><p>目的：解决Eureka Server长时间未接收到Client的“心跳”，Server自动将该Client从服务列表删除</p>
</li>
<li><p>定义：保证所有Client信息存储到Server服务列表中，不被盲目删除。</p>
</li>
<li><p>applicaiton.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false # false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h3><h4 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h4><ul>
<li>通过Ribbon，我们可以将面向服务的 REST 模板（<code>RestTemplate</code>）请求转换为客户端负载均衡的服务调用。</li>
<li>几乎存在于每一个使用 Spring Cloud 构建的微服务中。</li>
<li>Spring Cloud 微服务之间的调用，API 网关的请求转发等内容都是由Ribbon实现的。</li>
<li>系统处理高并发、缓解网络压力和服务端扩容的重要手段之一。</li>
<li>**<code>@LoadBalanced</code>**开启负载均衡<ul>
<li>结合 <code>RestTemplate</code> 使用，为 HTTP 请求添加客户端负载均衡能力（默认轮询策略），通过服务名调用其他注册的服务‌</li>
</ul>
</li>
</ul>
<h4 id="负载均衡（Load-Balance）原理"><a href="#负载均衡（Load-Balance）原理" class="headerlink" title="负载均衡（Load Balance）原理"></a>负载均衡（Load Balance）原理</h4><ul>
<li>将用户的请求平摊分配到多个服务器上运行，以达到扩展服务器带宽、增强数据处理能力、增加吞吐量、提高网络的可用性和灵活性。</li>
</ul>
<h4 id="负载均衡类型"><a href="#负载均衡类型" class="headerlink" title="负载均衡类型"></a>负载均衡类型</h4><ul>
<li><p><strong>服务端负载均衡SLB</strong>（最常用）—— <strong>算法在中间件</strong></p>
<ul>
<li><p>服务端负载均衡是在客户端和服务端之间建立一个独立的<strong>中间件</strong>即<strong>负载均衡服务器（维护了一份可用服务端清单）</strong>，（该服务器通过<strong>心跳</strong>机制删除故障的服务端节点），该服务器可以是：</p>
<ul>
<li><p><strong>硬件设备F5</strong>（贵）</p>
</li>
<li><p><strong>软件Nginx</strong>（便宜）</p>
<ul>
<li>Nginx是一个高性能的HTTP(网站的发布处理)和反向代理web服务器(负载均衡)</li>
</ul>
</li>
</ul>
</li>
<li><p>当客户端发送请求时，该请求不会直接发送到服务端进行处理，而是全部交给负载均衡服务器，由负载均衡服务器按照某种算法（例如轮询(默认)、随机等），从其维护的可用服务清单中选择一个服务端，然后进行转发。</p>
</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/07/SpringCloud/3.png"></p>
<ul>
<li>特点：<ul>
<li>需要建立一个独立的负载均衡服务器。</li>
<li>负载均衡是在客户端<strong>发送请求后</strong>进行的，因此客户端并不知道到底是哪个服务端提供的服务。</li>
<li>可用服务端清单存储在负载均衡服务器上。</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/Jiao1225/article/details/122733116">更多</a></p>
</li>
<li><p><strong>客户端负载均衡</strong>：（少见）—— <strong>算法在客户端</strong></p>
<ul>
<li><p>客户端负载均衡是将负载均衡逻辑以<font color="red"><strong>代码</strong></font>的形式封装到客户端上</p>
</li>
<li><p>客户端收到服务端的可用服务清单后，客户端根据负载均衡<strong>算法</strong>来选择一个服务端进行访问。</p>
</li>
<li><p>特点：</p>
<ul>
<li>负载均衡器位于客户端，不需要单独搭建一个负载均衡服务器。</li>
<li>负载均衡是在客户端<strong>发送请求前</strong>进行的，因此客户端清楚地知道是哪个服务端提供的服务。</li>
<li>客户端都维护了一份可用服务清单，而这份清单都是从服务注册中心获取的。</li>
</ul>
</li>
</ul>
</li>
<li><p>对比：</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>服务端负载均衡</th>
<th>客户端负载均衡</th>
</tr>
</thead>
<tbody><tr>
<td>是否需要建立负载均衡服务器</td>
<td>需要在客户端和服务端之间建立一个独立的负载均衡服务器。</td>
<td>将负载均衡的逻辑以代码的形式封装到客户端上，因此不需要单独建立负载均衡服务器。</td>
</tr>
<tr>
<td>是否需要服务注册中心</td>
<td>不需要服务注册中心。</td>
<td>需要服务注册中心。  在客户端负载均衡中，所有的客户端和服务端都需要将其提供的服务注册到服务注册中心上。</td>
</tr>
<tr>
<td>可用服务清单存储的位置</td>
<td>可用服务清单存储在位于客户端与服务器之间的负载均衡服务器上。</td>
<td>所有的客户端都维护了一份可用服务清单，这些清单都是从服务注册中心获取的。</td>
</tr>
<tr>
<td>负载均衡的时机</td>
<td>先将请求发送到负载均衡服务器，然后由负载均衡服务器通过负载均衡算法，在多个服务端之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。  简单点说就是，先发送请求，再进行负载均衡。</td>
<td>在发送请求前，由位于客户端的服务负载均衡器（例如 Ribbon）通过负载均衡算法选择一个服务器，然后进行访问。  简单点说就是，先进行负载均衡，再发送请求。</td>
</tr>
<tr>
<td>客户端是否了解服务提供方信息</td>
<td>由于负载均衡是在客户端发送请求后进行的，因此客户端并不知道到底是哪个服务端提供的服务。</td>
<td>负载均衡是在客户端发送请求前进行的，因此客户端清楚的知道是哪个服务端提供的服务。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="负载均衡Ribbon实现服务Client调用"><a href="#负载均衡Ribbon实现服务Client调用" class="headerlink" title="负载均衡Ribbon实现服务Client调用"></a>负载均衡Ribbon实现服务Client调用</h4><ul>
<li><p>Ribbon 可以与 RestTemplate（Rest 模板）配合使用，以实现微服务之间的调用。</p>
<ul>
<li>RestTemplate：实现了对 HTTP 请求的封装，提供了一套模板化的服务调用方法。<ul>
<li>HEAD &#x3D;&#x3D;&#x3D; restTemplate.headForHeaders()</li>
<li>GET &#x3D;&#x3D;&#x3D; restTemplate.getForObject()</li>
<li>POST &#x3D;&#x3D;&#x3D; restTemplate.postForObject()</li>
<li>PUT &#x3D;&#x3D;&#x3D; restTemplate.put()</li>
<li>DELETE &#x3D;&#x3D;&#x3D; restTemplate.delete()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 开启客户端负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用其他服务示例（通过服务名访问）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-name/api&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法名</th>
<th>作用描述</th>
<th>示例代码</th>
</tr>
</thead>
<tbody><tr>
<td>‌**<code>getForObject</code>**‌</td>
<td>发送 GET 请求，直接返回响应体对象（自动反序列化）</td>
<td><code>String result = restTemplate.getForObject(&quot;http://service-name/api/data&quot;, String.class);</code></td>
</tr>
<tr>
<td>‌**<code>getForEntity</code>**‌</td>
<td>发送 GET 请求，返回包含响应头、状态码及响应体的 <code>ResponseEntity</code> 对象</td>
<td><code>ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</code></td>
</tr>
<tr>
<td>‌**<code>postForObject</code>**‌</td>
<td>发送 POST 请求，提交数据并返回响应体对象</td>
<td><code>User user = restTemplate.postForObject(url, requestBody, User.class);</code></td>
</tr>
<tr>
<td>‌**<code>postForEntity</code>**‌</td>
<td>发送 POST 请求，返回完整响应实体（包含头信息）</td>
<td><code>ResponseEntity&lt;User&gt; response = restTemplate.postForEntity(url, requestBody, User.class);</code></td>
</tr>
<tr>
<td>‌**<code>put</code>**‌</td>
<td>发送 PUT 请求，更新资源（无返回值）</td>
<td><code>restTemplate.put(&quot;http://service-name/api/update/&#123;id&#125;&quot;, updatedData, &quot;123&quot;);</code></td>
</tr>
<tr>
<td>‌**<code>delete</code>**‌</td>
<td>发送 DELETE 请求，删除资源</td>
<td><code>restTemplate.delete(&quot;http://service-name/api/delete/&#123;id&#125;&quot;, &quot;456&quot;);</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="负载均衡策略-算法"><a href="#负载均衡策略-算法" class="headerlink" title="负载均衡策略(算法)"></a>负载均衡策略(算法)</h4><p>Ribbon根据**<code>IRule</code>**接口实现7种实现类-策略</p>
<ul>
<li>轮询<code>RoundRobinRule</code>（默认）</li>
<li>随机<code>RandomRule</code></li>
<li>重试<code>RetryRule</code>：先轮询，失败后自动重试其他实例‌</li>
<li>加权响应<code>WeightedResponseTimeRule</code>：响应时间越短的实例权重越高，优先被选中‌</li>
<li>最佳可用<code>BestAvailableRule</code></li>
<li>可用性过滤<code>AvailabilityFilteringRule</code></li>
<li>区域避让规则 <code>ZoneAvoidanceRule</code>：综合评估区域（Zone）和实例性能，默认跨区域容错策略‌</li>
</ul>
<p><strong>切换策略</strong>：</p>
<ul>
<li><p>在服务消费者（客户端）的配置类<strong>ConfigBean.java</strong>中，将 <code>IRule</code> 的其他实现类注入到容器中即可。</p>
<ul>
<li><p><strong>全局策略配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonGlobalConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();  <span class="comment">// 切换为随机策略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务级策略配置</strong><code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">SERVICE-NAME:</span>  <span class="comment"># 目标服务名（如 ORDER-SERVICE）</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span>  <span class="comment"># 全类名策略</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义策略扩展</strong></p>
<p>继承 <code>AbstractLoadBalancerRule</code> 类，实现自定义逻辑后注册为 Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义算法（如按IP哈希）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="负载均衡注解"><a href="#负载均衡注解" class="headerlink" title="负载均衡注解"></a>负载均衡注解</h4><ul>
<li><p><strong><code>@LoadBalanced</code></strong></p>
<ul>
<li><p><strong>功能</strong>‌：标记 <code>RestTemplate</code> 或 <code>WebClient</code>，使其支持 Ribbon 的负载均衡能力‌。</p>
</li>
<li><p>‌<strong>使用场景</strong>‌：需在客户端发起服务调用时自动选择目标实例（如通过服务名调用）‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="meta">@LoadBalanced</span>  </span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌**<code>@RibbonClient</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：为指定服务自定义 Ribbon 配置（如负载均衡策略、Ping 检测规则等）‌。</p>
</li>
<li><p><strong>参数说明</strong>‌：</p>
<ul>
<li><code>name</code>：目标服务名称（如 <code>user-service</code>）‌。</li>
<li><code>configuration</code>：自定义配置类（需包含 <code>@Configuration</code> 注解）‌。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name = &quot;order-service&quot;, configuration = OrderRibbonConfig.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@RibbonClients</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：全局配置所有 Ribbon 客户端，或为多个服务批量指定配置类‌。</p>
</li>
<li><p>‌<strong>使用场景</strong>‌：统一多个服务的负载均衡策略（如默认规则、超时时间等）‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RibbonClients(defaultConfiguration = DefaultRibbonConfig.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalRibbonConfig</span> &#123;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="五、服务调用与负载均衡"><a href="#五、服务调用与负载均衡" class="headerlink" title="五、服务调用与负载均衡"></a>五、服务调用与负载均衡</h3><p><strong>Fegin这玩意就是用来代替RestTemplate发送Http请求的</strong></p>
<p>‌**Feign是服务的“通信员”**‌：优化内部服务间调用，提升开发效率‌</p>
<p>各种服务提供者注册到Eureka Server中，服务消费者获取注册到Eureka Server中的服务。（Ribbon负载均衡平衡消费者的获取服务的压力），Fegin负责替换这个过程中的HTTP请求方式（类似于起别名再调用）</p>
<ul>
<li><strong>Feign 就是让你的程序能像调用本地方法一样，轻松调用其他微服务的接口，无需手动处理复杂的 HTTP 请求</strong>‌。</li>
<li>比如：订单服务要查用户信息，不用自己写 HTTP 代码，直接像调用本地方法 <code>userService.getUser()</code> 就能搞定</li>
<li><strong>不用 Feign 的情况</strong>‌（原始方式）：<ul>
<li>你：自己查餐厅电话 → 打电话订餐 → 等送餐 → 拆包装 → 吃饭<br>（对应代码：手动拼接 URL → 发送 HTTP 请求 → 解析响应 → 处理数据）</li>
</ul>
</li>
<li><strong>用 Feign 的情况</strong>‌：<ul>
<li>你：打开外卖 App → 选菜品 → 下单 → 直接开吃<br>（对应代码：定义接口 → 调用方法 → 直接拿结果）</li>
</ul>
</li>
<li><font color="red"><strong>Feign 就是那个外卖 App</strong>‌，帮你隐藏了打电话、等送餐等繁琐步骤！</font></li>
</ul>
<table>
<thead>
<tr>
<th>场景</th>
<th>不用 Feign</th>
<th>用 Feign</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>调用其他服务的接口</strong>‌</td>
<td>手写 <code>RestTemplate</code> 发送 HTTP 请求</td>
<td>像调用本地方法一样写 <code>userClient.getUser()</code></td>
</tr>
<tr>
<td>‌<strong>处理不同服务的地址和端口</strong>‌</td>
<td>手动拼接 URL（容易出错）</td>
<td>自动根据服务名发现地址（如 <code>user-service</code>）</td>
</tr>
<tr>
<td>‌**负载均衡（多实例选择）**‌</td>
<td>自己写代码轮询或随机选实例</td>
<td>自动集成 Ribbon，默认轮询策略</td>
</tr>
<tr>
<td>‌<strong>处理超时、重试等复杂逻辑</strong>‌</td>
<td>每个调用都要重复写代码</td>
<td>统一配置，一次搞定</td>
</tr>
</tbody></table>
<p>例：</p>
<ul>
<li><p><strong>定义 Feign 客户端</strong>‌（告诉 Feign 你要调哪个服务）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明这是一个 Feign 客户端，调用名为 &quot;user-service&quot; 的服务</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">// 定义方法：调用 user-service 的 /user/&#123;id&#125; 接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">getUserName</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在业务中直接使用</strong>‌：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;  <span class="comment">// 注入 Feign 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printUserName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 像调用本地方法一样调用远程接口！</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userClient.getUserName(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户姓名：&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Spring-Cloud-Feign（已停止维护）"><a href="#Spring-Cloud-Feign（已停止维护）" class="headerlink" title="Spring Cloud Feign（已停止维护）"></a>Spring Cloud Feign（已停止维护）</h4><ul>
<li>Feign 对 Ribbon 进行了集成，利用 Ribbon 维护了一份可用服务清单，并通过 Ribbon 实现了客户端的负载均衡。</li>
<li>Feign 在 RestTemplate 的基础上做了进一步的封装，只需要<strong>声明一个接口</strong>并通过<strong>注解</strong>进行简单的配置即可实现对 HTTP 接口的绑定。</li>
<li>Feign 可以像调用本地方法一样来调用远程服务。</li>
<li>Feign 本身并<strong>不支持 Spring MVC 注解</strong></li>
</ul>
<h4 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud OpenFeign"></a>Spring Cloud OpenFeign</h4><ul>
<li>OpenFeign是 Spring Cloud 对 Feign 的二次封装，具有 Feign 的所有功能。</li>
<li><strong>增加了对 Spring MVC 注解的支持</strong>。</li>
</ul>
<h4 id="OpenFeign注解"><a href="#OpenFeign注解" class="headerlink" title="OpenFeign注解"></a>OpenFeign注解</h4><ul>
<li><p><code>@FeignClient</code> ：</p>
<ul>
<li><p>‌<strong>作用</strong>‌：声明一个远程服务调用的客户端接口，用于伪装 RESTful 请求为本地方法调用。</p>
</li>
<li><p><strong>属性</strong>：</p>
<ul>
<li><code>name / value</code>：目标服务名（如 <code>user-service</code>），需与注册中心的服务名一致</li>
<li><code>url</code>：直接指定服务 URL（适用于非注册中心场景，如 <code>http://api.example.com</code>）</li>
<li><code>configuration</code>：自定义配置类（如日志、编解码器等）</li>
<li><code>fallback</code>：定义服务降级类，处理调用失败时的默认逻辑（需在配置中启用 Hystrix熔断支持）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    name = &quot;payment-service&quot;,</span></span><br><span class="line"><span class="meta">    fallback = PaymentFallback.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pay&quot;)</span></span><br><span class="line">    String <span class="title function_">createPayment</span><span class="params">(<span class="meta">@RequestBody</span> PaymentRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>@EnableFeignClients</code></p>
<ul>
<li><p>‌<strong>作用</strong>‌：在 Spring Boot 启动类上激活 Feign 客户端扫描与代理生成。</p>
</li>
<li><p><strong>属性</strong>：</p>
<ul>
<li><code>basePackages</code>：指定扫描 Feign 接口的包路径</li>
<li><code>clients</code>：直接指定要启用的 Feign 客户端类</li>
<li><code>defaultConfiguration</code>：全局默认配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.example.clients&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>@RequestMapping</code></p>
<ul>
<li>‌<strong>作用</strong>‌：Spring MVC 中定义 REST 端点的基础注解，支持灵活配置 HTTP 方法和路径。</li>
</ul>
</li>
<li><p><code>@GetMapping</code></p>
<ul>
<li><code>@RequestMapping(method = RequestMethod.GET)</code></li>
</ul>
</li>
<li><p><code>@PostMapping</code></p>
<ul>
<li><code>@RequestMapping(method = RequestMethod.POST)</code></li>
</ul>
</li>
</ul>
<h4 id="OpenFeign实现远程服务调用"><a href="#OpenFeign实现远程服务调用" class="headerlink" title="OpenFeign实现远程服务调用"></a>OpenFeign实现远程服务调用</h4><h5 id="非集群，不采用负载均衡："><a href="#非集群，不采用负载均衡：" class="headerlink" title="非集群，不采用负载均衡："></a>非集群，不采用负载均衡：</h5><ol>
<li><p><strong>依赖pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!-- 与 Spring Boot 版本匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- OpenFeign 核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTTP 客户端优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册中心配置（Eureka Server）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务公共配置（application.yml）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span>  <span class="comment"># 服务名自行替换</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># Eureka 服务端地址</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># 注册到 Eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>        <span class="comment"># 拉取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span>      <span class="comment"># 日志级别</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>    <span class="comment"># 连接超时(ms)</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">8000</span>       <span class="comment"># 读取超时(ms)</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>               <span class="comment"># 启用 Apache HttpClient</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务提供者（注册到 Eureka）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 模型类（与消费者共享）</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. Controller 暴露接口</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Product</span>(id, <span class="string">&quot;手机&quot;</span>, <span class="number">2999.99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Feign 客户端（消费者调用方）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义 Feign 接口（需与服务提供者路径一致）</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;product-service&quot;)</span>  <span class="comment">// 对应 Eureka 中的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long productId)</span>;  <span class="comment">// 必须显式指定路径变量名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 启动类配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>      <span class="comment">// 启用 Eureka 客户端‌:ml-citation&#123;ref=&quot;2,7&quot; data=&quot;citationList&quot;&#125;</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>      <span class="comment">// 启用 Feign 客户端‌:ml-citation&#123;ref=&quot;2,4&quot; data=&quot;citationList&quot;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 业务调用示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productFeignClient.getProduct(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程调用结果：&quot;</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>流程：</p>
<ul>
<li>启动 ‌<strong>Eureka Server</strong>‌（默认端口 8761）‌</li>
<li>启动 ‌<strong>product-service</strong>‌（服务提供者）</li>
<li>启动 ‌<strong>order-service</strong>‌（服务消费者）</li>
<li>访问 <code>http://localhost:8761</code> 确认服务已注册</li>
<li>调用 <code>OrderService.createOrder()</code> 观察控制台输出</li>
</ul>
</li>
</ol>
<h5 id="集群，搭配负载均衡："><a href="#集群，搭配负载均衡：" class="headerlink" title="集群，搭配负载均衡："></a>集群，搭配负载均衡：</h5><p>旧版本需要显示引入Ribbon，新版本不需要，默认采用Spring Cloud的LoadBalancer</p>
<ol>
<li><p><strong>核心依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud 2023.0.x 依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 服务消费者/提供者公共依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Eureka 客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- OpenFeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- LoadBalancer（必须，替代 Ribbon） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册中心配置（Eureka Server）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">// 启用 Eureka 注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务提供者（Provider）（注册到 Eureka）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">product-service</span>  <span class="comment"># 服务名需唯一</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product-&quot;</span> + id + <span class="string">&quot; (from port:8081)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>OpenFeign 客户端接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;product-service&quot;)</span>  <span class="comment">// 指向 Eureka 中的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span>  <span class="comment">// 与服务提供者接口路径一致</span></span><br><span class="line">    String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long productId)</span>;  <span class="comment">// 必须显式指定参数名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a><strong>消费者配置</strong></h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>  <span class="comment"># 连接超时（ms）</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">10000</span>    <span class="comment"># 读取超时（ms）</span></span><br><span class="line">  <span class="attr">logging:</span></span><br><span class="line">  	<span class="attr">level:</span></span><br><span class="line">    	<span class="attr">org.springframework.cloud.openfeign:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类与调用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 启用 OpenFeign</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">product</span> <span class="operator">=</span> productFeignClient.getProduct(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程调用结果: &quot;</span> + product); </span><br><span class="line">        <span class="comment">// 输出示例: Product-1 (from port:8081)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>流程：</p>
<ul>
<li><p>‌<strong>启动顺序</strong>‌</p>
<p>Eureka Server（端口 8761）→ Product Service（端口 8081）→ Order Service（端口 8080）</p>
</li>
<li><p>‌<strong>检查服务注册</strong>‌<br>访问 <code>http://localhost:8761</code> 确认 <code>USER-SERVICE</code> 和 <code>ORDER-SERVICE</code> 已注册</p>
</li>
<li><p><strong>测试远程调用</strong>‌：<br>调用 <code>OrderService.createOrder()</code> 方法，观察控制台输出。</p>
</li>
<li><p>‌<strong>负载均衡测试</strong>‌：<br>启动第二个 Product Service 实例（修改端口为 8082），多次调用消费者接口，观察请求分发至不同端口。</p>
</li>
</ul>
</li>
<li><p>原理：</p>
<ul>
<li>‌<strong>服务注册</strong>‌：Provider 和 Consumer 启动时向 Eureka 注册自身信息。</li>
<li>‌<strong>服务发现</strong>‌：Consumer 通过 <code>@FeignClient</code> 调用 Provider 时，从 Eureka 获取服务实例列表。</li>
<li>‌<strong>负载均衡</strong>‌：Spring Cloud LoadBalancer 自动选择实例（默认轮询策略）。</li>
<li>‌<strong>HTTP 调用</strong>‌：OpenFeign 生成动态代理，将接口方法转换为实际 HTTP 请求。</li>
</ul>
</li>
</ol>
<h3 id="六、熔断降级（豪猪）"><a href="#六、熔断降级（豪猪）" class="headerlink" title="六、熔断降级（豪猪）"></a>六、熔断降级（豪猪）</h3><h4 id="缘由："><a href="#缘由：" class="headerlink" title="缘由："></a>缘由：</h4><ul>
<li>用户调用多个服务配合才能完成任务，当服务的其中一个或多个掉线时，用户请求会进入阻塞状态，等待掉线服务的恢复响应，只会导致服务器资源的损耗。</li>
<li>以此类推，当多个服务都要依赖这个掉线的服务，就会导致整个系统的崩溃，造成雪崩效应，最终导致系统瘫痪。</li>
<li>为了防止此类事件发生，微服务引入了熔断器。<ul>
<li>熔断器：<ul>
<li>当线路出现故障时，迅速切断电源以保护电路的安全</li>
<li>服务发生故障—&gt;返回一个符合预期的、可处理的降级响应<strong>FallBack</strong>，不是长时间的等待或者抛出调用方无法处理的异常。</li>
<li>保证了服务调用方的线程不会被长时间、不必要地占用，避免故障在微服务系统中的蔓延，防止系统雪崩效应的发生。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h4><ul>
<li>具有服务降级、服务熔断、线程隔离、请求缓存、请求合并以及实时故障监控等强大功能。</li>
<li>作用：<ul>
<li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li>
<li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li>
<li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个兜底方法，当请求失败后即调用该方法。</li>
<li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li>
<li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-服务降级"><a href="#Hystrix-服务降级" class="headerlink" title="Hystrix 服务降级"></a>Hystrix 服务降级</h4><ul>
<li>保证当前服务不受其他服务故障的影响，提高服务的健壮性。</li>
<li>使用场景：<ul>
<li>服务器压力剧增，对不重要、不紧急的服务进行简单处理，从而释放资源保证核心业务的正常运作。</li>
<li>某些服务不可用，避免长时期等待造成的服务卡顿和雪崩效用，主动执行备用的降级逻辑立刻返回一个友好的提示，以保障主体业务不受影响。</li>
<li>具体场景：<ul>
<li>程序运行异常</li>
<li>服务超时</li>
<li>熔断器处于打开状态</li>
<li>线程池资源耗尽</li>
</ul>
</li>
</ul>
</li>
<li>使用方法：<ul>
<li>重写 <code>HystrixCommand.getFallBack()</code> </li>
<li>或重写<code>HystrixObservableCommand.resumeWithFallback()</code></li>
</ul>
</li>
<li>服务降级 <code>FallBack</code>运行位置：<ul>
<li>服务端</li>
<li>或客户端</li>
</ul>
</li>
</ul>
<h4 id="‌Eureka-Hystrix-服务降级万能模板："><a href="#‌Eureka-Hystrix-服务降级万能模板：" class="headerlink" title="‌Eureka + Hystrix 服务降级万能模板："></a>‌Eureka + Hystrix 服务降级万能模板：</h4><ol>
<li><p><strong>Eureka 注册中心</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml（Eureka Server）</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">// 启用 Eureka 注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端降级（Provider）</strong></p>
<p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务提供者依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>     <span class="comment">// 注册到 Eureka</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">// 启用 Hystrix 熔断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>业务类实现降级</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法级降级（超时或异常触发）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">        fallbackMethod = &quot;getProductFallback&quot;,</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟超时（3秒 &gt; 2秒阈值触发降级）</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product-&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级方法（参数需与原方法一致）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProductFallback</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[服务端降级] 系统繁忙，请稍后重试 (ID:&quot;</span> + id + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>客户端降级（Consumer）</strong></p>
<p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务消费者依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Feign 客户端配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用 Feign+Hystrix 整合</span></span><br></pre></td></tr></table></figure>

<p><strong>Feign 接口与降级类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    name = &quot;product-service&quot;,</span></span><br><span class="line"><span class="meta">    fallback = ProductFeignClientFallback.class  // 指定降级类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductFeignClientFallback</span> <span class="keyword">implements</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[客户端降级] 商品服务不可用，ID:&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 启用 Feign</span></span><br><span class="line"><span class="meta">@EnableHystrix</span>       <span class="comment">// 启用 Hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断器全局配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span>     <span class="comment"># 触发熔断的最小请求数（默认20）</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">40</span>  <span class="comment"># 错误率阈值（40%）</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">5000</span>  <span class="comment"># 熔断后恢复时间（5秒）</span></span><br><span class="line">  <span class="attr">threadpool:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">coreSize:</span> <span class="number">10</span>  <span class="comment"># 线程池核心线程数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>启动顺序</strong>‌</p>
<ul>
<li>Eureka Server（8761端口）</li>
<li>Product Service（服务端，8081端口）</li>
<li>Order Service（客户端，8080端口）</li>
</ul>
</li>
<li><p>‌<strong>测试服务端降级</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问服务端接口（触发超时）</span></span><br><span class="line">http://localhost:8081/product/1</span><br><span class="line"><span class="comment"># 返回：[服务端降级] 系统繁忙，请稍后重试 (ID:1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>测试客户端降级</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 product-service 服务后调用消费者</span></span><br><span class="line">http://localhost:8080/order/create/1</span><br><span class="line"><span class="comment"># 返回：[客户端降级] 商品服务不可用，ID:1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断状态监控</strong></p>
<p>访问 <code>/actuator/hystrix.stream</code> 端点观察实时熔断数据。</p>
</li>
</ol>
<h4 id="Hystrix-全局降级"><a href="#Hystrix-全局降级" class="headerlink" title="Hystrix 全局降级"></a>Hystrix 全局降级</h4><ul>
<li><p><strong>注解式全局降级模板<code>@DefaultProperties</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 类上声明默认降级方法</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;globalFallback&quot;)</span> <span class="comment">// 核心注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 目标方法启用Hystrix</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">// 不指定fallbackMethod则自动触发全局降级</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">getPaymentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.queryAllPayments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义全局降级方法（需无参且返回类型兼容）</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">globalFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">500</span>, <span class="string">&quot;全局降级：服务暂时不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类需添加 <code>@EnableHystrix</code> 或 <code>@EnableCircuitBreaker</code></li>
<li><strong><code>@DefaultProperties</code> 作用于类级别，统一绑定降级逻辑</strong></li>
<li><strong>所有未指定 <code>fallbackMethod</code> 的 <code>@HystrixCommand</code> 方法均触发全局降级</strong></li>
</ul>
</li>
<li><p><strong>解耦式全局降级模板（推荐）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 实现Feign接口并定义全局降级逻辑</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">queryAllPayments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">503</span>, <span class="string">&quot;服务熔断：全局降级响应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. FeignClient绑定降级类</span></span><br><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    value = &quot;CLOUD-PAYMENT-SERVICE&quot;, </span></span><br><span class="line"><span class="meta">    fallback = OrderServiceFallback.class // 指定全局降级类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/list&quot;)</span></span><br><span class="line">    CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">queryAllPayments</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务代码与降级逻辑解耦</li>
<li>支持微服务间调用的统一降级处理</li>
<li>可通过 <code>FallbackFactory</code> 实现异常类型差异化处理</li>
</ul>
</li>
<li><p>‌<strong>降级方法优先级</strong></p>
<ul>
<li>方法级 <code>@HystrixCommand(fallbackMethod)</code> &gt; 类级 <code>@DefaultProperties</code> &gt; Feign客户端级 <code>fallback</code>‌</li>
<li>无fallback配置时直接抛出异常</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-服务熔断"><a href="#Hystrix-服务熔断" class="headerlink" title="Hystrix 服务熔断"></a>Hystrix 服务熔断</h4><ul>
<li><p>熔断机制是为了应对雪崩效应而出现的一种微服务链路保护机制。</p>
</li>
<li><p>某个微服务不可用或响应时间太长时，熔断器会暂时切断请求对该服务的调用，并快速返回一个友好的错误响应。在经历了一定的时间后，熔断器会再次检测该微服务是否恢复正常，若服务恢复正常则恢复其调用链路。</p>
</li>
<li><p>熔断状态：</p>
<ul>
<li>熔断关闭状态（Closed）：<ul>
<li>当所有服务访问正常时，熔断器处于关闭状态，服务调用方可以正常地对服务进行调用。</li>
</ul>
</li>
<li>熔断开启状态（Open）：<ul>
<li>默认情况下，在固定时间内接口调用出错比率达到一个阈值（例如 50%），熔断器会进入熔断开启状态。进入熔断状态后，后续对该服务的调用都会被切断，熔断器会执行本地的降级（FallBack）方法。</li>
</ul>
</li>
<li>半熔断状态（Half-Open）：<ul>
<li>在熔断开启一段时间之后，熔断器会进入半熔断状态。在半熔断状态下，熔断器会尝试恢复服务调用方对服务的调用，允许部分请求调用该服务，并监控其调用成功率。如果成功率达到预期，则说明服务已恢复正常，熔断器进入关闭状态；如果成功率仍旧很低，则重新进入熔断开启状态。</li>
</ul>
</li>
</ul>
</li>
<li><p>熔断配置实现</p>
<ul>
<li><p><strong>引入依赖</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务熔断实现模板</strong></p>
<p><strong>PaymentService 接口定义（Feign 客户端）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    value = &quot;CLOUD-PAYMENT-SERVICE&quot;, </span></span><br><span class="line"><span class="meta">    fallback = PaymentServiceFallback.class  // 指定全局降级实现类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">queryPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PaymentService 降级实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryPayment</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务熔断：支付服务不可用，已触发全局降级，ID：&quot;</span> + id;  <span class="comment">// 统一熔断响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 声明熔断规则</span></span><br><span class="line">    <span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">        fallbackMethod = &quot;paymentFallback&quot;, // 熔断后执行的方法</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;), // 启用熔断</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;), // 触发熔断的最小请求数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;), // 错误率阈值</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;) // 熔断持续时间</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentInfo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;非法参数&quot;</span>); <span class="comment">// 模拟异常触发熔断</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paymentService.queryPayment(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义降级方法（参数需与原方法一致）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentFallback</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务熔断：支付系统暂时不可用，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>流程</strong>：</p>
<ul>
<li><strong>正常调用</strong>‌<br>请求 <code>/order/payment/1</code> → 调用 <code>PaymentService.queryPayment(1)</code> → 返回正常支付信息‌</li>
<li>‌<strong>触发熔断</strong>‌<br>连续请求 <code>/order/payment/-1</code> → 服务提供方抛出异常 → 错误率超过阈值后，后续请求直接返回 <code>PaymentServiceFallback</code> 的全局降级响应‌</li>
<li><strong>半开状态恢复</strong>‌<br>熔断10秒后，允许少量请求尝试调用原服务，成功则关闭熔断‌</li>
</ul>
</li>
<li><p><strong>熔断参数说明</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>参数名</strong>‌</th>
<th>‌<strong>默认值</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>推荐设置</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>circuitBreaker.requestVolumeThreshold</code></td>
<td>20</td>
<td>触发熔断的最小请求数阈值‌</td>
<td>10~20（高并发场景）‌</td>
</tr>
<tr>
<td><code>circuitBreaker.sleepWindowInMilliseconds</code></td>
<td>5000</td>
<td>熔断持续时间（毫秒）后进入半开状态‌</td>
<td>10000（10秒）‌</td>
</tr>
<tr>
<td><code>circuitBreaker.errorThresholdPercentage</code></td>
<td>50%</td>
<td>错误百分比触发阈值‌</td>
<td>60%（敏感业务）‌</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h4 id="Hystrix故障监控"><a href="#Hystrix故障监控" class="headerlink" title="Hystrix故障监控"></a>Hystrix故障监控</h4><h5 id="Hystrix-故障监控"><a href="#Hystrix-故障监控" class="headerlink" title="Hystrix 故障监控"></a>Hystrix 故障监控</h5><ul>
<li><p>准实时的调用监控（Hystrix Dashboard）功能，Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表的形式展示给用户，包括每秒执行请求的数量、成功请求的数量和失败请求的数量等。</p>
</li>
<li><p><strong>指标采集端点</strong></p>
<p>Hystrix 默认通过 <code>/hystrix.stream</code> 端点暴露监控数据流，包含：</p>
<ul>
<li>熔断器开关状态（OPEN&#x2F;HALF-OPEN&#x2F;CLOSED）‌</li>
<li>请求总数（<code>requestCount</code>）与错误请求数（<code>errorCount</code>）‌</li>
<li>错误率（<code>errorPercentage</code>）‌</li>
<li>线程池负载（<code>activeThreads</code>）</li>
</ul>
<p><strong>监控数据聚合</strong>‌</p>
<ul>
<li>使用 ‌<strong>Turbine</strong>‌ 聚合多个服务的 <code>/hystrix.stream</code> 数据，统一展示到 Hystrix Dashboard，解决微服务集群监控分散问题‌</li>
</ul>
</li>
</ul>
<h5 id="Hystrix-故障监控模板"><a href="#Hystrix-故障监控模板" class="headerlink" title="Hystrix 故障监控模板"></a>Hystrix 故障监控模板</h5><p><strong>监控中心配置（monitor-service）</strong></p>
<ul>
<li><p>依赖pom.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--hystrix-dashboard 监控的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加 Spring Boot 的监控模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若需聚合多服务监控，添加 Turbine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  <span class="comment">// 启用监控面板</span></span><br><span class="line"><span class="meta">@EnableTurbine</span>           <span class="comment">// 启用聚合监控（可选）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixMonitorApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixMonitorApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置监控端点</strong>‌<strong>application.yml</strong>‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="attr">cluster-config:</span> <span class="string">default</span>  <span class="comment"># 集群名称</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">payment-service,order-service</span>  <span class="comment"># 需要监控的服务列表</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>被监控服务配置（以支付服务为例）</strong></p>
<ul>
<li><p>‌<strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册监控数据流 Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">// 启用熔断器件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">// 暴露监控端点</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; <span class="title function_">hystrixServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registration = </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>(), <span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断业务逻辑</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义熔断规则</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPayment&quot;,</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;5&quot;),  // 触发熔断的最小请求数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;),  // 熔断持续时间</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;metrics.rollingStats.timeInMilliseconds&quot;, value = &quot;10000&quot;)  // 统计窗口时长</span></span><br><span class="line"><span class="meta">        &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pay/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payment</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;非法参数&quot;</span>);  <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;支付成功，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fallbackPayment</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[Hystrix] 支付服务暂时不可用，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启用 Hystrix</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">hystrix.stream</span>  <span class="comment"># 开放监控端点</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span>  <span class="comment"># 超时时间</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>监控验证步骤</strong></p>
<ul>
<li><p><strong>访问 Dashboard</strong></p>
<p>打开浏览器输入 <code>http://localhost:9001/hystrix</code>，</p>
<p>输入框填写目标服务的监控流地址：<code>http://payment-service:8080/hystrix.stream</code></p>
</li>
<li><p><strong>触发熔断测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续发送错误请求</span></span><br><span class="line">curl http://localhost:8080/pay/-1</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>触发熔断观察指标</strong></p>
<ul>
<li>‌<strong>Circuit Breaker</strong>‌：显示熔断器状态（OPEN&#x2F;CLOSED）‌</li>
<li>‌<strong>Request Volume</strong>‌：实时请求量波动曲线‌</li>
<li>‌<strong>Error Percentage</strong>‌：错误率超过阈值时标红警告‌</li>
</ul>
</li>
<li><p><strong>聚合监控（Turbine）</strong></p>
<ul>
<li>访问 <code>http://localhost:9001/turbine.stream</code> 查看多个服务的聚合监控数据‌</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-注解"><a href="#Hystrix-注解" class="headerlink" title="Hystrix 注解"></a>Hystrix 注解</h4><ul>
<li><p><strong><code>@HystrixCommand</code></strong></p>
<ul>
<li><p>‌<strong>功能</strong>‌：标记需进行熔断保护的方法，定义熔断规则和降级逻辑‌。</p>
</li>
<li><p>‌关键参数</p>
<ul>
<li><code>fallbackMethod</code>：指定降级方法名（需与原方法同参数和返回类型）‌。</li>
<li><code>commandKey</code>：自定义命令名称（用于监控和配置）‌。</li>
<li><code>threadPoolKey</code>：定义隔离线程池（资源隔离）‌。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;getUserFallback&quot;,   </span></span><br><span class="line"><span class="meta">                commandProperties = &#123;  </span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)  </span></span><br><span class="line"><span class="meta">                &#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String userId)</span> &#123;  </span><br><span class="line">    <span class="comment">// 调用外部服务  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserFallback</span><span class="params">(String userId)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;fallback-user&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌**<code>@EnableHystrix</code>**‌</p>
<ul>
<li><p>‌<strong>功能</strong>‌：启用 Hystrix 功能，自动扫描 <code>@HystrixCommand</code> 注解‌。</p>
</li>
<li><p>‌<strong>使用位置</strong>‌：主启动类或配置类‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableHystrix</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(Application.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@EnableHystrixDashboard</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：启用 Hystrix 监控仪表盘（实时查看熔断器状态、请求流量等）‌。</p>
</li>
<li><p>‌<strong>访问地址</strong>‌：<code>http://localhost:port/hystrix</code>‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableHystrix</span>  </span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>@EnableCircuitBreaker</code></strong></p>
<ul>
<li><strong>功能</strong>‌：通用熔断器启用注解（Hystrix 是具体实现之一）‌。</li>
<li>‌与 <code>@EnableHystrix</code> 区别<ul>
<li><code>@EnableHystrix</code> 专用于 Hystrix，包含 <code>@EnableCircuitBreaker</code> 的功能。</li>
<li><code>@EnableCircuitBreaker</code> 更通用，支持其他熔断器实现（如 Resilience4j）‌。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>@HystrixProperty</code></strong></p>
<ul>
<li><p><strong>功能</strong>‌：在 <code>@HystrixCommand</code> 中定义熔断策略的具体参数‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(commandProperties = &#123;  </span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),  </span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;)  </span></span><br><span class="line"><span class="meta">&#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">highRiskMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="七、网关"><a href="#七、网关" class="headerlink" title="七、网关"></a>七、网关</h3><h4 id="API网关：中间件"><a href="#API网关：中间件" class="headerlink" title="API网关：中间件"></a>API网关：中间件</h4><ul>
<li><p><strong>缘由</strong>：不同机房的服务器系统（微服务）进行交流，需要知道对方的具体的IP地址、端口号等，<strong>API网关</strong>便用来解决这些问题便是用来解决存在的如下问题：</p>
<ul>
<li><p>当服务数量众多时，客户端需要维护大量的服务地址，这对于客户端来说，是非常繁琐复杂的。</p>
</li>
<li><p>在某些场景下可能会存在跨域请求的问题。</p>
</li>
<li><p>身份认证的难度大，每个微服务需要独立认证。</p>
</li>
</ul>
</li>
<li><p><strong>API网关</strong>：</p>
<ul>
<li><p>搭建在客户端和服务端微服务之间的服务，是微服务架构中的核心中间层。</p>
</li>
<li><p>可以用来解决权限验证、监控、缓存、请求路由等问题。</p>
</li>
<li><p>系统对外的唯一<font color="red"><strong>门卫</strong></font>，<strong>客户端</strong>—<em>请求发送</em>—&gt;<strong>API网关</strong>—<em>请求标识</em>—&gt;<strong>微服务实例</strong>。</p>
<p><img src="/blog2025.github.io/4" alt="image-20250408110352615"></p>
</li>
</ul>
</li>
<li><p><strong>API网关好处：</strong></p>
<ul>
<li>交互时，客户端<strong>只需要知道 API 网关地址</strong>即可，而不需要维护大量的服务地址，简化了客户端的开发。</li>
<li>客户端直接与 API 网关通信，能够减少客户端与各个服务的交互次数。</li>
<li>客户端与后端的服务耦合度降低。</li>
<li>节省流量，提高性能，提升用户体验。</li>
</ul>
</li>
<li><p>API网关方案：</p>
<ul>
<li>Spring Cloud Gateway</li>
<li>Spring Cloud Netflix Zuul‌</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h4><h5 id="Spring-Cloud-Gateway核心概念"><a href="#Spring-Cloud-Gateway核心概念" class="headerlink" title="Spring Cloud Gateway核心概念"></a>Spring Cloud Gateway核心概念</h5><ul>
<li><p><strong>路由转发</strong>：</p>
<ul>
<li><p>路由（Route）：</p>
<ul>
<li>包含：一个 ID、一个目标 URI、一组断言（Predicate）和一组过滤器（Filter）</li>
</ul>
</li>
<li><p><strong>断言（Predicate）</strong>：<strong>匹配器</strong></p>
<ul>
<li>路由转发的判断条件，我们可以通过 Predicate 对 HTTP 请求进行匹配。</li>
<li>匹配内容的包括：请求方式、请求路径、请求头、参数等，如果请求与断言匹配成功，则将请求转发到相应的服务。</li>
</ul>
</li>
<li><p><strong>过滤器（Filter）</strong>：<strong>精细化控制</strong></p>
<ul>
<li>对请求进行拦截和修改，还可以使用它对上文的响应进行再处理。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Route 和 Predicate 必须同时声明。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>过滤器链</strong>：</p>
<ul>
<li>‌<strong>局部过滤器</strong>‌：针对特定路由实现请求&#x2F;响应修改（如添加请求头、路径重写）‌</li>
<li><strong>全局过滤器</strong>‌：作用于所有路由，常用于鉴权、日志记录、限流等全局逻辑‌</li>
<li>支持自定义过滤器，并可通过 <code>Order</code> 注解控制执行顺序‌</li>
</ul>
</li>
<li><p><strong>高并发与异步支持</strong></p>
<ul>
<li>基于 WebFlux 和 Reactor 模型实现非阻塞 I&#x2F;O，性能优于 Zuul 1.x 的同步阻塞模型‌</li>
</ul>
</li>
<li><p>‌<strong>安全与流量治理</strong></p>
<ul>
<li>集成熔断（Hystrix）、限流（如基于 Redis 的令牌桶算法）、跨域处理（CORS 配置）等机制‌。</li>
<li>提供黑白名单控制、请求重试等策略‌。</li>
</ul>
</li>
</ul>
<h5 id="Spring-Cloud-Gateway特征："><a href="#Spring-Cloud-Gateway特征：" class="headerlink" title="Spring Cloud Gateway特征："></a>Spring Cloud Gateway特征：</h5><ul>
<li>能够在任意请求属性上匹配路由。</li>
<li>predicates（断言） 和 filters（过滤器）是特定于路由的。</li>
<li><font color="red"><strong>集成了 Hystrix 熔断器。</strong></font></li>
<li>集成了 Spring Cloud DiscoveryClient（服务发现客户端）。</li>
<li>易于编写断言和过滤器。</li>
<li>能够限制请求频率。</li>
<li><strong><font color="red">能够重写请求路径。</font></strong></li>
</ul>
<h5 id="Spring-Cloud-Gateway工作流程："><a href="#Spring-Cloud-Gateway工作流程：" class="headerlink" title="Spring Cloud Gateway工作流程："></a>Spring Cloud Gateway工作流程：</h5><p><img src="/blog2025.github.io/5" alt="image-20250408111926096"></p>
<ol>
<li>客户端发送请求到Gateway</li>
<li>Gateway通过Gateway Handler Mapping找到与请求匹配的路由，再将其发送给Gateway Web Handler。</li>
<li>Gateway Web Handler 通过指定的过滤器链（Filter Chain），将请求转发到实际的服务节点中，执行业务逻辑返回响应结果。</li>
<li>过滤器会在转发请求之前（pre）和【之后（post）|  在响应返回客户端之前】执行业务逻辑。（虚线）<ul>
<li>转发请求之前（pre）：<ul>
<li>对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。</li>
</ul>
</li>
<li>转发请求之后（post）|  在响应返回客户端之前：<ul>
<li>对响应进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>
</ul>
</li>
</ul>
</li>
<li>响应原路返回给客户端。</li>
</ol>
<h5 id="Spring-Cloud-Gateway—Predicate-断言："><a href="#Spring-Cloud-Gateway—Predicate-断言：" class="headerlink" title="Spring Cloud Gateway—Predicate 断言："></a>Spring Cloud Gateway—Predicate 断言：</h5><ul>
<li><p><strong>匹配器</strong>：</p>
<p>Spring Cloud Gateway 通过 Predicate 断言来实现 Route 路由的匹配规则。请求只有满足了 Predicate 的条件，才会被转发到指定的服务上进行处理。</p>
</li>
<li><p><strong>特点</strong>：</p>
<ul>
<li><p>通过 <strong>YAML 或属性文件</strong>定义路由规则</p>
</li>
<li><p>“一对多”：一个路由（Route）可以包含多个断言（Predicate）</p>
</li>
<li><p>一个请求想要转发到指定的路由上，就必须同时匹配路由上的<strong>所有</strong>断言。</p>
</li>
<li><p>当一个请求同时满足多个路由的断言条件时，请求只会被<strong>首个成功匹配</strong>的路由转发。</p>
<p><img src="/blog2025.github.io/2025/04/02/Hibernate/d/6.png" alt="image-20250408114439777"></p>
</li>
</ul>
</li>
<li><p><strong>通用配置模板</strong>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">          <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br><span class="line">          <span class="attr">predicates:</span>  			<span class="comment"># 断言列表，多个断言默认以 AND 逻辑组合</span></span><br><span class="line">            <span class="bullet">-</span> &#123;<span class="string">断言工厂名称</span>&#125;<span class="string">=参数1[,参数2...]</span>  <span class="comment"># 断言条件  </span></span><br><span class="line">            <span class="comment"># 或者</span></span><br><span class="line">            <span class="comment"># - Path=/api/**  </span></span><br><span class="line">  			<span class="comment"># - Method=GET  </span></span><br><span class="line">  			<span class="comment"># - Header=Content-Type,application/json  # 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类型</strong>：</p>
<ul>
<li><p>Path：请求路径匹配时，请求才能被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/api/orders/**</span>  <span class="comment"># 支持 Ant 风格路径表达式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Before：在特定时间之前的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Before=2025-09-06T16:00:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>After：在特定时间之后的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">After=2025-09-06T16:00:00+08:00[Asia/Shanghai]</span>  <span class="comment"># 时间格式需严格遵循</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Between：在特定时间之间的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Between=2025-09-01T00:00:00+08:00,2025-09-30T23:59:59+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Cookie：携带 Cookie 且 Cookie 的内容匹配上的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cookie=sessionId,</span> [<span class="string">a-zA-Z0-9</span>]&#123;<span class="number">16</span>&#125;  <span class="comment"># 正则校验 Cookie 值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌Query‌：匹配 URL 查询参数</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Query=userId,^\\d&#123;6&#125;$</span>  <span class="comment"># 正则校验参数值（如 6 位数字）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Header：请求头上携带属性的属性匹配上的，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\\d+</span>  <span class="comment"># 正则匹配（如数字 ID）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Method：只有匹配HTTP方法才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  <span class="comment"># 支持多方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Host‌：匹配请求域名</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Host=**.example.com</span>  <span class="comment"># 通配符匹配子域名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>默认 AND 逻辑</strong>‌：多个断言需同时满足</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/api/**</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=Content-Type,application/json</span>  <span class="comment"># 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>OR 逻辑实现</strong>‌：需通过 <code>MatchPredicate</code> 自定义组合（需编程扩展）‌</p>
</li>
<li><p><strong>自定义断言扩展</strong>：通过实现 <code>RoutePredicateFactory</code> 接口自定义断言逻辑‌</p>
</li>
</ul>
</li>
<li><p><strong>动态路由</strong>：</p>
<ul>
<li><p>配置模板：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 默认true，默认开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">          <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br><span class="line">          <span class="attr">predicates:</span>  			<span class="comment"># 断言列表，多个断言默认以 AND 逻辑组合</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span>  </span><br><span class="line">  			<span class="bullet">-</span> <span class="string">Method=GET</span>  </span><br><span class="line">  			<span class="bullet">-</span> <span class="string">Header=Content-Type,application/json</span>  <span class="comment"># 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>所谓动态路由：</p>
<p>Gateway会根据Eureka Server注册中心的维护列表的<strong>服务名</strong>（spring.application.name）作为路径创建动态路由进行转发。</p>
<p><strong>用注册中的service-name代替URL路径</strong></p>
</li>
<li><p>使用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">    <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>lb：uri 的协议，表示开启 Spring Cloud Gateway 的负载均衡功能。</p>
</li>
<li><p>service-name：服务名，Spring Cloud Gateway 会根据它获取到具体的微服务地址。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">lb://service-name</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Spring-Cloud-Gateway—Filter-过滤器："><a href="#Spring-Cloud-Gateway—Filter-过滤器：" class="headerlink" title="Spring Cloud Gateway—Filter 过滤器："></a>Spring Cloud Gateway—Filter 过滤器：</h5><ul>
<li><p><strong>Filter 过滤器用处</strong>：</p>
<p>对服务端提供的服务进行一定的校验逻辑，例如用户登陆状态校验、签名校验等。</p>
</li>
<li><p><strong>分类一</strong>：</p>
<ul>
<li>转发请求之前**（pre）**：<ul>
<li>对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。</li>
</ul>
</li>
<li>转发请求之后**（post）**|  在响应返回客户端之前：<ul>
<li>对响应后进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>分类二（按照作用范围划分）</strong>：</p>
<ul>
<li><p><strong>GatewayFilter 网关过滤器</strong>：应用在单个路由或者一组路由上的过滤器。</p>
<ul>
<li><p>对单个路由或者一组路由上传入的请求和传出响应进行拦截</p>
</li>
<li><p>可实现一些与业务无关的功能，比如<strong>登陆状态校验、签名校验、权限校验、日志输出、流量监控</strong>等。</p>
</li>
<li><p>通用模板：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span> </span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=xxxx</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=X-Request-Id,1024</span> <span class="comment">#过滤器工厂会在匹配的请求头加上一对请求头，名称为 X-Request-Id 值为 1024</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrefixPath=/dept</span> <span class="comment">#在请求路径前面加上 /dept</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>filters常见类型</strong>：</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>请求头操作</strong></p>
<table>
<thead>
<tr>
<th><strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>AddRequestHeader</code></td>
<td>添加请求头</td>
<td><code>- AddRequestHeader=X-Request-Color, Blue</code></td>
<td>透传鉴权 Token、链路追踪 ID 等</td>
</tr>
<tr>
<td><code>RemoveRequestHeader</code></td>
<td>移除请求头</td>
<td><code>- RemoveRequestHeader=Cookie</code></td>
<td>删除敏感头信息（如 Cookie）</td>
</tr>
<tr>
<td><code>SetRequestHeader</code></td>
<td>覆盖请求头值</td>
<td><code>- SetRequestHeader=Content-Type, application/json</code></td>
<td>强制修改请求头内容</td>
</tr>
<tr>
<td><code>AddRequestHeadersIfNotPresent</code></td>
<td>仅当不存在时添加请求头</td>
<td><code>- AddRequestHeadersIfNotPresent=X-Request-ID:123</code></td>
<td>避免重复添加头信息</td>
</tr>
</tbody></table>
<p><strong>路径与参数处理</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>RewritePath</code></td>
<td>正则重写请求路径</td>
<td><code>- RewritePath=/api/(?&lt;segment&gt;.*), /$\&#123;segment&#125;</code></td>
<td>路径版本转换（如 &#x2F;api&#x2F;v1 → &#x2F;v1）</td>
</tr>
<tr>
<td><code>PrefixPath</code></td>
<td>添加路径前缀</td>
<td><code>- PrefixPath=/v1</code></td>
<td>统一 API 版本前缀</td>
</tr>
<tr>
<td><code>StripPrefix</code></td>
<td>移除路径前缀</td>
<td><code>- StripPrefix=2</code></td>
<td>截断网关代理路径（如 &#x2F;gateway&#x2F;service → &#x2F;service）</td>
</tr>
<tr>
<td><code>SetPath</code></td>
<td>直接设置请求路径（支持占位符）</td>
<td><code>- SetPath=/api/&#123;segment&#125;</code></td>
<td>动态路径映射</td>
</tr>
<tr>
<td><code>AddRequestParameter</code></td>
<td>添加请求参数</td>
<td><code>- AddRequestParameter=region, cn</code></td>
<td>透传统一参数（如区域标识）</td>
</tr>
</tbody></table>
<p><strong>响应处理</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>AddResponseHeader</code></td>
<td>添加响应头</td>
<td><code>- AddResponseHeader=Cache-Control, no-cache</code></td>
<td>控制客户端缓存行为</td>
</tr>
<tr>
<td><code>RemoveResponseHeader</code></td>
<td>移除响应头</td>
<td><code>- RemoveResponseHeader=Server</code></td>
<td>隐藏下游服务信息（如 Server 头）</td>
</tr>
<tr>
<td><code>SetResponseHeader</code></td>
<td>覆盖响应头值</td>
<td><code>- SetResponseHeader=Content-Type, text/plain</code></td>
<td>强制修改响应内容类型</td>
</tr>
<tr>
<td><code>SetStatus</code></td>
<td>设置响应状态码</td>
<td><code>- SetStatus=401</code></td>
<td>鉴权失败拦截或自定义响应</td>
</tr>
<tr>
<td><code>DedupeResponseHeader</code></td>
<td>去重响应头（避免跨域重复头）</td>
<td><code>- DedupeResponseHeader=Access-Control-Allow-Origin</code></td>
<td>解决 CORS 头冲突</td>
</tr>
</tbody></table>
<p><strong>流量控制与容错</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>Retry</code></td>
<td>请求重试（支持条件配置）</td>
<td><code>- Retry=3</code> <code>- Retry=methods=GET, statuses=500</code></td>
<td>应对下游服务临时故障</td>
</tr>
<tr>
<td><code>RequestRateLimiter</code></td>
<td>请求速率限制（需配合 Redis 等）</td>
<td><code>- RequestRateLimiter=10, 20, #&#123;@userKeyResolver&#125;</code></td>
<td>API 限流（基于用户&#x2F;IP 等维度）</td>
</tr>
<tr>
<td><code>CircuitBreaker</code></td>
<td>熔断器（需 Resilience4J 或 Spring Cloud CircuitBreaker）</td>
<td><code>- CircuitBreaker=myCircuitBreaker</code></td>
<td>服务熔断降级</td>
</tr>
</tbody></table>
<p><strong>其他常用过滤器</strong></p>
<table>
<thead>
<tr>
<th><strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>SecureHeaders</code></td>
<td>自动添加安全头（如 CSP、XSS 防护）</td>
<td><code>- SecureHeaders</code></td>
<td>增强请求安全性</td>
</tr>
<tr>
<td><code>SaveSession</code></td>
<td>保留 WebSession 状态（如 Spring Session）</td>
<td><code>- SaveSession</code></td>
<td>分布式会话管理</td>
</tr>
<tr>
<td><code>RedirectTo</code></td>
<td>重定向到指定 URL（支持状态码）</td>
<td><code>- RedirectTo=302, https://example.com</code></td>
<td>临时或永久重定向</td>
</tr>
<tr>
<td><code>RewriteLocationResponseHeader</code></td>
<td>重写 Location 响应头中的路径</td>
<td><code>- RewriteLocationResponseHeader=AS_IN_REQUEST, Location, ,</code></td>
<td>反向代理路径修正</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>GlobalFilter 全局过滤器</strong> ：应用在所有的路由上的过滤器。</p>
<ul>
<li><p>实现一些统一化的业务功能，例如权限认证、IP 访问限制等。</p>
</li>
<li><p>Spring Cloud Gateway 为我们提供了多种默认的 GlobalFilter，例如：转发、路由、负载均衡等相关的全局过滤器。</p>
</li>
<li><p>通过实现<code>GlobalFilter</code>开启全局过滤器。</p>
</li>
<li><p><strong>全局过滤器模板</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;  </span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">        <span class="comment">// 1. 预处理逻辑（如鉴权、日志记录、修改请求头）  </span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();  </span><br><span class="line">        System.out.println(<span class="string">&quot;Global Filter - 请求路径: &quot;</span> + request.getPath());  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 示例：添加请求头  </span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">modifiedRequest</span> <span class="operator">=</span> request.mutate()  </span><br><span class="line">                .header(<span class="string">&quot;X-Global-Flag&quot;</span>, <span class="string">&quot;activated&quot;</span>)  </span><br><span class="line">                .build();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 传递修改后的请求到下游过滤器或服务  </span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange.mutate().request(modifiedRequest).build());  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 控制过滤器执行顺序（数值越小优先级越高）  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态拦截请求：</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 拦截请求并返回 401  </span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);  </span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> chain.filter(exchange);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 响应后处理：</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;  </span><br><span class="line">        <span class="comment">// 修改响应头  </span></span><br><span class="line">        exchange.getResponse().getHeaders().add(<span class="string">&quot;X-Processed-By&quot;</span>, <span class="string">&quot;GlobalFilter&quot;</span>);  </span><br><span class="line">    &#125;));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>GlobalFilter</code> 接口</strong>‌：定义过滤逻辑，作用于所有路由请求‌。</li>
<li>‌**<code>Ordered</code> 接口**‌：通过 <code>getOrder()</code> 方法控制过滤器执行顺序‌。</li>
<li>‌<strong>预处理&#x2F;后处理</strong>‌：可在 <code>filter()</code> 方法中实现请求修改、日志记录、鉴权拦截等逻辑‌。</li>
</ul>
</li>
<li><p><strong>全局过滤器配置（可选）</strong></p>
<p>若需动态配置全局过滤器参数（如开关状态），可结合 <code>@ConfigurationProperties</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;gateway.global-filter&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalFilterConfig</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enableLogging</span> <span class="operator">=</span> <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter/Setter  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> GlobalFilterConfig config;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (config.isEnableLogging()) &#123;  </span><br><span class="line">            <span class="comment">// 记录请求日志  </span></span><br><span class="line">            System.out.println(<span class="string">&quot;请求URI: &quot;</span> + exchange.getRequest().getURI());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>‌**配置示例（application.yml）**‌：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">yamlCopy Codegateway:</span>  </span><br><span class="line">  <span class="attr">global-filter:</span>  </span><br><span class="line">    <span class="attr">enable-logging:</span> <span class="literal">true</span>  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>全局过滤器与局部过滤器区别</strong></p>
<table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌**全局过滤器（GlobalFilter）**‌</th>
<th>‌**局部过滤器（GatewayFilter）**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>作用范围</strong>‌</td>
<td>所有路由自动生效‌</td>
<td>需在路由配置中显式绑定‌</td>
</tr>
<tr>
<td>‌<strong>配置方式</strong>‌</td>
<td>通过代码实现，无需 YAML 配置‌</td>
<td>需在 <code>routes.filters</code> 中声明‌</td>
</tr>
<tr>
<td>‌<strong>典型场景</strong>‌</td>
<td>统一鉴权、全局日志、跨域处理‌</td>
<td>路径重写、特定路由头修改‌</td>
</tr>
<tr>
<td>‌<strong>执行顺序控制</strong>‌</td>
<td>通过 <code>Ordered</code> 接口或 <code>@Order</code> 注解‌</td>
<td>按配置顺序执行‌</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway-整合配置模板（YAML）"><a href="#Spring-Cloud-Gateway-整合配置模板（YAML）" class="headerlink" title="Spring Cloud Gateway 整合配置模板（YAML）"></a>Spring Cloud Gateway 整合配置模板（YAML）</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 路由规则定义（可定义多个路由）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service_route_1</span>  <span class="comment"># 路由唯一标识（必填）  </span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-name</span>  <span class="comment"># 目标服务地址（支持负载均衡）  </span></span><br><span class="line">          </span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="comment"># 断言（Predicates）配置  </span></span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="comment"># 1. 路径匹配（Ant风格）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/v1/**</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 2. HTTP方法匹配（支持多方法）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 请求头正则匹配（示例：匹配含数字的X-Request-ID头）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-ID,</span> <span class="string">\\d+</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 请求时间窗口（示例：2023年9月期间生效）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2023-09-01T00:00:00+08:00,</span> <span class="number">2023-09-30T23:59:59+08:00</span>[<span class="string">Asia/Shanghai</span>]  </span><br><span class="line">          </span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="comment"># 过滤器（Filters）配置  </span></span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="attr">filters:</span>  </span><br><span class="line">            <span class="comment"># 1. 路径重写（正则替换）  </span></span><br><span class="line">            <span class="comment"># 示例：将 /api/v1/order/123 转换为 /order/123  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/v1/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 2. 添加请求头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Gateway-Request,</span> <span class="literal">true</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 移除敏感请求头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveRequestHeader=Cookie</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 添加全局参数  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=region,</span> <span class="string">cn</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 5. 截断路径前缀（示例：移除前两级路径）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=2</span>  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># ======================================  </span></span><br><span class="line">        <span class="comment"># 第二个路由示例（可扩展更多路由）  </span></span><br><span class="line">        <span class="comment"># ======================================  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth_route</span>  </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://auth-service:8080</span>  </span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=token,</span> <span class="string">.+</span>  <span class="comment"># 必须携带token参数  </span></span><br><span class="line">          <span class="attr">filters:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetResponseHeader=X-Auth-Status,</span> <span class="string">verified</span>  <span class="comment"># 强制设置响应头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrefixPath=/validate</span>  <span class="comment"># 添加路径前缀（/auth → /validate/auth）  </span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 全局默认过滤器（作用于所有路由）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">default-filters:</span>  <span class="comment"># 跨域处理</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Origin</span>  <span class="comment"># 跨域头去重  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Gateway-Response,</span> <span class="string">processed</span>  </span><br><span class="line"></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 高级配置（可选）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">discovery:</span>  </span><br><span class="line">        <span class="attr">locator:</span>  </span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 开启服务发现自动路由（需配合注册中心）  </span></span><br></pre></td></tr></table></figure>

<p><strong>配置注释说明</strong></p>
<ol>
<li><strong>路由核心属性‌</strong></li>
</ol>
<ul>
<li><p>‌<strong>id‌</strong>：路由唯一标识符（如 <code>order_route</code>），用于区分不同路由规则。</p>
</li>
<li><p><strong>uri‌</strong>：目标服务地址，支持：</p>
<ul>
<li>直接URL：<code>http://192.168.1.100:8080</code></li>
<li>负载均衡：<code>lb://service-name</code>（需集成服务发现组件如Nacos）</li>
</ul>
</li>
<li><p><strong>predicates‌</strong>：断言列表，‌所有条件需同时满足‌（逻辑AND），常用断言：</p>
<ul>
<li>‌Path‌：Ant风格路径匹配（支持*和**通配符）。</li>
<li>‌Header‌：正则匹配请求头值（如 <code>Header=X-Request-ID, \d+</code>）。</li>
<li>‌Query‌：校验URL查询参数（如 <code>Query=token, .</code>+ 表示必须携带token参数）。</li>
</ul>
</li>
<li><p><strong>‌filters‌</strong>：过滤器链，按定义顺序执行请求&#x2F;响应处理，常用操作：</p>
<ul>
<li>‌AddRequestHeader‌：添加请求头（透传数据到下游服务）。</li>
<li>‌RewritePath‌：正则重写路径（需转义<code>$</code>为<code>$\</code>）。</li>
<li>‌StripPrefix‌：移除路径前缀（如将 <code>/gateway/service/hello</code> 转为 <code>/hello</code>）。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><strong>全局过滤器‌</strong></p>
<ul>
<li><p>‌default-filters‌：应用于所有路由的过滤器（如统一添加安全头）。</p>
<ul>
<li><p>‌DedupeResponseHeader‌：解决跨域头重复问题（如 <code>Access-Control-Allow-Origin</code>）。</p>
</li>
<li><p>‌AddResponseHeader‌：统一添加响应头（如标记网关处理状态）。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>高级特性‌</strong></p>
</li>
</ol>
<ul>
<li><p>‌服务发现集成‌：通过 <code>discovery.locator.enabled=true</code> 开启自动路由（需引入 <code>spring-cloud-starter-gateway</code> 及注册中心）。</p>
</li>
<li><p>‌自定义过滤器‌：通过实现 <code>GatewayFilterFactory</code> 接口扩展（如日志、限流等）</p>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway-开发通用模板"><a href="#Spring-Cloud-Gateway-开发通用模板" class="headerlink" title="Spring Cloud Gateway 开发通用模板"></a>Spring Cloud Gateway 开发通用模板</h4><ol>
<li><p><strong>核心依赖（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Gateway 必须依赖 WebFlux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选：Redis 用于限流、熔断等场景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>主启动类（GatewayApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>路由配置（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api_v1_route</span>  <span class="comment"># 路由唯一标识</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://backend-service:8080</span>  <span class="comment"># 目标服务地址</span></span><br><span class="line">          <span class="attr">predicates:</span>  <span class="comment"># 断言条件（全部满足才路由）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/v1/**</span>  <span class="comment"># 路径匹配</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  <span class="comment"># 请求方法限制</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment"># 移除前缀（如 /api/v1/xxx → /xxx）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-Gateway,</span> <span class="string">enabled</span>  <span class="comment"># 添加请求头</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">redirect_route</span>  <span class="comment"># 重定向示例</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://old-service:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/old/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">http://new-service:8080/new</span>  <span class="comment"># 302重定向</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rate_limit_route</span>  <span class="comment"># 限流示例（需配合Redis）</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://limited-service:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/public-api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span>  <span class="comment"># 每秒10个请求</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span>  <span class="comment"># 令牌桶容量</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span>  <span class="comment"># 按IP限流</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 全局默认过滤器（作用于所有路由）</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Global-Filter,</span> <span class="string">processed</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>全局过滤器（GlobalFilter）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局鉴权过滤器（Order数值越小优先级越高）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> exchange.getRequest().getHeaders();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 模拟校验逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 拦截请求并返回401</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 传递请求到下一个过滤器或服务</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 最高优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义过滤器（GatewayFilterFactory）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义请求日志过滤器</span></span><br><span class="line"><span class="comment"> * 配置用法：- Log=pre,post</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;LogGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogGatewayFilterFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 1. 预处理逻辑（在请求转发前执行）</span></span><br><span class="line">            <span class="keyword">if</span> (config.isPreLog()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求进入：&quot;</span> + exchange.getRequest().getURI());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 转发请求并处理响应</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isPostLog()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;响应状态：&quot;</span> + exchange.getResponse().getStatusCode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置类（通过YAML传递参数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> preLog;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> postLog;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Getter &amp; Setter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>限流维度解析器（KeyResolver）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按客户端IP限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">ipKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">            exchange.getRequest().getRemoteAddress().getAddress().getHostAddress()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按用户ID限流（需从请求头或Token中提取）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">            exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;X-User-Id&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>常用配置项（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网关通用配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span>  <span class="comment"># 限流/熔断依赖Redis</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">connect-timeout:</span> <span class="number">1000</span>  <span class="comment"># 连接超时（ms）</span></span><br><span class="line">        <span class="attr">response-timeout:</span> <span class="string">5s</span>   <span class="comment"># 响应超时</span></span><br><span class="line">      <span class="attr">discovery:</span>  <span class="comment"># 集成服务发现（如Nacos）</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用根据服务ID路由</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>扩展：自定义异常处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理（覆盖默认错误页）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-1)</span>  <span class="comment">// 优先级高于默认处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalErrorHandler</span> <span class="keyword">implements</span> <span class="title class_">WebExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange, Throwable ex)</span> &#123;</span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST);</span><br><span class="line">        exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;code\&quot;:400, \&quot;message\&quot;:\&quot;&quot;</span> + ex.getMessage() + <span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().writeWith(</span><br><span class="line">            Mono.just(exchange.getResponse().bufferFactory().wrap(errorMsg.getBytes()))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>模板使用说明</strong>‌</p>
<ul>
<li>‌<strong>路由配置</strong>‌：<ul>
<li>在 <code>application.yml</code> 中按需添加路由规则，支持路径重写、限流、重定向等。</li>
<li>通过 <code>predicates</code> 定义匹配条件，<code>filters</code> 定义处理链。</li>
</ul>
</li>
<li>‌<strong>全局过滤器</strong>‌：<ul>
<li>实现 <code>GlobalFilter + Ordered</code> 接口，用于统一鉴权、日志等场景。</li>
<li>通过 <code>@Order</code> 或 <code>getOrder()</code> 控制执行顺序。</li>
</ul>
</li>
<li>‌<strong>自定义过滤器</strong>‌：<ul>
<li>继承 <code>AbstractGatewayFilterFactory</code>，实现特定业务逻辑（如日志、参数校验）。</li>
<li>在YAML中通过过滤器名称（如 <code>Log=pre,post</code>）配置参数。</li>
</ul>
</li>
<li>‌<strong>动态扩展</strong>‌：<ul>
<li>集成服务发现（如Nacos）：在 <code>application.yml</code> 中启用 <code>spring.cloud.gateway.discovery.locator.enabled</code>。</li>
<li>自定义限流策略：实现 <code>KeyResolver</code> 接口，按IP、用户等维度限流。</li>
</ul>
</li>
<li><strong>执行顺序</strong>‌：全局过滤器 &gt; 路由过滤器 &gt; 目标服务。</li>
</ul>
</li>
</ol>
<h3 id="八、配置中心"><a href="#八、配置中心" class="headerlink" title="八、配置中心"></a>八、配置中心</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在分布式微服务系统中，几乎所有服务的运行都离不开配置文件的支持，这些配置文件通常由<strong>各个</strong>服务自行管理，以 <code>properties</code> 、<code>yml </code> 或<code>JSON</code>等格式保存在各个微服务的类路径下。</p>
<p>这种将配置文件散落在各个服务中的管理方式，存在以下问题：</p>
<ul>
<li><strong>管理难度大</strong>：配置文件散落在各个微服务中，难以管理。</li>
<li><strong>安全性低</strong>：配置跟随源代码保存在代码库中，容易造成配置泄漏。</li>
<li><strong>时效性差</strong>：微服务中的配置修改后，必须重启服务，否则无法生效。</li>
<li><strong>局限性明显</strong>：无法支持动态调整，例如日志开关、功能开关。</li>
</ul>
<h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>将各个微服务的配置文件集中存储在一个外部的存储仓库或系统（例如 <strong>Git</strong> 、SVN 或本地文件系统）中，对配置的统一管理。</p>
<ul>
<li><p>Spring Cloud Config 包含：</p>
<ul>
<li><p><strong>Config Server</strong>（分布式配置中心）-  <strong>服务器</strong>：</p>
<p>一个独立运行的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密信息和解密信息的访问接口。</p>
</li>
<li><p><strong>Config Client</strong>（微服务架构中的各个微服务）-  <strong>客户端</strong>：</p>
<p>微服务架构中的各个微服务，它们通过 Config Server 对配置进行管理，并从 Config Sever 中获取和加载配置信息。</p>
</li>
</ul>
</li>
<li><p>Spring Cloud Config默认使用<strong>Git</strong>存储配置信息，可以对配置信息进行版本管理。</p>
<p><img src="/blog2025.github.io/2025/04/02/Hibernate/d/7.png" alt="image-20250408153507163"></p>
</li>
<li><p>Spring Cloud Config 工作流程：</p>
<ol>
<li><p>开发人员提交配置文件到 Git 仓库，</p>
</li>
<li><p>Config 服务端负责连接 Git 仓库，</p>
</li>
<li><p>Config 服务端将<strong>获取配置的接口</strong>暴露给 Config 客户端，</p>
</li>
<li><p>Config 客户端通过 Config 服务端<strong>暴露出来的接口</strong>，拉取配置仓库中的配置，</p>
</li>
<li><p>Config 客户端获取到配置信息，以支持服务的运行。</p>
</li>
</ol>
</li>
<li><p>Spring Cloud Config 特点：</p>
<ul>
<li>微服务的配置文件统一由外部的 Git 管理，</li>
<li>将配置以 REST 接口的形式暴露给各个微服务，以方便各个微服务获取。</li>
<li>微服务可以通过 Spring Cloud Config 向配置中心统一拉取属于它们自己的配置信息。</li>
<li>当配置发生变化时，微服务<strong>不需要重启</strong>即可感知到配置的变化，并自动获取和应用最新配置。</li>
<li>开发人员可以通过 Spring Cloud Config 对同一应用在不同环境的各配置进行管理，且能够确保应用在环境迁移后仍然有完整的配置支持其正常运行。</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Config-项目模板"><a href="#Spring-Cloud-Config-项目模板" class="headerlink" title="Spring Cloud Config 项目模板"></a>Spring Cloud Config 项目模板</h4><p><strong>配置中心服务端（Config Server）</strong>：</p>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config-server/</span><br><span class="line">├── src/main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/configserver/</span><br><span class="line">│   │       └── ConfigServerApplication.java   # 主启动类</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── application.yml                    # 服务端配置</span><br><span class="line">│       └── config/                            # 本地配置文件存储（可选）</span><br><span class="line">│           └── app-dev.yml                   # 示例配置文件</span><br><span class="line">└── pom.xml                                    # Maven 依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config Server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若使用 Git 存储 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**主启动类 <code>ConfigServerApplication.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">// 启用 Config Server 功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端配置 <code>application.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span>  <span class="comment"># Config Server 默认端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/your-repo/config-repo</span>  <span class="comment"># Git 仓库地址（存储配置文件）</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span>                  <span class="comment"># 按应用名搜索子目录</span></span><br><span class="line">          <span class="attr">clone-on-start:</span> <span class="literal">true</span>                           <span class="comment"># 启动时克隆仓库</span></span><br><span class="line">        <span class="comment"># 本地模式（无需 Git，直接读取本地文件）</span></span><br><span class="line">        <span class="comment"># native:</span></span><br><span class="line">        <span class="comment">#   search-locations: classpath:/config/&#123;application&#125;</span></span><br><span class="line">    <span class="comment">#lable: master	# 分支名 </span></span><br></pre></td></tr></table></figure>

<p>Spring Cloud Config 规定了一套配置文件访问规则，如下表。</p>
<table>
<thead>
<tr>
<th>访问规则</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;{application}&#x2F;{profile}[&#x2F;{label}]</td>
<td>&#x2F;config&#x2F;dev&#x2F;master</td>
</tr>
<tr>
<td>&#x2F;{application}-{profile}.{suffix}</td>
<td>&#x2F;config-dev.yml</td>
</tr>
<tr>
<td>&#x2F;{label}&#x2F;{application}-{profile}.{suffix}</td>
<td>&#x2F;master&#x2F;config-dev.yml</td>
</tr>
</tbody></table>
<ul>
<li>{application}：应用名称，即配置文件的名称，例如 config-dev。</li>
<li>{profile}：环境名，一个项目通常都有开发（dev）版本、测试（test）环境版本、生产（prod）环境版本，配置文件则以 application-{profile}.yml 的形式进行区分，例如 application-dev.yml、application-test.yml、application-prod.yml 等。</li>
<li>{label}：Git 分支名，默认是 master 分支，当访问默认分支下的配置文件时，该参数可以省略，即第二种访问方式。</li>
<li>{suffix}：配置文件的后缀，例如 config-dev.yml 的后缀为 yml。</li>
</ul>
</li>
<li><p>**Git 仓库的配置文件示例（<code>config-repo/app-dev.yml</code>）**测试用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称需与客户端配置的 `spring.application.name` 一致</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;Hello from Git Config!&quot;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span>  <span class="comment"># 客户端应用端口（可通过配置中心动态覆盖）</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置客户端（Config Client）</strong>：</p>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config-client/</span><br><span class="line">├── src/main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/configclient/</span><br><span class="line">│   │       ├── ConfigClientApplication.java    # 主启动类</span><br><span class="line">│   │       └── controller/ConfigController.java # 测试接口</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── bootstrap.yml                       # 客户端启动配置</span><br><span class="line">│       └── application.yml                     # 本地默认配置（可选）</span><br><span class="line">└── pom.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>客户端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Web 支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**主启动类 <code>ConfigClientApplication.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**客户端启动配置 <code>bootstrap.yml</code>**‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：bootstrap.yml 优先级高于 application.yml，用于连接配置中心</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">app</span>      <span class="comment"># 对应 Git 中的 &#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8888</span>  <span class="comment"># Config Server 地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>                <span class="comment"># 激活的环境配置（对应 Git 中的 app-dev.yml）</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>                 <span class="comment"># Git 分支名称</span></span><br><span class="line">    <span class="comment"># name: app   			# 配置文件名称，app-dev.yml 中的 app</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**测试接口 <code>ConfigController.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.message:Local default message&#125;&quot;)</span>  <span class="comment">// 冒号后为本地默认值（配置中心无此配置时生效）</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/message&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Config Center Message: &quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者读取配置中心指定配置文件的内容，并展示到页面</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configVersion;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getConfig&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;info：&quot;</span> + configInfo + <span class="string">&quot;&lt;br/&gt;version：&quot;</span> + configVersion + <span class="string">&quot;&lt;br/&gt;port：&quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>运行与验证</strong>：</p>
<ol>
<li><p><strong>启动服务端</strong>‌</p>
<ul>
<li>访问 <code>http://localhost:8888/app/dev/main</code> 查看配置信息（返回 JSON 格式数据）。</li>
</ul>
</li>
<li><p>‌<strong>启动客户端</strong>‌</p>
<ul>
<li>访问 <code>http://localhost:8081/message</code>，应返回 <code>Hello from Git Config!</code>。</li>
</ul>
</li>
<li><p><strong>结果</strong>：服务端直接更新，客户端需要重启。</p>
<ul>
<li>配置更新后，Spring Cloud Config 服务端（Server）可以直接从 Git 仓库中获取最新的配置。</li>
<li>除非重启 Spring Cloud Config 客户端（Client），否则无法通过 Spring Cloud Config 服务端获取最新的配置信息。<strong>（需要动态刷新配置）</strong></li>
</ul>
</li>
<li><p><strong>手动动态刷新配置（需额外配置 <code>@RefreshScope</code>）</strong></p>
<ul>
<li><p><strong>更新客户端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更新 bootstrap.yml</strong> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 health 节点，本段配置（*）就是为了开启所有的节点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>   <span class="comment"># * 在yaml 文件属于关键字，所以需要加引号</span></span><br><span class="line">        <span class="comment"># include: refresh,health  # 暴露 refresh 端点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**更新 <code>ConfigController.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 添加此注解以支持配置热更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Git 仓库中的配置后，调用客户端 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:8081/actuator/refresh</span><br></pre></td></tr></table></figure>

<p>使新配置生效。</p>
</li>
<li><p><strong>这种方法需要挨个向每个客户端手动发送POST请求才能重新拉取配置。</strong></p>
</li>
</ul>
</li>
<li><p><strong>自动化刷新（高级）</strong></p>
<p>结合 ‌<strong>Spring Cloud Bus</strong>‌ 和消息队列（如 RabbitMQ&#x2F;Kafka）。</p>
<p>Spring Cloud Bus 通过消息队列（如 RabbitMQ&#x2F;Kafka）广播配置变更事件。</p>
<ul>
<li><p><strong>添加依赖（客户端和服务端）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RabbitMQ 支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置消息队列（服务端和客户端）</strong></p>
<p>在服务端和客户端的 <code>application.yml</code> 中配置 RabbitMQ：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端暴露 Bus 端点</strong></p>
<p>在服务端的 <code>application.yml</code> 中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向服务端发送刷新广播</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://config-server:8888/actuator/bus-refresh</span><br></pre></td></tr></table></figure>

<p>所有订阅该 Config Server 的客户端会自动刷新配置。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方案</strong>‌</th>
<th>‌<strong>优点</strong>‌</th>
<th>‌<strong>缺点</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>手动刷新</strong>‌</td>
<td>简单、无需额外组件</td>
<td>需人工干预</td>
<td>开发&#x2F;测试环境<br />（小型项目）</td>
</tr>
<tr>
<td>‌<strong>Spring Cloud Bus</strong>‌</td>
<td>全自动、批量刷新</td>
<td>依赖消息队列，架构复杂</td>
<td>生产环境、多实例集群<br />（大型分布式系统）</td>
</tr>
</tbody></table>
<p>‌端点区别</p>
<ul>
<li>服务端暴露 <code>bus-refresh</code> 端点（用于触发广播）。</li>
<li>客户端暴露 <code>refresh</code> 端点（仅手动刷新时使用）。</li>
</ul>
</li>
</ol>
<h4 id="Spring-Cloud-Config-注解"><a href="#Spring-Cloud-Config-注解" class="headerlink" title="Spring Cloud Config 注解"></a>Spring Cloud Config 注解</h4><ul>
<li><p><strong><code>@EnableConfigServer</code></strong></p>
<ul>
<li><p>‌<strong>作用</strong>‌：标注在主启动类上，声明当前应用为 ‌**Config Server（配置中心服务端）。**‌‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">// 启用 Config Server 功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@Value(&quot;$&#123;property.key&#125;&quot;)</code>**‌</p>
<ul>
<li><p><strong>作用</strong>‌：从配置中心或本地配置文件注入 ‌<strong>单个属性值</strong>‌，支持动态刷新‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.message&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String message;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>@ConfigurationProperties(prefix = &quot;prefix&quot;)</code></strong></p>
<ul>
<li><p>‌<strong>作用</strong>‌：将配置中心的 ‌<strong>一组属性</strong>‌ 绑定到 Java 对象的字段，支持类型安全配置‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@RefreshScope</code>**‌</p>
<ul>
<li><p><strong>作用</strong>‌：标记需要 ‌<strong>动态刷新配置</strong>‌ 的 Bean，修改配置后通过 <code>/actuator/refresh</code> 端点触发更新‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 支持热更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@Profile(&quot;env&quot;)</code>**‌</p>
<ul>
<li><p>‌<strong>作用</strong>‌：根据环境（如 <code>dev</code>&#x2F;<code>prod</code>）激活特定的配置段，与 Config Server 的 <code>spring.profiles.active</code> 配合使用‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span>  <span class="comment">// 仅 dev 环境生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DevConfig</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="九、消息队列"><a href="#九、消息队列" class="headerlink" title="九、消息队列"></a>九、消息队列</h3><h4 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h4><ul>
<li><p>系统解耦：</p>
<ul>
<li><p>当多个服务依赖同一数据源时，直接调用会导致强耦合，而消息队列作为中间件，可以使数据源连接中间件，其他服务连接中间件。</p>
<p><img src="/blog2025.github.io/2025/04/02/Hibernate/d/8.png"></p>
</li>
</ul>
</li>
<li><p>异步处理：</p>
<ul>
<li>客户端需等待耗时操作（如支付回调、短信发送）完成才能响应，导致延迟高。</li>
<li>主业务完成后发送消息到 消息件 MQ，从属业务异步处理，客户端无需等待。</li>
</ul>
</li>
<li><p>流量削峰：</p>
<ul>
<li>突发高并发请求（如秒杀活动）直接压垮数据库。</li>
<li>请求先写入 消息件MQ，消费者按处理能力分批拉取，避免数据库瞬时过载。</li>
</ul>
</li>
</ul>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a><strong>RabbitMQ</strong></h4><table>
<thead>
<tr>
<th><strong>模式</strong>‌</th>
<th>‌<strong>交换机类型</strong>‌</th>
<th>‌<strong>路由机制</strong>‌</th>
<th>‌<strong>消费者数量</strong>‌</th>
<th>‌<strong>典型场景</strong>‌</th>
<th>‌<strong>关键差异</strong>‌</th>
<th>适用场景（）</th>
</tr>
</thead>
<tbody><tr>
<td>简单模式(Queue)</td>
<td>无</td>
<td>直连队列</td>
<td>单消费者</td>
<td>简单任务处理</td>
<td>无交换机，点对点通信‌</td>
<td>短信&#x2F;邮件单发‌</td>
</tr>
<tr>
<td>工作队列(Work)</td>
<td>无&#x2F;默认</td>
<td>轮询分发</td>
<td>多消费者</td>
<td>高并发任务分发</td>
<td>多个消费者竞争消费‌</td>
<td>资源抢购&#x2F;负载均衡‌</td>
</tr>
<tr>
<td>发布订阅（Fanout）</td>
<td>Fanout</td>
<td>广播到所有队列</td>
<td>多消费者</td>
<td>系统间广播通知</td>
<td>无视 routing key‌</td>
<td>系统级通知‌‌（库存变更通知）</td>
</tr>
<tr>
<td>路由模式（Direct）</td>
<td>Direct</td>
<td>精确匹配 routing key</td>
<td>多消费者</td>
<td>条件过滤分发</td>
<td>需精确路由键匹配‌</td>
<td>精准消息分发‌</td>
</tr>
<tr>
<td>主题模式（Topic）</td>
<td>Topic</td>
<td>通配符匹配 routing key</td>
<td>多消费者</td>
<td>复杂条件过滤</td>
<td>支持 <code>*</code> 和 <code>#</code> 通配符‌</td>
<td>多维度消息分类‌，地理位置消息</td>
</tr>
<tr>
<td>RPC 模式</td>
<td>Direct</td>
<td>请求-响应（临时队列）</td>
<td>单消费者</td>
<td>需要同步响应的远程调用</td>
<td>同步通信机制‌</td>
<td>实时支付状态查询、库存锁定确认‌</td>
</tr>
</tbody></table>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── config</span><br><span class="line">│   └── RabbitMQConfig.java  # 队列与交换机配置</span><br><span class="line">├── producer</span><br><span class="line">│   └── OrderProducer.java   # 消息生产者</span><br><span class="line">└── consumer</span><br><span class="line">    └── OrderConsumer.java   # 消息消费者</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>依赖</strong>‌（pom.xml）‌</p>
</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>连接配置</strong>‌（application.yml）‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 工作队列模式每次只取1条消息</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ACK（生产环境建议手动）</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启生产者重试</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>队列与交换机声明</strong>‌（RabbitMQConfig.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 简单队列模式 -------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化简单队列声明</span></span><br><span class="line"><span class="comment">     * durable = true 表示队列持久化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">simpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;simple.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 工作队列模式 -------------------</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">workQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;work.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 发布订阅模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明fanout类型的交换机（发布订阅模式） */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>); <span class="comment">// 持久化，不自动删除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueueA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queueA&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueueB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queueB&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBindingA</span><span class="params">(FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueueA()).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBindingB</span><span class="params">(FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueueB()).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 路由模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明direct类型的交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">routeQueueRed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;route.queue.red&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">routeQueueBlue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;route.queue.blue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">routeBindingRed</span><span class="params">(DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(routeQueueRed()).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">routeBindingBlue</span><span class="params">(DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(routeQueueBlue()).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 主题模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明topic类型的交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topic.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueueChina</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue.china&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBindingChina</span><span class="params">(TopicExchange topicExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueueChina()).to(topicExchange).with(<span class="string">&quot;china.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- RPC模式 -------------------</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">rpcExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;rpc.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">rpcQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;rpc.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">rpcBinding</span><span class="params">(DirectExchange rpcExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(rpcQueue()).to(rpcExchange).with(<span class="string">&quot;rpc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生产者代码</strong>‌（OrderProducer.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 通用持久化消息发送方法 -------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机名称（直接模式传空字符串）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey 路由键（或队列名称）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendPersistentMessage</span><span class="params">(String exchange, String routingKey, String message)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message, msg -&gt; &#123;</span><br><span class="line">            msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================== 各模式具体实现 ===================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 简单队列模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToSimpleQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;&quot;</span>, <span class="string">&quot;simple.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 工作队列模式（与简单队列共用生产者）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToWorkQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;&quot;</span>, <span class="string">&quot;work.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 发布订阅模式（Fanout）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToFanout</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;fanout.exchange&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 路由模式（Direct）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToDirectRed</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;direct.exchange&quot;</span>, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToDirectBlue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;direct.exchange&quot;</span>, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 主题模式（Topic）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToTopicChinaNews</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToTopicWeather</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;global.weather&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. RPC模式</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sendRpcRequest</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置响应队列（自动创建临时队列）</span></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate.convertSendAndReceive(</span><br><span class="line">            <span class="string">&quot;rpc.exchange&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rpc&quot;</span>,</span><br><span class="line">            message,</span><br><span class="line">            msg -&gt; &#123;</span><br><span class="line">                msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消费者代码</strong>‌（OrderConsumer.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================== 各模式监听实现 ===================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 简单队列监听</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleSimpleMessage</span><span class="params">(<span class="meta">@Payload</span> String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[简单队列] 收到消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 工作队列监听（启动两个实例测试负载均衡）</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">worker1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[工作队列] Worker1 收到: &quot;</span> + message);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">worker2</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[工作队列] Worker2 收到: &quot;</span> + message);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 发布订阅模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queueA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutReceiverA</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[发布订阅] 订阅者A收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queueB&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutReceiverB</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[发布订阅] 订阅者B收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 路由模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;route.queue.red&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeRedReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[路由模式] Red队列收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;route.queue.blue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeBlueReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[路由模式] Blue队列收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 主题模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue.china&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicChinaReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[主题模式] 中国相关消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. RPC模式处理</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;rpc.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRpcRequest</span><span class="params">(String request)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[RPC模式] 收到请求: &quot;</span> + request);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Processed: &quot;</span> + request.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerService producer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 测试简单队列</span></span><br><span class="line">        producer.sendToSimpleQueue(<span class="string">&quot;简单模式测试消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 测试工作队列（发送10条消息观察负载均衡）</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">11</span>).forEach(i -&gt; </span><br><span class="line">            producer.sendToWorkQueue(<span class="string">&quot;工作消息#&quot;</span> + i)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 测试发布订阅</span></span><br><span class="line">        producer.sendToFanout(<span class="string">&quot;广播消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 测试路由模式</span></span><br><span class="line">        producer.sendToDirectRed(<span class="string">&quot;红色警报&quot;</span>);</span><br><span class="line">        producer.sendToDirectBlue(<span class="string">&quot;蓝色通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 测试主题模式</span></span><br><span class="line">        producer.sendToTopicChinaNews(<span class="string">&quot;中国要闻&quot;</span>);</span><br><span class="line">        producer.sendToTopicWeather(<span class="string">&quot;全球天气报告&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 测试RPC模式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">response</span> <span class="operator">=</span> producer.sendRpcRequest(<span class="string">&quot;hello rpc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[RPC响应] 收到回复: &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有消息均满足：</p>
<ul>
<li>队列重启后仍然存在（队列持久化）</li>
<li>消息在服务器重启后不会丢失（消息持久化）</li>
<li>交换机声明为持久化（重启后自动重建）</li>
</ul>
</li>
</ol>
<h4 id="Kafka‌"><a href="#Kafka‌" class="headerlink" title="Kafka‌"></a><strong>Kafka‌</strong></h4><ol>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springcloud-kafka-demo</span><br><span class="line">├── src/main/java</span><br><span class="line">│   ├── com/example/demo</span><br><span class="line">│   │   ├── config/CustomBindings.java  # 自定义消息通道绑定</span><br><span class="line">│   │   ├── handler/MessageProducer.java  # 消息生产者</span><br><span class="line">│   │   ├── handler/MessageConsumer.java  # 消息消费者</span><br><span class="line">│   │   ├── exception/ErrorHandler.java  # 异常处理</span><br><span class="line">│   │   └── DemoApplication.java  # 启动类</span><br><span class="line">├── src/main/resources</span><br><span class="line">│   ├── application.yml  # 全模式配置</span><br><span class="line">└── pom.xml  # Maven 依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Stream + Kafka Binder --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息序列化支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-schema-registry-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全模式配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 定义消息通道绑定（支持多模式）</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 模式1: 发布-订阅（默认行为）</span></span><br><span class="line">        <span class="attr">pubsub-output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">pubsub-topic</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">        <span class="attr">pubsub-input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">pubsub-topic</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span>  <span class="comment"># 消费者组负载均衡</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment"># 模式2: 消息分区（生产者指定分区键）</span></span><br><span class="line">        <span class="attr">partition-output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">partition-topic</span></span><br><span class="line">          <span class="attr">producer:</span></span><br><span class="line">            <span class="attr">partition-key-expression:</span> <span class="string">headers[&#x27;partitionKey&#x27;]</span>  <span class="comment"># 按头信息分区</span></span><br><span class="line">            <span class="attr">partition-count:</span> <span class="number">3</span>  <span class="comment"># 分区总数</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment"># 模式3: 死信队列（DLQ）</span></span><br><span class="line">        <span class="attr">error-input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error-topic</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="attr">max-attempts:</span> <span class="number">3</span>  <span class="comment"># 最大重试次数</span></span><br><span class="line">            <span class="attr">back-off-initial-interval:</span> <span class="number">2000</span>  <span class="comment"># 重试间隔</span></span><br><span class="line">            <span class="attr">dlq-name:</span> <span class="string">error-dlq</span>  <span class="comment"># 死信队列名</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="string">localhost:9092</span></span><br><span class="line">          <span class="attr">auto-create-topics:</span> <span class="literal">true</span>  <span class="comment"># 自动创建Topic</span></span><br><span class="line">          <span class="attr">configuration:</span></span><br><span class="line">            <span class="comment"># 消息持久化配置（默认已开启，此处调整保留策略）</span></span><br><span class="line">            <span class="attr">log.retention.hours:</span> <span class="number">168</span>  <span class="comment"># 保留7天</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义通道绑定（CustomBindings.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomBindings</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">PUBSUB_OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;pubsub-output&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">PARTITION_OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;partition-output&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ERROR_INPUT</span> <span class="operator">=</span> <span class="string">&quot;error-input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(PUBSUB_OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">pubsubOutput</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(PARTITION_OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">partitionOutput</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(ERROR_INPUT)</span></span><br><span class="line">    SubscribableChannel <span class="title function_">errorInput</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者示例（MessageProducer.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomBindings bindings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式1: 发布订阅消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPubSub</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        bindings.pubsubOutput().send(MessageBuilder</span><br><span class="line">                .withPayload(message)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式2: 分区消息（按Key分发到不同分区）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPartition</span><span class="params">(String message, String partitionKey)</span> &#123;</span><br><span class="line">        bindings.partitionOutput().send(MessageBuilder</span><br><span class="line">                .withPayload(message)</span><br><span class="line">                .setHeader(<span class="string">&quot;partitionKey&quot;</span>, partitionKey)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者示例（MessageConsumer.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConsumer</span> &#123;</span><br><span class="line">    <span class="comment">// 模式1: 订阅同一Topic的多个消费者组</span></span><br><span class="line">    <span class="meta">@StreamListener(target = CustomBindings.PUBSUB_INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePubSub</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PubSub Received: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式3: 错误处理（自动路由到DLQ）</span></span><br><span class="line">    <span class="meta">@StreamListener(target = CustomBindings.ERROR_INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟消费失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常处理器（ErrorHandler.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 全局异常捕获（发送到DLQ）</span></span><br><span class="line">    <span class="meta">@ServiceActivator(inputChannel = &quot;errorChannel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(ErrorMessage errorMessage)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;进入死信队列: &quot;</span> + errorMessage.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>运行验证</strong>：</p>
<ol>
<li><p><strong>启动 Kafka 服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kafka -p 9092:9092 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 bitnami/kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发送测试消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试发布-订阅</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pubsub&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pubsub</span><span class="params">(<span class="meta">@RequestParam</span> String msg)</span> &#123;</span><br><span class="line">        producer.sendPubSub(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PubSub Sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试分区消息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/partition&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">partition</span><span class="params">(<span class="meta">@RequestParam</span> String msg, String key)</span> &#123;</span><br><span class="line">        producer.sendPartition(msg, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Partition Sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>观察消息行为</strong>‌</p>
<ul>
<li>‌<strong>发布-订阅</strong>‌：启动多个实例，观察同一消息被所有实例消费</li>
<li>‌<strong>分区消费</strong>‌：同一消费者组的实例分摊不同分区消息</li>
<li>‌<strong>死信队列</strong>‌：访问 <code>/error</code> 接口触发异常，消息进入 <code>error-dlq</code></li>
</ul>
</li>
</ol>
<p><strong>模式对照表</strong>:</p>
<table>
<thead>
<tr>
<th><strong>模式</strong>‌</th>
<th>‌<strong>实现方式</strong>‌</th>
<th>‌<strong>配置关键点</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>发布-订阅</td>
<td>多个消费者组订阅同一Topic</td>
<td>不设置<code>group</code>或使用不同<code>group</code>名</td>
</tr>
<tr>
<td>消费者组负载均衡</td>
<td>同一<code>group</code>的多个实例共享消费</td>
<td><code>spring.cloud.stream.bindings.input.group</code></td>
</tr>
<tr>
<td>消息分区</td>
<td>生产者指定分区键，消费者设置实例数</td>
<td><code>partition-key-expression</code> + <code>partition-count</code></td>
</tr>
<tr>
<td>死信队列（DLQ）</td>
<td>消费失败时自动转发到指定队列</td>
<td><code>max-attempts</code> + <code>dlq-name</code></td>
</tr>
<tr>
<td>消息持久化</td>
<td>Kafka默认持久化，保留策略通过<code>log.retention.hours</code>控制</td>
<td>配置文件中的<code>log.retention.hours</code></td>
</tr>
</tbody></table>
<blockquote>
<p>Spring Cloud Stream 默认实现消息持久化，Kafka 的副本机制（replication）需额外配置。</p>
</blockquote>
<p><strong>容器化部署</strong>Docker、Kubernetes</p>
<p><strong>‌‌‌安全认证体系</strong>OAuth2.0、JWT</p>
]]></content>
  </entry>
  <entry>
    <title>Spring Data JPA</title>
    <url>/blog2025.github.io/2025/04/02/SpringDataJPA/</url>
    <content><![CDATA[<h3 id="一、Spring-Data-JPA-与-Hibernate-的核心区别"><a href="#一、Spring-Data-JPA-与-Hibernate-的核心区别" class="headerlink" title="一、Spring Data JPA 与 Hibernate 的核心区别"></a>一、Spring Data JPA 与 Hibernate 的核心区别</h3><ol>
<li><p>区别</p>
<ul>
<li><p>‌<strong>Hibernate</strong>‌：</p>
<ul>
<li>是独立的 ‌<strong>ORM 框架</strong>‌，直接实现 JPA 规范，负责将 Java 对象映射到数据库表，并管理 SQL 生成、缓存、事务等底层操作‌。</li>
<li>提供 HQL（面向对象的查询语言）和 Criteria API （动态条件构建）等高级查询工具‌。</li>
<li>需手动编写查询逻辑，灵活性高但开发效率较低‌。</li>
<li>需通过 <code>Transaction</code> 对象显式控制事务边界（如 <code>begin()</code>、<code>commit()</code>）‌。</li>
</ul>
</li>
<li><p>‌<strong>Spring Data JPA</strong>‌：</p>
<ul>
<li>是 ‌<strong>Spring 生态的子模块</strong>‌，基于 JPA 规范构建的 ‌<strong>数据访问层抽象</strong>‌，旨在简化 DAO 层开发‌。</li>
<li>依赖 Hibernate 作为默认的 JPA 实现，但可与其他 JPA 兼容框架（如 EclipseLink）集成‌。</li>
<li>通过 ‌<strong>方法命名规则</strong>‌（如 <code>findByUsernameAndEmail</code>）自动生成查询‌。</li>
<li>支持 <code>@Query</code> 注解自定义 JPQL 或原生 SQL，平衡灵活性与简洁性‌。</li>
<li>与 Spring 事务管理深度集成，支持声明式事务（<code>@Transactional</code> 注解）。</li>
</ul>
<span id="more"></span></li>
</ul>
</li>
<li><p>使用方式</p>
<table>
<thead>
<tr>
<th><strong>对比项</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>Spring Data JPA</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>编程模型</strong>‌</td>
<td>需手动操作 <code>Session</code> 和 <code>Transaction</code> 对象，编写 CRUD 逻辑‌。</td>
<td>通过继承 <code>CrudRepository</code> 或 <code>JpaRepository</code> 接口自动生成基础 CRUD 方法，仅需定义接口‌。</td>
</tr>
<tr>
<td>‌<strong>代码量</strong>‌</td>
<td>需编写较多模板代码（如 <code>save()</code>、<code>update()</code> 方法）‌。</td>
<td>通过方法命名规则或 <code>@Query</code> 注解自动生成 SQL，减少代码量‌。</td>
</tr>
<tr>
<td>‌<strong>依赖管理</strong>‌</td>
<td>独立运行，需单独配置依赖项（如 Hibernate Core）‌。</td>
<td>依赖 Spring 框架，通过 Spring Boot Starter 简化集成‌。</td>
</tr>
</tbody></table>
</li>
<li><p>适用场景</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>Spring Data JPA</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>复杂 ORM 需求</strong>‌</td>
<td>适合需要精细控制缓存、懒加载等高级特性的场景‌。</td>
<td>依赖 Hibernate 的底层能力，无额外优化空间‌。</td>
</tr>
<tr>
<td>‌<strong>快速开发</strong>‌</td>
<td>需较多手动编码，效率较低‌。</td>
<td>通过 Repository 接口大幅提升开发速度‌。</td>
</tr>
<tr>
<td>‌<strong>多数据库兼容性</strong>‌</td>
<td>需手动适配不同数据库方言‌。</td>
<td>基于 JPA 规范，天然支持跨数据库兼容‌</td>
</tr>
</tbody></table>
</li>
<li><p>‌<strong>总结</strong>‌</p>
<ul>
<li><strong>定位差异</strong>‌：Hibernate 是 ‌<strong>ORM 实现框架</strong>‌，Spring Data JPA 是 ‌<strong>数据访问层抽象</strong>‌，两者在技术栈中处于不同层次‌。</li>
<li>‌<strong>开发效率</strong>‌：Spring Data JPA 通过 Repository 模式减少模板代码，更适合快速开发；Hibernate 适合需要深度控制 ORM 的场景‌。</li>
<li>‌<strong>生态整合</strong>‌：Spring Data JPA 深度依赖 Spring 生态，而 Hibernate 可作为独立组件灵活集成‌。</li>
</ul>
<p>两者常结合使用：‌<strong>Spring Data JPA 提供高层抽象，Hibernate 作为底层 JPA 实现</strong>‌，兼顾效率与灵活性‌。</p>
</li>
</ol>
<h3 id="二、Spring-Data-JPA"><a href="#二、Spring-Data-JPA" class="headerlink" title="二、Spring Data JPA"></a>二、Spring Data JPA</h3><ol>
<li><p>JPA：用于通过对象关系映射（ORM）将 Java 对象与关系型数据库表进行映射。</p>
</li>
<li><p>Spring Data JPA：简化基于 JPA 的数据访问层开发，减少模板代码。</p>
<p><strong>核心特性</strong>‌：</p>
<ul>
<li><p>自动生成 Repository 实现。</p>
</li>
<li><p>方法名推导查询（如 <code>findByUsername</code>）。</p>
</li>
<li><p>支持分页、排序、动态查询。</p>
</li>
<li><p>与 Spring 生态无缝集成（如事务管理）</p>
</li>
</ul>
<p><strong>优势</strong>：</p>
<ul>
<li><strong>开发效率</strong>‌：减少 70% 以上的模板代码。</li>
<li>‌<strong>灵活性</strong>‌：支持方法名推导、JPQL、原生 SQL 及动态查询。</li>
<li>‌<strong>生态整合</strong>‌：与 Spring 事务、缓存、审计等功能无缝协作。</li>
</ul>
<p><strong>适用场景</strong>：</p>
<ul>
<li>中大型企业应用（如 ERP、CRM）。</li>
<li>需要快速迭代且数据库结构稳定的项目。</li>
</ul>
</li>
</ol>
<h3 id="三、模板"><a href="#三、模板" class="headerlink" title="三、模板"></a>三、模板</h3><ol>
<li><p><strong>项目结构（Maven）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/demo/</span><br><span class="line">│   │       ├── controller/</span><br><span class="line">│   │       │   └── UserController.java</span><br><span class="line">│   │       ├── model/              # 实体类</span><br><span class="line">│   │       │   └── User.java</span><br><span class="line">│   │       ├── repository/         # Repository接口</span><br><span class="line">│   │       │   └── UserRepository.java</span><br><span class="line">│   │       ├── service/            # 服务层</span><br><span class="line">│   │       │   └── UserService.java</span><br><span class="line">│   │       └── DemoApplication.java # Spring Boot启动类</span><br><span class="line">│   └── resources/</span><br><span class="line">│       └── application.yml         # 配置文件</span><br><span class="line">└── test/                           # 测试类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Data JPA --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动（以MySQL为例） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok（可选，简化代码） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test_db?useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update    # 自动创建/更新表结构</span><br><span class="line">    show-sql: true        # 显示生成的SQL</span><br><span class="line">    properties:</span><br><span class="line">      hibernate.format_sql: true  # 格式化SQL</span><br><span class="line">	  hibernate.use_sql_comments: true  # 日志</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类（User.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法（JPA要求）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全参构造方法（可选）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Repository接口（UserRepository.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="comment">// 方法名自动生成查询：SELECT * FROM users WHERE username = ?</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义JPQL查询</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u WHERE u.email LIKE %?1%&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByEmailContaining</span><span class="params">(String email)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原生SQL查询</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT * FROM users WHERE LENGTH(username) &gt; :length&quot;, nativeQuery = true)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLengthGreaterThan</span><span class="params">(<span class="type">int</span> length)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务层示例（UserService.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户（自动开启事务）</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        userRepository.deleteById(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据用户名查询用户</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(Long userId, User userDetails)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查用户是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">existingUser</span> <span class="operator">=</span> userRepository.findById(userId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在，ID: &quot;</span> + userId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 更新可修改字段（避免覆盖敏感字段如ID）</span></span><br><span class="line">        existingUser.setUsername(userDetails.getUsername());</span><br><span class="line">        existingUser.setEmail(userDetails.getEmail());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 保存更新（JPA的save方法会自动检测是否为更新操作）</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(existingUser);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（DemoApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Controller.java（UserController.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">savedUser</span> <span class="operator">=</span> userService.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(savedUser, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAllUsers();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID删除用户</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户名查询用户（扩展功能）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getUsersByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改功能</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> User userDetails)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">updatedUser</span> <span class="operator">=</span> userService.updateUser(id, userDetails);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(updatedUser, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/blog2025.github.io/2025/04/01/SpringMVC/</url>
    <content><![CDATA[<h3 id="一、前后端开发历程："><a href="#一、前后端开发历程：" class="headerlink" title="一、前后端开发历程："></a>一、前后端开发历程：</h3><ol>
<li><h4 id="三层架构："><a href="#三层架构：" class="headerlink" title="三层架构："></a>三层架构：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li>‌<strong>职责解耦</strong>‌：表现层、业务层、数据层，通过分层实现职责分离，降低代码耦合度，提升可扩展性‌。</li>
<li>‌<strong>协作效率</strong>‌：开发团队可分工协作，例如后端专注于业务逻辑与数据，前端负责界面交互，减少开发冲突‌。</li>
<li>‌<strong>复用性</strong>‌：业务逻辑层独立于表现层，可复用至不同终端（如 Web、移动端）‌</li>
</ul>
<p>‌<strong>局限性</strong>‌：</p>
<ul>
<li><p>‌<strong>Servlet 耦合</strong>‌：传统三层架构中，Servlet 需处理多个请求逻辑，导致代码臃肿和复用性差‌；</p>
</li>
<li><p>‌<strong>视图与业务未彻底分离</strong>‌：如 JSP 中仍嵌入 Java 代码，难以独立维护‌。</p>
</li>
</ul>
<span id="more"></span>
</li>
<li><h4 id="MVC模式："><a href="#MVC模式：" class="headerlink" title="MVC模式："></a>MVC模式：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li>‌<strong>动态交互需求</strong>‌：随着 Web 应用复杂度提升，需将用户交互（View）、业务逻辑（Model）与流程控制（Controller）分离，MVC 模式通过组件化分工提升开发效率‌。</li>
<li>‌<strong>框架支持</strong>‌：SpringMVC框架标准化了 MVC 实现，简化请求路由、参数绑定等操作，降低开发门槛‌。</li>
<li>‌<strong>视图灵活性</strong>‌：支持多种视图技术（如 JSP、Thymeleaf），便于适配不同展示需求‌。</li>
</ul>
<p>‌<strong>局限性</strong>‌：</p>
<ul>
<li>‌<strong>前后端耦合</strong>‌：传统 MVC 中后端仍需处理视图渲染（如 JSP），导致前端依赖后端环境，难以独立开发‌。</li>
<li>‌<strong>性能瓶颈</strong>‌：动态页面渲染加重服务器负载，影响高并发场景性能‌。</li>
</ul>
</li>
<li><h4 id="前后端分离："><a href="#前后端分离：" class="headerlink" title="前后端分离："></a>前后端分离：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li><p>‌<strong>技术专业化</strong>‌：前端技术如Vue复杂度提升，需独立工程化开发，后端专注于 API 与业务逻辑，提升协作效率‌。</p>
</li>
<li><p>‌解耦与性能优化</p>
<ul>
<li>静态资源（HTML&#x2F;CSS&#x2F;JS）由 CDN 或独立服务器托管，减少后端压力‌。</li>
<li>异步请求（AJAX）与单页应用（SPA）提升用户体验，减少整页刷新‌。</li>
</ul>
</li>
<li><p>‌开发流程革新</p>
<ul>
<li><p>前端可本地模拟 API 响应（如 Mock.js+Node.js），不依赖后端环境，加速迭代‌。<a href="https://zhuanlan.zhihu.com/p/44803275">Mock.js+Node.js</a></p>
</li>
<li><p>后端通过 RESTful API 标准化数据交互，支持多终端复用‌。</p>
</li>
</ul>
</li>
</ul>
<p>‌<strong>推动因素</strong>‌：</p>
<ul>
<li>‌<strong>JSP 时代痛点</strong>‌：JSP 混合 Java 与 HTML，维护困难且前后端职责不清‌。</li>
<li>‌<strong>模块化与微服务趋势</strong>‌：前后端分离契合微服务架构，支持独立部署与扩展‌。</li>
</ul>
</li>
</ol>
<h3 id="二、MVC是什么？"><a href="#二、MVC是什么？" class="headerlink" title="二、MVC是什么？"></a>二、MVC是什么？</h3><p>Model-View-Controller，一种软件设计模式。</p>
<ol>
<li><strong>模型（Model）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：管理数据和业务逻辑。</li>
<li>‌<strong>功能</strong><ul>
<li>存储、处理、验证数据（如数据库操作、计算逻辑）。</li>
<li>独立于界面，不关心数据如何展示。</li>
</ul>
</li>
</ul>
</li>
<li><strong>视图（View）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：负责用户界面的展示。</li>
<li><strong>‌功能</strong><ul>
<li>将 Model 中的数据可视化（如网页、App界面）。</li>
<li>不处理业务逻辑，仅接收用户输入并显示结果。</li>
</ul>
</li>
</ul>
</li>
<li><strong>控制器（Controller）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：协调 Model 和 View，处理用户请求。</li>
<li>‌<strong>功能</strong><ul>
<li>接收用户输入（如点击按钮、提交表单）。</li>
<li>调用 Model 处理数据，根据结果更新 View。</li>
</ul>
</li>
</ul>
</li>
<li><strong>MVC的优势</strong>：<ul>
<li>‌<strong>解耦</strong>‌：各组件职责明确，修改界面不影响业务逻辑。</li>
<li>‌<strong>复用性</strong>‌：同一 Model 可被多个 View 使用（如网页版和移动端共享数据逻辑）。</li>
<li>‌<strong>协作友好</strong>‌：开发者可分工开发不同组件（如前端专注 View，后端专注 Model）。</li>
</ul>
</li>
</ol>
<h3 id="二、Spring-MVC"><a href="#二、Spring-MVC" class="headerlink" title="二、Spring MVC"></a>二、Spring MVC</h3><ol>
<li><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>Spring MVC是Spring用来实现MVC模式的。</p>
</li>
<li><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p><img src="/blog2025.github.io/2025/04/01/SpringMVC/springMVC%E5%A4%84%E7%90%86%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
</li>
<li><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/                 # 项目Java源码</span><br><span class="line">│   │   └── com.example/      # 包路径（根据项目命名）</span><br><span class="line">│   │       ├── controller/   # 控制器层（处理HTTP请求）</span><br><span class="line">│   │       ├── service/      # 业务逻辑层（接口+实现类）</span><br><span class="line">│   │       ├── dao/          # 数据访问层（或 repository/，如MyBatis Mapper）</span><br><span class="line">│   │       ├── model/        # 数据模型（POJO、DTO、VO等）</span><br><span class="line">│   │       ├── config/       # Spring配置类（替代XML配置）</span><br><span class="line">│   │       └── Application.java  # 启动类（Spring Boot项目特有）</span><br><span class="line">│   │</span><br><span class="line">│   ├── resources/            # 配置文件与静态资源</span><br><span class="line">│   │   ├── static/           # 静态资源（CSS/JS/图片）</span><br><span class="line">│   │   ├── templates/        # 动态HTML模板文件（Thymeleaf等）</span><br><span class="line">│   │   ├── application.properties  # 全局配置文件（数据库、日志等）</span><br><span class="line">│   │   └── mybatis-config.xml       # MyBatis配置文件（如使用）</span><br><span class="line">│   │</span><br><span class="line">│   └── webapp/               # Web应用根目录（传统项目需要）</span><br><span class="line">│       └── WEB-INF/</span><br><span class="line">│           ├── views/        # JSP文件存放目录（传统JSP项目）</span><br><span class="line">│           └── web.xml       # Web部署描述文件（配置DispatcherServlet）</span><br><span class="line">│</span><br><span class="line">├── test/                     # 单元测试代码</span><br><span class="line">│   └── java/com.example/     # 测试类（如Controller测试）</span><br><span class="line"></span><br><span class="line">pom.xml                       # Maven依赖管理文件（或 build.gradle）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="核心组件："><a href="#核心组件：" class="headerlink" title="核心组件："></a>核心组件：</h4><ul>
<li><strong>前端控制器DispatcherServlet</strong>‌：前端控制器，统一处理 HTTP 请求‌；</li>
<li>‌<strong>处理器映射器HandlerMapping</strong>‌：映射请求到对应的 Controller‌（如@RequestMapping）；</li>
<li>‌<strong>处理器适配器HandlerAdapter</strong>‌：执行 Controller 中的处理方法‌；</li>
<li><strong>处理器Handler</strong>：负责调用业务逻辑层并返回结果。</li>
<li>‌<strong>视图解析器ViewResolver</strong>‌：解析视图名称到具体视图（如 JSP、HTML）‌。</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/01/SpringMVC/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.png"></p>
</li>
<li><h4 id="Model、ModelMap、ModelAndView："><a href="#Model、ModelMap、ModelAndView：" class="headerlink" title="Model、ModelMap、ModelAndView："></a>Model、ModelMap、ModelAndView：</h4><table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>Model</th>
<th>ModelMap</th>
<th>ModelAndView</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>类型</strong>‌</td>
<td>接口（实现类为 <code>ExtendedModelMap</code>）</td>
<td>具体类（继承 <code>LinkedHashMap</code>）</td>
<td>独立类（包含 Model 和 View 属性）</td>
</tr>
<tr>
<td>‌<strong>实例创建</strong>‌</td>
<td>Spring 自动注入</td>
<td>Spring 自动注入</td>
<td>需手动 <code>new</code> 创建</td>
</tr>
<tr>
<td>‌<strong>职责范围</strong>‌</td>
<td>仅传递数据</td>
<td>仅传递数据</td>
<td>传递数据 + 指定视图跳转</td>
</tr>
<tr>
<td>‌<strong>典型方法</strong>‌</td>
<td><code>addAttribute()</code></td>
<td><code>addAttribute()</code></td>
<td><code>addObject()</code> + <code>setViewName()</code></td>
</tr>
</tbody></table>
<p><a href="https://www.cnblogs.com/ethan-37/p/12638427.html">参考1</a></p>
<p><a href="https://blog.csdn.net/ITBigGod/article/details/79685610">参考2</a></p>
</li>
<li><h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h4><ul>
<li><strong>@Controller</strong>‌：标注一个类为控制器，用于处理 HTTP 请求‌；</li>
<li>‌**@RestController**‌：相当于<code>@Controller</code> + <code>@ResponseBody</code>，用于返回JSON或者XML数据；</li>
<li><strong>@RestquestMapping(“&#x2F;路径”)</strong>：映射请求路径，用于类或者方法；</li>
<li>**@GetMapping **：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</li>
<li>**@PostMapping **：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</li>
<li><strong>@PutMapping</strong>：整个资源更新，等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</li>
<li><strong>@DeleteMapping</strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</li>
<li><strong>@PatchMapping</strong>：部分资源更新，等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</li>
<li><strong>@RequestParam</strong>：获取请求参数（常见于查询参数）；</li>
<li><strong>@PathVariable</strong>：获取路径中的动态参数；</li>
<li><strong>@RequestBody</strong>：解析请求体中的 JSON 或 XML 数据，并将其绑定到对象；</li>
<li><strong>@RequestHeader</strong>：获取 HTTP 请求头的值；</li>
<li><strong>@CookieValue</strong>：获取 Cookie 值；</li>
<li><strong>@ResponseBody</strong>：将返回结果直接写入 HTTP 响应体（通常用于返回 JSON 或 XML 数据）；</li>
<li><strong>@ModelAttribute</strong>：将方法返回值或请求参数绑定到模型中，在视图渲染时可用；</li>
<li><strong>@Valid</strong>：对方法参数进行校验（需要配合 Java Bean Validation API）；</li>
<li><strong>@SessionAttributes</strong>：将某些模型属性存储到会话中，便于后续访问；</li>
<li><strong>@RequestPart</strong>：处理 <code>multipart/form-data</code> 请求，常用于文件上传；</li>
<li><strong>@ExceptionHandler(异常类型.class)</strong> ：指定要捕获的异常类型；</li>
<li><strong>@ControllerAdvice</strong>：一个全局异常处理器，适用于所有控制器；</li>
<li><strong>@RestControllerAdvice</strong>:<code>@ControllerAdvice</code> 的变体，返回值默认是 JSON 格式；</li>
<li><strong>@ResponseStatus</strong>:异常类上添加该注解，指定 HTTP 状态码和原因。</li>
</ul>
<p><a href="https://developer.aliyun.com/article/1648386">注解详解1</a></p>
<p><a href="https://springdoc.cn/spring-mvc-annotations/">注解详解2</a></p>
</li>
<li><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><ul>
<li><p><strong>@ExceptionHandler(异常类型.class)</strong> ：指定要捕获的异常类型；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;捕获到异常: &quot;</span> + e.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@ControllerAdvice</strong>：一个全局异常处理器，适用于所有控制器；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleGlobalRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全局异常处理器捕获: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实现</strong> <code>HandlerExceptionResolver</code> <strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;error&quot;</span>, ex.getMessage());</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;error&quot;</span>); <span class="comment">// 指向 error.jsp</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用</strong> <code>ResponseStatusExceptionResolver</code>:通过在异常类上添加 <code>@ResponseStatus</code> 注解，指定 HTTP 状态码和原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = &quot;资源未找到&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>基于</strong> <code>@RestControllerAdvice</code>：<code>@ControllerAdvice</code> 的变体，返回值默认是 JSON 格式；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestGlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; response = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        response.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="Rest风格："><a href="#Rest风格：" class="headerlink" title="Rest风格："></a>Rest风格：</h4><ul>
<li><p><strong>@RestquestMapping(“&#x2F;路径”)</strong>：映射请求路径，用于类或者方法；</p>
</li>
<li><p>**@GetMapping **：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</p>
</li>
<li><p>**@PostMapping **：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</p>
</li>
<li><p><strong>@PutMapping</strong>：整个资源更新，等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</p>
</li>
<li><p><strong>@DeleteMapping</strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</p>
</li>
<li><p><strong>@PatchMapping</strong>：部分资源更新，等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</p>
<table>
<thead>
<tr>
<th><strong>HTTP 方法</strong></th>
<th><strong>操作</strong></th>
<th><strong>示例 URL</strong></th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取资源</td>
<td><code>/users</code> 获取所有用户</td>
</tr>
<tr>
<td>POST</td>
<td>创建资源</td>
<td><code>/users</code> 创建新用户</td>
</tr>
<tr>
<td>PUT</td>
<td>更新资源（全量更新）</td>
<td><code>/users/123</code> 更新用户</td>
</tr>
<tr>
<td>PATCH</td>
<td>更新资源（部分更新）</td>
<td><code>/users/123</code> 更新部分信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
<td><code>/users/123</code> 删除用户</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>状态码</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>成功</td>
<td>请求成功，返回资源数据</td>
</tr>
<tr>
<td>201</td>
<td>已创建</td>
<td>成功创建资源，通常用于 POST</td>
</tr>
<tr>
<td>204</td>
<td>无内容</td>
<td>操作成功，但不返回任何内容（如 DELETE）</td>
</tr>
<tr>
<td>400</td>
<td>客户端错误</td>
<td>请求参数有误</td>
</tr>
<tr>
<td>401</td>
<td>未授权</td>
<td>缺少或无效的认证信息</td>
</tr>
<tr>
<td>403</td>
<td>禁止访问</td>
<td>客户端无权访问资源</td>
</tr>
<tr>
<td>404</td>
<td>资源未找到</td>
<td>请求的资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
<td>服务端处理请求时发生错误</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="拦截器Interceptor："><a href="#拦截器Interceptor：" class="headerlink" title="拦截器Interceptor："></a>拦截器Interceptor：</h4><p>（1）拦截器是一种动态拦截请求并对其进行预处理和后处理的机制，类似于 Servlet 的过滤器（Filter）；拦截器的核心是实现 <code>HandlerInterceptor</code> 接口或继承其实现类 <code>HandlerInterceptorAdapter</code>，并通过配置注册到应用程序中。</p>
<p>（2）用途：</p>
<ul>
<li><strong>日志记录</strong>：记录请求的处理时间或访问记录。</li>
<li><strong>权限校验</strong>：检查用户是否有权限访问某些资源。</li>
<li><strong>参数预处理</strong>：对请求参数进行统一校验或修改。</li>
<li><strong>响应后处理</strong>：在响应数据返回之前进行修改或处理。</li>
<li><strong>全局异常处理</strong>：捕获和处理控制器未捕获的异常。</li>
</ul>
<p>（3）<code>HandlerInterceptor</code> 接口定义了拦截器的三个核心方法：</p>
<ul>
<li><strong>preHandle</strong>：权限校验、日志记录、参数验证或处理、短路机制（按注册顺序执行。）</li>
<li><strong>postHandle</strong>：修改返回数据、日志记录、动态调整视图、扩展功能（按注册顺序的逆序执行。）</li>
<li><strong>afterCompletion</strong>：资源清理、日志记录、性能监控、异常处理或补偿（按注册顺序的逆序执行。）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在处理请求之前调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在处理请求之后，渲染视图之前调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在整个请求完成之后调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（4）拦截器的实现：</p>
<p>实现 <code>HandlerInterceptor</code> 接口或继承其默认实现类 <code>HandlerInterceptorAdapter</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle: 请求路径是 &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回 true 表示继续执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）拦截器的注册：</p>
<p>通过实现 <code>WebMvcConfigurer</code> 来完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoggingInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 拦截所有路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/error&quot;</span>); <span class="comment">// 排除路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）拦截器和过滤器的区别：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>拦截器（Interceptor）</th>
<th>过滤器（Filter）</th>
</tr>
</thead>
<tbody><tr>
<td>工作层级</td>
<td>SpringMVC 层</td>
<td>Servlet 容器层</td>
</tr>
<tr>
<td>拦截对象</td>
<td>控制器（Handler）</td>
<td>所有请求（静态资源也可拦截）</td>
</tr>
<tr>
<td>功能扩展</td>
<td>可以访问 Spring 上下文，支持依赖注入</td>
<td>无法直接访问 Spring 上下文</td>
</tr>
<tr>
<td>配置方式</td>
<td>Spring 配置类</td>
<td><code>web.xml</code>或 <code>@WebFilter</code>注解</td>
</tr>
</tbody></table>
</li>
<li><h4 id="开发配置："><a href="#开发配置：" class="headerlink" title="开发配置："></a>开发配置：</h4><p><a href="https://blog.csdn.net/LiuNengJing/article/details/126012143">参考1</a></p>
<p><a href="https://edu.51cto.com/article/note/23475.html">参考2</a></p>
</li>
<li><h4 id="本文参考："><a href="#本文参考：" class="headerlink" title="本文参考："></a>本文参考：</h4><p><a href="https://blog.csdn.net/qq_58168493/article/details/122634493">https://blog.csdn.net/qq_58168493/article/details/122634493</a></p>
<p><a href="https://developer.aliyun.com/article/1648386">https://developer.aliyun.com/article/1648386</a></p>
</li>
</ol>
<h3 id="三、跨域请求处理"><a href="#三、跨域请求处理" class="headerlink" title="三、跨域请求处理"></a>三、跨域请求处理</h3><ol>
<li><p>什么是跨域？</p>
<p><strong>跨域</strong>‌特指前端页面（如浏览器）与后端服务（SpringMVC 应用）因‌<strong>协议、域名或端口不一致</strong>‌触发同源策略限制，导致请求被浏览器拦截的现象：</p>
<ul>
<li>前端运行在 <code>http://localhost:8080</code>，后端接口部署在 <code>http://api.example.com</code>；</li>
<li>前端通过 AJAX 调用后端接口时，浏览器因域名不同拦截请求并报错：<code>CORS policy blocked</code>。</li>
</ul>
<p><strong>表现</strong>：浏览器控制台报错：<code>Access to ... has been blocked by CORS policy</code>，即使服务器返回响应，结果仍被拦截‌</p>
</li>
<li><p>使用<code>@CrossOrigin</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(</span></span><br><span class="line"><span class="meta">    origins = &quot;url&quot;					 // 允许的来源</span></span><br><span class="line"><span class="meta">    allowedHeaders = &quot;*&quot;,          // 允许的请求头</span></span><br><span class="line"><span class="meta">    methods = &#123;RequestMethod.GET, RequestMethod.POST&#125; // 允许的 HTTP 方法</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>WebMvcConfigurer</code>‌实现全局跨域配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)              <span class="comment">// 匹配所有接口路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;url&quot;</span>) <span class="comment">// 允许的来源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)             <span class="comment">// 允许所有 HTTP 方法</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)             <span class="comment">// 允许所有请求头</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);                   <span class="comment">// 预检请求缓存时间（秒）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用过滤器拦截<code>CorsFilter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">    config.addAllowedOrigin(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、异步处理"><a href="#四、异步处理" class="headerlink" title="四、异步处理"></a>四、异步处理</h3><ol>
<li><p>什么是异步处理？</p>
<p>在 ‌<strong>SpringMVC</strong>‌ 中，‌<strong>异步处理</strong>‌ 是一种通过释放请求线程（Tomcat&#x2F;Jetty 等容器的线程）以提升服务器吞吐量的机制。其核心思想是：</p>
<ul>
<li>‌<strong>同步阻塞模型</strong>‌：传统模式下，每个请求占用一个线程直到处理完成，线程资源被阻塞，无法处理新请求。</li>
<li>‌<strong>异步非阻塞模型</strong>‌：将耗时操作（如 I&#x2F;O 等待、外部服务调用）交给后台线程处理，释放容器线程，任务完成后通过回调或事件通知恢复响应。</li>
</ul>
</li>
<li><p>处理方式：</p>
<ul>
<li><p>‌<strong>web.xml</strong>‌：增加<code>&lt;async-supported&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    				......</span><br><span class="line">	<span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span>	<span class="comment">&lt;!-- 默认为false，true开启异步 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>方式一：返回Callable</strong>‌：耗时操作在后台线程执行，完成后返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async/callable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">handleCallable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">        <span class="comment">// 模拟耗时操作（如数据库查询）</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异步处理完成&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌流程<ol>
<li>主线程接收请求并返回 <code>Callable</code>。</li>
<li>Spring 将 <code>Callable</code> 提交到 <code>TaskExecutor</code> 执行。</li>
<li>主线程释放，处理其他请求。</li>
<li>任务完成后，重新分配线程返回结果。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>方式二：返回DeferredResult</strong>：需要跨线程（如消息队列监听、外部事件触发）完成任务的场景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async/deferred&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title function_">handleDeferred</span><span class="params">()</span> &#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> <span class="title class_">DeferredResult</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 模拟外部线程处理（如 MQ 消费者）</span></span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            deferredResult.setResult(<span class="string">&quot;异步处理完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            deferredResult.setErrorResult(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌流程<ol>
<li>主线程创建 <code>DeferredResult</code> 对象并返回。</li>
<li>主线程释放，处理其他请求。</li>
<li>外部线程（如消息监听器）调用 <code>setResult()</code> 设置结果。</li>
<li>Spring 恢复响应，返回结果给客户端。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>异步处理的优势：</p>
<ul>
<li>‌<strong>提升吞吐量</strong>‌：释放容器线程，避免线程池耗尽。</li>
<li>‌<strong>优化资源利用率</strong>‌：适合处理 I&#x2F;O 密集型任务（如网络请求、文件读写）。</li>
<li>‌<strong>支持长任务处理</strong>‌：如实时数据推送、长时间计算任务。</li>
</ul>
</li>
<li><p>适用场景：</p>
<ul>
<li>‌<strong>高并发请求</strong>‌：如电商秒杀场景，避免线程阻塞导致请求堆积。</li>
<li>‌<strong>外部服务调用</strong>‌：如调用第三方 API 或微服务，等待响应期间释放资源。</li>
<li>‌<strong>实时数据推送</strong>‌：如股票行情、聊天室消息的实时更新。</li>
</ul>
</li>
</ol>
<h3 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/blog2025.github.io/2025/04/06/SpringSecurity/</url>
    <content><![CDATA[<h3 id="一、Spring-Security概览"><a href="#一、Spring-Security概览" class="headerlink" title="一、Spring Security概览"></a>一、Spring Security概览</h3><ul>
<li><p><a href="https://springdoc.cn/spring-security/">Spring Security中文文档</a></p>
</li>
<li><p><a href="https://springdoc.cn/spring-boot-spring-security-jwt-mysql/">Spring Security + JWT + MySQL 实现基于 Token 的身份认证</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_46073538/article/details/128641746">教程</a></p>
</li>
<li><p>兼容性：</p>
<ul>
<li><strong>Spring Boot 3</strong>—<strong>Spring Security 6.2.x</strong> </li>
<li><strong>Spring Boot 2</strong>—<strong>Spring Security 5.8.x</strong></li>
</ul>
</li>
<li><p><strong>Spring Security</strong> 是一个提供身份<font color="red"><em><strong>认证、授权</strong></em></font>和防护常见攻击的框架。</p>
<ul>
<li><p><strong>身份认证（Authentication）</strong>：</p>
<ul>
<li><em><strong>验证用户身份（如用户名&#x2F;密码、短信验证等），解决“你是谁”的问题‌；</strong></em></li>
<li><em>通过<code>UserDetailsService</code>接口实现自定义用户数据源查询‌</em>；</li>
<li>支持表单登录、OAuth2、LDAP等多种认证方式，默认提供<strong>基础表单登录页‌</strong>；</li>
<li>密码加密存储需使用<code>PasswordEncoder</code>接口实现类（如BCrypt算法）‌；</li>
</ul>
</li>
<li><p><strong>权限控制（Authorization）</strong></p>
<ul>
<li><em><strong>根据用户权限控制资源访问（如角色分配、URL权限控制），解决“你能做什么”的问题‌</strong></em></li>
<li>基于角色（Role）或权限（Permission）的访问控制‌；</li>
<li>URL级别‌：通过配置<code>HttpSecurity</code>限制访问路径‌；</li>
<li>方法级别‌：使用<code>@PreAuthorize</code>、<code>@Secured</code>等注解实现细粒度控制‌</li>
<li>常用注解：<code>@PreAuthorize</code>、<code>@Secured</code>、<code>@PostAuthorize</code>‘</li>
</ul>
</li>
<li><p><strong>安全防护机制</strong></p>
<ul>
<li><p>‌CSRF防护：默认启用，需配合模板引擎或手动配置令牌‌；</p>
</li>
<li><p>会话管理‌：防止会话固定攻击，支持并发会话控制‌；</p>
</li>
<li><p>HTTP安全头：自动配置X-Content-Type-Options等头部增强防护‌；</p>
<span id="more"></span></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Spring Security</strong>集成与扩展</p>
<ul>
<li><strong>与Spring Boot整合</strong><ul>
<li>通过<code>spring-boot-starter-security</code>快速启用默认安全配置‌</li>
<li>自定义安全配置需继承<code>WebSecurityConfigurerAdapter</code>类‌</li>
</ul>
</li>
<li><strong>第三方认证支持</strong><ul>
<li><strong>OAuth2</strong>‌：实现单点登录（SSO）和第三方授权（如微信、GitHub）‌</li>
<li>‌<strong>JWT</strong>‌：结合Token实现无状态REST API认证‌<ul>
<li><strong>Token&#x2F;JWT令牌</strong>：用于通信双方之间传递安全信息的简洁的、URL安全的字符串，由三部分组成，头部、载荷与签名</li>
</ul>
</li>
</ul>
</li>
<li><strong>数据库集成</strong><ul>
<li>通过MyBatis&#x2F;JPA实现用户角色数据持久化‌</li>
<li>需设计用户表、角色表及关联表，配合<code>UserDetailsService</code>加载权限‌</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Spring Security流程</strong>：</p>
</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/06/SpringSecurity/2.png"></p>
<h3 id="二、Spring-Security身份认证"><a href="#二、Spring-Security身份认证" class="headerlink" title="二、Spring Security身份认证"></a>二、Spring Security身份认证</h3><ol>
<li><p><strong>流程</strong>：</p>
<p><img src="/blog2025.github.io/2025/04/06/SpringSecurity/4.png"></p>
<p>Spring Security 的认证流程由过滤器链驱动，<strong>核心步骤</strong>如下：</p>
<ul>
<li>用户提交登录请求，触发 <code>UsernamePasswordAuthenticationFilter</code> 拦截请求‌</li>
<li>通过 <code>AuthenticationManager</code> 委托 <code>AuthenticationProvider</code> 进行认证（如 <code>DaoAuthenticationProvider</code>）‌</li>
<li><code>UserDetailsService</code> 加载用户信息（用户名、密码、权限）并与输入信息比对‌</li>
<li>认证成功后生成 <code>Authentication</code> 对象，存入安全上下文（<code>SecurityContextHolder</code>）‌</li>
</ul>
<p><strong>核心组件</strong>：</p>
<ul>
<li>‌**<code>UsernamePasswordAuthenticationFilter</code>**‌：处理表单登录请求，默认拦截 <code>/login</code> POST 请求‌</li>
<li>‌**<code>UserDetailsService</code>**‌：定义用户数据加载接口，<strong>需开发者自行实现</strong>（如从数据库读取）‌</li>
<li>‌**<code>PasswordEncoder</code>**‌：密码加密策略（推荐使用 <code>BCryptPasswordEncoder</code>）‌</li>
</ul>
<p><strong>代码：</strong></p>
<ul>
<li><p><strong>内存用户认证（快速配置）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(encodedPwd)</span><br><span class="line">            .roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>通过内存存储用户信息</em></p>
</li>
<li><p><strong>数据库用户认证（自定义<code>UserDetailsService</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.core.userdetails.User(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                AuthorityUtils.createAuthorityList(user.getRoles())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">            .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>实现<code>UserDetailsService</code>接口，从数据库加载用户信息‌</em></p>
</li>
<li><p><strong>JWT Token 认证（前后端分离）</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JWT 过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                                    HttpServletResponse response, </span></span><br><span class="line"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> extractToken(request);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; validateToken(token)) &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> buildAuthentication(token);</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(auth);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> header.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法：validateToken、buildAuthentication 需实现具体逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>配置过滤器链</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>结合 JWT 实现无状态认证，适用于前后端分离架构‌</em></p>
</li>
<li><p><code>Authentication</code>接口：它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p>
<ul>
<li><code>SeucirtyContext</code>：上下文对象，用来获取<code>Authentication</code></li>
<li><code>SecurityContextHolder</code>：上下文管理对象，用来在程序任何地方获取<code>SecurityContext</code></li>
<li><code>Principal</code>：用户信息，没有认证时一般是用户名，认证后一般是用户对象</li>
<li><code>Credentials</code>：用户凭证，一般是密码</li>
<li><code>Authorities</code>：用户权限</li>
</ul>
</li>
<li><p><code>AuthenticationManager</code>接口：定义了认证<code>Authentication</code>的方法。</p>
<ul>
<li>逻辑：根据用户名先查询出用户对象(没有查到则抛出异常)将用户对象的密码和传递过来的密码进行校验，密码不匹配则抛出异常。</li>
<li><code>authenticate()</code>：执行身份验证</li>
</ul>
</li>
<li><p><code>UserDetailsService</code>接口：加载用户特定数据的核心接口，内含一个根据用户名查询用户信息的方法。</p>
<ul>
<li><code>loadUserByUsername(String username)</code>：唯一方法，目的通过用户名查询用户对象。</li>
</ul>
</li>
<li><p><code>UserDetails</code>接口：提供核心用户信息（账号、密码）。</p>
<ul>
<li>开发中继承<code>org.springframework.security.core.userdetails.User</code>类满足更多的用户属性。</li>
</ul>
<p>通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p>
<p><strong><code>UserDetailsService—&gt;UserDetails对象—&gt;Authentication对象</code></strong></p>
</li>
<li><p><code>加密器PasswordEncoder</code>：MD5</p>
</li>
</ul>
</li>
<li><p><strong>获取当前登录用户信息</strong>：</p>
<p>通过 <strong><code>SecurityContext</code></strong> 来获取**<code>Authentication</code>**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、Spring-Security权限控制"><a href="#三、Spring-Security权限控制" class="headerlink" title="三、Spring Security权限控制"></a>三、<strong>Spring Security权限控制</strong></h3><h4 id="权限控制核心类型："><a href="#权限控制核心类型：" class="headerlink" title="权限控制核心类型："></a><strong>权限控制核心类型</strong>：</h4><ol>
<li><p><strong>基于角色的访问控制（RBAC）</strong></p>
<p>通过用户角色（如 <code>ADMIN</code>、<code>USER</code>）定义资源访问权限，典型配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)   <span class="comment">// 仅允许ADMIN角色访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>) <span class="comment">// 允许ADMIN或USER角色</span></span><br><span class="line">        .anyRequest().authenticated();               <span class="comment">// 其他请求需认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>说明：角色需以 <code>ROLE_</code> 为前缀存储（如 <code>ROLE_ADMIN</code>），否则需在配置中显式声明前缀</em>‌</p>
</li>
<li><p><strong>基于资源标识符的权限控制</strong></p>
<p>通过权限标识符（如 <code>user:read</code>、<code>product:delete</code>）实现细粒度控制，需结合 <code>UserDetails</code> 实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="comment">// 用户权限集合（存储权限标识符）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;user:read&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类中定义权限规则</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/api/user/**&quot;</span>).hasAuthority(<span class="string">&quot;user:read&quot;</span>)‌:ml-citation&#123;ref=<span class="string">&quot;1,6&quot;</span> data=<span class="string">&quot;citationList&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="权限控制实现方式："><a href="#权限控制实现方式：" class="headerlink" title="权限控制实现方式："></a><strong>权限控制实现方式</strong>：</h4><ol>
<li><p><strong>URL 级权限控制</strong></p>
<p>使用 <code>HttpSecurity</code> 配置 URL 匹配规则，支持多种表达式：</p>
<ul>
<li>‌<strong>IP 限制</strong>‌：<code>.antMatchers(&quot;/**&quot;).hasIpAddress(&quot;192.168.1.0/24&quot;)</code>‌</li>
<li>‌<strong>混合条件</strong>‌：<code>.access(&quot;hasRole(&#39;ADMIN&#39;) and hasIpAddress(&#39;192.168.1.10&#39;)&quot;)</code>‌</li>
<li>‌<strong>动态表达式</strong>‌：结合自定义逻辑实现动态权限判断‌</li>
</ul>
</li>
<li><p><strong>方法级权限控制</strong></p>
<p>通过注解实现精确到方法级别的控制（<strong>需启用 <code>@EnableMethodSecurity</code></strong>）</p>
<ul>
<li><p>‌**<code>@PreAuthorize</code>**‌：方法执行前校验权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:delete&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">		<span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//支持 SpEL 表达式实现复杂逻辑（需启用 @EnableMethodSecurity(prePostEnabled = true)）</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) or #userId == authentication.principal.id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123; </span><br><span class="line">    <span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>@PostAuthorize</code>**‌：方法执行后校验返回值权限</p>
</li>
<li><p>**<code>@Secured</code>**‌：简化角色校验（需启用 <code>securedEnabled = true</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Secured(&quot;ROLE_ADMIN&quot;)</span> <span class="comment">// 要求用户拥有ROLE_ADMIN角色</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌<strong>动态权限控制</strong></p>
<p>结合数据库动态加载权限规则，典型实现步骤：</p>
<ul>
<li>实现 <code>FilterInvocationSecurityMetadataSource</code> 接口加载权限-资源映射；</li>
<li>自定义投票器（<code>AccessDecisionVoter</code>）实现动态权限决策‌。</li>
</ul>
</li>
</ol>
<h4 id="异常统一处理"><a href="#异常统一处理" class="headerlink" title="异常统一处理"></a><strong>异常统一处理</strong></h4><p>自定义 <code>AccessDeniedHandler</code> 处理权限不足场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, </span></span><br><span class="line"><span class="params">                       AccessDeniedException ex)</span> &#123;</span><br><span class="line">        response.sendError(<span class="number">403</span>, <span class="string">&quot;无权访问&quot;</span>); <span class="comment">// 返回JSON或跳转错误页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类中注入</span></span><br><span class="line">http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>

<h3 id="四、Spring-Security安全防护机制"><a href="#四、Spring-Security安全防护机制" class="headerlink" title="四、Spring Security安全防护机制"></a>四、Spring Security安全防护机制</h3><h4 id="核心防护机制"><a href="#核心防护机制" class="headerlink" title="核心防护机制:"></a>核心防护机制:</h4><ol>
<li><p><strong>CSRF（跨站请求伪造）防护</strong></p>
<p>Spring Security 默认启用 CSRF 防护，防止恶意网站利用用户已登录状态发起非法请求‌</p>
<ul>
<li><p><strong>实现原理</strong>‌：为表单请求生成唯一 <code>_csrf</code> 令牌，服务端验证请求是否携带有效令牌‌</p>
</li>
<li><p>‌<strong>配置示例</strong>‌（禁用场景）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.csrf(csrf -&gt; csrf.disable()); <span class="comment">// REST API 等无状态场景可关闭</span></span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>会话管理</strong></p>
<p>提供会话固定攻击防护（<code>sessionFixation().migrateSession()</code>）及并发会话控制‌。</p>
<ul>
<li>‌<strong>基于 Token 的无状态会话</strong>‌：适用于前后端分离架构，如 JWT 方案‌。</li>
<li>‌<strong>会话超时与失效</strong>‌：支持自定义会话失效时间与失效跳转路径‌。</li>
</ul>
</li>
<li><p><strong>密码加密机制</strong></p>
<p>强制使用安全算法（如 <code>BCryptPasswordEncoder</code>）加密用户密码，避免明文存储‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>CORS（跨域资源共享）处理</strong></p>
<p>通过 <code>CorsConfigurationSource</code> 配置允许跨域的域名、请求方法及头部信息‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">    config.addAllowedOrigin(<span class="string">&quot;https://example.com&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、模板"><a href="#五、模板" class="headerlink" title="五、模板"></a>五、模板</h3><ol>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot基础 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Spring Security --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- JWT支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 工具类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用户实体与Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>	<span class="comment">// 生成无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String roles; <span class="comment">// 示例：ADMIN,USER</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .subject(userDetails.getUsername())</span><br><span class="line">                .issuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .expiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">extractUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secret)</span><br><span class="line">                .build()</span><br><span class="line">                .parseSignedClaims(token)</span><br><span class="line">                .getPayload()</span><br><span class="line">                .getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(secret).build().parse(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring Security配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(</span></span><br><span class="line"><span class="params">            HttpSecurity http,</span></span><br><span class="line"><span class="params">            JwtAuthenticationFilter jwtAuthFilter,</span></span><br><span class="line"><span class="params">            AuthenticationProvider authenticationProvider)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">            .csrf(csrf -&gt; csrf.disable()) <span class="comment">// 根据需求开启/关闭</span></span><br><span class="line">            .cors(Customizer.withDefaults())</span><br><span class="line">            .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/auth/**&quot;</span>, <span class="string">&quot;/error&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .sessionManagement(session -&gt; session</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            )</span><br><span class="line">            .authenticationProvider(authenticationProvider)</span><br><span class="line">            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">(</span></span><br><span class="line"><span class="params">            UserDetailsService userDetailsService,</span></span><br><span class="line"><span class="params">            PasswordEncoder passwordEncoder)</span> &#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        provider.setUserDetailsService(userDetailsService);</span><br><span class="line">        provider.setPasswordEncoder(passwordEncoder);</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT认证过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> parseToken(request);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; jwtUtils.validateToken(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtils.extractUsername(token);</span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">            <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">            context.setAuthentication(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                    userDetails, <span class="literal">null</span>, userDetails.getAuthorities()));</span><br><span class="line">            SecurityContextHolder.setContext(context);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> header.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; login(<span class="meta">@RequestBody</span> AuthRequest request) &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationManager.authenticate(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                        request.username(),</span><br><span class="line">                        request.password()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> (UserDetails) authentication.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtils.generateToken(userDetails);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> <span class="title class_">AuthResponse</span>(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; register(<span class="meta">@RequestBody</span> AuthRequest request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(request.username())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Username already exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(request.username());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(request.password()));</span><br><span class="line">        user.setRoles(<span class="string">&quot;USER&quot;</span>); <span class="comment">// 默认角色</span></span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;User registered successfully&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">AuthRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">AuthResponse</span><span class="params">(String token)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键配置项（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">mySecretKey123!@#</span>  <span class="comment"># 生产环境必须使用复杂密钥</span></span><br><span class="line">  <span class="attr">expiration:</span> <span class="number">86400000</span>       <span class="comment"># 24小时</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>调试</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line">POST http<span class="punctuation">:</span><span class="comment">//localhost:8080/auth/register</span></span><br><span class="line"><span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;user1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;password123&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录</span></span><br><span class="line">POST http<span class="punctuation">:</span><span class="comment">//localhost:8080/auth/login </span></span><br><span class="line"><span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;user1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;password123&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line"><span class="comment">// 返回示例：&#123;&quot;token&quot;:&quot;xxx.yyy.zzz&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问受保护资源</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost:8080/api/protected </span></span><br><span class="line"><span class="string">&quot;Authorization: Bearer xxx.yyy.zzz&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>增强安全防护</strong></p>
<ul>
<li>开启CSRF防护（非前后端分离场景）</li>
<li>配置HTTPS强制跳转</li>
<li>添加请求速率限制</li>
</ul>
</li>
<li><p><strong>权限控制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) or #username == authentication.name&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>审计日志</strong></p>
<p>实现 <code>ApplicationListener&lt;AuthenticationSuccessEvent&gt;</code> 记录登录成功&#x2F;失败日志</p>
</li>
</ol>
<p>该模板整合了以下核心功能：<br>✅ 基于JWT的无状态认证<br>✅ RBAC权限控制<br>✅ 密码加密存储（BCrypt）<br>✅ CORS&#x2F;CSRF安全配置<br>✅ 统一异常处理<br>✅ 方法级权限注解<br>✅ 可扩展的用户体系</p>
<p>可直接作为项目基础脚手架，根据业务需求进行二次开发。建议结合具体场景调整安全配置策略</p>
<h3 id="六、Shiro和Spring-Security"><a href="#六、Shiro和Spring-Security" class="headerlink" title="六、Shiro和Spring Security"></a>六、Shiro和Spring Security</h3><p><a href="https://cloud.tencent.com/developer/article/1819901">Shiro和Spring Security选择</a></p>
<p><a href="https://developer.aliyun.com/article/1436929">Shiro和Spring Security选择</a></p>
<table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>Spring Security</strong>‌</th>
<th>‌<strong>Shiro</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位</strong>‌</td>
<td>Spring 官方推荐的安全框架，深度集成 Spring 生态</td>
<td>轻量级通用安全框架，支持多种应用场景</td>
</tr>
<tr>
<td>‌<strong>功能复杂度</strong>‌</td>
<td>功能强大，支持 OAuth2、LDAP、方法级权限控制等</td>
<td>功能简洁，核心聚焦认证与基础授权</td>
</tr>
<tr>
<td>‌<strong>配置复杂度</strong>‌</td>
<td>配置复杂，需理解过滤器链、安全上下文等概念</td>
<td>配置简单，API 设计直观</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>企业级应用、微服务架构、需复杂权限控制场景</td>
<td>小型项目、快速开发场景</td>
</tr>
<tr>
<td>‌<strong>Spring Boot 集成</strong>‌</td>
<td>原生支持，通过 Starter 快速集成</td>
<td>需手动配置，或使用第三方 Starter（简化有限）</td>
</tr>
</tbody></table>
<h3 id="七、Spring-Boot-3-Spring-Security-6-x-MyBatis-Vue实现登录验证"><a href="#七、Spring-Boot-3-Spring-Security-6-x-MyBatis-Vue实现登录验证" class="headerlink" title="七、Spring Boot 3+ Spring Security 6.x + MyBatis + Vue实现登录验证"></a>七、Spring Boot 3+ Spring Security 6.x + MyBatis + Vue实现登录验证</h3><h4 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h4><ol>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/auth_demo?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo.entity</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安全配置类（SecurityConfig.java)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .cors(Customizer.withDefaults())</span><br><span class="line">            .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">            .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/api/auth/login&quot;</span>, <span class="string">&quot;/api/auth/register&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .formLogin(form -&gt; form</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/api/auth/login&quot;</span>)</span><br><span class="line">                .successHandler(loginSuccessHandler())</span><br><span class="line">                .failureHandler(loginFailureHandler())</span><br><span class="line">            )</span><br><span class="line">            .logout(logout -&gt; logout</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/api/auth/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler())</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationSuccessHandler <span class="title function_">loginSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, authentication) -&gt; &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:200, \&quot;message\&quot;:\&quot;登录成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationFailureHandler <span class="title function_">loginFailureHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, exception) -&gt; &#123;</span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:401, \&quot;message\&quot;:\&quot;认证失败\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LogoutSuccessHandler <span class="title function_">logoutSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, authentication) -&gt; &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:200, \&quot;message\&quot;:\&quot;退出成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.setAllowedOrigins(List.of(<span class="string">&quot;http://localhost:8080&quot;</span>));</span><br><span class="line">        config.setAllowedMethods(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        config.setAllowedHeaders(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户认证服务（实现UserDetailsService接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .username(user.getUsername())</span><br><span class="line">                .password(user.getPassword())</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户实体类（User.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO users(username, password) VALUES(#&#123;username&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器（AuthController.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; register(<span class="meta">@RequestBody</span> UserRegisterRequest request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userMapper.findByUsername(request.username()).isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(request.username());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(request.password()));</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">UserRegisterRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><ol>
<li>登录组件（Login.vue）</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;handleLogin&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleRegister&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [&#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          const formData = new URLSearchParams();</span><br><span class="line">          formData.append(&#x27;username&#x27;, this.form.username);</span><br><span class="line">          formData.append(&#x27;password&#x27;, this.form.password);</span><br><span class="line"></span><br><span class="line">          axios.post(&#x27;http://localhost:8080/api/auth/login&#x27;, formData, &#123;</span><br><span class="line">            headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27; &#125;</span><br><span class="line">          &#125;).then(response =&gt; &#123;</span><br><span class="line">            this.$router.push(&#x27;/dashboard&#x27;);</span><br><span class="line">          &#125;).catch(error =&gt; &#123;</span><br><span class="line">            this.$message.error(error.response.data.message);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    handleRegister() &#123;</span><br><span class="line">      this.$router.push(&#x27;/register&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h4><ol>
<li><pre><code class="language-mysql">CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL
);
</code></pre>
</li>
</ol>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><ol>
<li>测试账号：admin&#x2F;123456</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo使用、博客编写教程：</title>
    <url>/blog2025.github.io/2025/03/10/hello-world/</url>
    <content><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="一、流程"><a href="#一、流程" class="headerlink" title="一、流程"></a>一、流程</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">cmd进入hexo-blog目录本地库，</span><br><span class="line">使用命令进行操作，</span><br><span class="line">操作完成后使用 <span class="attribute">hexo</span> g -d 生成静态页面并上传到GitHub。</span><br></pre></td></tr></table></figure>

<h3 id="二、创建新帖子"><a href="#二、创建新帖子" class="headerlink" title="二、创建新帖子"></a>二、创建新帖子</h3><p>方法一：直接生成文章：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p>方法二：生成文章和对应同名目录(用于存储图片资源等)：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new post <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313130306915.png"></p>
<p>注：文章存储路径为：hexo-blog&#x2F;source&#x2F;_posts</p>
<h3 id="三、Hexo命令："><a href="#三、Hexo命令：" class="headerlink" title="三、Hexo命令："></a>三、Hexo命令：</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init <span class="comment"># 初始化 </span></span><br><span class="line">npm install <span class="comment"># (一般来讲，这个只会在第一次安装hexo时使用)</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo d <span class="comment"># 上传到GitHub</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br><span class="line">hexo g -d <span class="comment"># 生成静态页面并上传到github</span></span><br><span class="line">ssh -T git<span class="variable">@github</span>.com <span class="comment"># 测试连通性</span></span><br></pre></td></tr></table></figure>

<p>更多命令: <a href="https://hexo.io/zh-cn/docs/commands">链接</a></p>
<h3 id="四、注意事项："><a href="#四、注意事项：" class="headerlink" title="四、注意事项："></a>四、注意事项：</h3><p>问题一:   “You’ve successfully authenticated, but GitHub does not provide shell access.”	</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">·需要生成本地<span class="attribute">SSH</span> ，再配置到GitHub中。</span><br><span class="line">·因为本次采用SSH进行远程连接，所以对于本地hexo-blog中的_config.xml进行配置为SSH格式。</span><br><span class="line">deploy:</span><br><span class="line">   type: git	</span><br><span class="line">   repo: git<span class="variable">@github</span>.com:lsdyun/blog2025.github.io.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure>

<p>问题二：采用Http和SSH区别:(!!!推荐使用SSH)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">采用Http每次都需要输入账号和密码，使用SSH则不需要。</span><br><span class="line">此外，GitHub已经禁止密码验证，强制要求使用个人访问令牌(PAT),所以此处才使用SSH。</span><br></pre></td></tr></table></figure>

<p>注：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">认证机制：</span><br><span class="line">  SSH：</span><br><span class="line">     ·基于非对称加密，通过本机生成的密钥对（公钥+私钥）进行身份验证，无需每次输入密码。</span><br><span class="line">     ·密钥需手动生成并添加至GitHub账户的SSH Keys配置页，实现一次性配置长期生效。</span><br><span class="line">  HTTP(S)：</span><br><span class="line">     ·依赖用户名+密码或令牌(PAT)认证。GitHub已禁用密码验证，强制要求使用个人访问令牌(PAT)。</span><br><span class="line">     ·令牌需在GitHub账户中生成并赋予权限(如repo权限)，操作时需手动输入或依赖凭证缓存。</span><br></pre></td></tr></table></figure>

<p>生成SSH和配置到GitHub参考: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<h3 id="五：补充："><a href="#五：补充：" class="headerlink" title="五：补充："></a>五：补充：</h3><p>·Hexo默认主题存放在node_modules&#x2F;hexo-theme-landscape目录下，可对_config.yml进行处理。</p>
<p><font color="red">·当使用steam++加速GitHub时，会导致本地host被污染，导致无法上传项目到GitHub，最好先关闭加速在上传。</font></p>
<h3 id="六、Hexo渲染和Typora图片问题"><a href="#六、Hexo渲染和Typora图片问题" class="headerlink" title="六、Hexo渲染和Typora图片问题"></a>六、Hexo渲染和Typora图片问题</h3><p>1.修改 Hexo 根目录的 <code>_config.yml</code>，确保以下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="attribute">true</span>  <span class="comment"># 自动生成文章同名资源夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>     <span class="comment"># 禁止生成相对路径</span></span><br><span class="line"></span><br><span class="line">同时增加：(没这个也会导致渲染出问题)</span><br><span class="line"><span class="comment"># 解决typera和hexo图片加载问题  </span></span><br><span class="line">marked:</span><br><span class="line">  prependRoot: <span class="literal">true</span></span><br><span class="line">  postAsset: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.安装官方推荐的渲染插件：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall hexo-renderer-marked --save  <span class="comment"># 先卸载旧版本（如有）</span></span><br><span class="line">npm install hexo-renderer-marked<span class="variable">@latest</span> --save</span><br></pre></td></tr></table></figure>

<p>3.Typora 设置路径：</p>
<p>偏好设置 → 图像 → 插入图片时选择 “复制到指定路径”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存路径填：./$&#123;filename&#125;.assets/  </span><br><span class="line">勾选：优先使用相对路径</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313225230399.png" alt="image-20250313225230399"></p>
<p>4.格式→图像→设置图片根目录 “选择对应文件的存储位置”</p>
<p>5‌.插入图片后检查格式：</p>
<p>在 Markdown 中必须显示为 <code>![描述](图片名.jpg)</code>，而不是 <code>![描述](文章名/图片名.jpg)</code><br>（若出现多余路径，手动删除前缀）</p>
<p>6.<font color="red">添加图片步骤</font></p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具,不保存；</span><br><span class="line">第二步、直接将图片复制到Typora中；</span><br><span class="line">第三步、从Typora将图片保存到对应文件夹中；</span><br><span class="line">第四步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<p>方法二：（图片最后格式一定没有”&#x2F;“）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具，保存到对应目录；</span><br><span class="line">第二步、在Typora中，右击插入图像；</span><br><span class="line">第三步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<h3 id="七、Hexo高亮问题："><a href="#七、Hexo高亮问题：" class="headerlink" title="七、Hexo高亮问题："></a>七、Hexo高亮问题：</h3><p>1.Hexo 7.x的配置文件(_config.xml)中:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>syntax_highlighter: 可选Hexo默认的highlight.js,也可选prismjs</p>
<p>2.Next 8.22.0主题的配置文件(_config.xml)中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default  ##这里决定了最后展示的效果</span><br><span class="line">    dark: stackoverflow-dark ##这里决定了最后展示的效果</span><br><span class="line">  prism:</span><br><span class="line">    light: prism-tomorrow  ##这里决定了最后展示的效果</span><br><span class="line">    dark: prism-tomorrow-dark ##这里决定了最后展示的效果</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: </span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false</span><br><span class="line">    height: 500</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/BB1msOOV.jpg"></p>
<h3 id="八、个性化Next主题："><a href="#八、个性化Next主题：" class="headerlink" title="八、个性化Next主题："></a>八、个性化Next主题：</h3><p>1.开启themes&#x2F;next_config.xml中的选项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">	style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<p>2.在hexo-blog&#x2F;source&#x2F;_data中新建styles.styl</p>
<p>3.开始在styles.styl中自定义CSS</p>
<h3 id="九、开启动态背景："><a href="#九、开启动态背景：" class="headerlink" title="九、开启动态背景："></a>九、开启动态背景：</h3><p>在themes&#x2F;next_config.xml中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>

<h3 id="十、参考资料："><a href="#十、参考资料：" class="headerlink" title="十、参考资料："></a>十、参考资料：</h3><p>安装教程一: <a href="https://blog.csdn.net/yaorongke/article/details/119089190">链接</a></p>
<p>安装教程二: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<p>Next主题使用方法：<a href="https://zhuanlan.zhihu.com/p/618864711">链接</a></p>
<p>Next 8 版本使用方法：<a href="https://www.cnblogs.com/jinwei26/articles/18460312">链接</a>（代码块，动态人物|本项目采用该版本）</p>
<p>Next新旧版本对比：<a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#%E9%BB%98%E8%AE%A4%E9%A1%B5%E5%A4%84%E7%90%86">链接</a></p>
<p>图标icon：<a href="https://fontawesome.dashgame.com/">链接</a></p>
<p>分类和标签功能：<a href="https://juejin.cn/post/6921750181297782798">链接</a></p>
<p>阅读全文功能：<a href="https://blog.csdn.net/codejoker_7/article/details/123235687">链接</a>要搭配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Typora中编写文档时配合&lt;!--more--&gt;使用，可以将文章内容截断，解决网页首页展示过多内容。</span><br></pre></td></tr></table></figure>

<p>暗黑模式：<a href="https://blog.csdn.net/rqh656418510/article/details/123676457">链接</a></p>
<p>Hexo 7.x 语法高亮：<a href="https://hexo.io/zh-cn/docs/syntax-highlight">链接</a></p>
<p>Hexo-Next:<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Typora中打实心圆、空心圆、方块：</p>
<p>使用Ctrl+Shift+]打出实心圆，再使用Tab键则可打出空心圆，再使用一次便可打出方块。</p>
<ul>
<li>哈哈	<ul>
<li>哈哈<ul>
<li>哈哈</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>自建网站</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li>常用数据类型</li>
</ol>
<p>&emsp;&emsp;层次、网状、关系（表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>数据库系统的结构</p>
<p>三层模式结构：外模式+模式+内模式</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;用户+公共数据+物理结构和存储方式</p>
<table>
<thead>
<tr>
<th>外模式</th>
<th>模式</th>
<th>内模式</th>
</tr>
</thead>
<tbody><tr>
<td>用户</td>
<td>公共数据</td>
<td>物理结构和存储方式</td>
</tr>
</tbody></table>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%BB%93%E6%9E%84.png"></p>
<h3 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h3><ol>
<li><h4 id="表："><a href="#表：" class="headerlink" title="表："></a>表：</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert table 表名 add 新列名 数据类型</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。"><a href="#视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。" class="headerlink" title="视图View：(数据较大时用（虚拟表）)本身不包含任何数据，只包含映射到实际表的一个查询语句。"></a>视图View：(数据较大时用（<strong>虚拟表</strong>）)本身不包含任何数据，只包含映射到实际表的一个查询语句。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view 视图名称 as （增删改查SQL语句）[with check option]</span><br><span class="line">with check option:同步更新到实际表</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view 视图名称 [cascade]</span><br><span class="line">cascade：级联删除（该视图链接多个视图）</span><br></pre></td></tr></table></figure>

<p>查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 属性 from 视图名称 where 条件</span><br></pre></td></tr></table></figure>

<p>更新：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视图是不存在的，对视图操作，实际就是更新对应的实际表</span><br></pre></td></tr></table></figure></li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/liangzai215/article/details/142438705">链接</a></p>
<ol start="3">
<li><h4 id="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。"><a href="#模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。" class="headerlink" title="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。"></a>模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create schema &lt;模式名&gt; authorization &lt;用户名&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop schema &lt;模式名&gt; &lt;cascade|restrict&gt;</span><br><span class="line">cascade:级联删除</span><br><span class="line">restrict：限制（如果存在下属数据如表，则不可删除）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="索引：数据量较大时使用，可以建立在一列或者多列上。"><a href="#索引：数据量较大时使用，可以建立在一列或者多列上。" class="headerlink" title="索引：数据量较大时使用，可以建立在一列或者多列上。"></a>索引：数据量较大时使用，可以建立在一列或者多列上。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [unique][cluster] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;)</span><br><span class="line">unique：唯一索引</span><br><span class="line">cluster:聚簇索引，即物理顺序和逻辑顺序相同</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert index &lt;旧索引名&gt; rename to &lt;新索引名&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index &lt;索引名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"><a href="#审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。" class="headerlink" title="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"></a>审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">audit 操作 on 数据</span><br><span class="line">操作：insert/update/delete等</span><br><span class="line">数据：表/数据库</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="断言：（限制数据大小）"><a href="#断言：（限制数据大小）" class="headerlink" title="断言：（限制数据大小）"></a>断言：（限制数据大小）</h4><p>触发器：</p>
<p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create trigger &lt;触发器名称&gt; before|after &lt;触发事件&gt; on &lt;表名&gt;</span><br><span class="line">beforencting new|old row as &lt;变量&gt;</span><br><span class="line">for each row|statement			//定义触发器的类型，指明动作体执行的频率</span><br><span class="line">when &lt;触发条件&gt; &lt;触发动作体&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop trigger &lt;触发器名称&gt; on &lt;表名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="权限："><a href="#权限：" class="headerlink" title="权限："></a>权限：</h4><p>授权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant &lt;权限&gt; on table &lt;表名&gt; to &lt;用户名称&gt;</span><br><span class="line">with grant option子句：普通用户获得权限后，可以将权限授予其他用户。</span><br></pre></td></tr></table></figure>

<p>回收权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke &lt;权限&gt; on table &lt;表名&gt; from &lt;用户名称&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常用SQL语句："><a href="#常用SQL语句：" class="headerlink" title="常用SQL语句："></a>常用SQL语句：</h4><p>（1）查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user</span><br><span class="line"></span><br><span class="line">select name from user</span><br><span class="line"></span><br><span class="line">select distinct title from 表名</span><br><span class="line">distinct：去重</span><br><span class="line"></span><br><span class="line">select name from user where address like &#x27;%西&#x27;</span><br><span class="line">like “%”可代替多个字符，“_”仅能替换一个字符</span><br><span class="line"></span><br><span class="line">select 别名 as （查出来是展示为别名属性）</span><br><span class="line">例子：</span><br><span class="line">select username as name from user：查username，展示为name</span><br></pre></td></tr></table></figure>

<p><strong>聚合函数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count()/count(distinct去重 title)</span><br><span class="line">avg()</span><br><span class="line">max()</span><br><span class="line">min()</span><br></pre></td></tr></table></figure>

<p>分组查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group by</span><br><span class="line">select title from book group by title</span><br><span class="line"></span><br><span class="line">筛选Having</span><br><span class="line">select title from book group by title having title=&quot;西游记&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Having和Where区别</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">having是在分组后对数据进行过滤，</span><br><span class="line">where是在分组前对数据进行过滤，</span><br><span class="line">having后可以使用聚合函数</span><br><span class="line">where后则不可以使用聚合函数</span><br><span class="line">查询顺序：from&gt;where&gt;group&gt;having&gt;order&gt;select</span><br></pre></td></tr></table></figure>

<p>排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">order by </span><br><span class="line">desc：降序</span><br><span class="line">asc：升序</span><br></pre></td></tr></table></figure>

<p>多表查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sn.id cn.id from student_name sn,class_name cn where sn.id=cn.id</span><br></pre></td></tr></table></figure>

<p>嵌套查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book in (select author from book where price&lt;100)</span><br></pre></td></tr></table></figure>

<p>Exists：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exists：子查询存在则返回1，否则为0</span><br><span class="line">not exists：</span><br></pre></td></tr></table></figure>

<p>UNION并：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book UNION select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p>INTERSECT交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book INTERSECT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p>EXCEPT差：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book EXCEPT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>内连接</strong>Where：结果仅包含符合条件的值。</p>
<p>**外连接：**不仅包含符合条件的，也包含不符合条件的。</p>
<p>Left_join：左连接</p>
<p>Left_outer_join：左外连接：左边表全部保留、右边表只保留符合条件的。</p>
<p>Right_join：右连接</p>
<p>Right_outer_join：右外连接：右边表全部保留、左边表只保留符合条件的。</p>
<p>Full_join：全连接</p>
<p>Full_outer_join：全外连接：左边表UNION右边表（全都保留）</p>
<p>参考: <a href="https://blog.csdn.net/mazhenzhu1272/article/details/79696097">链接</a></p>
<p>（2）插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(属性) values (值)</span><br></pre></td></tr></table></figure>

<p>（3）修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段1=值1，字段2=值2</span><br></pre></td></tr></table></figure>

<p>（4）删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、范式"><a href="#三、范式" class="headerlink" title="三、范式"></a>三、范式</h3><p>&emsp;&emsp;范式越高，冗余度越低，一般开发采用3NF即可，最高5NF。</p>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_45737068/article/details/106185907">链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>练习题</title>
    <url>/blog2025.github.io/2025/03/22/%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、概念题："><a href="#一、概念题：" class="headerlink" title="一、概念题："></a>一、概念题：</h3><ol>
<li>在软件项目工程中为什么不能用单纯增加人数的方法缩短开发时间？</li>
</ol>
<p>   答：沟通成本激增、新人适配期长、 管理复杂度上升、任务不可分割性</p>
<ol start="2">
<li><p>为学校图书馆管理系统提供五条系统需求？</p>
<p>答：多角色权限管理、自动化借阅与逾期处理、预约与续借功能、数据统计与可视化报表、图书全生命周期管理。</p>
</li>
<li><p>存取款流程图设计？</p>
<p>答：插卡—&gt;输入密码—&gt;选择存款—&gt;放入现金—&gt;系统读取存款数目存入卡内—&gt;用户退出，取卡</p>
<p>插卡—&gt;输入密码—&gt;选择取款—&gt;输入取款数目—&gt;系统判断余额是否充足，充足则出钱—&gt;用户退出，取卡</p>
<span id="more"></span>
</li>
<li><p>比较面向对象法和结构化法的特点，并说明为啥面向对象法更加优越?</p>
<p>结构化方法：模块化开发（函数&#x2F;过程划分模块）</p>
<p>&emsp;&emsp;&emsp;以“过程”为核心、数据和处理过程独立、适用于小型系统；</p>
<p>&emsp;&emsp;&emsp;数据与函数分离；</p>
<p>&emsp;&emsp;&emsp;通过函数复用，维护复杂。</p>
<p>面向对象法：模块化开发（类&#x2F;对象划分模块）（封装，继承，多态）</p>
<p>​    &emsp;&emsp;以对象为核心、容易理解，扩展性和复用性强、适用于大型系统；</p>
<p>&emsp;&emsp;&emsp;数据封装在对象内；</p>
<p>&emsp;&emsp;&emsp;通过继承&#x2F;组合复用，利用多态扩展行为，高内聚低耦合设计，维护简单。</p>
<p>‌<strong>总结</strong>‌：结构化适合小型&#x2F;性能敏感场景，面向对象在复杂系统、高扩展性需求中优势显著。</p>
<p>结构性程序的优点：</p>
<p>&emsp;<strong>模块化</strong>‌：功能拆分明确，便于复用和维护；</p>
<p><strong>&emsp;可读性强</strong>‌：逻辑清晰（顺序&#x2F;分支&#x2F;循环），降低理解成本；</p>
<p>‌&emsp;<strong>易调试</strong>‌：减少goto等混乱跳转，错误定位更精准；</p>
<p>&emsp;‌<strong>可扩展性</strong>‌：分层结构方便功能增删改。</p>
</li>
<li><p>解释一下软件技术和软件安全技术的不同之处？</p>
<p><strong>软件技术</strong>‌：侧重系统开发全生命周期（设计、编码、测试等），实现功能与性能目标。</p>
<p><strong>软件安全技术</strong>‌：专注在开发中预防漏洞（如加密、权限控制）、防御攻击（渗透测试、漏洞修复），保障系统抗风险能力。</p>
</li>
<li><p>软件工程的意义是什么？</p>
<p>①解决软件危机，保障开发可控性、②提升软件质量与可维护性、③优化资源利用与成本控制。</p>
</li>
<li><p>类和对象的区别是什么？</p>
<p><strong>类</strong>‌：抽象模板，加载到内存中仅一次，class关键字</p>
<p><strong>对象</strong>‌：类的具体实例，可创建多个实例，new动态实例化</p>
</li>
<li><p>两种测试方法？</p>
<p>‌<strong>单元测试</strong>：白盒测试为主、发现编码错误和设计缺陷</p>
<p><strong>集成测试</strong>：黑盒与灰盒（需要关心模块与模块之间的交互。）结合、接口交互和数据传递的可靠性</p>
</li>
<li><p>什么是软件工程增量模型？</p>
<p>答：将系统拆分为多个功能模块（增量），分阶段开发、集成并交付‌。</p>
</li>
<li><p>什么是回归测试？</p>
<p>答：修改代码后重新测试，确保原有功能正常。防止代码改动引发意外错误（如修复A功能导致B功能异常）</p>
</li>
<li><p>什么是指针？</p>
<p>答：指针是存储变量内存地址的变量（如 int *p 指向整型变量地址）</p>
<p>&emsp;&emsp;取地址（&amp;a 获取变量a的地址）；解引用（*p 访问指针指向的值）。</p>
</li>
<li><p>白盒测试、黑盒测试名词解释</p>
<p><strong>白盒测试</strong>‌：基于代码内部结构的测试, 需了解程序逻辑.</p>
<p><strong>黑盒测试</strong>‌：基于功能需求的测试, 无需了解代码.</p>
</li>
<li><p>软件工程导论生命周期</p>
<p><strong>软件定义时期</strong>‌：问题定义‌、可行性研究‌、需求分析</p>
<p><strong>软件开发时期</strong>‌：总体设计、详细设计、编码‌、测试</p>
<p><strong>运行维护时期</strong>‌：维护‌</p>
</li>
<li><p>需求分析是什么，主要任务是什么</p>
<p><strong>定义‌</strong>：确定用户与系统目标，明确软件应实现的功能和约束条件。<br><strong>‌主要任务‌</strong>：</p>
<p>&emsp;‌收集需求‌：通过访谈、问卷等方式获取用户&#x2F;业务需求。</p>
<p>‌&emsp;分类整理‌：区分‌功能需求‌（如登录功能）与‌非功能需求‌（如响应速度≤1秒）。</p>
<p>‌&emsp;验证可行性‌：评估技术、成本与时间是否可实现。</p>
<p>&emsp;‌文档化‌：编写‌需求规格说明书（SRS）‌，作为开发基准。</p>
<p>&emsp;‌管理变更‌：跟踪需求变动，避免范围蔓延（Scope Creep）。<br><strong>‌核心目的‌</strong>：确保开发方向与用户期望一致，减少后期返工风险。</p>
</li>
<li><p>软件维护</p>
<p>答：软件生命周期的最终阶段，指软件交付使用后为修正错误、适应环境或扩展功能而进行的持续修改过程，贯穿软件运行的整个生命周期‌。</p>
<p><strong>改正性维护</strong>：修复运行中的错误。</p>
<p><strong>适应性维护</strong>：适配环境变化（如系统升级）。</p>
<p><strong>完善性维护</strong>：新增功能或优化性能。</p>
<p><strong>预防性维护</strong>：重构代码以降低未来维护成本。</p>
<p><strong>核心目标</strong>‌：延长软件生命周期，确保稳定性和用户需求匹配。</p>
</li>
<li><p>MVC解释？</p>
<p>答：数据管理、用户界面和控制逻辑，提升代码的可维护性与扩展性‌。</p>
<p><strong>模型（Model）</strong>：管理数据与业务逻辑</p>
<p><strong>视图（View）</strong>：呈现数据给用户，接收用户输入</p>
<p><strong>控制器（Controller）</strong>：协调模型与视图，处理用户请求并更新两者</p>
</li>
<li><p>Spring MVC流程：</p>
<p>答：用户请求—&gt;Servlet接受请求—&gt;Mapper解析请求—&gt;Controller处理业务—&gt;ModelAndView返回数据与视图—&gt;ViewResolver解析视图—&gt;渲染视图—&gt;响应。</p>
</li>
<li><p>JAVA中JDBC运行过程</p>
<p><strong>加载驱动</strong>‌：注册数据库驱动（如Class.forName(“com.mysql.jdbc.Driver”)）。</p>
<p><strong>建立连接</strong>‌：通过DriverManager.getConnection(url,     user, password)获取连接。</p>
<p><strong>创建Statement</strong>：使用Connection生成Statement或PreparedStatement。</p>
<p>‌<strong>执行SQL</strong>‌：调用executeQuery()（查询）或executeUpdate()（增删改）。</p>
<p><strong>处理结果</strong>‌：遍历ResultSet（查询）或获取影响行数（更新）。</p>
<p>‌<strong>关闭资源</strong>‌：依次关闭ResultSet、Statement、Connection。</p>
<p><strong>核心点</strong>‌：驱动→连接→执行→结果→关闭，全程需处理SQLException</p>
</li>
<li><p>一个员工可以查看员工的总工资和他个人的工资，但是有一个问题是，如果部门里面只有两个人的话，那么一个人就能通过这两个信息来间接查询到另一个人的工资，如何解决这个问题？</p>
<p>①<strong>调整薪资披露范围</strong>、②<strong>复杂化薪资结构</strong>‌、③<strong>增设保密协议</strong></p>
<p><strong>核心原则</strong>‌：保障员工对自身工资的知情权‌，同时通过管理手段规避隐私泄露风险。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>人机交互界面的设计原则以及命令行交互需要注意什么？</p>
<p><strong>直观性</strong>‌：操作逻辑清晰，减少学习成本。</p>
<p>‌<strong>一致性</strong>‌：界面风格、交互流程统一。</p>
<p>‌<strong>反馈机制</strong>‌：实时反馈操作结果（如加载状态、成功&#x2F;失败提示）。</p>
<p>‌<strong>容错性</strong>‌：提供撤销&#x2F;重做功能，避免误操作导致严重问题。</p>
<p>‌<strong>简洁性</strong>‌：避免冗余信息，聚焦核心功能。</p>
</li>
<li><p>做一个密码检验，第一个条件是长度是8-16位，第二个条件是必须在提供的码表内，大小写字母，数字，一些符号。</p>
<p><strong>长度校验</strong>‌：检查密码长度是否在8-16位之间。</p>
<p><strong>字符范围校验</strong>‌：遍历每个字符，确认是否在预设码表内</p>
</li>
<li><p>面向对象继承的题，类似于解决系统升级如何用以前的功能</p>
<p>答：<strong>基类保留旧功能</strong>‌、<strong>子类继承并扩展</strong>‌；<strong>原则</strong>‌：开闭原则（扩展开放，修改关闭）。</p>
</li>
<li><p>什么是面向对象方法学?它有哪些优点? </p>
<p>面向对象方法是一种运用对象、类、继承、封装、聚合、消息、多态等概念来构造系统的软件开发方法。 </p>
<p>面向对象方法的优点是：符合人们习惯的思维方式、稳定性好、可重用性好、可维护性好、容易开发大型的软件产品。</p>
</li>
<li><p>什么是对象模型？建立对象模型时主要使用那些图形符号？这些符号的含义是什么？ </p>
<p><strong>对象模型</strong>‌：描述系统中类、对象及其关系的静态结构模型，聚焦属性、方法及交互。</p>
<p><strong>常用图形符号</strong>‌（以UML类图为例）：</p>
<p>&emsp;‌①<strong>类</strong>‌（矩形）：分三栏（类名、属性、方法），如 类名 | -属性: 类型 | +方法。</p>
<p>&emsp;‌②<strong>关联</strong>‌（实线箭头）：类间引用关系（如 用户→订单），可标注角色名或多重性。</p>
<p>&emsp;‌③<strong>继承</strong>‌（空心三角箭头）：子类继承父类（如 猫→动物）。</p>
<p>&emsp;④<strong>组合&#x2F;聚合</strong>（实心&#x2F;空心菱形）：整体与部分关系（组合强，聚合弱，如 汽车◉发动机）。</p>
<p>‌<strong>含义</strong>‌：通过类与关系抽象系统结构，明确职责与协作逻辑。</p>
</li>
<li><p>什么是动态模型？建立功能模型时主要使用哪些图形符号？这些符号的含义是什么？ </p>
<p><strong>动态模型</strong>‌：描述系统行为或状态<strong>变化</strong>的模型（如交互流程、实时响应）。</p>
<p><strong>常用图形符号</strong>‌（以数据流图为例）：</p>
<p>&emsp;①<strong>外部实体</strong>‌（矩形）：系统输入&#x2F;输出的来源或终点（如用户、设备）。</p>
<p>&emsp;②<strong>过程</strong>‌（圆角矩形）：数据处理功能（如“计算订单”）。</p>
<p>&emsp;③<strong>数据存储</strong>‌（横线或开口矩形）：数据持久化位置（如数据库、文件）。</p>
<p>&emsp;④<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“订单信息”）。</p>
<p>‌<strong>含义</strong>‌：通过符号组合清晰表达系统功能的数据输入、处理、存储与输出逻辑。 </p>
</li>
<li><p>什么是功能模型？建立功能模型时主要使用哪些图形符号？</p>
<p><strong>功能模型</strong>‌：描述系统数据处理<strong>逻辑</strong>的模型，明确输入、输出及内部功能转换。</p>
<p>‌<strong>常用图形符号</strong>‌（以数据流图为主）：</p>
<p>&emsp;①<strong>外部实体</strong>‌（矩形）：数据源或终点（如用户、外部系统）。</p>
<p>‌&emsp;②<strong>处理过程</strong>‌（圆角矩形）：数据变换或计算（如“验证登录”）。</p>
<p>&emsp;③<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“请求信号”）。</p>
<p>&emsp;‌④<strong>数据存储</strong>‌（横线&#x2F;开口矩形）：数据持久化位置（如数据库、缓存）。</p>
<p>‌<strong>作用</strong>‌：通过符号组合直观展现数据如何被系统功能处理、存储与传递。</p>
</li>
<li><p>面向对象设计应该遵循哪些准则?简述每条准则的内容，并说明遵循这条准则的必要性。 </p>
<p>答: 模块化、抽象、信息隐藏、弱耦合、强内聚、可重用</p>
</li>
<li><p>简述有助于提高面向对象设计质量的每条主要启发规则的内容和必要性</p>
<p><strong>提高面向对象设计质量的主要启发规则</strong>‌：</p>
<p>单一职责原则（SRP）‌<br>&emsp;o    ‌内容‌：一个类只承担一个职责。<br>&emsp;o    ‌必要性‌：降低复杂度，提升可维护性和复用性。</p>
<p>‌开闭原则（OCP）‌<br>&emsp;o    ‌内容‌：对扩展开放，对修改关闭。<br>&emsp;o    ‌必要性‌：通过扩展而非修改适应变化，减少风险。</p>
<p>‌里氏替换原则（LSP）‌<br>&emsp;o    ‌内容‌：子类必须能完全替代父类。<br>&emsp;o    ‌必要性‌：确保继承体系的逻辑正确性。</p>
<p>‌接口隔离原则（ISP）‌<br>&emsp;o    ‌内容‌：客户端不应依赖不需要的接口。<br>&emsp;o    ‌必要性‌：避免接口臃肿，降低耦合。</p>
<p>‌依赖倒置原则（DIP）‌<br>&emsp;o    ‌内容‌：依赖抽象而非具体实现。<br>&emsp;o    ‌必要性‌：提高灵活性，支持模块解耦。</p>
<p>‌组合优于继承‌<br>&emsp;o    ‌内容‌：优先用组合实现功能复用。<br>&emsp;o    ‌必要性‌：减少继承的强耦合，增强扩展性。</p>
<p>迪米特法则（Law of Demeter）‌<br>&emsp;o    ‌内容‌：对象仅与直接关联的类交互。<br>&emsp;o    ‌必要性‌：减少依赖链，提高模块独立性。</p>
<p>‌高内聚低耦合‌<br>&emsp;o    ‌内容‌：模块内部紧密相关，模块间依赖最小化。<br>&emsp;o    ‌必要性‌：增强可维护性和可测试性。</p>
<p>‌封装变化点‌<br>&emsp;o    ‌内容‌：将易变逻辑隔离到独立模块。<br>&emsp;o    ‌必要性‌：降低修改影响，提升系统稳定性。</p>
<p>‌避免重复（DRY）‌<br>&emsp;o    内容‌：相同逻辑仅出现一次。<br>&emsp;o    ‌必要性‌：减少维护成本，保证一致性。</p>
<p>‌<strong>总结</strong>‌：通过遵循这些规则，可构建更清晰、灵活、可扩展的系统，降低开发与维护成本。</p>
</li>
<li><p>面向对象程序设计语言主要有哪些技术特点？</p>
<p><strong>面向对象程序设计语言的主要技术特点</strong>‌：</p>
<p>&emsp;‌<strong>封装</strong>‌：将数据与操作绑定在类中，隐藏实现细节，提供安全性和模块化。</p>
<p><strong>&emsp;继承</strong>‌：子类复用父类属性和方法，支持层次化设计与代码复用。</p>
<p>&emsp;‌<strong>多态</strong>‌：同一操作在不同对象中表现不同行为（如重载、覆盖），增强灵活性。</p>
<p><strong>&emsp;抽象化</strong>‌：通过接口&#x2F;抽象类定义规范，分离“做什么”与“怎么做”。</p>
<p><strong>&emsp;动态绑定</strong>‌：运行时根据对象类型确定调用方法，支持多态行为。</p>
<p>&emsp;<strong>消息传递</strong>‌：对象间通过方法调用通信，降低耦合。</p>
<p><strong>&emsp;组合与聚合</strong>‌：通过对象组合实现复杂功能，替代继承的强依赖。</p>
<p>&emsp;‌<strong>类与对象</strong>‌：以类为模板创建对象，实例化具体实体，封装状态与行为。</p>
<p>‌<strong>核心作用</strong>‌：提升代码复用性、扩展性、维护性，贴近现实问题建模。</p>
</li>
<li><p>选择面向对象程序设计语言时主要应该考虑哪些因素？</p>
<p>&emsp;<strong>语法简洁性</strong>‌：是否易于理解与开发（如Python vs C++）。</p>
<p>‌&emsp;<strong>性能需求</strong>‌：对执行效率要求高时选编译型语言（如C++&#x2F;C#）。</p>
<p>‌&emsp;<strong>跨平台能力</strong>‌：是否需支持多平台运行（如Java&#x2F;Kotlin）。</p>
<p>&emsp;‌<strong>生态系统</strong>‌：社区活跃度、框架&#x2F;库丰富性（如Java的Spring）。</p>
<p>&emsp;‌<strong>团队熟悉度</strong>‌：开发者对语言的熟练程度，降低学习成本。</p>
<p><strong>&emsp;行业标准</strong>‌：特定领域的主流语言（如游戏开发常用C#）。</p>
<p>&emsp;<strong>工具链支持</strong>‌：IDE、调试器、测试工具的成熟度。</p>
<p>&emsp;‌<strong>安全性与维护性</strong>‌：内存管理、类型系统严格性（如C#强类型）。</p>
<p>‌&emsp;<strong>项目规模</strong>‌：大型系统倾向静态语言（如Java），小型项目可选动态语言（如Python）。</p>
<p>‌<strong>核心目标</strong>‌：平衡开发效率、运行性能、长期维护成本与应用场景适配性。</p>
</li>
<li><p>工厂模式：</p>
<p><strong>一种‌创建型设计模式</strong>‌，封装对象实例化过程，通过接口统一创建逻辑，客户端无需关心具体类。</p>
<p>‌<strong>核心作用</strong>‌：</p>
<p>‌&emsp;<strong>解耦</strong>‌：分离对象创建与使用，避免代码依赖具体类。</p>
<p><strong>&emsp;扩展性</strong>‌：新增产品类型时，无需修改客户端代码（如支持MySQL&#x2F;Oracle数据库切换）。</p>
<p>‌&emsp;<strong>统一入口</strong>‌：集中管理创建逻辑（如根据配置生成不同文件解析器）。</p>
<p>‌<strong>典型实现</strong>‌：</p>
<ul>
<li>‌<strong>简单工厂</strong>‌：单一方法根据参数返回不同对象。</li>
<li>‌<strong>工厂方法</strong>‌：子类重写工厂方法，决定实例化目标类。</li>
<li>‌<strong>抽象工厂</strong>‌：创建产品族（如跨平台UI组件库）。</li>
</ul>
<p>‌<strong>适用场景</strong>‌：对象类型频繁变化、创建逻辑复杂或需全局统一控制（如依赖注入框架）</p>
</li>
<li><p>计算机软件的分类，各个分类分别介绍</p>
<p>**系统软件：**操作系统‌、‌语言处理程序、数据库管理系统、驱动程序‌</p>
<p>**应用软件：**通用软件（Web）、专用软件（Ps）、网络软件（微信）</p>
<p>**其他分类：**单机游戏、服务器软件等</p>
</li>
<li><p>静态测试和动态测试的定义</p>
<p><strong>静态测试</strong></p>
<ul>
<li>‌<strong>定义</strong>‌：不运行程序，通过检查文档、代码或设计来发现缺陷。</li>
<li>‌<strong>方法</strong>‌：代码审查、需求走查、设计评审、检查清单。</li>
</ul>
<p><strong>动态测试</strong></p>
<ul>
<li>‌<strong>定义</strong>‌：通过运行程序验证其行为是否符合预期，检查输入输出的正确性。</li>
<li>‌<strong>方法</strong>‌：单元测试、集成测试、系统测试（如功能测试、性能测试）。</li>
</ul>
<p>‌<strong>核心区别</strong>‌：静态测试基于静态分析，动态测试依赖代码执行。</p>
</li>
<li><p>时间复杂度概念</p>
<p>答：<strong>时间复杂度</strong>‌：衡量算法执行时间随‌数据规模增长的趋势，用大O符号表示。</p>
<p>‌<strong>常见阶</strong>‌：O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²)。</p>
</li>
<li><p>区分静态测试和动态测试，并分别举例</p>
<p><strong>静态测试</strong>‌：不运行代码，检查代码结构&#x2F;设计（例：代码审查、静态分析工具）。<br><strong>动态测试</strong>‌：运行程序，验证实际输出（例：单元测试（JUnit）、功能测试）。</p>
</li>
<li><p>Springboot原理：</p>
<p><strong>启动入口</strong>‌：@SpringBootApplication</p>
<p><strong>加载配置</strong>‌：读取 spring.factories 中的自动配置类，按条件初始化 Bean。</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;Bean 的作用也就是把一组数据组合成一个特殊的类便于传输。（getter、setter）</p>
<p>‌<strong>运行应用</strong>‌：启动内嵌服务器，处理请求</p>
</li>
</ol>
<p>二、编程题目：</p>
<ol>
<li>x小于0时y等于-1，x大于0时y等于1，x等于0时，y等于0。</li>
</ol>
<p>   Java：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt; <span class="number">0</span>) ? <span class="number">1</span> : (x &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>   C：</p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt; <span class="number">0</span>) - (x &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>3*3矩阵倒置行列互换写程序：</p>
<p>伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="type">int</span>[][] result=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]<span class="comment">//逆转的矩阵；</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixTranspose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(matrix);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] transposed = transpose(matrix);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n转置后矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(transposed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵转置方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>给了15个（A,B,C），键盘输入（a,b,c），然后计算之间的距离那个最短，题中会给出计算公式，用函数判断最小距离。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortDistance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] points = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>; i &lt; <span class="number">15</span>; x = ++i %<span class="number">5</span>, y = i /<span class="number">5</span>)</span><br><span class="line">            points[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;输入三个点（如A B C）: &quot;</span>);</span><br><span class="line">        String[] input = sc.nextLine().toUpperCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] selected = &#123;</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Math.hypot(selected[i]-selected[j], selected[i]-selected[j]);</span><br><span class="line">                <span class="keyword">if</span> (d &lt; min) &#123;</span><br><span class="line">                    min = d;</span><br><span class="line">                    pair = input[i] + <span class="string">&quot;-&quot;</span> + input[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;最短距离：%.2f (%s)&quot;</span>, min, pair);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Scanner类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串”);</span></span><br><span class="line"><span class="string">String a = input.nextLine();</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>求一个数的平方，且平方值的数两两相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AABBSquare</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历四位数平方的范围（32²=1024 到 99²=9801）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">32</span>; n &lt;= <span class="number">99</span>; n++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">square</span> <span class="operator">=</span> n * n;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(square);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否为四位数且符合AABB模式</span></span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">4</span> </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">0</span>) == s.charAt(<span class="number">1</span>) </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">2</span>) == s.charAt(<span class="number">3</span>)) &#123;</span><br><span class="line">                System.out.println(n + <span class="string">&quot;² = &quot;</span> + square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：88² = 7744</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编程输入十个数，将最小的与第一个数互换，最大的与第十个数互换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>;  <span class="comment">// 输入10个数存入数组  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>, maxIndex = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找最小值和最大值的索引  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) minIndex = i;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) maxIndex = i;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最小值和第一个数  </span></span><br><span class="line">swap(arr, <span class="number">0</span>, minIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 若原最大值是第一个数，更新maxIndex（因第一个数已被交换）  </span></span><br><span class="line"><span class="keyword">if</span> (maxIndex == <span class="number">0</span>) maxIndex = minIndex;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最大值和第十个数  </span></span><br><span class="line">swap(arr, <span class="number">9</span>, maxIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编程输入一个字符串，字符串中大写字母转换为小写字母，小写字母转换为大写字母</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> ...;  <span class="comment">// 获取输入字符串  </span></span><br><span class="line"><span class="type">char</span>[] chars = input.toCharArray();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (Character.isUpperCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toLowerCase(chars[i]);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toUpperCase(chars[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);  <span class="comment">// 输出result  </span></span><br><span class="line">利用Character类方法直接翻转字母大小写，非字母字符保持原样</span><br></pre></td></tr></table></figure>
</li>
<li><p>转换进制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入：num(十进制整数), base(目标进制，范围2-36)</span></span><br><span class="line"><span class="comment">// 输出：目标进制的字符串形式</span></span><br><span class="line">String <span class="title function_">convertBase</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;  <span class="comment">// 边界情况：输入为0</span></span><br><span class="line">    <span class="keyword">if</span> (base &lt; <span class="number">2</span> || base &gt; <span class="number">36</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 进制不合法</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] digits = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNegative</span> <span class="operator">=</span> num &lt; <span class="number">0</span>;</span><br><span class="line">    num = abs(num);  <span class="comment">// 处理负数</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> num % base;  <span class="comment">// 取余数</span></span><br><span class="line">        result.append(digits[remainder]);  <span class="comment">// 映射字符</span></span><br><span class="line">        num = num / base;  <span class="comment">// 更新num</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isNegative) result.append(<span class="string">&#x27;-&#x27;</span>);  <span class="comment">// 还原负号</span></span><br><span class="line">    <span class="keyword">return</span> result.reverse().toString();  <span class="comment">// 反转余数序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给定两个数组，将一组数据从一个数组替换到另一个数组，时间复杂度为n。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReplacer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span>[] source, <span class="type">int</span>[] target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.min(source.length, target.length);</span><br><span class="line">        System.arraycopy(source, <span class="number">0</span>, target, <span class="number">0</span>, n); <span class="comment">// O(n) 时间复制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>经典算法（01背包等）动态规划问题</p>
<p><strong>背包问题描述：</strong></p>
<ul>
<li>‌<strong>给定</strong>‌：物品重量数组 weight[]，价值数组 value[]，背包容量 capacity</li>
<li>‌<strong>要求</strong>‌：在不超过背包容量的前提下，求能装入物品的最大总价值</li>
<li>‌<strong>限制</strong>‌：每个物品只能选一次（0-1选择）</li>
</ul>
<p><strong>‌动态规划解法：</strong></p>
<p>&emsp;①<strong>状态定义</strong></p>
<p>&emsp;&emsp;dp[j]：容量为 j 的背包能装的最大价值。</p>
<p>&emsp;②<strong>状态转移方程‌</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</span><br></pre></td></tr></table></figure>

<p>&emsp;③<strong>初始化‌</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">0.</span>..capacity] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>&emsp;④<strong>遍历顺序‌</strong></p>
<ul>
<li><strong>外层循环</strong>‌：遍历每个物品（保证每个物品只选一次）</li>
<li>‌<strong>内层循环</strong>‌：‌倒序遍历背包容量（防止重复选择）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knapsack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01</span><span class="params">(<span class="type">int</span>[] weight, <span class="type">int</span>[] value, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weight.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 必须倒序遍历容量，避免重复选择</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> capacity; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weight = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;    <span class="comment">// 物品重量</span></span><br><span class="line">        <span class="type">int</span>[] value = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;     <span class="comment">// 物品价值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">8</span>;               <span class="comment">// 背包容量</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> knapsack01(weight, value, capacity);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大价值: &quot;</span> + maxValue);  <span class="comment">// 输出: 10（选物品0、1、3）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li><p>计算机系统上配置操作系统，主要目标是：方便性、有效性、可扩充性、开放性。</p>
</li>
<li><p>操作系统作用：①用户与硬件交互；②资源管理者；③资源的抽象。</p>
</li>
<li><p>发展过程：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特性</th>
<th>优点</th>
<th>缺点</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>未配置操作系统的计算机系统</td>
<td></td>
<td></td>
<td></td>
<td>人工（纸带）、脱机IO（磁带）</td>
</tr>
<tr>
<td>单道批处理系统</td>
<td>单道性、顺序性、自动性</td>
<td></td>
<td>不能充分利用资源</td>
<td></td>
</tr>
<tr>
<td>多道批处理系统</td>
<td>多道性、无序性、调度性</td>
<td>能提高整个系统的性能，吞吐量大，利用率高</td>
<td>资源竞争问题，不能提高任何单个进程的性能。</td>
<td></td>
</tr>
<tr>
<td>分时系统</td>
<td>单主机、多用户、（多路、独立、及时、交互）</td>
<td>可靠、交互性强、响应快</td>
<td></td>
<td>多路卡64位，缓冲区、内存、轮转运行（时间片）</td>
</tr>
<tr>
<td>实时系统</td>
<td>工业化、信息查询、多媒体、嵌入式</td>
<td>高可靠性，交互性仅对特定服务</td>
<td></td>
<td>①周期、非周期</br>②硬实时，软实时</br>③截止时间（最后期限）</td>
</tr>
<tr>
<td>微机系统</td>
<td></td>
<td></td>
<td></td>
<td>Windows</td>
</tr>
</tbody></table>
<span id="more"></span></li>
</ol>
<h3 id="二、特性（多道、分时、实时）"><a href="#二、特性（多道、分时、实时）" class="headerlink" title="二、特性（多道、分时、实时）"></a>二、特性（多道、分时、实时）</h3><ol>
<li><p>最基本特性：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>并发</td>
<td>并行与并发、进程</td>
</tr>
<tr>
<td>共享</td>
<td>资源共享或复用、互斥（只允许一个）（临界资源）（栈、变量）</td>
</tr>
<tr>
<td>虚拟</td>
<td>时分复用、空分复用</td>
</tr>
<tr>
<td>异步</td>
<td>进程的不可预知性</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="三、功能"><a href="#三、功能" class="headerlink" title="三、功能"></a>三、功能</h3><table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>处理机</td>
<td>进程控制、进程同步、进程通信、调度</td>
</tr>
<tr>
<td>存储器</td>
<td>内存分配、内存保护、地址映射、内存扩充</td>
</tr>
<tr>
<td>设备</td>
<td>缓存管理、设备分配、设备处理</td>
</tr>
<tr>
<td>文件</td>
<td>文件存储空间、目录管理、文件的读&#x2F;写管理和保护</td>
</tr>
<tr>
<td>操作系统与用户之间的接口</td>
<td>用户接口、程序接口</td>
</tr>
<tr>
<td>现代操作系统的新功能</td>
<td>系统安全、网络的功能和服务、支持多媒体</td>
</tr>
</tbody></table>
<h3 id="四、结构"><a href="#四、结构" class="headerlink" title="四、结构"></a>四、结构</h3><table>
<thead>
<tr>
<th>类型</th>
<th>包含</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>传统结构OS</td>
<td>无结构OS、模块化OS（高内聚低耦合）、分层式OS</td>
<td></td>
</tr>
<tr>
<td>现代结构OS</td>
<td>微内核</td>
<td></td>
</tr>
<tr>
<td>C&#x2F;S</td>
<td>客户端&#x2F;服务端</td>
<td></td>
</tr>
</tbody></table>
<h3 id="五、进程"><a href="#五、进程" class="headerlink" title="五、进程"></a>五、进程</h3><ol>
<li><p>概念：前趋图（有向无循环）记为：DAG（类似于拓扑图）,</p>
<p>前趋图中不允许有玄幻，所以是<strong>单向的</strong>。</p>
<p>pi—weight权—&gt;pj；pi是pj的直接前趋，pj是pi的直接后继</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/DAG.png"></p>
</li>
<li><p>程序执行：</p>
<p>①顺序：</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B1.png"></p>
<p>特性：顺序性（严格一个接一个）、封闭性（独占资源）、可再现性（条件不改变，结果总相同）</p>
<p>②并发：（不存在前趋关系）</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B2.png"></p>
<p>特性：间断性、失去封闭性、不可再现性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>进程定义：</p>
<p>①进程控制块PCB:记录了OS所需要的，用于描述进程的当前情况以及管理进程运行的全部信息。</p>
<p>②程序段</p>
<p>③相关数据段</p>
<p>特征：动态性、并发性、独立性、异步性</p>
</li>
<li><p>进程形态：</p>
<p>就绪Ready、执行Running、阻塞Block、创建、终止、挂起Suspend、激活Active</p>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.png"></p>
<ol start="5">
<li><p>进程控制块PCB：</p>
<p>包含信息：进程标识符、处理机状态、进程调度信息、进程控制信息</p>
<p>组织方式：线性方式（线性表）、链接方式（队列）、索引方式（索引表）</p>
</li>
<li><p>进程控制</p>
<p>（1）OS内核：</p>
<p>&emsp;&emsp;&emsp;&emsp;①支撑功能：中断处理、时钟管理、原语操作（完成一定功能的若干条指令）</p>
<p>&emsp;&emsp;&emsp;&emsp;②资源管理功能：进程管理、存储器管理、设备管理。</p>
<p>（2）进程的层次结构：</p>
<p>&emsp;&emsp;&emsp;&emsp;UNIX存在层次结构，Windows不存在层次结构，所有进程都有相同的地位。</p>
<p>&emsp;&emsp;&emsp;&emsp;进程图：树型结构。</p>
<p>（3）引起进程创建的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;用户登录、作业调度、提供服务、应用请求</p>
<p>（4）进程的创建：</p>
<p>&emsp;&emsp;&emsp;&emsp;①申请空白PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;②分配资源</p>
<p>&emsp;&emsp;&emsp;&emsp;③初始化PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;④就绪队列</p>
<p>（5）引起进程终止的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;正常结束、异常结束、外界干预</p>
<p>（6）进程的终止：</p>
<p>&emsp;&emsp;&emsp;&emsp;①根据终止标识符检查PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;②处于执行状态的进程——&gt;终止</p>
<p>&emsp;&emsp;&emsp;&emsp;③子孙进程——&gt;终止</p>
<p>&emsp;&emsp;&emsp;&emsp;④归还资源</p>
<p>&emsp;&emsp;&emsp;&emsp;⑤将终止PCB移除所在队列或链表</p>
<p>（7）引起进程阻塞和唤醒的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;请求共享资源失败、等待操作完成、新数据尚未到达、等待新任务的到达。</p>
<p>（8）进程同步：</p>
<p>&emsp;&emsp;&emsp;&emsp;原则：空闲让进、忙则等待、有限等待、让权等待。</p>
<p>&emsp;&emsp;&emsp;临界资源：打印机、磁带。</p>
<p>&emsp;&emsp;&emsp;临界区：临界资源所在的区域</p>
</li>
<li><p><font color="red">信号量机制：PV操作</font></p>
<p>wait()；申请资源</p>
<p>signal()；释放资源</p>
<p>典型问题：生产者-消费者问题</p>
</li>
<li><p>进程和管程：</p>
<table>
<thead>
<tr>
<th></th>
<th>类型</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>进程</td>
<td>私有数据结构PCB</td>
<td>顺序执行、并发、主动</td>
</tr>
<tr>
<td>管程</td>
<td>公共数据结构</td>
<td>同步、初始化、互斥、被动</td>
</tr>
</tbody></table>
</li>
<li><p>进程通信：</p>
<p>类型：共享存储器系统、管道pipe通信系统、消息传递系统、客户机-服务器系统</p>
<p>实现方式：直接消息传递系统、信箱通信</p>
</li>
<li><p>线程：提高程序并发执行的程度。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>进程</td>
<td>可拥有资源的独立单位，可独立调度和分派的基本单位（传统OS）</td>
<td>PCB、拥有系统资源、开销大</td>
</tr>
<tr>
<td>线程</td>
<td>可独立调度和分派的基本单位（引入线程的OS）</td>
<td>TCB、不拥有系统资源，仅拥有控制线程运行的TCB、共享进程资源、开销小</td>
</tr>
</tbody></table>
</li>
<li><p>线程的实现：</p>
<p>（1）分类：</p>
<p>&emsp;&emsp;&emsp;内核支持线程KST：阻塞在线程一级；</p>
<p>&emsp;&emsp;&emsp;用户级线程ULT：阻塞在用户进程</p>
<p>（2）实现：内核支持、用户级</p>
</li>
</ol>
<h3 id="六、处理及调度与死锁"><a href="#六、处理及调度与死锁" class="headerlink" title="六、处理及调度与死锁"></a>六、处理及调度与死锁</h3><ol>
<li><p>处理机调度的层次：</p>
<table>
<thead>
<tr>
<th>层次</th>
<th>调度对象</th>
<th>目的</th>
<th>应用于</th>
<th>调度算法（看下）</th>
</tr>
</thead>
<tbody><tr>
<td>高级调度（长程调度、作业调度）</td>
<td>作业</td>
<td>外存调入内存</td>
<td>多道批处理系统</td>
<td></td>
</tr>
<tr>
<td>低级调度（短程调度、进程调度）</td>
<td>进程</td>
<td>决定哪个进程获得处理机</td>
<td>多道批、分时、实时系统</td>
<td></td>
</tr>
<tr>
<td>中级调度（内存调度）</td>
<td>内外存交互</td>
<td>将暂时不能运行的进程从内存调至外存</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>处理机调度算法目标：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>目标</th>
</tr>
</thead>
<tbody><tr>
<td>处理机调度</td>
<td>资源利用率、公平、平衡、策略强制执行</td>
</tr>
<tr>
<td>批处理系统</td>
<td>平均周转时间短、系统吞吐量高、处理机利用率高</td>
</tr>
<tr>
<td>分时系统</td>
<td>响应时间快、均衡</td>
</tr>
<tr>
<td>实时系统</td>
<td>截止时间的保证、可预测</td>
</tr>
</tbody></table>
</li>
<li><p><strong>作业调度算法：</strong></p>
<p>（1）作业、作业步、作业控制块JCB</p>
<p>（2）状态：收容阶段（后备状态）、运行阶段（运行状态）、完成阶段（完成状态）</p>
<p>（3）算法：</p>
<p>&emsp;&emsp;①先来先服务FCFS</p>
<p>&emsp;&emsp;②短作业优先SJF</p>
<p>&emsp;&emsp;③优先级调度PSA</p>
<p>&emsp;&emsp;④高响应比优先调度HRRN：</p>
<p>&emsp;&emsp;&emsp;&emsp;优先权&#x3D;（等待时间+要求服务时间）&#x2F;要求服务时间&#x3D;1+（等待时间&#x2F;要求服务时间）</p>
<p>完成时刻&#x3D;开始时刻+运行时间</p>
<p>周转时间&#x3D;完成时刻-进入时刻</p>
<p>带权周转时间&#x3D;周转时间&#x2F;运行时间</p>
<p>平均等待时间&#x3D;Σ（周转时间-运行时间）÷ n</p>
<p>平均带权周转时间&#x3D;带权周转时间&#x2F;作业个数</p>
</li>
<li><p><strong>进程调度算法：</strong></p>
<p>调度方式：</p>
<p>&emsp;&emsp;非抢占方式：</p>
<p>&emsp;&emsp;抢占方式：优先权原则、短进程优先原则、时间片原则</p>
<p>算法：</p>
<p>（1）轮转调度算法RR（round robin）</p>
<p>（2）优先级调度算法：分为：非抢占式和抢占式。</p>
<p>&emsp;&emsp;优先级类型：静态、动态（每次调度都要计算响应比增加系统开销）</p>
<p>（3）多队列调度算法</p>
<p>（4）多级反馈队列调度算法（multileved feedback queue）</p>
<p>（5）基于公平原则的调度算法</p>
</li>
<li><p><strong>实时调度算法：</strong></p>
<p>调度方式：</p>
<p>&emsp;&emsp;非抢占方式：轮转、优先级</p>
<p>&emsp;&emsp;抢占方式：时钟中断、立即抢占的优先级</p>
<p>算法：</p>
<p>（1）最早截止时间优先EDF（Earliest Deadline First）:分为抢占式和非抢占式</p>
<p>（2）最低松弛度优先LLF（Least Laxity First）：松弛度越高任务越紧急</p>
<p>&emsp;&emsp;松弛度&#x3D;必须完成时间-其本身的运行时间-当前时间</p>
<p>（3）优先级倒置（priority inversion problem）</p>
<p>参考： <a href="https://blog.csdn.net/m0_48241022/article/details/142188201">链接</a></p>
</li>
<li><p>死锁：</p>
<p>（1）类型：</p>
<p>&emsp;&emsp;①竞争不可抢占资源</p>
<p>&emsp;&emsp;②竞争可消耗资源</p>
<p>&emsp;&emsp;③进程推进顺序不当</p>
<p>（2）定义：</p>
<p>&emsp;&emsp;进程A一直等待进程B所占有的资源。</p>
<p>（3）发生必要条件：</p>
<p>&emsp;&emsp;①互斥</p>
<p>&emsp;&emsp;②请求和保持</p>
<p>&emsp;&emsp;③不可抢占</p>
<p>&emsp;&emsp;④循环等待</p>
<p>（4）处理方法：</p>
<table>
<thead>
<tr>
<th>方法类型</th>
<th>是否允许死锁</th>
<th>破坏条件</th>
</tr>
</thead>
<tbody><tr>
<td>预防死锁</td>
<td>不允许</td>
<td>（1）两种协议：<br>①一次性申请全部资源<br>②仅获取运行初期资源<br>（2）破坏不可抢占条件<br>破坏循环等待条件</td>
</tr>
<tr>
<td>避免死锁</td>
<td>不允许</td>
<td>安全态&#x3D;可避免发生死锁；<br>不安全态，可能进入死锁<br>安全态-&gt;不安全态<br>银行家算法、安全性算法</td>
</tr>
<tr>
<td>检测死锁</td>
<td>允许</td>
<td></td>
</tr>
<tr>
<td>解除死锁</td>
<td>允许</td>
<td></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;①<strong>银行家算法：</strong>（确定Request过程）</p>
<p>&emsp;&emsp;&emsp;系统中有五个进程{P0,P1,P2,P3,P4}和三类资源{A,B,C}，各种资源的数量分别为10，5，7，在<strong>T0</strong>时刻的资源分配情况为：</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Max（总共需要资源）</th>
<th>Allocation（已匹配）</th>
<th>Need（ 还需要）</th>
<th>Available（现在可用）</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
</tr>
<tr>
<td>P0</td>
<td>&emsp;7&emsp;&emsp;5&emsp;&emsp;3</td>
<td>&emsp;0&emsp;&emsp;1&emsp;&emsp;0</td>
<td>&emsp;7&emsp;&emsp;4&emsp;&emsp;3</td>
<td>&emsp;3&emsp;&emsp;3&emsp;&emsp;2</td>
</tr>
<tr>
<td>P1</td>
<td>&emsp;3&emsp;&emsp;2&emsp;&emsp;2</td>
<td>&emsp;2&emsp;&emsp;0&emsp;&emsp;0</td>
<td>&emsp;1&emsp;&emsp;2&emsp;&emsp;2</td>
<td></td>
</tr>
<tr>
<td>P2</td>
<td>&emsp;9&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;3&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;6&emsp;&emsp;0&emsp;&emsp;0</td>
<td></td>
</tr>
<tr>
<td>P3</td>
<td>&emsp;2&emsp;&emsp;2&emsp;&emsp;2</td>
<td>&emsp;2&emsp;&emsp;1&emsp;&emsp;1</td>
<td>&emsp;0&emsp;&emsp;1&emsp;&emsp;1</td>
<td></td>
</tr>
<tr>
<td>P4</td>
<td>&emsp;4&emsp;&emsp;3&emsp;&emsp;3</td>
<td>&emsp;0&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;4&emsp;&emsp;3&emsp;&emsp;1</td>
<td></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;②<strong>安全性算法：</strong>（确定安全序列）</p>
<p>&emsp;&emsp;（起始）Work&#x3D;Available</p>
<p>&emsp;&emsp;（后续）Work&#x3D;Work+Allocation</p>
<p>&emsp;&emsp;<strong>（安全性判定）Need≤Work（这是一个全程操作，每进行一次请求(Request)都要进行安全检查）</strong></p>
<p>&emsp;借助于该安全性算法，可以<strong>确定安全序列</strong>，如下：</p>
<p>&emsp;推断<strong>T0</strong>时刻的安全序列：</p>
<p>&emsp;此时Available&#x3D;3 3 2，<strong>Work1</strong>&#x3D;3 3 2</p>
<p>&emsp;P1的Need&#x3D;1 2 2&lt;<strong>Work1</strong>&#x3D;3 3 2安全，释放P1的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work2</strong>&#x3D;Work1+P1的Allocation&#x3D;3 3 2+2 0 0&#x3D;5 3 2</font></p>
<p>&emsp;P2的Need&#x3D;6 0 0&gt;<strong>Work2</strong>&#x3D;5 3 2不安全，舍去；</p>
<p>&emsp;P3的Need&#x3D;0 1 1&lt;<strong>Work2</strong>&#x3D;5 3 2安全，释放P3的Allocation资源，<br>&emsp;&emsp;&emsp;<font color="red"><strong>Work3</strong>&#x3D;Work2+P3的Allocation&#x3D;5 3 2+2 1 1&#x3D;7 4 3</font></p>
<p>&emsp;P4的Need&#x3D;4 3 1&lt;<strong>Work3</strong>&#x3D;7 4 3安全，释放P4的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work4</strong>&#x3D;Work3+P4的Allocation&#x3D;7 4 3+0 0 2&#x3D;7 4 5</font></p>
<p>&emsp;P2的Need&#x3D;6 0 0&lt;<strong>Work4</strong>&#x3D;7 4 5安全，释放P2的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work5</strong>&#x3D;Work4+P2的Allocation&#x3D;7 4 5+3 0 2&#x3D;10 4 7</font></p>
<p>&emsp;P0的Need&#x3D;7 4 3&lt;<strong>Work5</strong>&#x3D;10 4 7安全，释放P0的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work6</strong>&#x3D;Work5+P0的Allocation&#x3D;10 4 7+0 1 0&#x3D;10 5 7</font></p>
<p>&emsp;&emsp;&emsp;到此资源全部释放。</p>
<p>&emsp;得到安全序列为：{P1,P3,P4,P2,P0}。</p>
<p>&emsp;如果不存在安全序列，则该系统不安全。</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（工作向量）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><font color="red">3     3     2</font></td>
<td>1     2     2</td>
<td>2     0     0</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="orange">7     4     5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="purple">10     4     7</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="purple">10     4     7</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;③银行家算法续：</p>
<p>&emsp;&emsp;对Pi发出Request请求后，启用Request去比较对Pi得分Need[i]和Available[i]，</p>
<p>&emsp;&emsp;&emsp;&emsp;如果Request&lt;Need[i]，则继续比较Request&lt;Available[i]；否则报错。</p>
<p>&emsp;&emsp;&emsp;&emsp;当Request&lt;Available[i]时，Available[i]&#x3D;Available[i]-Request；</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Allocation[i]&#x3D;Allocation[i]+Request；</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Need[i]&#x3D;Need[i]-Request；</p>
<p>&emsp;&emsp;再次确认安全序列；</p>
<p>&emsp;&emsp;进行下一轮Request。</p>
<p>&emsp;&emsp;例1：当前安全序列为{P1,P3,P4,P2,P0}：P1发出请求Request(1，0，2)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Need[1]&#x3D;1，2，2</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Available(3，3，2)</p>
<p>&emsp;&emsp;&emsp;&emsp;<strong>Available[1]</strong>&#x3D;Available[1]-Request(1，0，2)&#x3D;3 3 2 - 1 0 2 &#x3D; <font color="red"><strong>2，3，0</strong>；</font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[1]&#x3D;Allocation[1]+Request(1，0，2)&#x3D;2 0 0 + 1 0 2 &#x3D; 3，0，2；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[1]&#x3D;Need[1]-Request(1，0，2)&#x3D;1 2 2 - 1 0 2 &#x3D; 0，2，0；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 3 0</font></strong></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
</tbody></table>
<p>根据目前的安全序列{P1,P3,P4,P2,P0}进行安全检查：</p>
<p>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）初始</th>
<th>Allocation（已匹配）初始</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 3 0</font></strong></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="orange">7     4     5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="purple">10 4 7</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="purple">10 4 7</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>得到安全序列1{P1,P3,P4,P2,P0}，或者：</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）初始</th>
<th>Allocation（已匹配）初始</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><font color="red">2 3 0</font></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="orange">7     4     5</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="purple">7 5 5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="purple">7 5 5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>得到安全序列2{P1,P3,P4,P0,P2}。</p>
<p>&emsp;&emsp;例2：继P1发出Request(1，0，2)请求后，P0发出请求Request(0，2，0)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Need[0]&#x3D;7，4，3</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Available(<strong>2，3，0</strong>)</p>
<p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，2，0)&#x3D;2 3 0 - 0 2 0 &#x3D; <font color="red"><strong>2，1，0；</strong></font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，2，0)&#x3D;0 1 0 + 0 2 0&#x3D; 0，3，0；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，2，0)&#x3D;7 4 3 - 0 2 0 &#x3D; 7，2，3；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P0</td>
<td><strong><font color="red">2 1 0</font></strong></td>
<td>7     2     3</td>
<td>0     3     0</td>
<td><font color="blue">2 4 0</font></td>
</tr>
<tr>
<td>P1</td>
<td></td>
<td>1 2 2-&gt;0 2 0<br>这里是因为例1的P1请求(Request)引得变化</td>
<td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td>
<td></td>
</tr>
<tr>
<td>P2</td>
<td></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td></td>
</tr>
<tr>
<td>P3</td>
<td></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td></td>
</tr>
<tr>
<td>P4</td>
<td></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td></td>
</tr>
</tbody></table>
<p>此时的Work1+available&#x3D;210已经不能满足剩下的进程Need，所以此时系统进入不安全状态，此时系统不分配资源。</p>
<p>&emsp;&emsp;例3：当P0发出请求Request(0，1，0)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Need[0]&#x3D;7，4，3</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Available(<strong>2，3，0</strong>)</p>
<p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，1，0)&#x3D;2 3 0 - 0 1 0 &#x3D;<font color="red"> <strong>2，2，0</strong>；</font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，1，0)&#x3D;0 1 0 + 0 1 0&#x3D; 0，2，0；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，1，0)&#x3D;7 4 3 - 0 1 0 &#x3D; 7，3，3；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 2 0</font></strong></td>
<td>1 2 2-&gt;<strong>0 2 0</strong><br/>这里是因为例1的P1请求(Request)引得变化</td>
<td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td>
<td><font color="blue">5 2 2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5 2 2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7 3 3</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="green">7 3 3</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="orange">10 3 5</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="orange">10 3 5</font></td>
<td>7     3     3</td>
<td>0     2     0</td>
<td><font color="purple">10 5 5</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="purple">10 5 5</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td>10 5 7</td>
</tr>
</tbody></table>
<p>得到安全序列：{P1,P3,P2,P0,P4}</p>
<p>（5）死锁检测：</p>
<p>&emsp;&emsp;死锁定理：进程处于死锁状态的充分条件是当且仅当该进程的资源分布图是不可简化的。</p>
<p>&emsp;&emsp;资源分布图的简化：P1释放资源后，便可使P2获得资源而继续运行，在进行一些的简化后，若能消除途中所有的边，使所有的的进程节点都成为孤立结点，则称该图是可完全简化的。</p>
<p>（6）死锁解除：</p>
<p>&emsp;&emsp;抢占资源、终止或撤销进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格七、存储器管理</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="七、存储器管理"><a href="#七、存储器管理" class="headerlink" title="七、存储器管理"></a>七、存储器管理</h3><ol>
<li><p>程序的接入：</p>
<table>
<thead>
<tr>
<th>内存接入情况</th>
<th>适用于</th>
</tr>
</thead>
<tbody><tr>
<td>绝对接入方式</td>
<td>单道程序环境</td>
</tr>
<tr>
<td>可重定位装入方式</td>
<td>单道程序环境</td>
</tr>
<tr>
<td>动态运行时的装入方式</td>
<td>多道程序环境</td>
</tr>
</tbody></table>
</li>
<li><p>程序的链接：</p>
<p>静态链接方式、装入时动态链接、运行时动态链接。</p>
</li>
<li><p>连续分配存储器管理方式：</p>
<p>（1）单一连续分配：程序独占空间。</p>
<p>（2）固定分区分配：每个分区装入一道作业。</p>
<p>&emsp;&emsp;&emsp;划分分区方法：①分区大小相等；②分区大小不等。</p>
<p>&emsp;&emsp;&emsp;内存分配：分区表（分区的起始地址、大小、状态）</p>
<p>&emsp;&emsp;&emsp;&emsp;外碎片：在分区外未使用。内碎片：在分区内未使用。</p>
<p>（3）动态分区分配：</p>
<p>&emsp;&emsp;&emsp;①基于顺序搜索的动态分区分配算法：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;首次适应算法First fit(FF)、循环首次适应算法Next fit(NF)、最佳适应算法Best fit(BF)、</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;最坏适应算法Worst fit(WF)</p>
<p>&emsp;&emsp;&emsp;②基于索引搜索的动态分区分配算法：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;快速适应算法Quick fit、伙伴系统Buddy system、哈希算法</p>
<p>（4）动态可重定位分区分配：紧凑、动态重定位</p>
</li>
<li><p>对换：将内存中暂时无法运行或不用的程序和数据换出到外存上，以便腾出足够的内存空间，再把需要运行的换入内存。</p>
<p>类型：整体对换、页面（分段）对换</p>
</li>
<li><p>分页存储管理方式：</p>
<p>页块、物理块、地址结构（页号|位偏移）、页表、多级页表、反置页表</p>
</li>
<li><p>分段存储管理方式：</p>
<p>地址结构（段号|段内地址）、段表、信息共享、越界</p>
<p>分页与分段区别：页是信息的物理单位、页的大小固定且由系统决定、分页的用户程序地址空间是一位的</p>
</li>
<li><p>段页式存储管理方式：</p>
<p>用户程序——&gt;若干段——&gt;若干页；</p>
<p>地址变换过程：</p>
<p>&emsp;&emsp;访问数据需要3次内存调用：第1次：内存段表，第2次：内存页表，第3次：数据</p>
<p>&emsp;&emsp;高速缓冲寄存器的设定便是为了提升该3次内存调用速度</p>
</li>
</ol>
<h3 id="八、虚拟存储器"><a href="#八、虚拟存储器" class="headerlink" title="八、虚拟存储器"></a>八、虚拟存储器</h3><ol>
<li><p>实现方式：请求分页系统、请求分段系统</p>
</li>
<li><p>请求分页系统：缺页中断</p>
</li>
<li><p>页面置换算法：</p>
<p>①最佳置换算法Optimal</p>
<p>②先进先出页面置换算法FIFO</p>
<p>③最近最久未使用置换算法LRU</p>
<p>④最少使用置换算法LFU</p>
<p>⑤Clock置换算法</p>
<p>⑥页面缓冲算法PBA（Page Buffering Algorithm）</p>
<p>缺页次数&#x3D;缺页中断：即当所要访问的页面不在内存中时，便产生缺页中断。</p>
<p>缺页率&#x3D;缺页次数&#x2F;总页数（总访问次数）</p>
<p>例：LRU</p>
<table>
<thead>
<tr>
<th></th>
<th>7</th>
<th></th>
<th>0</th>
<th></th>
<th>1</th>
<th></th>
<th>2</th>
<th></th>
<th>0</th>
<th>3</th>
<th></th>
<th>0</th>
<th>4</th>
<th></th>
<th>2</th>
<th></th>
<th>3</th>
<th></th>
<th>0</th>
<th></th>
<th>3</th>
<th>2</th>
<th>1</th>
<th></th>
<th>2</th>
<th>0</th>
<th></th>
<th>1</th>
<th>7</th>
<th></th>
<th>0</th>
<th>1</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td>7</td>
<td></td>
<td>7</td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>4</td>
<td></td>
<td>4</td>
<td></td>
<td>4</td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td>3</td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td>2</td>
<td></td>
<td>2</td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺页中断：</td>
<td></td>
<td>1次</td>
<td></td>
<td>2</td>
<td></td>
<td>3</td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td>5</td>
<td></td>
<td></td>
<td>6</td>
<td></td>
<td>7</td>
<td></td>
<td>8</td>
<td></td>
<td>9</td>
<td></td>
<td></td>
<td></td>
<td>10</td>
<td></td>
<td></td>
<td>11</td>
<td></td>
<td></td>
<td>12</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>缺页率为：12&#x2F;20&#x3D;60%</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h3><ol>
<li><p>冯·诺依曼计算机</p>
<p>组成：</p>
<p>运算器、存储器、控制器（控制、指挥程序和数据的输入运行及处理结果）、输入设备、输出设备；</p>
<p>特点：</p>
<p>指令和数据以同等地位存放于存储器内，可按地址寻访；</p>
<p>指令和数据均用二进制数表示；</p>
<p>指令由操作码（操作）和地址码（操作数在存储器中的位置）组成；</p>
<p>指令在存储器中是顺序存储的。</p>
<p>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成。</p>
<span id="more"></span>
</li>
<li><p>现代计算机组成：</p>
<p>CPU、存储器、IO设备</p>
<p>运算器：至少3个寄存器和1个算术逻辑单元ALU，ACC为累加器，MQ为乘商寄存器，累加寄存器AC</p>
<p>主寄存器（主存&#x2F;内存）：<strong>主存地址寄存器MAR</strong>、<strong>主存数据寄存器MDR</strong></p>
<p>控制器：神经中枢，由<strong>程序计数器PC</strong>（存放下一条指令的地址）、<strong>指令寄存器IR</strong>（存放当前正在执行的指令）、<strong>控制单元CU</strong>组成</p>
<p>关系：<img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1.png"></p>
</li>
<li><p>机器指令格式：</p>
<table>
<thead>
<tr>
<th>操作码（取数、存数、加、减、乘、除、停机、打印等）</th>
<th>地址码（操作数在存储器中的位置）</th>
</tr>
</thead>
<tbody><tr>
<td>6位</td>
<td>10位</td>
</tr>
</tbody></table>
</li>
<li><p>计算机硬件的主要技术指标：</p>
<p>机器字长：CPU一次能处理数据的位数（字长越长，数的表示范围越大，精度越高）</p>
<p>存储容量：主存容量和辅存容量</p>
<p>运算速度：吉普森（Gibson）法衡量运算速度（每条指令的执行时间以及他们在全部操作中所占的百分比）</p>
<p>或采用MIPS（百万条指令每秒）作为计量单位，或采用CPI（执行一条指令所需要的时钟周期（机器主频的倒数））</p>
</li>
<li><p>DMA技术：直接访问内存，无需 CPU 干预直接读写内存</p>
</li>
</ol>
<h3 id="二、系统总线：（可看可不看）"><a href="#二、系统总线：（可看可不看）" class="headerlink" title="二、系统总线：（可看可不看）"></a>二、系统总线：（可看可不看）</h3><ol>
<li><p>总线连接：将各部件连到<strong>一组</strong>公共信息传输线上。</p>
</li>
<li><p>分散连接：各部件之间使用单独的连线。</p>
</li>
<li><p>总线分类：</p>
<table>
<thead>
<tr>
<th>片内总线（芯片内部）</th>
<th>系统总线（CPU、主存、IO设备各大部件之间的信息传输线）</th>
<th>通信总线</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>数据总线</td>
<td></td>
</tr>
<tr>
<td></td>
<td>地址总线</td>
<td></td>
</tr>
<tr>
<td></td>
<td>控制总线</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>总线特性：</p>
<p>机械（插座标准）、电气（每一根传输线上信号的传递方向与有效的电平范围）</p>
</li>
<li><p>总线性能指标：</p>
<p>宽度、带宽、时钟同步&#x2F;异步、复用、信号线数、控制方式、负载、电源电压</p>
</li>
<li><p>总线标准：</p>
<p>ISA、EISA、VESA、PCI、AGP、RS-232C、USB</p>
</li>
<li><p>总线结构：</p>
<p>单总线、多总线</p>
</li>
<li><p>总线控制：</p>
<p>总线判优控制：</p>
<table>
<thead>
<tr>
<th>集中式（将控制逻辑集中在一处，如CPU）</th>
<th>分布式（将控制逻辑分散在与总线连接的各个部件或设备上）</th>
</tr>
</thead>
<tbody><tr>
<td>链式查询</td>
<td></td>
</tr>
<tr>
<td>计数器定时查询</td>
<td></td>
</tr>
<tr>
<td>独立请求查询</td>
<td></td>
</tr>
</tbody></table>
<p>总线通信控制：（总线周期4步）</p>
<p>&emsp;申请分配阶段、寻址阶段、传数阶段、结束阶段</p>
</li>
</ol>
<p>​		&emsp;四种通信控制方式：同步、异步、半同步、分离式</p>
<h3 id="三、存储器"><a href="#三、存储器" class="headerlink" title="三、存储器"></a>三、存储器</h3><ol>
<li><p>分类：</p>
<table>
<thead>
<tr>
<th>存储介质</th>
<th>存取方式</th>
<th>在计算机中的作用</th>
</tr>
</thead>
<tbody><tr>
<td>半导体存储器（TTL半导体）（MOS半导体）</td>
<td>随机存储器RAM</td>
<td>主存储器（RAM、ROM）</td>
</tr>
<tr>
<td>磁表面存储器</td>
<td>只读存储器ROM（只能读不能重写）<br>包含：可编程只读PROM、紫外线擦除可编程EPROM、电擦除可编程EEPROM</td>
<td>辅助存储器（光盘、磁带、磁盘）</td>
</tr>
<tr>
<td>磁芯存储器</td>
<td>串行访问</td>
<td>缓冲存储器Cache</td>
</tr>
<tr>
<td>光盘存储器</td>
<td></td>
<td>闪速存储器</td>
</tr>
</tbody></table>
</li>
<li><p>存储器层次结构：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2.png"></p>
<p>缓存-主存层次（解决CPU和主存速度不匹配问题）</p>
<p>主存-辅存层次（解决存储系统的容量问题）（数据调动是由硬件自动完成，程序员看不见）：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/3.png"></p>
</li>
<li><p>主存储器：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4.png"></p>
<p>（1）主存中存储单元地址的分配：</p>
<p>​    高位字节地址为字地址：0 4 8</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>​    低位字节为字地址：0 2 4</p>
<table>
<thead>
<tr>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>（2）技术指标：</p>
<p>​    存储容量、储速度（存取时间和存取周期）、存储器带宽（衡量数据传输率的重要技术指标）</p>
</li>
<li><p>半导体存储芯片：</p>
<p>（1）基本结构：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5.png"></p>
<p>&emsp;存储芯片通过地址总线、数据总线和控制总线与外部连接。</p>
<p>&emsp;地址线是单向输入、其位数与芯片容量有关。</p>
<p>&emsp;数据线是双向的</p>
<p>（2）译码驱动方式：</p>
<p>&emsp;线选法、重合法</p>
</li>
<li><p>随机存取存储器</p>
<p>静态RAM、动态RAM</p>
<p>动态刷新RAM的刷新：</p>
<p>​        刷新的过程实质上是先将原存信息读出，再由刷新放大器形成原信息并重新写入的再生过程。</p>
<p>&emsp;&emsp;包含集中刷新、分散刷新、异步刷新。</p>
<p>动态RAM和静态RAM的比较：</p>
<table>
<thead>
<tr>
<th></th>
<th>动态RAM（电容）</th>
<th>静态RAM</th>
</tr>
</thead>
<tbody><tr>
<td>集成度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>功耗</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>价格</td>
<td>便宜</td>
<td>贵</td>
</tr>
<tr>
<td>容量</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>存取周期</td>
<td>慢（唯一缺点）</td>
<td>快</td>
</tr>
</tbody></table>
</li>
<li><p>只读存储器</p>
<p>&emsp;看上述的分类表格</p>
</li>
<li><p>存储器和CPU的连接<font color="red">（<strong>画图</strong>）</font></p>
<p>（1）存储容量的扩展：</p>
<p>&emsp;位扩展（增加存储字长）</p>
<p>&emsp;字扩展（增加存储字的数量）</p>
<p>&emsp;字、位扩展（既增加存储字的数量、又增加存储字长）</p>
<p>（2）存储器与CPU的连接：</p>
<p>&emsp;①地址线的连接：存储芯片的容量不同，其地址线数也不同，CPU的地址线数目&gt;存储芯片的。</p>
<p>&emsp;&emsp;通常将CPU地址线的低位与存储芯片的地址线相连。</p>
<p>&emsp;&emsp;而CPU地址线的高位要么在存储芯片扩充时用，要么在其他用途。</p>
<p>&emsp;②数据线的连接：必须保证CPU的数据线数与存储芯片的数据位数相等。</p>
<p>&emsp;③读、写命令线的连接：高电平为读、低电平为写</p>
<p>&emsp;④片选线的连接：CPU与存储芯片正确工作的关键</p>
<p>&emsp;⑤合理选择存储芯片：类型RAM或ROM，数量的选择。</p>
</li>
<li><p>存储器的校验：<font color="red">（<strong>检错计算</strong>）</font></p>
<p>定义：检测到存储过程中可能出现的差错，并及时纠正。通常可将原数据配成<font color="red"><strong>汉明编码</strong></font></p>
<p><strong>汉明码</strong>：一位纠错能力。</p>
<p>n+k：欲检测的二进制代码为n位，需要增加k位检测位实现纠错能力。</p>
<p><strong>汉明码编码过程：</strong></p>
<p>①判定检验位个数：公式为：2^k≥n+k+1</p>
<p>②确定检验位的位置：校验位固定在第2^n次处，即第1 2 4 8 …处；</p>
<p>③检验位”_”的取值：（配偶原则）异或运算</p>
<p>第一位C1包含<strong>1</strong>，3，5，7，9，11…（取一个隔一个）</p>
<p>第二位C2包含<strong>2，3</strong>，6，7，10，11，14，15…（取二个隔二个）</p>
<p>第三位C4包含<strong>4，5，6，7</strong>，12，13，14，15…（取四个隔四个）</p>
<p>第四位C8包含**8，9，10，11，12，13，14，15，**24…（取八个隔八个）</p>
<p>C1&#x3D;1位㊉3位㊉5位㊉7位㊉…</p>
<p>C2&#x3D;2位㊉3位㊉6位㊉7位㊉…</p>
<p>C4&#x3D;4位㊉5位㊉6位㊉7位㊉…</p>
<p>C8&#x3D;8位㊉9位㊉10位㊉11位㊉…</p>
<p>例题：</p>
<hr>
<p>以10101编码为例，创建一个汉明码编码的空间，并且把源码填入编码的对应位中中，_ _ 1 _ 0 10 _ 1，并留出校验码位（校验位先设为0）。（因为2^4 - 1&gt;&#x3D; 5+4 &amp;&amp; 2^3 - 1 &lt; 5+ 3所以需要4位校验码）</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody><tr>
<td>C1</td>
<td>C2</td>
<td>1</td>
<td>C4</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>C8</td>
<td>1</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>计算校验码的第一位C1（1,3,5,7,9进行异或）: 空㊉1㊉0㊉0㊉1&#x3D;0</p>
<p>结果为0，所以汉明码第2^0位为0，结果为0 _ 1 _ 0 10 _ 1</p>
</li>
<li><p>计算校验码的第二位C2（2,3,6,7进行异或）: 空㊉1㊉1㊉0&#x3D;0</p>
<p>结果为0，所以汉明码第2^1位为0，结果为001 _ 0 10 _ 1</p>
</li>
<li><p>计算校验码的第三位C4（4,5,6,7进行异或）: 空㊉0㊉1㊉0&#x3D;1</p>
<p>结果为1，所以汉明码第2^2位为0，结果为0011 0 10 _ 1</p>
</li>
<li><p>计算校验码的第四位C8（8, 9进行异或）: 空㊉1&#x3D;0</p>
<p>结果为0，所以汉明码第2^3位为0，结果为0011 0100 1</p>
</li>
<li><p>所以最终编码为001101001.</p>
</li>
</ul>
</blockquote>
<p>参考：<a href="https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html">https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html</a></p>
<p>1 ⊕ 1 &#x3D; 0</p>
<p>0 ⊕ 0 &#x3D; 0</p>
<p>1 ⊕ 0 &#x3D; 1</p>
<p>0 ⊕ 1 &#x3D; 1</p>
<p>同为 0，异为 1</p>
<p><strong>汉明码的纠错过程：</strong></p>
<p>①对接收到的错误汉明码进行异或运算即可。</p>
<p>②异或运算结果为0，则没有错误；运算结果为1，则存在错误。</p>
<p>③根据错误去判断错在哪个位置。（抑或结果反着排列，在转换为十进制即得错误位置）</p>
<p>例题：</p>
<p>假设我们现在收到的编码为001101001，我们可以发现汉明码的第8位与原来的汉明码001101011不同，那我们怎么找出这个第8位的错误编码呢？</p>
<p>​                       123456789</p>
<p>对错误汉明码001101001进行异或运算</p>
<blockquote>
<ul>
<li><p>P1&#x3D;0㊉1㊉0㊉0㊉1&#x3D;0（1,3,5,7,9进行异或），</p>
</li>
<li><p>P2&#x3D;0㊉1㊉1㊉0&#x3D;0（2,3,6,7进行异或），</p>
</li>
<li><p>P4&#x3D;1㊉0㊉1㊉0&#x3D;0（4,5,6,7进行异或）</p>
</li>
<li><p>P8&#x3D;0㊉1&#x3D;1（8, 9进行异或），</p>
<p>将上述结果反着排列得到1000转换为十进制即8，所以错误位置为8</p>
<p><strong>0</strong>×2^0 + <strong>0</strong>×2^1 + <strong>0</strong>×2^2 + <strong>1</strong>×2^3 &#x3D; 8</p>
</li>
</ul>
</blockquote>
</li>
<li><p>提高访存速度的措施</p>
<p>寻找高速元件、采用层次结构、调整主存的结构（单体多字系统（先取多条指令，再一条一条送至CPU执行）、多体并行系统（多体模块组成的寄存器，并行工作）、高性能存储芯片）</p>
</li>
<li><p>高速缓冲存储器：（时间和空间局限性导致出现）</p>
</li>
</ol>
<p>   （1）命中：主存块已调入缓存块，建立对应关系。</p>
<p>   &emsp;&emsp;未命中：为建立对应关系。</p>
<p>   （2）Cache的容量和块长是影响Cache效率的重要因素。</p>
<p>   （3）Cache的组成：</p>
<p>   &emsp;&emsp;Cache存储体、地址映射变换机构、替换机构、Cache的读写操作（写：写直达法、写回法）</p>
<p>   （4）Cache的改进：多级缓存（片内缓存、片外缓存）、统一缓存（数据和指令都在一起）和分立缓存（数据和指令分别存放）</p>
<p>   （5）Cache—主存地址映射</p>
<p>   &emsp;&emsp;地址映射：主存地址映射到Cache地址；</p>
<p>   &emsp;&emsp;地址映射方式：直接映射（固定）、全相联映射（灵活性大）、组相联映射（折中）</p>
<table>
<thead>
<tr>
<th>直接映射</th>
<th>全相联映射</th>
<th>组相联映射</th>
</tr>
</thead>
<tbody><tr>
<td>每个主存块只与一个缓存块相对应。</td>
<td>主存中每一字块映射到Cache中的任意位置。</td>
<td>主存的某一字块可以按模映射到Cache的任一字块中。</td>
</tr>
<tr>
<td>实现简单，直接可判断字块是否在缓存中</td>
<td>逻辑复杂、成本高</td>
<td>介于前两者之间</td>
</tr>
</tbody></table>
<p>   （6）替换策略：</p>
<p>   &emsp;&emsp;先进先出FIFO、近期最少使用LRU、随机法</p>
<p>   （7）辅助存储器（外存）：</p>
<p>   &emsp;&emsp;特点：容量大、速度慢、价格低、可脱机保存信息。</p>
<p>   &emsp;&emsp;光&#x2F;磁盘：记录密度（道密度、位密度、线密度）、存储容量、平均寻址时间、数据传输率、误码率</p>
<h3 id="四、输入输出系统"><a href="#四、输入输出系统" class="headerlink" title="四、输入输出系统"></a>四、输入输出系统</h3><ol>
<li><p>IO设备与主机的传送方式：</p>
<p>并行和串行</p>
</li>
<li><p>IO设备与主机的联络方式：</p>
<p>立即响应方式、异步工作采用应答信号联系。</p>
</li>
<li><p>IO设备与主机的连接方式：</p>
<p>辐射式、总线式</p>
</li>
<li><p>IO接口：</p>
<p>设置接口的原因：一台机器常配备多台IO设备、IO设备种类繁多，速度不一、IO设备传送方式不同、IO设备电平不同、CPU向IO设备发送各种控制信号、IO设备的状态需要及时向CPU汇报。</p>
</li>
<li><p>IO中断：</p>
<p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p>
</li>
<li><p>DMA技术：</p>
<p>主存和设备交换信息时，无需 CPU 干预。省去了保护现场和恢复现场。</p>
<table>
<thead>
<tr>
<th></th>
<th>程序中断</th>
<th>DMA</th>
</tr>
</thead>
<tbody><tr>
<td>数据传送依靠</td>
<td>程序</td>
<td>硬件</td>
</tr>
<tr>
<td>CPU响应时间</td>
<td>一条指令执行结束时响应</td>
<td>指令周期内的任一存取周期结束时响应</td>
</tr>
<tr>
<td>处理异常事件的能力</td>
<td>有处理异常事件的能力</td>
<td>无</td>
</tr>
<tr>
<td>是否需要保护现场</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>优先级</td>
<td>低</td>
<td>高</td>
</tr>
</tbody></table>
<p>DMA接口的类型：</p>
<p>选择性DMA接口、多路型DMA接口</p>
</li>
</ol>
<h3 id="五、计算机的运算（正数的原码、反码、补码都一致）"><a href="#五、计算机的运算（正数的原码、反码、补码都一致）" class="headerlink" title="五、计算机的运算（正数的原码、反码、补码都一致）"></a>五、计算机的运算（<strong>正数的原码、反码、补码都一致</strong>）</h3><ol>
<li><p>符号：0正1负</p>
</li>
<li><p>原码：带符号的绝对值表示</p>
<p>例：</p>
<p>（1）x&#x3D;+1100，x原&#x3D;0，1100</p>
<p>&emsp;&emsp;x&#x3D;-1100，x原&#x3D;1，1100</p>
<p>&emsp;&emsp;x&#x3D;0.1101，x原&#x3D;0.1101</p>
<p>&emsp;&emsp;x&#x3D;-0.1101，x原&#x3D;1-（-0.1101）&#x3D;1.1101</p>
<p>（2）x&#x3D;+0，x原&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x原&#x3D;1.0000</p>
<p>&emsp;&emsp;<strong>所以0的原码有两种表示方式，</strong></p>
</li>
<li><p>补码：<strong>负数的补码等于反码+1</strong>。</p>
<p>正数相对于模的补数就是模本身。</p>
<p>（1）例：+7≡-7</p>
<p>&emsp;&emsp;&emsp;-3≡+7（mod10）</p>
<p>（2）补码详解：</p>
<p>&emsp;&emsp;例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;+1010，x补&#x3D;0，1010</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，x补&#x3D;2^(n+1)+x&#x3D;100000-1101&#x3D;1，0011</p>
<p><font color="red"><strong>快捷方式：在原码的基础上，符号位不变，其余各位取反，最后+1；</strong></font></p>
<p>或者说，在原码的基础上，符号位不变，数值位从右向左找第一个1，1右边的不变，1左面的取反。</p>
<p>（1）例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p>
<p>&emsp;&emsp;&emsp;①x原&#x3D;1，1101</p>
<p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1，0010</p>
<p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1，0011</p>
<p>（2）x&#x3D;-0.0110</p>
<p>&emsp;&emsp;&emsp;①x原&#x3D;1.0110</p>
<p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1.1001</p>
<p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1.1010（进了一位1+1&#x3D;0）</p>
<p>（3）x&#x3D;+0，x补&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x补&#x3D;0.0000</p>
<p>&emsp;&emsp;<strong>所以0的补码有一种表示方式，</strong></p>
</li>
<li><p>反码：</p>
<p>在原码的基础上，符号位不变，其余各位取反即可。</p>
<p>（1）例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p>
<p>&emsp;&emsp;&emsp;x原&#x3D;1，1101</p>
<p>&emsp;&emsp;&emsp;x反&#x3D;1，0010</p>
<p>（2）再例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-0.0110</p>
<p>&emsp;&emsp;&emsp;x原&#x3D;1.0110</p>
<p>&emsp;&emsp;&emsp;x反&#x3D;1.1001</p>
<p>（3）x&#x3D;+0，x反&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x反&#x3D;1.1111</p>
<p>&emsp;&emsp;<strong>所以0的反码有两种表示方式，</strong></p>
</li>
<li><p>移码：</p>
<p>补码的符号位从0变为1，或者从1变为0，即得到移码</p>
<p>如：</p>
<p>x&#x3D;-10101</p>
<p>x原&#x3D;1，10101</p>
<p>x补&#x3D;1，01010+1&#x3D;1，01011</p>
<p>x移&#x3D;0，01011</p>
<p><strong>所以0的移码有一种表示方式，</strong></p>
</li>
<li><p>数的定点表示和浮点表示</p>
<p>定点溢出（数符+数值），浮点阶码（阶码+数值+数符+尾数值）</p>
</li>
<li><p>定点运算</p>
<p>移位运算、加减运算、乘法运算、除法运算</p>
</li>
<li><p>浮点运算</p>
<p>加减运算、乘除运算、</p>
</li>
</ol>
<h3 id="六、指令系统"><a href="#六、指令系统" class="headerlink" title="六、指令系统"></a>六、指令系统</h3><ol>
<li><p>格式：操作码OP字段（固定或变化）+地址码字段（该指令的源地址、结果地址、下一条指令地址）</p>
<p>地址码字段：四地址、三地址、二地址、一地址指令。</p>
</li>
<li><p>指令字长：</p>
<p>取决于操作码的长度、操作数地址的长度、操作数地址的个数。</p>
</li>
<li><p>操作数类型：</p>
<p>地址、数字、字符、逻辑数据</p>
</li>
<li><p>存放方式：</p>
<p>对准边界、不对准边界</p>
</li>
<li><p>操作类型：</p>
<p>数据传送、算术逻辑操作、移位、转移、输入输出、其他</p>
</li>
<li><p>寻址方式：</p>
<p>指令寻址（顺序寻址、跳跃寻址）、数据寻址（立即寻址、直接<del>、隐含</del>、寄存器<del>、间接</del>、寄存器间接<del>、基址</del>、变址<del>、相对</del>）</p>
</li>
<li><p>RISC，精简指令系统计算机，目的就是继承、简化指令，提升效率和正确性</p>
<p>CISC，复杂指令系统计算机</p>
<table>
<thead>
<tr>
<th></th>
<th>RISC</th>
<th>CISC</th>
</tr>
</thead>
<tbody><tr>
<td>指令复杂程度</td>
<td>简单</td>
<td>复杂</td>
</tr>
<tr>
<td>指令字长是否固定</td>
<td>固定</td>
<td>不固定</td>
</tr>
<tr>
<td>指令格式种类</td>
<td>少</td>
<td>多</td>
</tr>
<tr>
<td>寻址方式</td>
<td>少</td>
<td>多</td>
</tr>
<tr>
<td>CPU设有寄存器</td>
<td>多个</td>
<td>专用</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="七、CPU结构和功能"><a href="#七、CPU结构和功能" class="headerlink" title="七、CPU结构和功能"></a>七、CPU结构和功能</h3><ol>
<li><p>CPU组成部分：</p>
<p>寄存器、终端系统、运算ALU、指令控制部件CU</p>
</li>
<li><p>寄存器类型：</p>
<p>通用、数据、地址、条件码</p>
</li>
<li><p>指令周期：</p>
<p>CPU去除并执行一条指令所需的全部时间</p>
<p>没有固定值，因为不同指令的指令周期长度不同</p>
<p>取指周期：取指、分析</p>
<p>执行周期：执行阶段完成执行</p>
<p>CPU工作顺序：取指——&gt;执行——&gt;再取指——&gt;再执行</p>
</li>
<li><p>指令流水：</p>
<p>目的：提高访存速度、提高IO设备与主机交换信息的速度、提高运算速度、提高处理机速度</p>
<p>性能：吞吐率、加速比、效率、</p>
<p>流水线的多发技术：超标量技术、超流水线技术</p>
<p>流水线结构：指令流水线结构、运算流水线</p>
</li>
<li><p>中断系统：</p>
<p>CPU和IO设备的交互导致，</p>
<p>中断请求标记、中断判优逻辑（硬件和软件实现）<br>中断响应：</p>
<p>保护现场：保护程序断点、保护CPU内部各寄存器内部的现场</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;程序断点的现场由中断隐指令完成，寄存器内的现场可在中断服务程序中由用户(或系统)用机器指令编程完成。</p>
<p>恢复现场：寄存器的内容恢复到中断处理前的状态。</p>
<p>中断屏蔽技术：屏蔽触发器与屏蔽字、屏蔽技术可改变优先等级</p>
</li>
</ol>
<h4 id="八、控制单元"><a href="#八、控制单元" class="headerlink" title="八、控制单元"></a>八、控制单元</h4><ol>
<li><p>微操作命令</p>
<p>取指周期、间址周期、执行周期、中断周期</p>
</li>
<li><p>控制单元</p>
<p>将一个机器周期分为若干个时间相等的时间段（节拍、状态、时钟周期）</p>
</li>
<li><p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p>
<p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p>
<p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p>
<p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p>
</li>
<li><p>微指令的编码格式：</p>
<p>直接编码方式、字段直接编码方式、字段间接编码方式、混合编码、其他</p>
</li>
</ol>
<h3 id="九、例题："><a href="#九、例题：" class="headerlink" title="九、例题："></a>九、例题：</h3><ol>
<li><p>指令周期、机器周期、时钟周期的概念及三者之间的关系</p>
<p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p>
<p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p>
<p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p>
<p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p>
</li>
<li><p>什么是指令周期？指令周期是否有一个固定值？为什么？</p>
<p>CPU去除并执行一条指令所需的全部时间</p>
<p>没有固定值，因为不同指令的指令周期长度不同</p>
</li>
<li><p>什么是中断设计，设计中断系统时要考虑哪些主要问题？</p>
<p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p>
<p>设计中断系统需解决的问题：</p>
<p>(1) 各中断源如何向CPU提出中断请求</p>
<p>(2) 当对个中断源同时提出中断请求时，中断系统如何确定优先响应哪个中断源的请求  </p>
<p>(3)CPU在什么条件、什么时候、以什么方式来响应中断</p>
<p>(4)CPU响应中断后如何保护现场</p>
<p>(5)CPU响应中断后，如何停止原程序的执行而转入中断服务程序的入口地址</p>
<p>(6)中断处理结束后，CPU如何恢复现场，如何返回到原程序的间断处。</p>
<p>(7)在中断处理过程中又出现了新的中断请求，CPU该如何处理。</p>
</li>
<li><p>指令流水线和运算流水线在结构上有何共同之处？</p>
<p>指令流水线和运算流水线的共同点是由于相邻两段在执行不同的操作，因此在相邻两段之间必须设置锁存器或寄存器，以保证在一个周期内流水线的输出信号不便。</p>
</li>
<li><p>什么是RISC？简述它的主要特点。</p>
<p>RISC即是精简指令集计算机。特点：</p>
<p>（1）选取使用频度高的简单指令</p>
<p>（2）指令长度固定、格式少、寻址方式少</p>
<p>（3）只有存数取数指令访存，其它指令不访存</p>
<p>（4）CPU内有多个通用寄存器</p>
<p>（5）采用流水线技术，大部分指令一个时钟完成</p>
<p>（6）控制器采用组合逻辑实现</p>
<p>（7）采用优化的编译程序</p>
</li>
<li><p>试比较RISC和CISC。</p>
<p>（1）RISC更能充分利用VLSI芯片的面积</p>
<p>（2）RISC更能提高计算及运行速度，指令数、指令格式、寻址方式少，通用寄存器多，采用组合逻辑，便于指令流水</p>
<p>（3）RISC便于设计，可减低成本，提高可靠性</p>
<p>（4）RISC有利于编译程序代码优化</p>
<p>（5）RISC不易实现指令系统兼容</p>
</li>
<li><p>什么叫刷新？为什么要刷新？说明刷新有几种方法。</p>
<p>刷新 —— 对 DRAM 定期进行的全部重写过程；</p>
<p>刷新原因 —— 因电容泄漏而引起的 DRAM 所存信息的衰减需要及时补充，因此安排了定期刷新操作；</p>
<p>常用的刷新方法有三种 —— 集中式、分散式、异步式。</p>
<p>集中式：在最大刷新间隔时间内，集中安排一段时间进行刷新；</p>
<p>分散式：在每个读 &#x2F; 写周期之后插入一个刷新周期，无 CPU 访存死时间；</p>
<p>异步式：是集中式和分散式的折衷</p>
</li>
<li><p>计算机中设置 Cache 的作用是什么？能不能把 Cache 的容量扩大，最后取代主存，为什么？</p>
<p>计算机中设置 Cache 主要是为了加速 CPU 访存速度；</p>
<p>不能把 Cache 的容量扩大到最后取代主存，价格以及体积原因不适合。</p>
</li>
<li><p>Cache 做在 CPU 芯片内有什么好处？将指令 Cache 和数据 Cache 分开又有什么好处？</p>
<p>可提高外部总线的利用率、可提高存取速度</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li><h4 id="TCP-IP五层协议"><a href="#TCP-IP五层协议" class="headerlink" title="TCP&#x2F;IP五层协议"></a>TCP&#x2F;IP五层协议</h4><table>
<thead>
<tr>
<th>层</th>
<th>内容</th>
<th>作用</th>
<th>协议</th>
<th>设备</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>报文：消息、数据传输的基本单位</td>
<td>提供网络服务的接口</td>
<td>文件传输FTP、域名服务DNS、超文本传输HTTP、SMTP邮件传输</td>
<td>网关</td>
</tr>
<tr>
<td>传输层</td>
<td>数据段：信息传递的协议数据单元</td>
<td>将上层数据分段并提供端到端的传输、差错控制和流量控制。</td>
<td>TCP面向连接、UDP</td>
<td>进程、端口</td>
</tr>
<tr>
<td>网络层</td>
<td>数据包&#x2F;分组</td>
<td>将网络地址翻译为物理地址，将数据从发送方路由到接收方。子网间的数据报进行路由选择，拥塞控制、网际互通。</td>
<td>IP、ARP地址解析、RARP反向地址转换、ICMP控制报文、IGMP组播</td>
<td>路由器、防火墙</td>
</tr>
<tr>
<td>数据链路层</td>
<td>帧（该层的传输单位）&#x3D;首+数据报+尾<br />星型拓扑</td>
<td>物理地址寻址、数据的成帧、流量控制、数据检错、重发等。</td>
<td>以太网协议、PPP点对点、CSMA&#x2F;CD载波监听和碰撞检测、ARQ纠错</td>
<td>网桥、网卡、交换机</td>
</tr>
<tr>
<td>物理层</td>
<td>比特流</td>
<td>物理媒体</td>
<td></td>
<td>中继器（放大信号）、集线器、网线、调制解调器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://bbs.huaweicloud.com/blogs/378087">链接</a></p>
<span id="more"></span>

<ol start="2">
<li><h4 id="IP地址："><a href="#IP地址：" class="headerlink" title="IP地址："></a>IP地址：</h4><h5 id="（1）传统"><a href="#（1）传统" class="headerlink" title="（1）传统"></a>（1）传统</h5><table>
<thead>
<tr>
<th>传统IP(32位)</th>
<th>Net-id</th>
<th>Host-id</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址</td>
<td>网络号</td>
<td>主机号</td>
</tr>
<tr>
<td>A类</td>
<td>0.（8位）</td>
<td>0.0.0（24位）</td>
</tr>
<tr>
<td>B类</td>
<td>0.0（16位）</td>
<td>0.0（16位）</td>
</tr>
<tr>
<td>C类</td>
<td>0.0.0（24位）</td>
<td>0（8位）</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>分类</th>
<th></th>
<th>补充</th>
<th>默认子网掩码</th>
</tr>
</thead>
<tbody><tr>
<td>A类</td>
<td>0.0.0.0~127.255.255.255</td>
<td>0.0.0.0(寻找自己的IP)和127.0.0.1(回环地址即本机地址，用于对本机的测试)一般不作为A类地址</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>B类</td>
<td>128.0.0.0~191.255.255.255</td>
<td></td>
<td>255.255.0.0</td>
</tr>
<tr>
<td>C类</td>
<td>192.0.0.0~223.255.255.255</td>
<td></td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>D类</td>
<td>224.0.0.0~239.255.255.255</td>
<td>多播&#x2F;组播地址：（一对多）供特殊协议使用</td>
<td></td>
</tr>
<tr>
<td>E类</td>
<td>240.0.0.0~255.255.255.255</td>
<td>保留地址：供以后使用</td>
<td></td>
</tr>
</tbody></table>
<h5 id="（2）-VLSM-CIDR下"><a href="#（2）-VLSM-CIDR下" class="headerlink" title="（2）(VLSM&#x2F;CIDR下)"></a>（2）(VLSM&#x2F;CIDR下)</h5><table>
<thead>
<tr>
<th>新IP(32位)(VLSM(借主机号作为网络号)&#x2F;CIDR下)</th>
<th>Net-id</th>
<th>Subnet-id</th>
<th>Host-id</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址</td>
<td>网络号</td>
<td>子网号</td>
<td>主机号</td>
</tr>
<tr>
<td></td>
<td>新网络号</td>
<td>新网络号</td>
<td>主机号</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址（常用）</td>
<td>网络部分</td>
<td>主机部分</td>
</tr>
<tr>
<td>广播地址</td>
<td>主机部分</td>
<td>网络部分</td>
</tr>
</tbody></table>
<p>例：（VLSM&#x2F;CIDR下）172.31.128.255&#x2F;18</p>
<p>18为子网掩码，表示32位中高18位是1，其他位为0</p>
<p>IP地址：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.11111111</strong>  </p>
<p>子网掩码二进制形式：11111111.11111111.11<strong>000000.00000000</strong></p>
<p>子网掩码十进制形式：&emsp;&emsp;255.&emsp;&emsp;255.&emsp;&emsp;&emsp;192.&emsp;&emsp;&emsp;0</p>
<p>网络号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.00000000</strong></p>
<p>子网掩码反码：&emsp;&emsp;&emsp;00000000.00000000.00111111.11111111</p>
<p>主机号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;00000000.00000000.00000000.11111111</p>
<p>‘与(&amp;)’运算：1&amp;1&#x3D;1，1&amp;0&#x3D;0，0&amp;1&#x3D;0，0&amp;0&#x3D;0；</p>
<p>IP地址与子网掩码‘与(&amp;)’运算得网络号；</p>
<p>IP地址与子网掩码反码‘与(&amp;)’运算得主机号；</p>
<p>广播地址：&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>111111.11111111</strong></p>
<p>广播地址就是在网络号的基础上，将网络号右边表示IP地址的主机部分(字体加粗)的二进制全部改为1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"><a href="#子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。" class="headerlink" title="子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"></a>子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。</h4><p>（1）当子网掩码不默认时，网络地址≠网络号</p>
<p>&emsp;&emsp;如：172.16.10.2（B类）</p>
<p>&emsp;&emsp;&emsp;此时子网掩码为：255.255.255.0，进行‘与’运算</p>
<p>&emsp;&emsp;&emsp;此时网络地址为：172.16.10.0</p>
<p>&emsp;&emsp;&emsp;而默认子网掩码为：255.255.0.0，得到网络号为：172.16.0.0 </p>
<p>&emsp;&emsp;&emsp;网络地址≠网络号</p>
<p>（2）子网掩码默认时，网络地址＝网络号</p>
<p>&emsp;&emsp;如：172.16.10.2</p>
<p>&emsp;&emsp;&emsp;默认子网掩码为255.255.0.0，进行‘与’运算</p>
<p>&emsp;&emsp;&emsp;此时网络地址为：172.16.0.0</p>
<p>&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p>
<p>（3）在无子网划分场景下，网络地址&#x3D;网络号；（传统子网号）</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p>
<p>&emsp;&emsp;在子网划分场景下，网络地址是网络号的扩展；（VLSM&#x2F;CIDR下）</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址≠网络号</p>
</li>
<li><h4 id="划分子网：（VLSM-CIDR下）"><a href="#划分子网：（VLSM-CIDR下）" class="headerlink" title="划分子网：（VLSM&#x2F;CIDR下）"></a>划分子网：（VLSM&#x2F;CIDR下）</h4><p>（1）根据主机号中子网掩码借默认的子网掩码的位数n&#x3D;&gt;<strong>2^n为子网数</strong></p>
<p>&emsp;例：C类IP192.168.1.113</p>
<p>&emsp;&emsp;&emsp;默认子网掩码：255.255.255.0</p>
<p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>00</strong>000000</p>
<p>&emsp;&emsp;&emsp;现有子网掩码：255.255.255.192</p>
<p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>11</strong>000000</p>
<p>&emsp;&emsp;&emsp;网络号借了主机号<strong>两位</strong>，即<strong>子网号为11</strong>，则原IP可以被划分为2^2&#x3D;4个子网；</p>
<p>&emsp;&emsp;&emsp;&emsp;4个子网为：—.—.—.00000000&emsp;即255.255.255.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01000000&emsp;即255.255.255.64</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10000000&emsp;即255.255.255.128</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.11000000&emsp;即255.255.255.192</p>
<p>&emsp;&emsp;&emsp;&emsp;得网络地址为：192.168.1.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.64</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.128</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.192</p>
<p>&emsp;&emsp;&emsp;&emsp;广播地址为：—.—.—.11111111&emsp;即255.255.255.255</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10111111&emsp;即255.255.255.191</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01111111&emsp;即255.255.255.127</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.00111111&emsp;即255.255.255.63</p>
<p>&emsp;&emsp;&emsp;&emsp;得广播地址为：192.168.1.255</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.191</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.127</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.63</p>
<p>&emsp;&emsp;&emsp;&emsp;去除网络地址和广播地址即可用主机IP地址：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.1  ——&gt; 192.168.1.62</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.65——-&gt; 192.168.1.126  </p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.129——&gt; 192.168.1.190</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.193——&gt; 192.168.1.254</p>
<p>&emsp;&emsp;划分子网过程：</p>
<p>&emsp;&emsp;&emsp;①根据IP分类和默认掩码得到子网号和划分子网个数；</p>
<p>&emsp;&emsp;&emsp;②根据划分区域推出子网，在转十进制；</p>
<p>&emsp;&emsp;&emsp;③组合原IP和子网。</p>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41207757/article/details/107839099">链接</a></p>
<p>（2）根据IP地址和子网掩码计算主机数：</p>
<p>&emsp;例：子网掩码为：255.255.255.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.11111111.<strong>00000000</strong></p>
<p>&emsp;&emsp;则有2^8-2&#x3D;254台主机（去除0.0.0.0和127.0.0.1）</p>
<p>&emsp;再例：255.255.240.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.1111<strong>0000.00000000</strong></p>
<p>&emsp;&emsp;则有2^12-2&#x3D;4094台</p>
</li>
<li><h4 id="TCP协议："><a href="#TCP协议：" class="headerlink" title="TCP协议："></a>TCP协议：</h4><h5 id="（1）三次握手，四次挥手"><a href="#（1）三次握手，四次挥手" class="headerlink" title="（1）三次握手，四次挥手"></a>（1）三次握手，四次挥手</h5><p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p>
<p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="TCP四次挥手"></p>
<p>&emsp;参考: <a href="https://blog.csdn.net/m0_56649557/article/details/119492899">链接</a></p>
<h5 id="（2）TCP协议与UDP协议区别："><a href="#（2）TCP协议与UDP协议区别：" class="headerlink" title="（2）TCP协议与UDP协议区别："></a>（2）TCP协议与UDP协议区别：</h5><table>
<thead>
<tr>
<th></th>
<th>连接性</th>
<th>可靠性</th>
<th>流量控制</th>
<th>开销</th>
<th>拥塞控制</th>
<th>数据传输顺序</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>TCP</td>
<td>面向连接</td>
<td>可靠</td>
<td>高延迟流</td>
<td>高</td>
<td>拥塞控制</td>
<td>保证数据包顺序到达</td>
<td>文件传输、电子邮件、远程登录</td>
</tr>
<tr>
<td>UDP</td>
<td>无连接性</td>
<td>不可靠</td>
<td>低延迟</td>
<td>低</td>
<td>数据报分组</td>
<td>不保证数据包顺序到达</td>
<td>视频流、在线游戏</td>
</tr>
</tbody></table>
<p>参考: <a href="https://developer.aliyun.com/article/1632460">链接</a></p>
</li>
<li><h4 id="RIP协议："><a href="#RIP协议：" class="headerlink" title="RIP协议："></a>RIP协议：</h4><p>A的路由器表：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
<th>下一跳</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>4</td>
<td>B</td>
</tr>
<tr>
<td>N2</td>
<td>2</td>
<td>C</td>
</tr>
<tr>
<td>N3</td>
<td>1</td>
<td>F</td>
</tr>
<tr>
<td>N4</td>
<td>5</td>
<td>G</td>
</tr>
</tbody></table>
<p>现A收到来自C的路由信息：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>2</td>
</tr>
<tr>
<td>N2</td>
<td>1</td>
</tr>
<tr>
<td>N3</td>
<td>3</td>
</tr>
<tr>
<td>N4</td>
<td>7</td>
</tr>
<tr>
<td>N5</td>
<td>10</td>
</tr>
</tbody></table>
<p>更新A的路由器表：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
<th>下一条</th>
<th>理由</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>2+1&#x3D;3</td>
<td>C</td>
<td>不同的下一条，收到的表距离更短，更新</td>
</tr>
<tr>
<td>N2</td>
<td>1+1&#x3D;2</td>
<td>C</td>
<td>相同的下一条，更新</td>
</tr>
<tr>
<td>N3</td>
<td>1</td>
<td>F</td>
<td>不同的下一条，收到的表距离更长，不变</td>
</tr>
<tr>
<td>N4</td>
<td>5</td>
<td>G</td>
<td>不同的下一条，收到的表距离更长，不变</td>
</tr>
<tr>
<td>N5</td>
<td>10+1&#x3D;11</td>
<td>C</td>
<td>新的下一条，更新</td>
</tr>
</tbody></table>
</li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41904773/article/details/107103092">链接</a></p>
<h3 id="二、补充："><a href="#二、补充：" class="headerlink" title="二、补充："></a>二、补充：</h3><ol>
<li><p>计算机网络由若干结点和连接这些节点的链路组成。</p>
</li>
<li><p>1983年互联网诞生。</p>
</li>
<li><p>发展：单个网络ARPANET——&gt;三级结构互联网——&gt;多层次ISP结构互联网。</p>
</li>
<li><p>网络通信方式：C&#x2F;S和P2P。</p>
</li>
<li><p>网络核心部分其特殊作用的是路由器（实现分组交换）。</p>
</li>
<li><p>分组交换特点：</p>
<p>①采用存储转发技术</p>
<p>②报文-细分-&gt;数据段</p>
<p>③（包）分组&#x3D;数据段+首部（目的地址和源地址）</p>
<p>④优点：高效、灵活、迅速、可靠</p>
</li>
<li><p>电路交换：源——&gt;终</p>
<p>报文交换：起——&gt;相邻点——&gt;相邻点——&gt;……——&gt;终点</p>
<p>分组交换：类似于报文交换（分组比报文更小）</p>
</li>
<li><p>分类：</p>
<table>
<thead>
<tr>
<th>按作用</th>
<th>按使用者</th>
</tr>
</thead>
<tbody><tr>
<td>广域网WAN</td>
<td>公用网</td>
</tr>
<tr>
<td>城域网MAN</td>
<td>专用网</td>
</tr>
<tr>
<td>局域网LAN</td>
<td></td>
</tr>
<tr>
<td>个人局域网PAN</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>性能：</p>
<p>（1）速率：比特bit&#x2F;s</p>
<p>（2）带宽：赫</p>
<p>（3）吞吐量</p>
<p>（4）时延：发送时延、传播<del>、处理</del>、排队~</p>
<p>（5）时延带宽积</p>
<p>（6）往返时间RTT</p>
<p>（7）利用率</p>
</li>
<li><p>网络体系：</p>
<p>（1）OSI模型（7层）、TCP&#x2F;IP协议（4层）</p>
<p>（2）体系结构：计算机网络的各层及其协议的集合</p>
</li>
<li><p>物理层：</p>
<p>（1）信道</p>
<p>（2）媒介：双绞线——&gt;屏蔽双绞线STP、无屏蔽双绞线OTP</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;同轴电缆：有线电视</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;光缆、光纤</p>
<p>（3）信道复用技术：允许用户使用一个共享信道进行通信，降低成本，提高利用率；</p>
<p>（4）宽带接入技术：用户要连接到互联网，必须先连接到某个ISP。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据链路层：</p>
<p>（1）点对点信道（CSMA&#x2F;CD）</p>
<p>&emsp;&emsp;&emsp;接受网络层IP数据报、添加首尾部、封装成帧、发送到另一结点或上交（有检错过程）</p>
<p>&emsp;&emsp;&emsp;封装成帧、透明传输、差错检测。</p>
<p>&emsp;&emsp;&emsp;可采用转义字符ESC解决丢失问题。</p>
<p>（2）广播信道（PPP）</p>
<p>&emsp;&emsp;&emsp; ①全双工、</p>
<p>&emsp;&emsp;&emsp; ②简单、封装成帧、透明性、多种网络层协议、多种类型链路、差错检测、检测连接状态、最大传递单元、网络层地址协商、数据压缩协商。</p>
<p>&emsp;&emsp;&emsp;③用户——&gt;PPP协议——&gt;ISP——&gt;互联网</p>
<p>&emsp;&emsp;&emsp;④用户拨号——&gt;ISP——&gt;LCP——&gt;NCP——&gt;得到IP地址</p>
<p>&emsp;&emsp;&emsp;封装IP数据报到串行链路，测试、建立、配置数据链路连接的LCP，网络控制协议NCP</p>
<p>（3）封装成帧（首尾）</p>
<p>（4）广播信道的数据链路层：</p>
<p>&emsp;&emsp;&emsp;星形网、环形网、总线网；</p>
<p>&emsp;&emsp;&emsp;采用集线器的星形拓扑：双绞线；</p>
<p>&emsp;&emsp;&emsp;以太网的MAC层：硬件地址又称为物理地址或MAC地址；</p>
<p>&emsp;&emsp;&emsp;MAC帧：单播帧、广播帧、多播帧。</p>
<p>（5）集线器：所有站点共享总带宽，属于冲突域，同一时间只能与一个站点传输数据，带宽按站点数平均分配；</p>
<p>&emsp;&emsp;&emsp;交换机：每个站口独立带宽，支持全双工通信，站点间并行传输数据，每个站点的带宽等于端口速率。</p>
<p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%9B%86%E7%BA%BF%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png"></p>
<p>例：有10个站连接到以太网上，试计算三种情况下每个站所能得到的带宽。</p>
<p>&emsp; ①10个站都连接到一个10Mb&#x2F;s以太网集线器：1Mb&#x2F;s</p>
<p>&emsp; ②10个站都连接到一个100Mb&#x2F;s以太网集线器：10Mb&#x2F;s</p>
<p>&emsp; ③10个站都连接到一个10Mb&#x2F;s以太网交换机：10Mb&#x2F;s</p>
</li>
<li><p>网络层：</p>
<p>（1）数据链路层看不到封装后的IP地址；</p>
<p>&emsp;&emsp;IP地址的源和目的始终不变（被封装了，变不了）<br>&emsp;&emsp;MAC帧中的则要变化（负责带IP一层一层跑）</p>
</li>
<li><p>应用层</p>
<p>mail.cctv.com</p>
<table>
<thead>
<tr>
<th>mail.</th>
<th>cctv.</th>
<th>com</th>
</tr>
</thead>
<tbody><tr>
<td>三级域名</td>
<td>二级域名</td>
<td>顶级域名</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="一-软件危机"><a href="#一-软件危机" class="headerlink" title="一. 软件危机"></a>一. 软件危机</h3><ol>
<li>定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。<br>表现：<br>（1）开发成本和进度的估计不准确；（开发滞后）<br>（2）用户对开发的软件不满意；<br>（3）软件的质量靠不住；<br>（4）软件不可维护；（重复开发相同的软件）<br>（5）文档不完备；<br>（6）软件开发成本在计算机系统总成本中所占的比例逐年上升；<br>（7）软件开发生产率跟不上计算机应用的发展；（供不应求）<br>等等。</li>
<li>产生原因：<br>（1）软件本身的特点有关；（软件本身）<br>（2）软件开发与维护的方法不正确；（软件开发不匹配计算机发展）<br>（3）对用户要求没有完整准确的认识就匆忙着手编写程序；（开发人员）</li>
<li>消除方法：<br>（1）对计算机软件有一个正确的认识；（消除软件就是程序的错误）<br>软件定义：软件是程序，数据及相关文档的完整集合；<br>（2）软件开发不是某个体劳动的神秘技巧，而是一种团队配合的工程项目，必须吸收和借鉴人类长期以来积累的原理、概念、技术和方法，尤其是教训；<br>（3）推广实践中总结出来的经验、技术和方法，并研究新的；<br>（4）开发和使用更好的软件工具。 </li>
<li><font color="red">总结：技术措施（方法、工具），必要的组织管理措施。</font></li>
</ol>
<span id="more"></span>

<h3 id="二-软件工程"><a href="#二-软件工程" class="headerlink" title="二. 软件工程"></a>二. 软件工程</h3><ol>
<li><p>定义：指导计算机软件开发和维护的一门工程学科。</p>
</li>
<li><p>本质特征：<br>（1）关注于大型程序的构造；<br>（2）中心课题是控制复杂性；<br>（3）软件的效率非常重要；<br>（4）开发软件的效率非常重要；<br>（5）和谐地合作是开发软件的关键；<br>（6）软件必须有效地支持它的用户；<br>（7）一种文化背景的人替另一种文化背景的人创造产品；</p>
</li>
<li><p>基本原理：<br>（1）用分阶段的生命周期计划严格管理；<br>（2）坚持进行阶段评审；<br>（3）实行严格的产品控制；<br>（4）采用现代化程序设计技术；<br>（5）结果应清除审查；<br>（6）开发小组的人员少二精；<br>（7）承认不断改进软件工程实践的必要性；</p>
</li>
<li><p>软件工程方法学：<br>（1） 软件工程包含技术和管理两方面的内容：<br>（2） <font color="red">范型（方法学）</font>：在软件生命周期全过程中使用的一整套技术方法的集合；<br>&emsp;&emsp;包含三个要素： 方法、工具、过程；<br>&emsp;&emsp;常用——&gt;<font color="red">传统方法学和面向对象方法学</font><br>（3）传统方法学（<font color="red">生命周期方法学 &#x2F; 结构化范型</font>）（大部分采用瀑布模型）<br>&emsp;&emsp;面向行为或数据，两者权重不同；（行为和数据分离）<br>&emsp;&emsp;🟪-&gt;🟪-&gt;🟪-&gt;🟪（一个阶段一个阶段地顺序开发）</p>
<p>&emsp;&emsp;优点：软件生命周期划分为若干个阶段，每个阶段任务相对独立，而且简单，便于分工协作，降低开发困难程度。</p>
<p>&emsp;&emsp;缺点：软件规模较大时，或者软件需求随时间变化时，开发出的软件往往不成功，且维护困难。</p>
<p>（4）面向对象方法学：（规模庞大，需求模糊或不断变化）<br>&emsp;&emsp;数据和行为的权重一样大；<br>&emsp;&emsp;特点：<br>&emsp;&emsp;① 对象；（数据和行为的统一）object<br>&emsp;&emsp;② 对象——&gt;类；（数据和操作）class<br>&emsp;&emsp;③ 父类、子类、派生类；<br>&emsp;&emsp;④ 对象间仅能通过发送消息互相联系；<br>&emsp;&emsp;对象间的所有私有private信息都被封装在该对象内，不可从外界直接访问（<font color="red">封装性</font>）<br>&emsp;&emsp;最终产品是由许多较小的基本独立的对象组成。</p>
<p>&emsp;&emsp;优点：符合人类思维方法，各阶段使用方法具有高度的连续性，各个阶段有机集成，有利于系统的稳定。</p>
</li>
</ol>
<h3 id="三、软件生命周期"><a href="#三、软件生命周期" class="headerlink" title="三、软件生命周期"></a>三、软件生命周期</h3><p>​	组成：软件定义、软件开发、运行维护；</p>
<ol>
<li><p>软件定义（系统分析）：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>问题定义</td>
<td>问题是什么？</td>
</tr>
<tr>
<td>可行性研究</td>
<td>问题能否解决？</td>
</tr>
<tr>
<td>需求分析</td>
<td>解决问题需要做什么？</td>
</tr>
</tbody></table>
</li>
<li><p>软件开发：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>分类</th>
<th>细分</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>系统设计</td>
<td>总体设计</td>
<td>如何实现</td>
</tr>
<tr>
<td></td>
<td>详细设计</td>
<td>如何具体实现</td>
</tr>
<tr>
<td>系统实现</td>
<td>编码和单元测试</td>
<td></td>
</tr>
<tr>
<td></td>
<td>综合测试</td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li><p>软件维护：</p>
<p>改正性维护、适应性维护、完善性维护、预防性维护；</p>
</li>
</ol>
<p><font color="red">总结：系统分析——&gt;系统设计——&gt;系统实现——&gt;维护</font></p>
<h3 id="四、软件过程（采用生命周期模型）（过程模型）"><a href="#四、软件过程（采用生命周期模型）（过程模型）" class="headerlink" title="四、软件过程（采用生命周期模型）（过程模型）"></a>四、软件过程（采用生命周期模型）（过程模型）</h3><ol>
<li><p>目的：为了开发出客户需要的软件；（who,when,what,how）</p>
</li>
<li><p>生命周期模型：<br>（1）<font color="red">瀑布模型</font>：（每个阶段都有文档）<br>特点：<br>① 阶段间具有顺序性和依赖性；<br>② 推迟实现的观点；（越大的项目越需要早期的准备）<br>③ 质量保证的观点；（文档）<br>优点：强迫开发人员采用规范，维护比较容易；（文档驱动）<br>缺点：交付给用户之前，用户只能通过文档了解产品，最终导致产品与用户需求发生争执；（文档驱动）</p>
<p>适用于：用户需求清晰，且开发过程无变化；开发人员的熟练，用户的使用环境非常稳定；开发中用户参与要求很低。</p>
</li>
</ol>
<img src="瀑布模型.png" style="zoom: 80%;" />

<p>​		（2） 快速原型模型：</p>
<p>&emsp;&emsp;特点：先开发一个原型，后续根据用户要求快速修改原型。（线性）</p>
<p>&emsp;&emsp;本质：快速，节约开发成本。</p>
<p>&emsp;&emsp;应用：UNIX Shell和超文本</p>
<p>&emsp;&emsp;优点：容易适应需求变化；有利于开发与培训的同步；开发费用低、周期短，对用户更友好。</p>
<p>&emsp;&emsp;缺点：客户与开发者对原型的理解不同；准确的原型设计比较困难；不利于开发人员的创新。</p>
<p>&emsp;&emsp;适用范围：对开发领域熟悉且有快速原型工具；项目投标时有原型展示；产品升级或移植，对已有产品进行服务。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%9E%8B.png"></p>
<p>​		（3）增量模型（渐增模型）</p>
<p>&emsp;&emsp;特点：将功能分为构件，逐步向用户提交产品，功能逐步推给用户；</p>
<p>&emsp;&emsp;&emsp;&emsp;与之相比，瀑布和快速模型则是一次把所有功能塞给用户；</p>
<p>&emsp;&emsp;优点：较短时间内向用户提交；</p>
<p>&emsp;&emsp;① 可完成部分工作的产品；</p>
<p>&emsp;&emsp;② 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品；</p>
<p>&emsp;&emsp;缺点：技术要求高。</p>
<p>&emsp;&emsp;适用范围：进行已有产品升级或新版本开发；对完成期限要求严格；所开发领域熟悉且已有原型系统。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png"></p>
<p>&emsp;&emsp;风险更大的增量模型：（并行开发）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B2.png"></p>
<p>​		（4）螺旋模型：（用于大项目、应对风险即风险驱动）</p>
<p>&emsp;&emsp;<font color="red">实质上是在每个阶段之前增加了风险分析过程的<strong>快速原型</strong>模型</font></p>
<p>&emsp;&emsp;优点：</p>
<p>&emsp;&emsp;① 强调已有软件的重用，有助于把软件质量作为软件开发的一个重要目标；</p>
<p>&emsp;&emsp;② 减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险。</p>
<p>&emsp;&emsp;缺点：风险驱动的同时也会使开发人员未意识到真正风险的发生。</p>
<p>&emsp;&emsp;适用范围：内部开发的大规模项目。</p>
<img src="螺旋模型.png" style="zoom: 50%;" />

<p>​		（5）喷泉模型：（迭代）<font color="red"><strong>面向对象范型</strong>中常见</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;解释：圆圈相互重叠代表活动存在交迭；向下的箭头代表该阶段内的迭代；较小的圆圈代表维护。</p>
<img src="喷泉模型.png" style="zoom: 50%;" />

<p>​		（6）RUP统一过程：</p>
<p>&emsp;&emsp;迭代开发，管理需求（用例分析），使用基于构件的体系结构（第三方架构Vue、Spring之类），可视化建模（UML），验证软件质量，控制软件变更。</p>
<p>&emsp;&emsp;优点：提高团队生产力。</p>
<p>&emsp;&emsp;缺点：没有涵盖软件工程的全部内容，缺少软件运行和支持方面的内容，不支持多项目的开发结构，重用可能性降低。</p>
<h3 id="五、可行性研究"><a href="#五、可行性研究" class="headerlink" title="五、可行性研究"></a>五、可行性研究</h3><ol>
<li><p>实质：是要进行一次大大压缩简化了的系统分析（抽象化）和设计的过程</p>
</li>
<li><p>目的：用最小的代价，在尽可能短的时间内研究并确定客户提出的问题是否有行得通的解决办法。</p>
</li>
<li><p>定义：</p>
<p>（1）进一步分析和澄清问题定义；</p>
<p>（2）导出系统的逻辑模型；</p>
<p>（3）探索若干种可供选择的主要解法：</p>
<p>&emsp;&emsp;① 技术可行性，② 经济可行性，③ 操作可行性，④ 法律</p>
</li>
<li><p>过程：8步</p>
<p>复查系统规模和目标、研究现有系统、导出新系统模型、进一步定义问题、导出和评价解法、推荐行动方针、草拟开发计划、写文档提交审查。</p>
</li>
<li><p>各类图：（详细看汇总图章节）</p>
<p>（1）系统流程图</p>
<p>（2）数据流图（数据流程图）</p>
<p>（3）数据字典：（开发数据库的第一步）</p>
<p>&emsp;&emsp;定义：关于数据的信息的集合，对数据流图中包含的所有元素的定义的集合；</p>
<p>&emsp;&emsp;包含：数据流（动态）、数据存储（静态）、数据流分量\数据元素（处理）</p>
</li>
</ol>
<h3 id="六、需求分析（访谈）"><a href="#六、需求分析（访谈）" class="headerlink" title="六、需求分析（访谈）"></a>六、需求分析（访谈）</h3><ol>
<li><p>实质：回答系统必须做什么。</p>
</li>
<li><p>任务：</p>
<p>（1）确定对系统的综合要求：</p>
<p>&emsp;&emsp;功能需求，性能<del>，可靠性和可用性</del>，出错处理<del>，接口</del>，约束，逆向<del>，将来可能提出的</del></p>
<p>（2）分析系统的数据要求；</p>
<p>（3）导出系统的逻辑模型：</p>
<p>&emsp;&emsp;采用数据流图、实体-联系图、状态转换图、数据字典和主要算法描述该模型。</p>
<p>（4）修正系统开发计划；</p>
</li>
<li><p>软件需求规格说明：（详细看汇总图章节）</p>
<p>（1）实体-联系图（E-R图）：数据对象、属性、联系（1:1，1:n，n:m）,（1NF冗余最高，2NF，3NF常用）</p>
<p>（2）状态转化图（两种画法）</p>
<p>（3）Warnier图</p>
<p>（4）IPO图</p>
</li>
</ol>
<h3 id="七、总体设计"><a href="#七、总体设计" class="headerlink" title="七、总体设计"></a>七、总体设计</h3><ol>
<li><p>阶段组成：系统设计、结构设计；</p>
</li>
<li><p>过程：9步</p>
<p>设想供选择的方案，选取合理的方案，推荐最佳~，功能分解，设计软件架构，设计数据库，确定测试计划，书写文档，审查和复审。</p>
</li>
<li><p>模块：构成程序的基本构件</p>
<p>（1）耦合：追求低耦合</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%80%A6%E5%90%88.png"></p>
<p>（2）内聚：追求高内聚</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%86%85%E8%81%9A.png"></p>
</li>
<li><p>描述软件架构工具：（详细看汇总图章节）</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
</ol>
<h3 id="八、详细设计（算法）"><a href="#八、详细设计（算法）" class="headerlink" title="八、详细设计（算法）"></a>八、详细设计（算法）</h3><ol>
<li><p>结构设计：顺序、选择、循环</p>
</li>
<li><p>过程设计工具：（描述程序处理过程的工具）（详细看汇总图章节）</p>
<p>（1）程序流程图</p>
<p>（2）盒图（N-S图）</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
</li>
<li><p>面向数据结构的设计方法：Jackson图</p>
</li>
<li><p>程序复杂程度：计算环形复杂度</p>
</li>
</ol>
<h3 id="九、实现"><a href="#九、实现" class="headerlink" title="九、实现"></a>九、实现</h3><ol>
<li><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4></li>
<li><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>（1）确认测试：需求分析阶段（Alpha测试、Beta测试）</p>
<p>（2）单元测试：详细设计&#x2F;编码阶段（代码审查）</p>
<p>（3）集成测试：概要设计阶段（回归测试）</p>
<p>（4）系统测试：整体系统实现</p>
<p>（5）黑盒测试</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
<p>（6）白盒测试：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
</li>
<li><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4></li>
</ol>
<h3 id="十、维护"><a href="#十、维护" class="headerlink" title="十、维护"></a>十、维护</h3><ol>
<li><p>决定软件的可维护性的因素：</p>
<p>可理解性、可测试性、可修改性、可重用性</p>
</li>
<li><p>提高软件产品的可维护性的方法：</p>
<p>①建立明确的软件直连目标；</p>
<p>②使用先进的软件开发技术和工具；</p>
<p>③建立明确的质量保证；</p>
<p>④选择可维护的程序设计语言；</p>
<p>⑤改进程序文档。</p>
</li>
<li><p>文档：</p>
<p>用户文档、系统文档</p>
</li>
</ol>
<h3 id="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"><a href="#十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）" class="headerlink" title="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"></a>十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）</h3><ol>
<li><p>什么是面向对象方法学？</p>
<p>尽可能模拟人类习惯，开发过程接近人类解决问题的方法与过程。</p>
<p>优点：与人类思维方法一致；软件稳定性好；软件可重用性好；较易开发大型软件产品；可维护性好。</p>
</li>
<li><p>什么是对象？</p>
<p>对问题域某个实体的抽象；既有静态的属性（姓名…），又有动态的属性（方法…）。</p>
</li>
<li><p>什么是类？</p>
<p>对具有相同数据结构和操作的一组相似对象的定义，即类是对具有相同属性和行为的一个或多个对象的描述。</p>
</li>
<li><p>用例图（详细看汇总图章节）</p>
</li>
<li><p>类图（详细看汇总图章节）</p>
</li>
</ol>
<h3 id="十二、面向对象分析"><a href="#十二、面向对象分析" class="headerlink" title="十二、面向对象分析"></a>十二、面向对象分析</h3><ol>
<li><p>状态图（详细看汇总图章节）</p>
</li>
<li><p>事件跟踪图</p>
</li>
<li><table>
<thead>
<tr>
<th>模型类型</th>
<th>图</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>对象模型</td>
<td>类图结合功能过程</td>
<td>最基础、最重要、最核心</td>
</tr>
<tr>
<td>动态模型</td>
<td>时间跟踪图或状态图</td>
<td></td>
</tr>
<tr>
<td>功能模型</td>
<td>数据流图或程序流程图</td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="十三、软件工程导论各类图汇总"><a href="#十三、软件工程导论各类图汇总" class="headerlink" title="十三、软件工程导论各类图汇总"></a>十三、软件工程导论各类图汇总</h3><h4 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h4><ol>
<li><p>可行性分析：</p>
<p>（1）系统流程图（整个系统功能）</p>
<p>（2）数据流(程)图</p>
<p>（3）数据字典</p>
</li>
<li><p>需求分析：</p>
<p>（1）实体联系图（E-R图）</p>
<p>（2）状态(转换)图（两种画法）</p>
<p>（3）IPO图</p>
</li>
<li><p>总体设计：</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
<li><p>详细设计：</p>
<p>（1）程序流程图（某一程序执行任务的过程）</p>
<p>（2）N-S盒图</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
<p>（6）Jackson图</p>
</li>
<li><p>其他</p>
<p>（1）用例图</p>
<p>（2）类图</p>
<p>（3）事件跟踪图</p>
<p>（4）状态图（两种画法）</p>
</li>
</ol>
<h4 id="绘制："><a href="#绘制：" class="headerlink" title="绘制："></a>绘制：</h4><ol>
<li><h5 id="可行性分析："><a href="#可行性分析：" class="headerlink" title="可行性分析："></a>可行性分析：</h5><p>（1）系统流程图：</p>
<p>&emsp;&emsp;<img src="系统流程图1.png" style="zoom:50%;" /><img src="系统流程图2.png" style="zoom:50%;" /></p>
<p>&emsp;&emsp;例：</p>
<img src="系统流程图3.png" alt="系统流程图3" style="zoom:50%;" />

<p>（2）数据流(程)图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例1：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE2.png"></p>
<p>&emsp;&emsp;例2：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE3.png"></p>
<p>&emsp;&emsp;D1，D2，1，2：加这些编号是为了方便引用和追踪</p>
<p>（3）数据字典：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>描述</th>
<th>允许非空</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>char</td>
<td>编号</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>姓名</td>
<td>NO</td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li><h5 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h5><p>（1）实体联系图（E-R图）：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE2.png"></p>
<p>（2）状态图&#x2F;状态转换图：（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE2.png"></p>
<p>（3）IPO图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/IPO%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;IPO表：</p>
<img src="IPO表.png"  />
</li>
<li><h5 id="总体设计："><a href="#总体设计：" class="headerlink" title="总体设计："></a>总体设计：</h5><p>（1）层次图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%A8%A1%E5%9D%97.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%B1%82%E6%AC%A1%E5%9B%BE.png"></p>
<p>（2）HIPO图：（IPO图+层次图）</p>
<p>&emsp;&emsp;在层次图除了最顶层的方框之外，每个方框中都加编号。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/HIPO%E5%9B%BE.png"></p>
<p>（3）软件结构图：</p>
<p>&emsp;&emsp;类似于层次图，但是为模块调用模块。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE2.png"></p>
</li>
<li><h5 id="详细设计："><a href="#详细设计：" class="headerlink" title="详细设计："></a>详细设计：</h5><p>（1）程序流程图：（环形复杂度计算）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p>（2）N-S盒图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE1.png"></p>
<p>（3）PAD图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE1.png"></p>
<p>（4）判定表：</p>
<p>&emsp;&emsp;例：某航空公司规定，乘客可以免费托运不超过20公斤的行李。当行李重量超过20公斤时，对头等舱的乘客超重部分每公斤收费4元，其它舱的乘客收费6元。对残疾乘客超重部分在舱位等次相同的情况下收费减半。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>未超重</td>
<td>T</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>超重</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>头等舱</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>其他舱</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>残疾乘客</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>普通乘客</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr>
<td>免费</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分2元&#x2F;公斤</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分3元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>超出部分4元&#x2F;公斤</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分6元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<p>（5）判定树：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%88%A4%E5%AE%9A%E6%A0%91.png"></p>
<p>（6）Jackson图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/Jackson%E5%9B%BE.png"></p>
</li>
<li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>（1）用例图</p>
<table>
<thead>
<tr>
<th>关系类型</th>
<th>说明</th>
<th>表示符号</th>
</tr>
</thead>
<tbody><tr>
<td>关联</td>
<td>参与者与用例之间的关系</td>
<td>—&gt;</td>
</tr>
<tr>
<td>泛化</td>
<td>参与者之间或用例之间的关系</td>
<td>—▷</td>
</tr>
<tr>
<td>包含</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;include&gt;&gt;—&gt;</td>
</tr>
<tr>
<td>扩展</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;extend&gt;&gt;—-&gt;</td>
</tr>
</tbody></table>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p>
<p>（2）类图</p>
<p>&emsp;&emsp;参考：<a href="https://blog.csdn.net/realmagicboy/article/details/90289062">链接</a></p>
<p>（3）事件跟踪图</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B8%AA%E5%9B%BE.png"></p>
<p>（4）状态图（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<h3 id="十四、补充知识点："><a href="#十四、补充知识点：" class="headerlink" title="十四、补充知识点："></a>十四、补充知识点：</h3><ol>
<li><p>判定是否结构化：</p>
<p>程序流程图只有一个出口，则结构化；有多个出口，则非结构化。（非结构化&#x3D;&gt;结构化）</p>
</li>
<li><p>非渐增式测试：</p>
<p>先将模块进行单元测试然后组装到一起再测试整体；</p>
<p>渐增式测试：（自下而上、自上而下）</p>
<p>逐个将未经检测的模块组装到已经测试过的模块上进行集成测试。即加一个测一个，便于发现接口错误。</p>
</li>
<li><p>结构化设计方法（传统法）是面对数据流和功能的设计。</p>
</li>
<li><p>数据流设计方法：</p>
<p>（1）变换型：输入——&gt;处理——&gt;输出</p>
<p>（2）事务性：事务层、操作层、细节层（一起入、一起滚）</p>
</li>
<li><p>好的程序注释要占到程序总量的1&#x2F;3。</p>
</li>
<li><p>找到错误位置占排错总工作量的95%。</p>
</li>
<li><p>数据流和文件命名情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据流命名</th>
<th>文件命名</th>
</tr>
</thead>
<tbody><tr>
<td>数据流与文件交互</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>数据流再加工之间传递</td>
<td>需要</td>
<td>不需要</td>
</tr>
<tr>
<td>流入&#x2F;流出文件的数据流不同</td>
<td>需要</td>
<td>需要</td>
</tr>
</tbody></table>
</li>
<li><p>功能性内聚是最强的，偶然内聚是最弱的。</p>
</li>
<li><p>Jackson图是面向数据结构的.</p>
</li>
<li><p>模块中所以成分引用共同的数据，该模块内的联系类型为：通信内聚。</p>
</li>
<li><p>不适应于数据流图处理（加工）名称的是工资支票数据。（因为不存在计算&#x2F;操作）</p>
</li>
<li><p>采用结构化分析方法时，采用的基本手段是：分解与抽象。</p>
</li>
<li><table>
<thead>
<tr>
<th>阶段</th>
<th>产生</th>
</tr>
</thead>
<tbody><tr>
<td>系统分析</td>
<td>模块结构图与模块说明书</td>
</tr>
<tr>
<td>需求&#x2F;设计阶段</td>
<td>系统说明书</td>
</tr>
<tr>
<td>需求分析阶段</td>
<td>数据字典&#x2F;数据流图</td>
</tr>
</tbody></table>
</li>
<li><p>结构化设计是面向数据流的设计方法。</p>
</li>
<li><p>维护过程中，应先确定维护类型。</p>
</li>
<li><p>结构化设计方法：数据流图导出初始结构图，再以此为基础构件模块化的软件系统架构。</p>
</li>
<li><p>结构化系统分析主要通过处理功能进行分析。</p>
</li>
<li><p>结构化系统分析中，判定表和判定树常用于表达数据流图中的加工逻辑。</p>
</li>
<li><p>驱动模块：自底向上测试</p>
<p>桩模块：自顶向下测试</p>
</li>
<li><p>结构化设计采用模块化方法的主要出发点是：降低复杂度。</p>
</li>
<li><p>数据流图所描述的是实际系统的逻辑模型。</p>
</li>
<li><p>在软件生命周期中，占工作量比例最大的是：维护。</p>
</li>
<li><p>SA(结构化)方法再描述方式上的特点，是尽量采用图形表示。</p>
</li>
<li><p>决定软件系统中各个模块的外部特性（输入、输出和功能）是概要设计阶段的任务。</p>
</li>
<li><p>通过对软件的测试，可以证明错误所在。</p>
</li>
<li><p>决定软件工程方法论所有步骤的攻击目标是提高软件的可维护性。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<h3 id="十五、习题："><a href="#十五、习题：" class="headerlink" title="十五、习题："></a>十五、习题：</h3><ol>
<li><h4 id="可行性研究："><a href="#可行性研究：" class="headerlink" title="可行性研究："></a>可行性研究：</h4><p>该类题解法：①写出问题定义，②再根据技术、经济、操作可行性进行分析，③画出系统流程图和数据流图。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.2.png" alt="习题1.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.3.png" alt="习题1.3"></p>
</li>
<li><h4 id="需求分析：-1"><a href="#需求分析：-1" class="headerlink" title="需求分析："></a>需求分析：</h4><p>此类题解法：画数据流图，画E-R图。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.2.png" alt="习题2.2"></p>
</li>
<li><h4 id="总体设计：-1"><a href="#总体设计：-1" class="headerlink" title="总体设计："></a>总体设计：</h4><p>此类题解法：画数据流图和软件结构图，还会有HIPO图的绘制。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.2.png" alt="习题3.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.3.png" alt="习题3.3"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.4.png" alt="习题3.4"></p>
</li>
<li><h4 id="详细设计：-1"><a href="#详细设计：-1" class="headerlink" title="详细设计："></a>详细设计：</h4><p>此类题解法：①根据代码绘制程序流程图和盒图。②根据图或代码判定是否结构化，若非结构化则&#x3D;&gt;结构化（画图）。③判定表和判定树的绘制。④画出程序的程序流程图并转化为程序流图，再计算环形复杂度。⑤Jackson图绘制？？？</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.2.png" alt="习题4.2"></p>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.2.png" alt="习题5.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.3.png" alt="习题5.3"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.4.png" alt="习题5.4"></p>
<ol start="5">
<li><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>此类题解法：①根据提供的伪代码，进行纠错，修改循环结构，画程序流程图，判定是否结构化，画盒图。</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;②进行各类测试。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba</title>
    <url>/blog2025.github.io/2025/04/08/SpringCloudAlibaba/</url>
    <content><![CDATA[<h3 id="一、Spring-Cloud-和-Spring-Cloud-Alibaba"><a href="#一、Spring-Cloud-和-Spring-Cloud-Alibaba" class="headerlink" title="一、Spring Cloud 和 Spring Cloud Alibaba"></a>一、Spring Cloud 和 Spring Cloud Alibaba</h3><ol>
<li><p><strong>服务注册与发现</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>注册中心</strong>‌</td>
<td>Eureka（AP 模式）‌</td>
<td>‌<strong>Nacos</strong>‌（AP&#x2F;CP 模式可切换）‌</td>
</tr>
<tr>
<td>‌<strong>核心差异</strong>‌</td>
<td>仅支持服务注册与发现‌</td>
<td>集成配置管理功能，支持动态配置刷新‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>服务调用与负载均衡</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>客户端负载</strong>‌</td>
<td>Ribbon + OpenFeign‌</td>
<td>‌<strong>Dubbo</strong>‌（高性能 RPC）‌</td>
</tr>
<tr>
<td>‌<strong>协议支持</strong>‌</td>
<td>HTTP&#x2F;REST‌</td>
<td>支持 Dubbo 协议（TCP 长连接）‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>流量控制与熔断</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>熔断降级</strong>‌</td>
<td>Hystrix（已停更）‌</td>
<td>‌<strong>Sentinel</strong>‌（实时监控、规则持久化）</td>
</tr>
<tr>
<td>‌<strong>核心特性</strong>‌</td>
<td>简单熔断策略‌</td>
<td>精细化流量控制（QPS&#x2F;线程数&#x2F;热点参数）‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>配置管理</strong></p>
<table>
<thead>
<tr>
<th><strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>配置中心</strong>‌</td>
<td>Spring Cloud Config‌</td>
<td>‌<strong>Nacos Config</strong>‌（与注册中心一体化）‌</td>
</tr>
<tr>
<td>‌<strong>优势</strong>‌</td>
<td>需独立部署，功能基础‌</td>
<td>动态配置推送、多环境隔离、版本回滚‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>分布式事务</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>解决方案</strong>‌</td>
<td>无原生支持‌</td>
<td>‌<strong>Seata</strong>‌（AT&#x2F;TCC 模式）‌</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>需集成第三方框架‌</td>
<td>跨服务事务一致性保障（如订单扣库存）</td>
</tr>
</tbody></table>
</li>
<li><p><strong>消息队列</strong></p>
<table>
<thead>
<tr>
<th><strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>默认集成</strong>‌</td>
<td>RabbitMQ&#x2F;Kafka‌</td>
<td>‌<strong>RocketMQ</strong>‌（事务消息、顺序消息）‌‌</td>
</tr>
<tr>
<td>‌<strong>优势</strong>‌</td>
<td>通用性强‌</td>
<td>高吞吐、低延迟，适合金融级场景‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>生态系统与适用场景</strong></p>
<ul>
<li>Spring Cloud<ul>
<li>基于 Netflix OSS，适合公有云&#x2F;私有云部署‌。</li>
<li>社区成熟，文档丰富，但部分组件已停更（如 Hystrix）‌。</li>
</ul>
</li>
<li>‌Spring Cloud Alibaba<ul>
<li>深度整合阿里云生态，支持国内企业级需求（如高并发、分布式事务）‌。</li>
<li>组件性能优化（如 Nacos、Sentinel）更适合本土化生产环境‌</li>
</ul>
</li>
</ul>
</li>
<li><p>‌<strong>总结选型建议</strong>‌</p>
<ul>
<li>‌<strong>选择 Spring Cloud</strong>‌：若项目依赖 Netflix 生态或需快速集成国际化云服务‌。</li>
<li><strong>‌选择 Spring Cloud Alibaba</strong>：<ul>
<li>需要高性能 RPC（Dubbo）、动态配置管理（Nacos）或分布式事务（Seata）‌。</li>
<li>国内云环境部署，尤其是阿里云用户‌。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="二、服务注册与发现-Nacos"><a href="#二、服务注册与发现-Nacos" class="headerlink" title="二、服务注册与发现-Nacos"></a>二、服务注册与发现-Nacos</h3><h3 id="三、服务调用与负载均衡-Dubbo‌"><a href="#三、服务调用与负载均衡-Dubbo‌" class="headerlink" title="三、服务调用与负载均衡-Dubbo‌"></a>三、<strong>服务调用与负载均衡</strong>-<strong>Dubbo</strong>‌</h3><h3 id="四、熔断-‌Sentinel"><a href="#四、熔断-‌Sentinel" class="headerlink" title="四、熔断-‌Sentinel"></a>四、熔断-‌<strong>Sentinel</strong></h3><h3 id="五、配置管理-‌Nacos-Config"><a href="#五、配置管理-‌Nacos-Config" class="headerlink" title="五、配置管理-‌Nacos Config"></a>五、<strong>配置管理</strong>-‌<strong>Nacos Config</strong></h3><h3 id="六、消息队列-‌RocketMQ"><a href="#六、消息队列-‌RocketMQ" class="headerlink" title="六、消息队列-‌RocketMQ"></a>六、<strong>消息队列</strong>-‌<strong>RocketMQ</strong></h3><h3 id="七、分布式事务-‌Seata"><a href="#七、分布式事务-‌Seata" class="headerlink" title="七、分布式事务-‌Seata"></a>七、分布式事务-‌<strong>Seata</strong></h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
</search>
