<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo安装、博客编写教程：</title>
    <url>/blog2025.github.io/2025/03/10/hello-world/</url>
    <content><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="一、流程"><a href="#一、流程" class="headerlink" title="一、流程"></a>一、流程</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">cmd进入hexo-blog目录本地库，</span><br><span class="line">使用命令进行操作，</span><br><span class="line">操作完成后使用 <span class="attribute">hexo</span> g -d 生成静态页面并上传到GitHub。</span><br></pre></td></tr></table></figure>

<h3 id="二、创建新帖子"><a href="#二、创建新帖子" class="headerlink" title="二、创建新帖子"></a>二、创建新帖子</h3><p>方法一：直接生成文章：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p>方法二：生成文章和对应同名目录(用于存储图片资源等)：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new post <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313130306915.png"></p>
<p>注：文章存储路径为：hexo-blog&#x2F;source&#x2F;_posts</p>
<h3 id="三、Hexo命令："><a href="#三、Hexo命令：" class="headerlink" title="三、Hexo命令："></a>三、Hexo命令：</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init <span class="comment"># 初始化 </span></span><br><span class="line">npm install <span class="comment"># (一般来讲，这个只会在第一次安装hexo时使用)</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo d <span class="comment"># 上传到GitHub</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br><span class="line">hexo g -d <span class="comment"># 生成静态页面并上传到github</span></span><br><span class="line">ssh -T git<span class="variable">@github</span>.com <span class="comment"># 测试连通性</span></span><br></pre></td></tr></table></figure>

<p>更多命令: <a href="https://hexo.io/zh-cn/docs/commands">链接</a></p>
<h3 id="四、注意事项："><a href="#四、注意事项：" class="headerlink" title="四、注意事项："></a>四、注意事项：</h3><p>问题一:   “You’ve successfully authenticated, but GitHub does not provide shell access.”	</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">·需要生成本地<span class="attribute">SSH</span> ，再配置到GitHub中。</span><br><span class="line">·因为本次采用SSH进行远程连接，所以对于本地hexo-blog中的_config.xml进行配置为SSH格式。</span><br><span class="line">deploy:</span><br><span class="line">   type: git	</span><br><span class="line">   repo: git<span class="variable">@github</span>.com:lsdyun/blog2025.github.io.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure>

<p>问题二：采用Http和SSH区别:(!!!推荐使用SSH)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">采用Http每次都需要输入账号和密码，使用SSH则不需要。</span><br><span class="line">此外，GitHub已经禁止密码验证，强制要求使用个人访问令牌(PAT),所以此处才使用SSH。</span><br></pre></td></tr></table></figure>

<p>注：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">认证机制：</span><br><span class="line">  SSH：</span><br><span class="line">     ·基于非对称加密，通过本机生成的密钥对（公钥+私钥）进行身份验证，无需每次输入密码。</span><br><span class="line">     ·密钥需手动生成并添加至GitHub账户的SSH Keys配置页，实现一次性配置长期生效。</span><br><span class="line">  HTTP(S)：</span><br><span class="line">     ·依赖用户名+密码或令牌(PAT)认证。GitHub已禁用密码验证，强制要求使用个人访问令牌(PAT)。</span><br><span class="line">     ·令牌需在GitHub账户中生成并赋予权限(如repo权限)，操作时需手动输入或依赖凭证缓存。</span><br></pre></td></tr></table></figure>

<p>生成SSH和配置到GitHub参考: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<h3 id="五：补充："><a href="#五：补充：" class="headerlink" title="五：补充："></a>五：补充：</h3><p>·Hexo默认主题存放在node_modules&#x2F;hexo-theme-landscape目录下，可对_config.yml进行处理。</p>
<p><font color="red">·当使用steam++加速GitHub时，会导致本地host被污染，导致无法上传项目到GitHub，最好先关闭加速在上传。</font></p>
<h3 id="六、Hexo渲染和Typora图片问题"><a href="#六、Hexo渲染和Typora图片问题" class="headerlink" title="六、Hexo渲染和Typora图片问题"></a>六、Hexo渲染和Typora图片问题</h3><p>1.修改 Hexo 根目录的 <code>_config.yml</code>，确保以下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="attribute">true</span>  <span class="comment"># 自动生成文章同名资源夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>     <span class="comment"># 禁止生成相对路径</span></span><br><span class="line"></span><br><span class="line">同时增加：(没这个也会导致渲染出问题)</span><br><span class="line"><span class="comment"># 解决typera和hexo图片加载问题  </span></span><br><span class="line">marked:</span><br><span class="line">  prependRoot: <span class="literal">true</span></span><br><span class="line">  postAsset: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.安装官方推荐的渲染插件：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall hexo-renderer-marked --save  <span class="comment"># 先卸载旧版本（如有）</span></span><br><span class="line">npm install hexo-renderer-marked<span class="variable">@latest</span> --save</span><br></pre></td></tr></table></figure>

<p>3.Typora 设置路径：</p>
<p>偏好设置 → 图像 → 插入图片时选择 “复制到指定路径”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存路径填：./$&#123;filename&#125;.assets/  </span><br><span class="line">勾选：优先使用相对路径</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313225230399.png" alt="image-20250313225230399"></p>
<p>4.格式→图像→设置图片根目录 “选择对应文件的存储位置”</p>
<p>5‌.插入图片后检查格式：</p>
<p>在 Markdown 中必须显示为 <code>![描述](图片名.jpg)</code>，而不是 <code>![描述](文章名/图片名.jpg)</code><br>（若出现多余路径，手动删除前缀）</p>
<p>6.<font color="red">添加图片步骤</font></p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具,不保存；</span><br><span class="line">第二步、直接将图片复制到Typora中；</span><br><span class="line">第三步、从Typora将图片保存到对应文件夹中；</span><br><span class="line">第四步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<p>方法二：（图片最后格式一定没有”&#x2F;“）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具，保存到对应目录；</span><br><span class="line">第二步、在Typora中，右击插入图像；</span><br><span class="line">第三步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<h3 id="七、Hexo高亮问题："><a href="#七、Hexo高亮问题：" class="headerlink" title="七、Hexo高亮问题："></a>七、Hexo高亮问题：</h3><p>1.Hexo 7.x的配置文件(_config.xml)中:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>syntax_highlighter: 可选Hexo默认的highlight.js,也可选prismjs</p>
<p>2.Next 8.22.0主题的配置文件(_config.xml)中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default  ##这里决定了最后展示的效果</span><br><span class="line">    dark: stackoverflow-dark ##这里决定了最后展示的效果</span><br><span class="line">  prism:</span><br><span class="line">    light: prism-tomorrow  ##这里决定了最后展示的效果</span><br><span class="line">    dark: prism-tomorrow-dark ##这里决定了最后展示的效果</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: </span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false</span><br><span class="line">    height: 500</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/BB1msOOV.jpg"></p>
<h3 id="八、个性化Next主题："><a href="#八、个性化Next主题：" class="headerlink" title="八、个性化Next主题："></a>八、个性化Next主题：</h3><p>1.开启themes&#x2F;next_config.xml中的选项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">	style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<p>2.在hexo-blog&#x2F;source&#x2F;_data中新建styles.styl</p>
<p>3.开始在styles.styl中自定义CSS</p>
<h3 id="九、开启动态背景："><a href="#九、开启动态背景：" class="headerlink" title="九、开启动态背景："></a>九、开启动态背景：</h3><p>在themes&#x2F;next_config.xml中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>

<h3 id="十、参考资料："><a href="#十、参考资料：" class="headerlink" title="十、参考资料："></a>十、参考资料：</h3><p>安装教程一: <a href="https://blog.csdn.net/yaorongke/article/details/119089190">链接</a></p>
<p>安装教程二: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<p>Next主题使用方法：<a href="https://zhuanlan.zhihu.com/p/618864711">链接</a></p>
<p>Next 8 版本使用方法：<a href="https://www.cnblogs.com/jinwei26/articles/18460312">链接</a>（代码块，动态人物|本项目采用该版本）</p>
<p>Next新旧版本对比：<a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#%E9%BB%98%E8%AE%A4%E9%A1%B5%E5%A4%84%E7%90%86">链接</a></p>
<p>图标icon：<a href="https://fontawesome.dashgame.com/">链接</a></p>
<p>分类和标签功能：<a href="https://juejin.cn/post/6921750181297782798">链接</a></p>
<p>阅读全文功能：<a href="https://blog.csdn.net/codejoker_7/article/details/123235687">链接</a></p>
<p>暗黑模式：<a href="https://blog.csdn.net/rqh656418510/article/details/123676457">链接</a></p>
<p>Hexo 7.x 语法高亮：<a href="https://hexo.io/zh-cn/docs/syntax-highlight">链接</a></p>
<p>Hexo-Next:<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>自建网站</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="一-软件危机"><a href="#一-软件危机" class="headerlink" title="一. 软件危机"></a>一. 软件危机</h3><ol>
<li>定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。<br>表现：<br>（1）开发成本和进度的估计不准确；（开发滞后）<br>（2）用户对开发的软件不满意；<br>（3）软件的质量靠不住；<br>（4）软件不可维护；（重复开发相同的软件）<br>（5）软件不可维护；（重复开发相同的软件）<br>（6）软件开发成本在计算机系统总成本中所占的比例逐年上升；<br>（7）软件开发生产率跟不上计算机应用的发展；（供不应求）<br>等等。</li>
<li>产生原因：<br>（1）软件本身的特点有关；（软件本身）<br>（2）软件开发与维护的方法不正确；（软件开发不匹配计算机发展）<br>（3）对用户要求没有完整准确的认识就匆忙着手编写程序；（开发人员）</li>
<li>消除原因：<br>（1）对计算机软件有一个正确的认识；（消除软件就是程序的错误）<br>软件定义：软件是程序，数据及相关文档的完整集合；<br>（2）软件开发不是某个体劳动的神秘技巧，而是一种团队配合的工程项目，必须吸收和借鉴人类长期以来积累的原理、概念、技术和方法，尤其是教训；<br>（3）推广实践中总结出来的经验、技术和方法，并研究新的；<br>（4）开发和使用更好的软件工具。 </li>
<li><font color="red">总结：技术措施（方法、工具），必要的组织管理措施。</font></li>
</ol>
<h3 id="二-软件工程"><a href="#二-软件工程" class="headerlink" title="二. 软件工程"></a>二. 软件工程</h3><ol>
<li>定义：指导计算机软件开发和维护的一门工程学科。</li>
<li>本质特征：<br>（1）关注于大型程序的构造；<br>（2）中心课题是控制复杂性；<br>（3）软件的效率非常重要；<br>（4）开发软件的效率非常重要；<br>（5）和谐地合作是开发软件的关键；<br>（6）软件必须有效地支持它的用户；<br>（7）一种文化背景的人替另一种文化背景的人创造产品；</li>
<li>基本原理：<br>（1）用分阶段的生命周期计划严格管理；<br>（2）坚持进行阶段评审；<br>（3）实行严格的产品控制；<br>（4）采用现代化程序设计技术；<br>（5）结果应清除审查；<br>（6）开发小组的人员少二精；<br>（7）承认不断改进软件工程实践的必要性；</li>
<li>软件工程方法学：<br>（1） 软件工程包含技术和管理两方面的内容：<br>（2） <font color="red">范型（方法学）</font>：在软件生命周期全过程中使用的一整套技术方法的集合；<br>&emsp;&emsp;包含三个要素： 方法、工具、过程；<br>&emsp;&emsp;常用——&gt;<font color="red">传统方法学和面向对象方法学</font><br>（3）传统方法学（<font color="red">生命周期方法学 &#x2F; 结构化范型</font>）<br>&emsp;&emsp;面向行为或数据，两者权重不同；（行为和数据分离）<br>&emsp;&emsp;🟪-&gt;🟪-&gt;🟪-&gt;🟪（一个阶段一个阶段地顺序开发）<br>（4）面向对象方法学：（规模庞大，需求模糊或不断变化）<br>&emsp;&emsp;数据和行为的权重一样大；<br>&emsp;&emsp;特点：<br>&emsp;&emsp;① 对象；（数据和行为的统一）object<br>&emsp;&emsp;② 对象——&gt;类；（数据和操作）class<br>&emsp;&emsp;③ 父类、子类、派生类；<br>&emsp;&emsp;④ 对象间仅能通过发送消息互相联系；<br>&emsp;&emsp;对象间的所有私有private信息都被封装在该对象内，不可从外界直接访问（<font color="red">封装性</font>）<br>&emsp;&emsp;最终产品是由许多较小的基本独立的对象组成。</li>
</ol>
<h3 id="三、软件生命周期"><a href="#三、软件生命周期" class="headerlink" title="三、软件生命周期"></a>三、软件生命周期</h3><p>​	组成：软件定义、软件开发、运行维护；</p>
<ol>
<li><p>软件定义（系统分析）：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>问题定义</td>
<td>问题是什么？</td>
</tr>
<tr>
<td>可行性研究</td>
<td>问题能否解决？</td>
</tr>
<tr>
<td>需求分析</td>
<td>解决问题需要做什么？</td>
</tr>
</tbody></table>
</li>
<li><p>软件开发：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>分类</th>
<th>细分</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>系统设计</td>
<td>总体设计</td>
<td>如何实现</td>
</tr>
<tr>
<td></td>
<td>详细设计</td>
<td>如何具体实现</td>
</tr>
<tr>
<td>系统实现</td>
<td>编码和单元测试</td>
<td></td>
</tr>
<tr>
<td></td>
<td>综合测试</td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li><p>软件维护：</p>
<p>改正性维护、适应性维护、完善性维护、预防性维护；</p>
</li>
</ol>
<p><font color="red">总结：系统分析——&gt;系统设计——&gt;系统实现——&gt;维护</font></p>
<h3 id="四、软件过程（采用生命周期模型）（过程模型）"><a href="#四、软件过程（采用生命周期模型）（过程模型）" class="headerlink" title="四、软件过程（采用生命周期模型）（过程模型）"></a>四、软件过程（采用生命周期模型）（过程模型）</h3><ol>
<li><p>目的：为了开发出客户需要的软件；（who,when,what,how）</p>
</li>
<li><p>生命周期模型：<br>（1）<font color="red">瀑布模型</font>：（每个阶段都有文档）<br>特点：<br>① 阶段间具有顺序性和依赖性；<br>② 推迟实现的观点；（越大的项目越需要早期的准备）<br>③ 质量保证的观点；（文档）<br>优点：强迫开发人员采用规范，维护比较容易；（文档驱动）<br>缺点：交付给用户之前，用户只能通过文档了解产品，最终导致产品与用户需求发生争执；（文档驱动）</p>
</li>
</ol>
<img src="瀑布模型.png" style="zoom: 80%;" />

<p>​		（2） 快速原型模型：</p>
<p>&emsp;&emsp;特点：先开发一个原型，后续根据用户要求快速修改原型。（线性）</p>
<p>&emsp;&emsp;本质：快速，节约开发成本。</p>
<p>&emsp;&emsp;应用：UNIX Shell和超文本</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%9E%8B.png"></p>
<p>​		（3）增量模型（渐增模型）</p>
<p>&emsp;&emsp;特点：将功能分为构件，逐步向用户提交产品，功能逐步推给用户；</p>
<p>&emsp;&emsp;&emsp;&emsp;与之相比，瀑布和快速模型则是一次把所有功能塞给用户；</p>
<p>&emsp;&emsp;优点：较短时间内向用户提交；</p>
<p>&emsp;&emsp;① 可完成部分工作的产品；</p>
<p>&emsp;&emsp;② 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品；</p>
<p>&emsp;&emsp;缺点：技术要求高。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png"></p>
<p>&emsp;&emsp;风险更大的增量模型：（并行开发）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B2.png"></p>
<p>​		（4）螺旋模型：（用于大项目、应对风险即风险驱动）</p>
<p>&emsp;&emsp;<font color="red">实质上是在每个阶段之前增加了风险分析过程的<strong>快速原型</strong>模型</font></p>
<p>&emsp;&emsp;优点：</p>
<p>&emsp;&emsp;① 强调已有软件的重用，有助于把软件质量作为软件开发的一个重要目标；</p>
<p>&emsp;&emsp;② 减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险。</p>
<p>&emsp;&emsp;缺点：风险驱动的同时也会使开发人员未意识到真正风险的发生。</p>
<img src="螺旋模型.png" style="zoom: 50%;" />

<p>​		（5）喷泉模型：（迭代）<font color="red"><strong>面向对象范型</strong>中常见</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;解释：圆圈相互重叠代表活动存在交迭；向下的箭头代表该阶段内的迭代；较小的圆圈代表维护。</p>
<img src="喷泉模型.png" style="zoom: 50%;" />

<p>​		（6）RUP统一过程：</p>
<p>&emsp;&emsp;迭代开发，管理需求（用例分析），使用基于构件的体系结构（第三方架构Vue、Spring之类），可视化建模（UML），验证软件质量，控制软件变更。</p>
<h3 id="五、可行性研究"><a href="#五、可行性研究" class="headerlink" title="五、可行性研究"></a>五、可行性研究</h3><ol>
<li><p>实质：是要进行一次大大压缩简化了的系统分析（抽象化）和设计的过程</p>
</li>
<li><p>定义：</p>
<p>（1）进一步分析和澄清问题定义；</p>
<p>（2）导出系统的逻辑模型；</p>
<p>（3）探索若干种可供选择的主要解法：</p>
<p>&emsp;&emsp;① 技术可行性，② 经济可行性，③ 操作可行性，④ 法律</p>
</li>
<li><p>过程：8步</p>
<p>复查系统规模和目标、研究现有系统、导出新系统模型、进一步定义问题、导出和评价解法、推荐行动方针、草拟开发计划、写文档提交审查。</p>
</li>
<li><p>各类图：（详细看汇总图章节）</p>
<p>（1）系统流程图</p>
<p>（2）数据流图（数据流程图）</p>
<p>（3）数据字典：（开发数据库的第一步）</p>
<p>&emsp;&emsp;定义：关于数据的信息的集合，对数据流图中包含的所有元素的定义的集合；</p>
<p>&emsp;&emsp;包含：数据流（动态）、数据存储（静态）、数据流分量\数据元素（处理）</p>
</li>
</ol>
<h3 id="六、需求分析"><a href="#六、需求分析" class="headerlink" title="六、需求分析"></a>六、需求分析</h3><ol>
<li><p>实质：回答系统必须做什么。</p>
</li>
<li><p>任务：</p>
<p>（1）确定对系统的综合要求：</p>
<p>&emsp;&emsp;功能需求，性能<del>，可靠性和可用性</del>，出错处理<del>，接口</del>，约束，逆向<del>，将来可能提出的</del></p>
<p>（2）分析系统的数据要求；</p>
<p>（3）导出系统的逻辑模型：</p>
<p>&emsp;&emsp;采用数据流图、实体-联系图、状态转换图、数据字典和主要算法描述该模型。</p>
<p>（4）修正系统开发计划；</p>
</li>
<li><p>软件需求规格说明：（详细看汇总图章节）</p>
<p>（1）实体-联系图（E-R图）：数据对象、属性、联系（1:1，1:n，n:m）,（1NF冗余最高，2NF，3NF常用）</p>
<p>（2）状态转化图（两种画法）</p>
<p>（3）Warnier图</p>
<p>（4）IPO图</p>
</li>
</ol>
<h3 id="七、总体设计"><a href="#七、总体设计" class="headerlink" title="七、总体设计"></a>七、总体设计</h3><ol>
<li><p>阶段组成：系统设计、结构设计；</p>
</li>
<li><p>过程：9步</p>
<p>设想供选择的方案，选取合理的方案，推荐最佳~，功能分解，设计软件架构，设计数据库，确定测试计划，书写文档，审查和复审。</p>
</li>
<li><p>模块：构成程序的基本构件</p>
<p>（1）耦合：追求低耦合</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%80%A6%E5%90%88.png"></p>
<p>（2）内聚：追求高内聚</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%86%85%E8%81%9A.png"></p>
</li>
<li><p>描述软件架构工具：（详细看汇总图章节）</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
</ol>
<h3 id="八、详细设计（算法）"><a href="#八、详细设计（算法）" class="headerlink" title="八、详细设计（算法）"></a>八、详细设计（算法）</h3><ol>
<li><p>结构设计：顺序、选择、循环</p>
</li>
<li><p>过程设计工具：（描述程序处理过程的工具）（详细看汇总图章节）</p>
<p>（1）程序流程图</p>
<p>（2）盒图（N-S图）</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
</li>
<li><p>面向数据结构的设计方法：Jackson图</p>
</li>
<li><p>程序复杂程度：计算环形复杂度</p>
</li>
</ol>
<h3 id="九、实现"><a href="#九、实现" class="headerlink" title="九、实现"></a>九、实现</h3><ol>
<li><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4></li>
<li><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>（1）确认测试：需求分析阶段（Alpha测试、Beta测试）</p>
<p>（2）单元测试：详细设计&#x2F;编码阶段（代码审查）</p>
<p>（3）集成测试：概要设计阶段（回归测试）</p>
<p>（4）系统测试：整体系统实现</p>
<p>（5）黑盒测试</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
<p>（6）白盒测试：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
</li>
<li><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4></li>
</ol>
<h3 id="十、维护"><a href="#十、维护" class="headerlink" title="十、维护"></a>十、维护</h3><ol>
<li><p>决定软件的可维护性的因素：</p>
<p>可理解性、可测试性、可修改性、可重用性</p>
</li>
<li><p>文档：</p>
<p>用户文档、系统文档</p>
</li>
</ol>
<h3 id="十一、面向对象方法学"><a href="#十一、面向对象方法学" class="headerlink" title="十一、面向对象方法学"></a>十一、面向对象方法学</h3><ol>
<li>用例图（详细看汇总图章节）</li>
<li>类图（详细看汇总图章节）</li>
</ol>
<h3 id="十二、面向对象分析"><a href="#十二、面向对象分析" class="headerlink" title="十二、面向对象分析"></a>十二、面向对象分析</h3><ol>
<li><p>状态图（详细看汇总图章节）</p>
</li>
<li><p>事件跟踪图</p>
</li>
<li><table>
<thead>
<tr>
<th>模型类型</th>
<th>图</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>对象模型</td>
<td>类图结合功能过程</td>
<td>最基础、最重要、最核心</td>
</tr>
<tr>
<td>动态模型</td>
<td>时间跟踪图或状态图</td>
<td></td>
</tr>
<tr>
<td>功能模型</td>
<td>数据流图或程序流程图</td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="十三、软件工程导论各类图汇总"><a href="#十三、软件工程导论各类图汇总" class="headerlink" title="十三、软件工程导论各类图汇总"></a>十三、软件工程导论各类图汇总</h3><h4 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h4><ol>
<li><p>可行性分析：</p>
<p>（1）系统流程图（整个系统功能）</p>
<p>（2）数据流(程)图</p>
<p>（3）数据字典</p>
</li>
<li><p>需求分析：</p>
<p>（1）实体联系图（E-R图）</p>
<p>（2）状态(转换)图（两种画法）</p>
<p>（3）IPO图</p>
</li>
<li><p>总体设计：</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
<li><p>详细设计：</p>
<p>（1）程序流程图（某一程序执行任务的过程）</p>
<p>（2）N-S盒图</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
<p>（6）Jackson图</p>
</li>
<li><p>其他</p>
<p>（1）用例图</p>
<p>（2）类图</p>
<p>（3）事件跟踪图</p>
<p>（4）状态图（两种画法）</p>
</li>
</ol>
<h4 id="绘制："><a href="#绘制：" class="headerlink" title="绘制："></a>绘制：</h4><ol>
<li><h5 id="可行性分析："><a href="#可行性分析：" class="headerlink" title="可行性分析："></a>可行性分析：</h5><p>（1）系统流程图：</p>
<p>&emsp;&emsp;<img src="系统流程图1.png" style="zoom:50%;" /><img src="系统流程图2.png" style="zoom:50%;" /></p>
<p>&emsp;&emsp;例：</p>
<img src="系统流程图3.png" alt="系统流程图3" style="zoom:50%;" />

<p>（2）数据流(程)图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例1：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE2.png"></p>
<p>&emsp;&emsp;例2：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE3.png"></p>
<p>&emsp;&emsp;D1，D2，1，2：加这些编号是为了方便引用和追踪</p>
<p>（3）数据字典：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>描述</th>
<th>允许非空</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>char</td>
<td>编号</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>姓名</td>
<td>NO</td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li><h5 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h5><p>（1）实体联系图（E-R图）：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE2.png"></p>
<p>（2）状态图&#x2F;状态转换图：（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE2.png"></p>
<p>（3）IPO图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/IPO%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;IPO表：</p>
<img src="IPO表.png"  />
</li>
<li><h5 id="总体设计："><a href="#总体设计：" class="headerlink" title="总体设计："></a>总体设计：</h5><p>（1）层次图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%A8%A1%E5%9D%97.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%B1%82%E6%AC%A1%E5%9B%BE.png"></p>
<p>（2）HIPO图：（IPO图+层次图）</p>
<p>&emsp;&emsp;在层次图除了最顶层的方框之外，每个方框中都加编号。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/HIPO%E5%9B%BE.png"></p>
<p>（3）软件结构图：</p>
<p>&emsp;&emsp;类似于层次图，但是为模块调用模块。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE2.png"></p>
</li>
<li><h5 id="详细设计："><a href="#详细设计：" class="headerlink" title="详细设计："></a>详细设计：</h5><p>（1）程序流程图：（环形复杂度计算）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p>（2）N-S盒图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE1.png"></p>
<p>（3）PAD图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/PAD%E5%9B%BE1.png"></p>
<p>（4）判定表：</p>
<p>&emsp;&emsp;例：某航空公司规定，乘客可以免费托运不超过20公斤的行李。当行李重量超过20公斤时，对头等舱的乘客超重部分每公斤收费4元，其它舱的乘客收费6元。对残疾乘客超重部分在舱位等次相同的情况下收费减半。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>未超重</td>
<td>T</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>超重</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>头等舱</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>其他舱</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>残疾乘客</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>普通乘客</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr>
<td>免费</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分2元&#x2F;公斤</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分3元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>超出部分4元&#x2F;公斤</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分6元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<p>（5）判定树：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%88%A4%E5%AE%9A%E6%A0%91.png"></p>
<p>（6）Jackson图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/Jackson%E5%9B%BE.png"></p>
</li>
<li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>（1）用例图</p>
<table>
<thead>
<tr>
<th>关系类型</th>
<th>说明</th>
<th>表示符号</th>
</tr>
</thead>
<tbody><tr>
<td>关联</td>
<td>参与者与用例之间的关系</td>
<td>—&gt;</td>
</tr>
<tr>
<td>泛化</td>
<td>参与者之间或用例之间的关系</td>
<td>—▷</td>
</tr>
<tr>
<td>包含</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;include&gt;&gt;—&gt;</td>
</tr>
<tr>
<td>扩展</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;extend&gt;&gt;—-&gt;</td>
</tr>
</tbody></table>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p>
<p>（2）类图</p>
<p>&emsp;&emsp;参考：<a href="https://blog.csdn.net/realmagicboy/article/details/90289062">链接</a></p>
<p>（3）事件跟踪图</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B8%AA%E5%9B%BE.png"></p>
<p>（4）状态图（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<h3 id="十四、补充知识点："><a href="#十四、补充知识点：" class="headerlink" title="十四、补充知识点："></a>十四、补充知识点：</h3><ol>
<li><p>判定是否结构化：</p>
<p>程序流程图只有一个出口，则结构化；有多个出口，则非结构化。（非结构化&#x3D;&gt;结构化）</p>
</li>
<li><p>非渐增式测试：</p>
<p>先将模块进行单元测试然后组装到一起再测试整体；</p>
<p>渐增式测试：（自下而上、自上而下）</p>
<p>逐个将未经检测的模块组装到已经测试过的模块上进行集成测试。即加一个测一个，便于发现接口错误。</p>
</li>
<li><p>结构化设计方法（传统法）是面对数据流和功能的设计。</p>
</li>
<li><p>数据流设计方法：</p>
<p>（1）变换型：输入——&gt;处理——&gt;输出</p>
<p>（2）事务性：事务层、操作层、细节层（一起入、一起滚）</p>
</li>
<li><p>好的程序注释要占到程序总量的1&#x2F;3。</p>
</li>
<li><p>找到错误位置占排错总工作量的95%。</p>
</li>
<li><p>数据流和文件命名情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据流命名</th>
<th>文件命名</th>
</tr>
</thead>
<tbody><tr>
<td>数据流与文件交互</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>数据流再加工之间传递</td>
<td>需要</td>
<td>不需要</td>
</tr>
<tr>
<td>流入&#x2F;流出文件的数据流不同</td>
<td>需要</td>
<td>需要</td>
</tr>
</tbody></table>
</li>
<li><p>功能性内聚是最强的，偶然内聚是最弱的。</p>
</li>
<li><p>Jackson图是面向数据结构的.</p>
</li>
<li><p>模块中所以成分引用共同的数据，该模块内的联系类型为：通信内聚。</p>
</li>
<li><p>不适应于数据流图处理（加工）名称的是工资支票数据。（因为不存在计算&#x2F;操作）</p>
</li>
<li><p>采用结构化分析方法时，采用的基本手段是：分解与抽象。</p>
</li>
<li><table>
<thead>
<tr>
<th>阶段</th>
<th>产生</th>
</tr>
</thead>
<tbody><tr>
<td>系统分析</td>
<td>模块结构图与模块说明书</td>
</tr>
<tr>
<td>需求&#x2F;设计阶段</td>
<td>系统说明书</td>
</tr>
<tr>
<td>需求分析阶段</td>
<td>数据字典&#x2F;数据流图</td>
</tr>
</tbody></table>
</li>
<li><p>结构化设计是面向数据流的设计方法。</p>
</li>
<li><p>维护过程中，应先确定维护类型。</p>
</li>
<li><p>结构化设计方法：数据流图导出初始结构图，再以此为基础构件模块化的软件系统架构。</p>
</li>
<li><p>结构化系统分析主要通过处理功能进行分析。</p>
</li>
<li><p>结构化系统分析中，判定表和判定树常用于表达数据流图中的加工逻辑。</p>
</li>
<li><p>驱动模块：自底向上测试</p>
<p>桩模块：自顶向下测试</p>
</li>
<li><p>结构化设计采用模块化方法的主要出发点是：降低复杂度。</p>
</li>
<li><p>数据流图所描述的是实际系统的逻辑模型。</p>
</li>
<li><p>在软件生命周期中，占工作量比例最大的是：维护。</p>
</li>
<li><p>SA(结构化)方法再描述方式上的特点，是尽量采用图形表示。</p>
</li>
<li><p>决定软件系统中各个模块的外部特性（输入、输出和功能）是概要设计阶段的任务。</p>
</li>
<li><p>通过对软件的测试，可以证明错误所在。</p>
</li>
<li><p>决定软件工程方法论所有步骤的攻击目标是提高软件的可维护性。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
  </entry>
</search>
