<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax + Axios</title>
    <url>/blog2025.github.io/2025/05/28/Ajax%20+%20axios/</url>
    <content><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a><a href="https://www.runoob.com/ajax/ajax-tutorial.html">Ajax</a></h1><p><em>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</em></p>
<p><em>AJAX 最大的优点是在<strong>不重新加载</strong>整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</em></p>
<p><em>XMLHttpRequest 只是实现 Ajax 的一种方式，当然也可以使用</em> <a href="https://www.runoob.com/ajax/fetch-api.html">fetch API</a> <em>等现代方法。</em></p>
<h2 id="一、工作原理"><a href="#一、工作原理" class="headerlink" title="一、工作原理"></a>一、工作原理</h2><p>1.<strong>事件触发</strong>（如点击按钮或页面加载）</p>
<p>2.<strong>Ajax 请求</strong>：通过 JavaScript 创建一个 <code>XMLHttpRequest</code> 对象，向服务器发送请求。</p>
<p>3.<strong>服务器处理请求</strong>：服务器（如 SpringBoot）接收请求，处理并返回响应数据（如 JSON）。</p>
<p>4.<strong>Ajax 相应处理</strong>：浏览器接收响应，使用 JavaScript 在页面上更新内容，而无需重新加载整个页面。</p>
<h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadXMLDoc()&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        .... <span class="variable constant_">AJAX</span> 脚本执行 ...</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、XMLHttpRequest-对象（XHR）"><a href="#三、XMLHttpRequest-对象（XHR）" class="headerlink" title="三、XMLHttpRequest 对象（XHR）"></a>三、XMLHttpRequest 对象（XHR）</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<h3 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.example.com/data&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求头（如果需要的话）</span></span><br><span class="line"><span class="comment">// xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义回调函数</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 请求成功，处理响应</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Response:&#x27;</span>, xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, xhr.<span class="property">statusText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理网络错误</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request failed&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<h3 id="请求："><a href="#请求：" class="headerlink" title="请求："></a>请求：</h3><p><strong>XMLHttpRequest</strong> 对象的 <strong>open()</strong> 和 <strong>send()</strong> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置请求</span></span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open(<em>method</em>,<em>url</em>,<em>async</em>,<em>userName</em>,<em>password</em>)<br />参数可选</td>
<td align="left">规定请求的类型、URL 以及是否异步处理请求。<em>method</em>：请求的类型；<br />GET 或 POST<em>url</em>：（api）<br /><em>async</em>：true（异步）或 false（同步）<br /><em>username</em>：指定用户名<br /><em>password</em>：指定密码</td>
</tr>
<tr>
<td align="left">send(<em>string</em>)</td>
<td align="left">将请求发送到服务器。<em>string</em>：仅用于 POST 请求</td>
</tr>
<tr>
<td align="left">abort()</td>
<td align="left">取消当前请求。</td>
</tr>
<tr>
<td align="left">getAllResponseHeaders()</td>
<td align="left">以字符串形式返回完整的HTTP标头集。</td>
</tr>
<tr>
<td align="left">getResponseHeader( headerName )</td>
<td align="left">返回指定HTTP标头的值。</td>
</tr>
<tr>
<td align="left">setRequestHeader（ label，value）</td>
<td align="left">将标签&#x2F;值对添加到要发送的HTTP标头。</td>
</tr>
</tbody></table>
<p><strong>GET 请求：</strong></p>
<ul>
<li>使用网页缓存（不会更新服务器上的文件或数据库）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，您可能得到的是缓存的结果。</p>
<ul>
<li>为了避免这种情况，请向 URL 添加一个唯一的 ID：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(),<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 GET 方法发送信息，请向 URL 添加信息：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api?name=zhangsan&amp;password=123456&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p><strong>POST请求：</strong></p>
<p>不使用网页缓存（更新服务器上的文件或数据库）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p>采用 HTML 表单的 POST 数据，使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定发送的数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;name=zhangsan&amp;password=123456&quot;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">setRequestHeader(<em>header,value</em>)</td>
<td align="left">向请求添加 HTTP 头。<br /><em>header</em>：规定头的名称<br /><em>value</em>： 规定头的值</td>
</tr>
</tbody></table>
<p><strong>异步</strong>:</p>
<p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>使用异步的好处：</p>
<ul>
<li>避免应用程序挂起或停止</li>
<li>再等待服务器响应时执行其他脚本</li>
<li>当响应就绪后对响应进行处理</li>
</ul>
<p>使用异步时注意规定响应处于 <em><strong>onreadystatechange</strong></em> 事件中的就绪状态时执行的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<h3 id="响应（属性）："><a href="#响应（属性）：" class="headerlink" title="响应（属性）："></a>响应（属性）：</h3><p><strong>XMLHttpRequest</strong> 对象的 <strong>responseText</strong> 或 <strong>responseXML 属性</strong>。</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">responseText</td>
<td align="left">获得<strong>字符串</strong>形式的响应数据。</td>
</tr>
<tr>
<td align="left">responseXML</td>
<td align="left">获得 <strong>XML</strong> 形式的响应数据。</td>
</tr>
</tbody></table>
<ul>
<li><strong>responseText</strong> 属性：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>responseXML</strong> 属性：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlDoc=xmlhttp.<span class="property">responseXML</span>;</span><br><span class="line">txt=<span class="string">&quot;&quot;</span>;</span><br><span class="line">x=xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;ARTIST&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.<span class="property">length</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeValue</span> + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=txt;</span><br></pre></td></tr></table></figure>

<h3 id="函数（属性）："><a href="#函数（属性）：" class="headerlink" title="函数（属性）："></a>函数（属性）：</h3><p>整个XMLHttpRequest对象的生命周期应该包含如下阶段：</p>
<ol>
<li>创建</li>
<li>初始化请求</li>
<li>发送请求</li>
<li>接收数据</li>
<li>解析数据</li>
<li>完成</li>
</ol>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">onreadystatechange</td>
<td align="left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td align="left">readyState</td>
<td align="left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<br />0: 请求未初始化<br />1: 服务器连接已建立<br />2: 请求已接收<br />3: 请求处理中<br />4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">200: “OK” 404: 未找到页面</td>
</tr>
<tr>
<td align="left">statusText</td>
<td align="left">以字符串形式返回状态（例如，“Not Found”或“OK”）</td>
</tr>
</tbody></table>
<ul>
<li><strong>onreadystatechange</strong> 事件：</li>
</ul>
<p>使用异步时注意规定响应处于 <em><strong>onreadystatechange</strong></em> 事件中的就绪状态时执行的函数：</p>
<p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 <em><strong>readyState</strong></em> 改变时，就会触发 <em><strong>onreadystatechange</strong></em> 事件。</p>
<p>示例：readyState&#x3D;&#x3D;4 &amp;&amp; status&#x3D;&#x3D;200 时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>回调函数</strong>：</li>
</ul>
<p>回调函数是一种以参数形式传递给另一个函数的<strong>函数</strong>。</p>
<p>使用 <em><strong>Ajax</strong></em> 时的标准：必须写 <em><strong>onreadystatechange</strong></em> 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_">loadXMLDoc</span>(<span class="string">&quot;api&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>readyState状态</strong>：</li>
</ul>
<p>0：请求未初始化，还没有调用 <a href="https://www.w3cschool.cn/ajax/ajax-xmlhttprequest-send.html"><code>open()</code></a>。</p>
<p>1：请求已经建立，但是还没有发送，还没有调用 <a href="https://www.w3cschool.cn/ajax/ajax-xmlhttprequest-send.html"><code>send()</code></a>。 </p>
<p>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。 </p>
<p>3：请求在处理中；通常响应中已有部分数据可用了，没有全部完成。 </p>
<p>4：响应已完成；您可以获取并使用服务器的响应了。</p>
<h2 id="四、Fetch"><a href="#四、Fetch" class="headerlink" title="四、Fetch"></a>四、Fetch</h2><p>Fetch API 基于 <strong>Promise（ES6）</strong> 设计，使得异步操作更加简洁和易于理解。</p>
<h3 id="Promise-状态："><a href="#Promise-状态：" class="headerlink" title="Promise 状态："></a>Promise 状态：</h3><p><strong>特点：</strong></p>
<p>Promise 异步操作有三种状态：<em><strong>pending（进行中）</strong></em>、***fulfilled（已成功）***和 <em><strong>rejected（已失败）</strong></em>。除了异步操作的结果，任何其他操作都无法改变这个状态。</p>
<p>Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p>
<p><strong>缺点：</strong></p>
<p>无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。</p>
<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>
<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<ul>
<li><p><strong>then() 方法：</strong></p>
<p>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<ul>
<li>**catch() 方法：**用于指定发生错误时的回调函数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>**finally() 方法：**用于指定不管<code>Promise</code>对象最后状态如何，都会执行的操作。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Fetch："><a href="#Fetch：" class="headerlink" title="Fetch："></a>Fetch：</h3><p>Fetch API 是一种现代的、功能强大的网络请求工具，它允许你通过 JavaScript 异步地请求资源，而不需要使用传统的 XMLHttpRequest 对象。</p>
<p>Fetch API 可以简洁地发起 HTTP 请求，并处理服务器的响应。</p>
<p><strong>Fetch 优点：</strong></p>
<ul>
<li>基于 <strong>Promises</strong>，代码更加简洁和易读。</li>
<li>更好的错误处理机制：只在网络错误（如无法连接服务器）时返回 <code>catch</code>，而非状态码错误。</li>
<li>支持多种数据格式（JSON、文本、二进制等）。</li>
<li>可以处理跨域请求，通过 <code>CORS</code> 机制配置。</li>
</ul>
<p><strong>Fetch 基本用法</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 解析 JSON 数据</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))   <span class="comment">// 处理数据</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error)); <span class="comment">// 错误处理</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left"><strong>属性</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>url</strong></td>
<td align="left">要发送请求的目标 URL。</td>
</tr>
<tr>
<td align="left"><strong>options</strong>（可选）</td>
<td align="left">可以指定请求方法（GET、POST 等）、请求头、请求体等内容。</td>
</tr>
</tbody></table>
<p><strong>返回值</strong>：</p>
<p>返回一个 Promise 对象，Promise 在请求成功时返回 Response 对象，在请求失败时被拒绝。</p>
<p><strong>Fetch 详细用法：</strong></p>
<ul>
<li><strong>GET 请求：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>fetch 默认执行 GET 请求，返回的 response 是一个 Response 对象，通过调用 .json() 方法来解析 JSON 数据。</p>
<ul>
<li><strong>POST 请求：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 指定请求方法</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>通过设置 method 为 ‘POST’ 来发送 POST 请求，并在请求体 body 中发送 JSON 格式的数据。</p>
<ul>
<li><strong>处理响应状态：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok &#x27;</span> + response.<span class="property">statusText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>在处理响应时，首先检查响应状态是否成功（response.ok），如果不成功则抛出错误。</p>
<ul>
<li><strong>发送带凭据的请求：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span> <span class="comment">// 包括 cookies 在请求中</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 credentials: ‘include’ 可以在跨域请求中发送 cookies。</p>
<ul>
<li><strong>使用 Request 和 Response 对象：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"><span class="title function_">fetch</span>(request)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">blob</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">imageBlob</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> imageObjectUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(imageBlob);</span><br><span class="line">        img.<span class="property">src</span> = imageObjectUrl;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>创建 Request 对象来定制请求，fetch 会返回一个 Response 对象，可以用它来获取不同类型的响应体，如 blob、text、json 等。</p>
<ul>
<li><strong>错误处理：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>在链式调用中，任何地方抛出的错误都会被 .catch() 捕获。</p>
<ul>
<li><strong>设置请求头：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer your-token&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>可以通过 headers 属性为请求添加自定义的 HTTP 头信息，例如 Content-Type、Authorization 等。</p>
<ul>
<li><strong>处理非 200 的响应状态：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/api&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123; <span class="comment">// 检查响应状态</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok &#x27;</span> + response.<span class="property">statusText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Fetch error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>fetch 不会自动将 HTTP 错误状态（如 404 或 500）作为拒绝的 Promise，仍然需要检查响应状态。</p>
<ul>
<li><strong>发送表单数据：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/api/form&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: formData</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>使用 FormData 对象将表单数据发送给服务器。</p>
<ul>
<li><strong>跨域请求：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span> <span class="comment">// 允许跨域请求时携带 cookie</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure>

<p>如果需要进行跨域请求，可以在服务器端设置 CORS（Cross-Origin Resource Sharing）。在前端，也可以通过 <em><strong>credentials</strong></em> 选项来指定是否发送 cookies 等凭据。</p>
<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a><a href="https://www.axios-http.cn/">Axios</a></h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js。它能够与任何环境下的 JavaScript 应用程序一起工作，并且可以轻松地集成到各种项目中。Axios 提供了强大的功能，包括拦截请求和响应、取消请求、自动转换请求和响应数据、客户端支持防御 XSRF 攻击等。</p>
<h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><ul>
<li><strong>从浏览器创建 XMLHttpRequests</strong></li>
<li><strong>从 node.js 创建 http 请求</strong></li>
<li><strong>支持 Promise API</strong><ul>
<li><font color="red">可以使用 <code>.then()</code> 和 <code>.catch()</code> 方法来处理成功的响应和错误的响应。</font></li>
</ul>
</li>
<li><strong>拦截请求和响应</strong><ul>
<li>Axios 允许你在请求或响应被处理之前拦截它们。这在需要对请求或响应数据进行修改或者添加额外的逻辑时非常有用。</li>
</ul>
</li>
<li><strong>转换请求和响应数据</strong><ul>
<li>Axios 允许你使用自定义的数据转换器来处理请求和响应数据。这使得你可以轻松地将 JSON 数据转换为字符串，或将请求体转换为特定格式。</li>
</ul>
</li>
<li><strong>取消请求</strong><ul>
<li>Axios 允许你通过创建一个取消令牌（cancel token）来取消请求。取消令牌可以通过调用其 <code>cancel()</code> 方法来触发一个取消操作，该方法会向所有注册了取消事件监听器的请求发送一个取消信号。</li>
</ul>
</li>
<li><strong>超时处理</strong></li>
<li><strong>查询参数序列化支持嵌套项处理</strong></li>
<li><strong>自动将请求体序列化为</strong>：<ul>
<li>JSON (<code>application/json</code>)</li>
<li>Multipart &#x2F; FormData (<code>multipart/form-data</code>)</li>
<li>URL encoded form (<code>application/x-www-form-urlencoded</code>)</li>
</ul>
</li>
<li><strong>将 HTML Form 转换成 JSON 进行请求</strong></li>
<li><strong>自动转换JSON数据</strong><ul>
<li>Axios 会自动转换 JSON 数据。当发送数据时，Axios 会检查请求头中的 <code>Content-Type</code>，如果它是 <code>application/json</code>，Axios 会自动将数据序列化为 JSON 字符串。当接收到响应时，Axios 会自动解析 JSON 数据。</li>
</ul>
</li>
<li><strong>获取浏览器和 node.js 的请求进度，并提供额外的信息（速度、剩余时间）</strong></li>
<li><strong>为 node.js 设置带宽限制</strong></li>
<li><strong>兼容符合规范的 FormData 和 Blob（包括 node.js）</strong></li>
<li><strong>客户端支持防御 XSRF 攻击</strong><ul>
<li>XSRF（跨站请求伪造）是一种常见的攻击方式，它可以利用用户的认证状态执行非用户授权的操作。Axios 提供了一种机制来防止这种攻击，通过在请求头中添加 XSRF-TOKEN 来实现。配置 <strong><code>withCredentials</code></strong> 和 <code>xsrfCookieName</code></li>
</ul>
</li>
</ul>
<h2 id="三、安装："><a href="#三、安装：" class="headerlink" title="三、安装："></a>三、安装：</h2><ul>
<li>使用 npm:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 yarn:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add axios</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 jsDelivr CDN:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 unpkg CDN:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>项目模块化引入</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 模块化</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; </span><br><span class="line"><span class="comment">// CommonJS</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="四、请求"><a href="#四、请求" class="headerlink" title="四、请求"></a>四、请求</h2><h3 id="GET请求："><a href="#GET请求：" class="headerlink" title="GET请求："></a>GET请求：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向给定ID的用户发起请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理成功情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述请求也可以按以下方式完成（可选）</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 总是会执行</span></span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持async/await用法</span></span><br><span class="line"><span class="comment">//由于async/await 是ECMAScript 2017中的一部分，而且在IE和一些旧的浏览器中不支持，所以使用时务必要小心。</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POST-请求："><a href="#POST-请求：" class="headerlink" title="POST 请求："></a>POST 请求：</h3><p>发起一个 <code>POST</code> 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123; <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>, <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>));</span><br></pre></td></tr></table></figure>

<p>发起多个并发请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [acct, perm] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">[acct, perm]</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>将 HTML Form 转换成 JSON 进行请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#my-form&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Form 表格</p>
<ul>
<li>Multipart (<code>multipart/form-data</code>)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span>,</span><br><span class="line">    <span class="attr">orders</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">photo</span>: <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#fileInput&#x27;</span>).<span class="property">files</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>URL encoded form (<code>application/x-www-form-urlencoded</code>)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span>,</span><br><span class="line">    <span class="attr">orders</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="五、Axios-API"><a href="#五、Axios-API" class="headerlink" title="五、Axios API"></a>五、Axios API</h2><p>可以向 <code>axios</code> 传递相关配置来创建请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发起一个post请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发起一个 GET 请求 (默认请求方式)  axios(url[, config])</span></span><br><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>请求方法别名</strong></p>
<p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p>
<ul>
<li><strong>axios.request(config)</strong></li>
<li><strong>axios.get(url[, config])</strong></li>
<li><strong>axios.delete(url[, config])</strong></li>
<li><strong>axios.head(url[, config])</strong></li>
<li><strong>axios.options(url[, config])</strong></li>
<li><strong>axios.post(url[, data[, config]])</strong></li>
<li><strong>axios.put(url[, data[, config]])</strong></li>
<li><strong>axios.patch(url[, data[, config]])</strong></li>
<li><strong>axios.postForm(url[, data[, config]])</strong></li>
<li><strong>axios.putForm(url[, data[, config]])</strong></li>
<li><strong>axios.patchForm(url[, data[, config]])</strong></li>
</ul>
<p><strong>并发</strong></p>
<ul>
<li><strong>axios.all(iterable)</strong></li>
<li><strong>axios.spread(callback)</strong></li>
</ul>
<h2 id="六、全局配置与实例化"><a href="#六、全局配置与实例化" class="headerlink" title="六、全局配置与实例化"></a>六、全局配置与实例化</h2><ol>
<li><p>‌<strong>全局默认配置</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;  <span class="comment">// 基础 URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span>;                      <span class="comment">// 超时时间</span></span><br><span class="line"><span class="comment">// 设置全局认证令牌</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line"><span class="comment">//强制指定 POST 请求的内容类型</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;	</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>创建独立实例</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;value&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>自定义实例默认值</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建实例时配置默认值</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例后修改默认值</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br></pre></td></tr></table></figure>

<p><strong>配置的优先级</strong>：</p>
<p>配置将会按优先级进行合并。它的顺序是：在<code>lib/defaults.js</code>中找到的库默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后面的优先级要高于前面的。下面有一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用库提供的默认配置创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，所有使用此实例的请求都将等待2.5秒，然后才会超时</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写此请求的超时时间，因为该请求需要很长时间</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>实例方法</strong></p>
<p>以下是可用的实例方法。指定的配置将与实例的配置合并。</p>
<ul>
<li><strong>axios#request(config)</strong></li>
<li><strong>axios#get(url[, config])</strong></li>
<li><strong>axios#delete(url[, config])</strong></li>
<li><strong>axios#head(url[, config])</strong></li>
<li><strong>axios#options(url[, config])</strong></li>
<li><strong>axios#post(url[, data[, config]])</strong></li>
<li><strong>axios#put(url[, data[, config]])</strong></li>
<li><strong>axios#patch(url[, data[, config]])</strong></li>
<li><strong>axios#getUri([config])</strong></li>
</ul>
</li>
<li><p><strong>请求配置</strong></p>
<p>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>GET</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// auth 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 Authorization 头，覆写掉现有的任意使用 headers 设置的自定义 Authorization 头</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// httpAgent 和 httpsAgent 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。</span></span><br><span class="line">  <span class="comment">// 允许像这样配置选项。keepAlive 默认没有启用</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  cancelToken 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">//see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `decompress` 决定是否自动解压缩响应体  </span></span><br><span class="line">  <span class="comment">// 若设为 `true`，将自动移除所有已解压响应对象的 &#x27;content-encoding&#x27; 头 </span></span><br><span class="line">  <span class="comment">// 仅限 Node.js 环境（XHR 无法关闭解压缩功能）</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="七、响应结构"><a href="#七、响应结构" class="headerlink" title="七、响应结构"></a>七、响应结构</h2><p>一个请求的响应包含以下信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用 <code>then</code> 时，您将接收如下响应:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>当使用 <code>catch</code>，或者传递一个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">rejection callback</a>作为 <code>then</code> 的第二个参数时，响应可以通过 <code>error</code> 对象被使用，正如在<a href="https://www.axios-http.cn/docs/handling_errors">错误处理</a>部分解释的那样。</p>
<h2 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。</p>
<ul>
<li><strong>请求拦截器</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>如：用于添加全局请求头（如 Token）或日志记录：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//箭头函数写法</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>响应拦截器</strong>‌</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>统一处理错误状态码或数据转换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//箭头函数写法</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> response.<span class="property">data</span>,  <span class="comment">// 直接返回有效数据</span></span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) <span class="title function_">alert</span>(<span class="string">&#x27;登录过期&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>如果你稍后需要移除拦截器，可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br></pre></td></tr></table></figure>

<p>可以给自定义的 axios <strong>实例</strong>添加拦截器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="九、错误处理"><a href="#九、错误处理" class="headerlink" title="九、错误处理"></a>九、错误处理</h2><p>Axios 自动将非 2xx 状态码视为错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/invalid-url&#x27;</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器返回错误状态码&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求未收到响应&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>模板：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">      <span class="comment">// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">status</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">headers</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">      <span class="comment">// 请求已经成功发起，但没有收到响应</span></span><br><span class="line">      <span class="comment">// `error.request` 在浏览器中是 XMLHttpRequest 的实例，</span></span><br><span class="line">      <span class="comment">// 而在node.js中是 http.ClientRequest 的实例</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">request</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 发送请求时出了点问题</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">config</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>使用 <code>validateStatus</code> 配置选项，可以自定义抛出错误的 HTTP code。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// 处理状态码小于500的情况</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用 <code>toJSON</code> 可以获取更多关于HTTP错误的信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="title function_">toJSON</span>());</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="十、并发请求和取消请求"><a href="#十、并发请求和取消请求" class="headerlink" title="十、并发请求和取消请求"></a>十、并发请求和取消请求</h2><ul>
<li><p>‌<strong>并发请求</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>),</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;/posts?userId=12345&#x27;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(results));</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>取消请求</strong></p>
<p>‌从 <code>v0.22.0</code> 开始，Axios 支持以 fetch API 方式——<code>AbortController</code>取消请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">controller.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>还可以使用 <code>CancelToken.source</code> 工厂方法创建一个 cancel token ，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">thrown</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(thrown)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.<span class="property">message</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以通过传递一个 executor 函数到 <code>CancelToken</code> 的构造函数来创建一个 cancel token：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="title function_">cancel</span>();</span><br></pre></td></tr></table></figure>

<p>注意: 可以使用同一个 cancel token 或 signal 取消多个请求。</p>
</li>
</ul>
<p>在过渡期间，您可以使用这两种取消 API，即使是针对同一个请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">thrown</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(thrown)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.<span class="property">message</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求 (message 参数是可选的)</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">controller.<span class="title function_">abort</span>(); <span class="comment">// 不支持 message 参数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="十一、请求体编码"><a href="#十一、请求体编码" class="headerlink" title="十一、请求体编码"></a>十一、请求体编码</h2><p>默认情况下，axios将 JavaScript 对象序列化为 <code>JSON</code> 。 要以**<code>application/x-www-form-urlencoded</code>**格式发送数据，您可以使用以下选项之一。</p>
<ul>
<li><p><strong>浏览器</strong></p>
<p>在浏览器中，可以使用<code>URLSearchParams</code>API，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;param1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;param2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, params);</span><br></pre></td></tr></table></figure>

<p>您可以使用<code>qs</code> 库编码数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure>

<p> ES6 方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">data</span>: qs.<span class="title function_">stringify</span>(data),</span><br><span class="line">  url,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">axios</span>(options);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Node.js</strong></p>
<p>在 node.js 中， 可以使用 <code>querystring</code>模块，如下所示:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://something.com/&#x27;</span>, querystring.<span class="title function_">stringify</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动序列化</strong></p>
<p>当请求头中的 <code>content-type</code> 是 <code>application/x-www-form-urlencoded</code> 时，Axios 将自动地将普通对象序列化成 urlencoded 的格式。</p>
<p>在浏览器和 <code>node.js</code> 环境中都适用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">arr2</span>: [<span class="number">1</span>, [<span class="number">2</span>], <span class="number">3</span>],</span><br><span class="line">  <span class="attr">users</span>: [</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">&#x27;Peter&#x27;</span>, <span class="attr">surname</span>: <span class="string">&#x27;Griffin&#x27;</span>&#125;, </span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">&#x27;Thomas&#x27;</span>, <span class="attr">surname</span>: <span class="string">&#x27;Anderson&#x27;</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://postman-echo.com/post&#x27;</span>, data,</span><br><span class="line">  &#123;<span class="attr">headers</span>: </span><br><span class="line">   &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>服务器接收到的数据就像是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;arr[]&#x27;</span>: [ <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span> ],</span><br><span class="line">  <span class="string">&#x27;arr2[0]&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;arr2[1][0]&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;arr2[2]&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;arr3[]&#x27;</span>: [ <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span> ],</span><br><span class="line">  <span class="string">&#x27;users[0][name]&#x27;</span>: <span class="string">&#x27;Peter&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;users[0][surname]&#x27;</span>: <span class="string">&#x27;griffin&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;users[1][name]&#x27;</span>: <span class="string">&#x27;Thomas&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;users[1][surname]&#x27;</span>: <span class="string">&#x27;Anderson&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="十二、Multipart-实体请求"><a href="#十二、Multipart-实体请求" class="headerlink" title="十二、Multipart 实体请求"></a>十二、Multipart 实体请求</h2><p>使用 multipart&#x2F;form-data 类型发起 POST 请求</p>
<ol>
<li><p><strong>创建</strong> <code>FormData</code> 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加字段到</strong> FormData</p>
</li>
</ol>
<ul>
<li><p>‌<strong>文本字段</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;JohnDoe&#x27;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>文件字段</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 input[type=&quot;file&quot;] 获取文件</span></span><br><span class="line"><span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或通过 Blob/File 对象添加</span></span><br><span class="line"><span class="keyword">const</span> file = <span class="keyword">new</span> <span class="title class_">File</span>([<span class="string">&#x27;文件内容&#x27;</span>], <span class="string">&#x27;filename.txt&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;document&#x27;</span>, file);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多文件上传</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加多个文件（字段名相同）</span></span><br><span class="line"><span class="keyword">const</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>).<span class="property">files</span>;</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;photos[]&#x27;</span>, file); <span class="comment">// 后端按数组解析</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>监控上传进度</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, formData, &#123;</span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="function">(<span class="params">progressEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> percent = <span class="title class_">Math</span>.<span class="title function_">round</span>(</span><br><span class="line">      (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / progressEvent.<span class="property">total</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`上传进度: <span class="subst">$&#123;percent&#125;</span>%`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><p><strong>发送</strong> Axios 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, formData, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="comment">// 重点：浏览器会自动设置正确的 Content-Type 和 boundary</span></span><br><span class="line">    <span class="comment">// 不要手动设置 &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;，否则可能丢失 boundary</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上传成功:&#x27;</span>, response.<span class="property">data</span>))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传失败:&#x27;</span>, error));</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>完整示例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFiles()&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFiles</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> files = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>).<span class="property">files</span>;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  formData.<span class="title function_">append</span>(<span class="string">&#x27;userId&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Array</span>.<span class="title function_">from</span>(files).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(<span class="string">`file_<span class="subst">$&#123;index&#125;</span>`</span>, file);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/upload&#x27;</span>, formData, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onUploadProgress</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`进度: <span class="subst">$&#123;<span class="built_in">Math</span>.round((e.loaded / e.total) * <span class="number">100</span>)&#125;</span>%`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;上传成功: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response.<span class="property">data</span>));</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传错误:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;上传失败，请检查控制台&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>‌</p>
<ul>
<li>‌<strong>浏览器环境</strong>‌：直接使用 <code>FormData</code> 对象，无需手动设置 <code>Content-Type</code>。</li>
<li>‌<strong>Node.js 环境</strong>‌：依赖 <code>form-data</code> 库，需配置请求头。</li>
<li>‌<strong>核心步骤</strong>‌：构造 FormData → 添加字段 → 发送请求 → 处理响应。</li>
<li>‌<strong>最佳实践</strong>‌：始终验证文件类型&#x2F;大小，使用进度反馈提升用户体验。</li>
</ul>
<h2 id="十三、Vue3-中使用-axios"><a href="#十三、Vue3-中使用-axios" class="headerlink" title="十三、Vue3 中使用 axios"></a>十三、Vue3 中使用 axios</h2><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><ul>
<li><strong>安装</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<ul>
<li>**创建 Axios 实例（推荐）**‌</li>
</ul>
<p>在 <code>src/plugins/axios.js</code> 中创建自定义实例，统一管理配置：（<code>src/utils/request.js</code>中这么写也可以）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,  <span class="comment">// API 基础路径</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,                      <span class="comment">// 超时时间（默认 10 秒）</span></span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span> &#125;  <span class="comment">// 默认请求头</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure>

<ul>
<li>**全局挂载（可选）**‌</li>
</ul>
<p>在 <code>main.js</code> 中将 Axios 挂载为全局属性或通过依赖注入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1: 挂载到应用全局属性</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./plugins/axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span> = axios;  <span class="comment">// 组件内通过 this.$http 调用</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2: 依赖注入（推荐用于 Composition API）</span></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;http&#x27;</span>, axios);  <span class="comment">// 组件内通过 inject(&#x27;http&#x27;) 使用</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>组件内发起请求</strong>‌</li>
</ul>
<p>在 Vue 组件中使用 Axios 发送 HTTP 请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;fetchData&quot; :disabled=&quot;loading&quot;&gt;</span><br><span class="line">      &#123;&#123; loading ? &#x27;加载中...&#x27; : &#x27;获取数据&#x27; &#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;div v-if=&quot;data&quot;&gt;&#123;&#123; data &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;error&quot; class=&quot;error&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;../plugins/axios&#x27;;  // 直接导入实例</span><br><span class="line"></span><br><span class="line">const $axios = inject(&#x27;axios&#x27;);  // 或通过注入获取</span><br><span class="line">const data = ref(null);</span><br><span class="line">const loading = ref(false);	//创建响应式变量</span><br><span class="line">const error = ref(null);</span><br><span class="line">    </span><br><span class="line">// 方式1: 直接调用实例</span><br><span class="line">// GET 请求示例</span><br><span class="line">const fetchData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    loading.value = true;	//修改状态值</span><br><span class="line">    const res = await axios.get(&#x27;/users&#x27;);  // 或使用 $axios</span><br><span class="line">    data.value = res;</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    error.value = err.message;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// POST 请求示例</span><br><span class="line">const submitData = async () =&gt; &#123;</span><br><span class="line">  await axios.post(&#x27;/submit&#x27;, &#123; name: &#x27;John&#x27; &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 方式2: 使用注入的实例</span><br><span class="line">const $http = inject(&#x27;http&#x27;);</span><br><span class="line">const postData = async () =&gt; &#123;</span><br><span class="line">  await $http.post(&#x27;/submit&#x27;, &#123; data: &#x27;example&#x27; &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>拦截器配置</strong></li>
</ul>
<p>在 <code>src/plugins/axios.js</code> 中通过拦截器实现全局请求&#x2F;响应处理（如添加 Token、统一错误处理）：（<code>src/utils/request.js</code>中这么写也可以）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/api&#x27;</span>,<span class="comment">//后端api</span></span><br><span class="line">    <span class="comment">//import.meta.env.VITE_API_URL, 通过环境变量配置 API 地址</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (token) config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;  <span class="comment">// 自动附加 Token</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span>;  <span class="comment">// 直接返回处理后的数据</span></span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;登录过期，请重新登录&#x27;</span>);</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>跨域配置</strong></p>
<ul>
<li><p><code>vite.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;  <span class="comment">// 代理前缀</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,  <span class="comment">// 后端地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment">// 路径重写</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>vue.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9090</span> <span class="comment">//前端端口</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;  <span class="comment">// 代理标识（根据实际接口路径调整）</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,  <span class="comment">// 实际后端地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">// 允许跨域</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>  <span class="comment">// 重写路径（移除代理标识）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 更多高级配置</span></span><br><span class="line">        <span class="comment">// secure: false,  // 关闭 HTTPS 验证（如需代理到 HTTPS 但证书有问题时使用）</span></span><br><span class="line">        <span class="comment">// logLevel: &#x27;debug&#x27; // 查看代理日志</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="搭配："><a href="#搭配：" class="headerlink" title="搭配："></a>搭配：</h3><p>第一种：采用独立封装 axios 方式</p>
<ul>
<li>在 <code>src/plugins/axios.js</code> 或者<code>src/utils/request.js</code>中创建自定义实例，统一管理配置。（可配置拦截器）</li>
<li>然后在 <code>main.js</code> 中将该自定义实例全局挂载。</li>
<li>在 View 中调用即可。</li>
</ul>
<p>第二种：通过 <code>vue.config.js</code> 中调用</p>
<p>看那个vue3开发标准模板即可。</p>
<h3 id="最佳实践与注意事项"><a href="#最佳实践与注意事项" class="headerlink" title="最佳实践与注意事项"></a><strong>最佳实践与注意事项</strong></h3><ul>
<li><p>‌<strong>取消请求</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>, &#123; <span class="attr">signal</span>: controller.<span class="property">signal</span> &#125;);</span><br><span class="line">controller.<span class="title function_">abort</span>();  <span class="comment">// 取消未完成的请求</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>文件上传</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, formData, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;  <span class="comment">// 显式设置上传格式</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>TypeScript 支持</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义响应数据类型</span></span><br><span class="line">interface <span class="title class_">UserData</span> &#123; <span class="attr">id</span>: number; <span class="attr">name</span>: string &#125;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="property">get</span>&lt;<span class="title class_">UserData</span>&gt;(<span class="string">&#x27;/user/1&#x27;</span>);  <span class="comment">// 类型推断</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="loading-value-true"><a href="#loading-value-true" class="headerlink" title="loading.value &#x3D; true;"></a>loading.value &#x3D; true;</h3><p>在 Vue3 的 Composition API 中，这段代码用于 ‌<strong>管理异步操作的加载状态</strong>‌。具体作用如下：</p>
<p>‌<strong>代码解析</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>);  <span class="comment">// 1️⃣ 创建响应式变量</span></span><br><span class="line">loading.<span class="property">value</span> = <span class="literal">true</span>;        <span class="comment">// 2️⃣ 修改状态值</span></span><br></pre></td></tr></table></figure>

<p>‌<strong>核心用途</strong>‌</p>
<ol>
<li><p>‌<strong>跟踪异步操作状态</strong>‌</p>
<ul>
<li>用 <code>loading.value</code> 作为标记，表示当前是否有进行中的异步操作（如网络请求）</li>
<li>初始值 <code>false</code> 表示默认没有加载行为</li>
<li>设置为 <code>true</code> 表示开始加载</li>
</ul>
</li>
<li><p>‌<strong>UI 交互优化</strong>‌<br>在模板中通过 <code>loading</code> 值控制界面元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;fetchData&quot; :disabled=&quot;loading&quot;&gt;</span><br><span class="line">    &#123;&#123; loading ? &#x27;加载中...&#x27; : &#x27;获取数据&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>按钮会在加载期间自动禁用（避免重复提交）</li>
<li>显示动态加载文案</li>
</ul>
</li>
<li><p><strong>逻辑流程控制</strong>‌<br>在异步操作中配合 <code>try/catch/finally</code> 使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span>;    <span class="comment">// ✅ 开始加载</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">    <span class="comment">// 处理数据...</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 处理错误...</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">false</span>; <span class="comment">// ✅ 无论成功/失败都结束加载</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>‌**为什么需要 <code>.value</code>？**‌</p>
<ul>
<li><p><code>ref()</code> 创建的响应式变量需要通过 <code>.value</code> 访问底层值</p>
</li>
<li><p>这是 Vue3 响应式系统的特殊设计，用于区分原始值和响应式引用</p>
</li>
<li><p>‌模板中自动解包，无需写<code>.value</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;loading&quot;&gt;Loading...&lt;/div&gt; &lt;!-- 直接使用 loading 而非 loading.value --&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>完整示例场景</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;../plugins/axios&#x27;;</span><br><span class="line"></span><br><span class="line">const data = ref(null);</span><br><span class="line">const loading = ref(false);</span><br><span class="line">const error = ref(null);</span><br><span class="line"></span><br><span class="line">const fetchData = async () =&gt; &#123;</span><br><span class="line">  loading.value = true;      // ▶ 开始加载</span><br><span class="line">  error.value = null;        // 重置错误状态</span><br><span class="line">  try &#123;</span><br><span class="line">    const res = await axios.get(&#x27;/api/data&#x27;);</span><br><span class="line">    data.value = res.data;</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    error.value = err.message;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false;   // ◀ 结束加载（无论成功/失败）</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;fetchData&quot; :disabled=&quot;loading&quot;&gt;</span><br><span class="line">      &#123;&#123; loading ? &#x27;拼命加载中...&#x27; : &#x27;点击获取数据&#x27; &#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div v-if=&quot;loading&quot; class=&quot;loading-spinner&quot;&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div v-if=&quot;data&quot;&gt;</span><br><span class="line">      &#123;&#123; data &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div v-if=&quot;error&quot; class=&quot;error-message&quot;&gt;</span><br><span class="line">      &#123;&#123; error &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Ajax、Axios、Fetch对比"><a href="#Ajax、Axios、Fetch对比" class="headerlink" title="Ajax、Axios、Fetch对比"></a>Ajax、Axios、Fetch对比</h1><table>
<thead>
<tr>
<th><strong>对比维度</strong>‌</th>
<th>‌<strong>Ajax</strong>‌</th>
<th>‌<strong>Axios</strong>‌</th>
<th>‌<strong>Fetch</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>技术基础</strong>‌</td>
<td>基于原生 <code>XMLHttpRequest</code> (XHR) 对象实现异步通信</td>
<td>对 XHR 的封装，基于 Promise 管理异步流程</td>
<td>原生 ES6 API，基于 Promise 设计，不依赖 XHR</td>
</tr>
<tr>
<td>‌<strong>核心功能</strong>‌</td>
<td>需手动封装请求逻辑（如 jQuery 的 <code>$.ajax</code>）</td>
<td>内置拦截器、自动转换 JSON、防御 XSRF 、‌跨环境兼容‌等高级功能</td>
<td>原生支持 Promise，需手动处理响应状态和错误，默认不携带 Cookie</td>
</tr>
<tr>
<td>‌<strong>语法与开发体验</strong>‌</td>
<td>需回调函数处理异步，代码冗余度高（原生 XHR）或依赖 jQuery 语法</td>
<td>支持链式调用（<code>.then()</code>&#x2F;<code>.catch()</code>），代码简洁易维护</td>
<td>语法简洁，但需手动处理响应解析（如两次 <code>.then()</code> 获取 JSON 数据）</td>
</tr>
<tr>
<td>‌<strong>请求&#x2F;响应拦截</strong>‌</td>
<td>不支持</td>
<td>支持全局或局部拦截器，统一处理请求头、错误等逻辑</td>
<td>不支持</td>
</tr>
<tr>
<td>‌<strong>数据格式处理</strong>‌</td>
<td>需手动设置请求头并解析响应数据（如 JSON）</td>
<td>自动将请求&#x2F;响应数据转换为 JSON，减少手动解析步骤，通过 <code>response.data</code> 直接获取</td>
<td>需手动调用 <code>.json()</code>、<code>.text()</code> 等方法解析响应体<code>Response</code> 对象</td>
</tr>
<tr>
<td>‌<strong>兼容性</strong>‌</td>
<td>兼容所有主流浏览器（包括旧版本）</td>
<td>浏览器端基于 XHR，Node.js 端基于 <code>http</code> 模块，跨环境兼容性优</td>
<td>现代浏览器原生支持，旧版本需引入 <code>polyfill</code></td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>传统项目、需兼容旧浏览器或依赖 jQuery 的代码库</td>
<td>现代前端框架（Vue、React 等）、需统一错误处理或复杂请求逻辑的项目</td>
<td>现代浏览器环境、轻量级请求场景，或追求原生 API 的项目</td>
</tr>
<tr>
<td><strong>错误处理</strong></td>
<td></td>
<td>将非 2xx 状态码（如 404、500）视为错误，触发 <code>.catch()</code> 统一处理</td>
<td>仅在网络故障时触发错误，HTTP 错误状态码需通过检查 <code>response.ok</code> 属性手动处理。</td>
</tr>
</tbody></table>
<p>‌<strong>技术演进</strong>‌：<br><code>XHR（Ajax） → jQuery.ajax → Axios/Fetch</code>，Axios 和 Fetch 均以 Promise 优化异步流程，但 Axios 功能更完善</p>
<h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌**<code>async</code>**‌</th>
<th>‌**<code>await</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>本质</strong>‌</td>
<td>声明函数为异步函数，强制该函数返回一个 ‌**<code>Promise</code> 对象**‌</td>
<td>用于等待一个 ‌**<code>Promise</code> 对象**‌ 的结果，只能在 <code>async</code> 函数内部使用</td>
</tr>
<tr>
<td>‌<strong>语法作用</strong>‌</td>
<td>修饰函数（如 <code>async function fn()&#123;&#125;</code>）</td>
<td>修饰表达式（如 <code>await promise</code>），暂停异步函数执行，直到 Promise 完成</td>
</tr>
<tr>
<td>‌<strong>返回值</strong>‌</td>
<td>函数返回值自动包装为 <code>Promise</code>（若返回非 Promise，会被 <code>Promise.resolve()</code> 包裹）</td>
<td>返回 Promise 的 ‌<strong>解决值</strong>‌（若 Promise 被拒绝，抛出异常）</td>
</tr>
<tr>
<td>‌<strong>错误处理</strong>‌</td>
<td>需通过 <code>try/catch</code> 捕获内部 <code>await</code> 的异常或使用 <code>.catch()</code></td>
<td>直接抛出错误，需由外层 <code>try/catch</code> 或 Promise 链捕获</td>
</tr>
</tbody></table>
<h2 id="‌核心关系‌"><a href="#‌核心关系‌" class="headerlink" title="‌核心关系‌"></a>‌<strong>核心关系</strong>‌</h2><ol>
<li><p>‌<strong>依赖关系</strong>‌</p>
<ul>
<li><p>‌**<code>await</code> 必须在 <code>async</code> 函数内使用**‌，而 <code>async</code> 函数可以包含或不包含 <code>await</code>。</p>
</li>
<li><p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌<strong>协作机制</strong>‌</p>
<ul>
<li><p>‌**<code>async</code> 函数通过 <code>await</code> 实现同步化异步操作**‌，将 Promise 链式调用转为更直观的线性代码。</p>
</li>
<li><p>对比示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise 链式调用</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await 写法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="‌关键特性对比‌"><a href="#‌关键特性对比‌" class="headerlink" title="‌关键特性对比‌"></a>‌<strong>关键特性对比</strong>‌</h2><table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌**<code>async</code>**‌</th>
<th>‌**<code>await</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>执行控制权</strong>‌</td>
<td>函数整体异步执行，不阻塞外部代码</td>
<td>暂停当前 <code>async</code> 函数的执行，等待 Promise 完成</td>
</tr>
<tr>
<td>‌<strong>错误传播</strong>‌</td>
<td>函数内未捕获的异常会导致返回的 Promise 拒绝</td>
<td>直接抛出异常，中断后续代码执行</td>
</tr>
<tr>
<td>‌<strong>兼容性</strong>‌</td>
<td>ES2017+，现代浏览器和 Node.js 支持</td>
<td>同上</td>
</tr>
</tbody></table>
<h2 id="‌使用场景‌"><a href="#‌使用场景‌" class="headerlink" title="‌使用场景‌"></a>‌<strong>使用场景</strong>‌</h2><ol>
<li><p>‌**适合 <code>async/await</code>**‌</p>
<ul>
<li><p>需要 ‌<strong>顺序执行</strong>‌ 多个异步操作（如依次请求 A → B → C）。</p>
</li>
<li><p>需要 ‌<strong>简化嵌套 Promise 链</strong>‌，提升代码可读性。</p>
</li>
<li><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processTasks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">getUser</span>();</span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="title function_">getPosts</span>(user.<span class="property">id</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(posts);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;处理失败:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌<strong>适合传统 Promise</strong>‌</p>
<ul>
<li><p>需要 ‌<strong>并行执行多个异步操作</strong>‌（如 <code>Promise.all</code>）。</p>
</li>
<li><p>需要更灵活地组合异步任务（如竞速、超时控制）。</p>
</li>
<li><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getDataA</span>(), <span class="title function_">getDataB</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">[dataA, dataB]</span>) =&gt;</span> <span class="title function_">mergeData</span>(dataA, dataB));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="总结‌"><a href="#总结‌" class="headerlink" title="总结‌"></a><strong>总结</strong>‌</h2><ul>
<li>‌**<code>async</code><strong>‌ 是异步函数的标识符，‌</strong><code>await</code><strong>‌ 是异步操作的等待器，二者共同实现 ‌</strong>以同步代码风格编写异步逻辑**‌。</li>
<li>‌**<code>async/await</code> 是 Promise 的语法糖**‌，底层仍依赖 Promise，但代码更简洁、易调试。</li>
<li>错误处理需结合 <code>try/catch</code> 或 <code>.catch()</code>，避免未捕获的 Promise 拒绝。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/blog2025.github.io/2025/05/28/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker</a></h1><p><a href="https://cloud.tencent.com/developer/article/2371321">虚拟机和容器的区别</a></p>
<p><strong>虚拟机</strong>：通过软件模拟一个具有<strong>完整硬件系统功能</strong>、<strong>运行在一个完全隔离环境</strong>中的<strong>完整</strong>计算机系统。</p>
<p><img src="/blog2025.github.io/2025/05/28/Docker/image-20250509100955448.png" alt="image-20250509100955448"></p>
<ul>
<li><strong>缺点</strong>：资源占用多、冗余步骤多、启动慢。</li>
</ul>
<p><strong>容器</strong>：<strong>不是</strong>像虚拟机那样虚拟化<strong>底层计算机（硬件）</strong>，只是虚拟化操作系统。每个容器<strong>共享主机操作系统内核</strong>，但在进程空间上进行隔离。</p>
<p><img src="/blog2025.github.io/2025/05/28/Docker/image-20250509100936040.png" alt="image-20250509100936040"></p>
<ul>
<li>**特点：**资源利用低、更快地启动应用程序，但相较于虚拟机较为安全。</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><em>Docker 是一个开源的应用<strong>容器</strong>引擎，基于</em> <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> <em>并遵从 Apache2.0 协议开源。</em></p>
<p>*Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，*<em>然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</em></p>
<p><em>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</em></p>
<p><strong>Docker 的应用场景：</strong></p>
<ul>
<li>Web 应用的自动化打包和发布。</li>
<li>自动化测试和持续集成、发布。</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>
<li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li>
</ul>
<p><strong>Docker 的优点：</strong></p>
<ul>
<li><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。</p>
</li>
<li><p>Docker 能够将应用程序与基础架构分开，从而可以快速交付软件。</p>
</li>
<li><p>Docker 可以使用与管理应用程序相同的方式来管理基础架构。</p>
</li>
<li><p>Docker 可以实现快速交付，测试和部署代码，大大减少编写代码和在生产环境中运行代码之间的延迟。（也就是说代码可以随时共享）</p>
</li>
<li><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案。</p>
</li>
<li><p>Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p>
</li>
<li><p>Docker 是基于容器的平台，允许高度可移植的工作负载。</p>
</li>
<li><p>Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p>
</li>
</ul>
<p><strong>Docker 架构：</strong></p>
<p>Docker 架构是基于**客户端-服务器 (C&#x2F;S)**模式的，其中包括多个关键组件，确保容器化应用的高效构建、管理和运行。使用远程 <strong>API</strong> 来管理和创建 Docker 容器。</p>
<p>Docker 的架构设计使得开发者能够轻松地将应用程序与其所有依赖<strong>封装在一个可移植的容器</strong>中，并在<strong>不同的环境中</strong>一致地运行。</p>
<p>Docker 容器通过 Docker 镜像来创建。</p>
<p>容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<table>
<thead>
<tr>
<th align="left">Docker</th>
<th align="left">面向对象</th>
</tr>
</thead>
<tbody><tr>
<td align="left">容器</td>
<td align="left">对象</td>
</tr>
<tr>
<td align="left">镜像</td>
<td align="left">类</td>
</tr>
</tbody></table>
<p>对象是类的实例化，也就是说 Docker 容器是镜像的实例化。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2016/07/docker-architecture.webp" alt="img"></p>
<p><strong>Docker 架构的工作流程</strong></p>
<ul>
<li><strong>构建镜像</strong>：使用 <code>Dockerfile</code> 创建镜像。</li>
<li><strong>推送镜像到注册表</strong>：将镜像上传到 Docker Hub 或私有注册表中。</li>
<li><strong>拉取镜像</strong>：通过 <code>docker pull</code> 从注册表中拉取镜像。</li>
<li><strong>运行容器</strong>：使用镜像创建并启动容器。</li>
<li><strong>管理容器</strong>：使用 Docker 客户端命令管理正在运行的容器（例如查看日志、停止容器、查看资源使用情况等）。</li>
<li><strong>网络与存储</strong>：容器之间通过 Docker 网络连接，数据通过 Docker 卷或绑定挂载进行持久化。</li>
</ul>
<hr>
<h3 id="Docker-客户端（Docker-Client）"><a href="#Docker-客户端（Docker-Client）" class="headerlink" title="Docker 客户端（Docker Client）"></a><strong>Docker 客户端（Docker Client）</strong></h3><p>Docker 客户端是<strong>用户与 Docker 守护进程交互的命令行界面（CLI）</strong>。它是用户与 Docker 系统的主要交互方式，用户通过 Docker CLI 发出命令，这些命令被发送到 Docker 守护进程，由守护进程执行相应的操作。</p>
<ul>
<li><strong>功能</strong>：允许用户使用命令与 Docker 守护进程通信，如<strong>创建容器、构建镜像、查看容器状态等。</strong></li>
<li><strong>交互方式</strong>：Docker 客户端与 Docker 守护进程之间通过 REST API 或 Unix 套接字通信。常用的命令行工具是 <code>docker</code>，通过它，用户可以发出各种 Docker 操作命令。</li>
</ul>
<p><strong>常用命令</strong>：</p>
<ul>
<li><code>docker run</code>：运行容器。</li>
<li><code>docker ps</code>：列出正在运行的容器。</li>
<li><code>docker build</code>：构建 Docker 镜像。</li>
<li><code>docker exec</code>：在容器中执行命令。</li>
</ul>
<hr>
<h3 id="Docker-守护进程（Docker-Daemon）"><a href="#Docker-守护进程（Docker-Daemon）" class="headerlink" title="Docker 守护进程（Docker Daemon）"></a><strong>Docker 守护进程（Docker Daemon）</strong></h3><p>Docker 守护进程（通常是 <code>dockerd</code>）是 Docker 架构的核心，负责管理<strong>容器生命周期、构建镜像、分发镜像等任务。</strong></p>
<p><strong>守护进程通常以后台进程的方式</strong>运行，等待来自 Docker 客户端的 API 请求。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>启动和停止容器。</li>
<li>构建、拉取和推送镜像。</li>
<li>管理容器的网络和存储。</li>
<li>启动、停止、查看容器日志等。</li>
<li>与 Docker 注册表进行通信，管理镜像的存储与分发。</li>
</ul>
<p>Docker 守护进程监听来自 Docker 客户端的请求，并且通过 Docker API 执行这些请求。守护进程将负责容器、镜像等 Docker 对象的管理，并根据请求的参数启动容器、删除容器、修改容器配置等。</p>
<p>启动 Docker 守护进程（通常是自动启动的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-引擎-API（Docker-Engine-API）"><a href="#Docker-引擎-API（Docker-Engine-API）" class="headerlink" title="Docker 引擎 API（Docker Engine API）"></a><strong>Docker 引擎 API（Docker Engine API）</strong></h3><p>Docker 引擎 API 是 Docker 提供的 RESTful 接口，允许外部客户端与 Docker 守护进程进行通信。通过这个 API，用户可以执行各种操作，如启动容器、构建镜像、查看容器状态等。API 提供了 HTTP 请求的接口，支持跨平台调用。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>向 Docker 守护进程发送 HTTP 请求，实现容器、镜像的管理。</li>
<li>提供 RESTful 接口，允许通过编程与 Docker 进行交互。</li>
</ul>
<p>可以通过 <code>curl</code> 或其他 HTTP 客户端访问 Docker 引擎 API。例如，查询当前 Docker 守护进程的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --unix-socket /var/run/docker.sock http://localhost/version</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-容器（Docker-Containers）"><a href="#Docker-容器（Docker-Containers）" class="headerlink" title="Docker 容器（Docker Containers）"></a><strong>Docker 容器（Docker Containers）</strong></h3><p>容器是 Docker 的<strong>执行环境</strong>，它是轻量级、独立且可执行的软件包。</p>
<p>容器是从 Docker 镜像启动的，包含了运行某个应用程序所需的一切——从操作系统库到应用程序代码。</p>
<p><font color="red"><strong>容器在运行时与其他容器和宿主机共享操作系统内核</strong>，<strong>但容器之间的文件系统和进程是隔离的。</strong></font></p>
<p><strong>功能</strong>：</p>
<ul>
<li>提供独立的运行环境，确保应用程序在不同的环境中具有一致的行为。</li>
<li>容器是临时的，通常在任务完成后被销毁。</li>
</ul>
<p>容器的生命周期是由 Docker 守护进程管理的。容器可以在任何地方运行，因为它们不依赖于底层操作系统的配置，所有的运行时依赖已经封装在镜像中。</p>
<p>启动一个容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-镜像（Docker-Images）"><a href="#Docker-镜像（Docker-Images）" class="headerlink" title="Docker 镜像（Docker Images）"></a><strong>Docker 镜像（Docker Images）</strong></h3><p>Docker 镜像是容器的<strong>只读模板</strong>。每个镜像都包含了应用程序运行所需的操作系统、运行时、库、环境变量和应用代码等。<strong>镜像是静态的</strong>，用户可以根据镜像启动容器。</p>
<p><strong>功能</strong>：</p>
<ul>
<li><strong>镜像是构建容器的基础</strong>，每个容器实例化时都会使用镜像。</li>
<li><strong>镜像是只读</strong>的，不同容器使用同一个镜像时，容器中的文件系统层是独立的。</li>
</ul>
<p>Docker 镜像可以通过 <code>docker pull</code> 从 Docker Hub 或私有注册表拉取，也可以通过 <code>docker build</code> 从 Dockerfile 构建。</p>
<p>拉取 Ubuntu 镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-仓库（Docker-Registries）"><a href="#Docker-仓库（Docker-Registries）" class="headerlink" title="Docker 仓库（Docker Registries）"></a><strong>Docker 仓库（Docker Registries）</strong></h3><p>Docker 仓库是用来存储 Docker 镜像的地方，最常用的公共仓库是 <strong>Docker Hub</strong>。</p>
<p>用户可以从 Docker Hub 下载镜像，也可以上传自己的镜像分享给其他人。除了公共仓库，用户也可以部署自己的私有 Docker 仓库来管理企业内部的镜像。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>存储 Docker 镜像。</li>
<li>提供镜像的上传和下载功能。</li>
</ul>
<p>Docker Hub 提供了大量官方和社区维护的镜像，如 Ubuntu、Nginx、MySQL 等。</p>
<p>推送镜像到 Docker Hub：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push &lt;username&gt;/&lt;image_name&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><strong>Docker Compose</strong></h3><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用的工具。</p>
<p>通过 Compose，用户可以使用一个 <code>docker-compose.yml</code> 配置文件<strong>定义多个容器</strong>（服务），并可以通过一个命令启动这些容器。</p>
<p>Docker Compose 主要用于开发、测试和部署多容器的应用。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>定义和运行多个容器组成的应用。</li>
<li>通过 YAML 文件来配置应用的服务、网络和卷等。</li>
</ul>
<p>创建一个简单的 <code>docker-compose.yml</code> 文件来配置一个包含 Web 服务和数据库服务的应用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br></pre></td></tr></table></figure>

<p>启动 Compose 定义的所有服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a><strong>Docker Swarm</strong></h3><p>Docker Swarm 是 Docker 提供的<strong>集群管理和调度工具</strong>。</p>
<p>它允许将<strong>多个 Docker 主机（节点）组织成一个集群</strong>，并通过 Swarm 集群管理工具来调度和管理容器。</p>
<p>Swarm 可以实现容器的<strong>负载均衡、高可用性和自动扩展</strong>等功能。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>管理多节点 Docker 集群。</li>
<li>通过调度器管理容器的部署和扩展。</li>
</ul>
<p>初始化 Swarm 集群：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-网络（Docker-Networks）"><a href="#Docker-网络（Docker-Networks）" class="headerlink" title="Docker 网络（Docker Networks）"></a><strong>Docker 网络（Docker Networks）</strong></h3><p>Docker 网络允许容器之间<strong>相互通信</strong>，并与外部世界进行连接。Docker 提供了多种网络模式来满足不同的需求，如 <code>bridge</code> 网络（默认）、<code>host</code> 网络和 <code>overlay</code> 网络等。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>管理容器间的网络通信。</li>
<li>支持不同的网络模式，以适应不同场景下的需求。</li>
</ul>
<p>创建一个自定义网络并将容器连接到该网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create my_network</span><br><span class="line">docker run -d --network my_network ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-卷（Docker-Volumes）"><a href="#Docker-卷（Docker-Volumes）" class="headerlink" title="Docker 卷（Docker Volumes）"></a><strong>Docker 卷（Docker Volumes）</strong></h3><p>Docker 卷是一种数据持久化机制，允许数据在容器之间共享，并且独立于容器的生命周期。与容器文件系统不同，卷的内容不会随着容器的销毁而丢失，适用于数据库等需要持久存储的应用。</p>
<p><strong>功能</strong>：</p>
<ul>
<li>允许容器间共享数据。</li>
<li>保证数据持久化，独立于容器的生命周期。</li>
</ul>
<p>创建并挂载卷：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create my_volume</span><br><span class="line">docker run -d -v my_volume:/data ubuntu</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p><strong><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker</a></strong></p>
<p><strong><a href="https://www.runoob.com/docker/debian-docker-install.html">Debian Docker</a></strong></p>
<p><strong><a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS Docker</a></strong></p>
<p><a href="https://www.runoob.com/docker/windows-docker-install.html"><strong>Windows Docker</strong></a> </p>
<p><a href="https://www.runoob.com/docker/docker-mirror-acceleration.html"><strong>Docker 国内镜像</strong></a></p>
<hr>
<h2 id="Docker-使用"><a href="#Docker-使用" class="headerlink" title="Docker 使用"></a>Docker 使用</h2><h3 id="开始-1"><a href="#开始-1" class="headerlink" title="开始"></a>开始</h3><p><strong><code>docker run</code> 命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@root:~$ docker run ubuntu:15.10 /bin/echo <span class="string">&quot;Hello world&quot;</span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure>

<p>各个参数解析：</p>
<ul>
<li><strong>docker:</strong> Docker 的二进制执行文件。</li>
<li><strong>run:</strong> 与前面的 docker 组合来运行一个容器。</li>
<li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li>
<li><strong>&#x2F;bin&#x2F;echo “Hello world”:</strong> 在启动的容器里执行的命令</li>
</ul>
<hr>
<p><strong>运行交互式的容器</strong></p>
<p>通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**”对话”**的能力：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -i -t ubuntu:15.10 /bin/bash</span><br><span class="line">root@0123ce188bd8:/#</span><br></pre></td></tr></table></figure>

<p>各个参数解析：</p>
<ul>
<li><strong>-t:</strong> 在新容器内指定一个伪终端或终端。</li>
<li><strong>-i:</strong> 允许你对容器内的标准输入 (STDIN) 进行交互。</li>
</ul>
<p>可以通过运行 <code>exit</code> 命令或者使用 <code>CTRL+D</code> 来退出容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/#  <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">root@runoob:~# 		<span class="comment"># 表明我们已经退出了当前的容器，返回到当前的主机中。</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>启动容器（后台模式）</strong></p>
<p>使用以下命令创建一个以进程方式运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -d ubuntu:15.10 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line"><span class="comment"># 输出长字符串即 容器 ID（唯一）</span></span><br><span class="line">2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63</span><br></pre></td></tr></table></figure>

<p>对于**容器 ID（唯一）**可以通过容器 ID 来查看对应的容器发生了什么。</p>
<p>通过 **<code>docker ps</code> **来查看确认容器是否在运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND              ...  </span><br><span class="line">5917eac21c36        ubuntu:15.10           <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>    ...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>介绍</th>
<th>状态</th>
</tr>
</thead>
<tbody><tr>
<td><strong>CONTAINER ID</strong></td>
<td>容器 ID。</td>
<td></td>
</tr>
<tr>
<td><strong>IMAGE</strong></td>
<td>使用的镜像。</td>
<td></td>
</tr>
<tr>
<td><strong>COMMAND</strong></td>
<td>启动容器时运行的命令。</td>
<td></td>
</tr>
<tr>
<td><strong>CREATED</strong></td>
<td>容器的创建时间。</td>
<td></td>
</tr>
<tr>
<td><strong>STATUS</strong></td>
<td>容器状态。</td>
<td>created（已创建）<br />restarting（重启中） <br />running 或 Up（运行中） <br />removing（迁移中） <br />paused（暂停） <br />exited（停止） <br />dead（死亡）</td>
</tr>
<tr>
<td><strong>PORTS</strong></td>
<td>容器的端口信息和使用的连接类型（tcp\udp）。</td>
<td></td>
</tr>
<tr>
<td><strong>NAMES</strong></td>
<td>自动分配的容器名称。</td>
<td></td>
</tr>
</tbody></table>
<p>在宿主主机内使用 <strong><code>docker logs</code></strong> 命令，查看容器内的标准输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker logs 2b1b7a428627</span><br><span class="line"><span class="comment"># 输出 hello world</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker logs amazing_cori</span><br><span class="line"><span class="comment"># 输出 hello world</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>停止容器</strong></p>
<p>使用 <strong><code>docker stop</code></strong> 命令来停止容器:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker stop</span><br></pre></td></tr></table></figure>

<p>使用  **<code>docker ps</code> ** 查看，容器已经停止工作:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps</span><br></pre></td></tr></table></figure>

<p>也可以用下面的命令来停止:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker stop amazing_cori</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h3><p><strong>镜像与容器的关系</strong>（类似于<strong>类与对象</strong>的关系）</p>
<ul>
<li><strong>镜像（Image）</strong>：容器的静态模板，包含了应用程序运行所需的所有依赖和文件。镜像是不可变的。</li>
<li><strong>容器（Container）</strong>：镜像的一个运行实例，具有自己的文件系统、进程、网络等，且是动态的。容器从镜像启动，并在运行时保持可变。</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/0_Uw0RmvCbgHBkZfi1.png" alt="img"></p>
<hr>
<h4 id="Docker-客户端（命令）"><a href="#Docker-客户端（命令）" class="headerlink" title="Docker 客户端（命令）"></a><strong>Docker 客户端</strong>（命令）</h4><p>Docker 客户端是与 Docker 守护进程（Docker Daemon）交互的命令行工具。</p>
<p>直接输入 <strong><code>docker</code></strong> 命令来查看到 Docker 客户端的所有命令选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~# docker</span><br></pre></td></tr></table></figure>

<p><strong><code>docker command --help</code></strong> 更深入的了解指定的 Docker 命令使用方法。</p>
<p>如查看 <code>stats</code> 的具体使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~# docker stats --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p><strong>Docker 客户端命令</strong>：</p>
<table>
<thead>
<tr>
<th align="left"><strong>命令</strong></th>
<th align="left"><strong>功能</strong></th>
<th align="left"><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker run</code></td>
<td align="left">启动一个新的容器并运行命令</td>
<td align="left"><code>docker run -d ubuntu</code></td>
</tr>
<tr>
<td align="left"><code>docker ps</code></td>
<td align="left">列出当前正在运行的容器</td>
<td align="left"><code>docker ps</code></td>
</tr>
<tr>
<td align="left"><code>docker ps -a</code></td>
<td align="left">列出所有容器（包括已停止的容器）</td>
<td align="left"><code>docker ps -a</code></td>
</tr>
<tr>
<td align="left"><code>docker build</code></td>
<td align="left">使用 Dockerfile 构建镜像</td>
<td align="left"><code>docker build -t my-image .</code></td>
</tr>
<tr>
<td align="left"><code>docker images</code></td>
<td align="left">列出本地存储的所有镜像</td>
<td align="left"><code>docker images</code></td>
</tr>
<tr>
<td align="left"><code>docker pull</code></td>
<td align="left">从 Docker 仓库拉取镜像</td>
<td align="left"><code>docker pull ubuntu</code></td>
</tr>
<tr>
<td align="left"><code>docker push</code></td>
<td align="left">将镜像推送到 Docker 仓库</td>
<td align="left"><code>docker push my-image</code></td>
</tr>
<tr>
<td align="left"><code>docker exec</code></td>
<td align="left">在运行的容器中执行命令</td>
<td align="left"><code>docker exec -it container_name bash</code></td>
</tr>
<tr>
<td align="left"><code>docker stop</code></td>
<td align="left">停止一个或多个容器</td>
<td align="left"><code>docker stop container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker start</code></td>
<td align="left">启动已停止的容器</td>
<td align="left"><code>docker start container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker restart</code></td>
<td align="left">重启一个容器</td>
<td align="left"><code>docker restart container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker rm</code></td>
<td align="left">删除一个或多个容器</td>
<td align="left"><code>docker rm container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker rmi</code></td>
<td align="left">删除一个或多个镜像</td>
<td align="left"><code>docker rmi my-image</code></td>
</tr>
<tr>
<td align="left"><code>docker logs</code></td>
<td align="left">查看容器的日志</td>
<td align="left"><code>docker logs container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker inspect</code></td>
<td align="left">获取容器或镜像的详细信息</td>
<td align="left"><code>docker inspect container_name</code></td>
</tr>
<tr>
<td align="left"><code>docker exec -it</code></td>
<td align="left">进入容器的交互式终端</td>
<td align="left"><code>docker exec -it container_name /bin/bash</code></td>
</tr>
<tr>
<td align="left"><code>docker network ls</code></td>
<td align="left">列出所有 Docker 网络</td>
<td align="left"><code>docker network ls</code></td>
</tr>
<tr>
<td align="left"><code>docker volume ls</code></td>
<td align="left">列出所有 Docker 卷</td>
<td align="left"><code>docker volume ls</code></td>
</tr>
<tr>
<td align="left"><code>docker-compose up</code></td>
<td align="left">启动多容器应用（从 <code>docker-compose.yml</code> 文件）</td>
<td align="left"><code>docker-compose up</code></td>
</tr>
<tr>
<td align="left"><code>docker-compose down</code></td>
<td align="left">停止并删除由 <code>docker-compose</code> 启动的容器、网络等</td>
<td align="left"><code>docker-compose down</code></td>
</tr>
<tr>
<td align="left"><code>docker info</code></td>
<td align="left">显示 Docker 系统的详细信息</td>
<td align="left"><code>docker info</code></td>
</tr>
<tr>
<td align="left"><code>docker version</code></td>
<td align="left">显示 Docker 客户端和守护进程的版本信息</td>
<td align="left"><code>docker version</code></td>
</tr>
<tr>
<td align="left"><code>docker stats</code></td>
<td align="left">显示容器的实时资源使用情况</td>
<td align="left"><code>docker stats</code></td>
</tr>
<tr>
<td align="left"><code>docker login</code></td>
<td align="left">登录 Docker 仓库</td>
<td align="left"><code>docker login</code></td>
</tr>
<tr>
<td align="left"><code>docker logout</code></td>
<td align="left">登出 Docker 仓库</td>
<td align="left"><code>docker logout</code></td>
</tr>
</tbody></table>
<p>常用选项说明:</p>
<ul>
<li><strong><code>-d</code></strong>：后台运行容器，例如 <code>docker run -d ubuntu</code>。</li>
<li><strong><code>-it</code></strong>：以交互式终端运行容器，例如 <code>docker exec -it container_name bash</code>。</li>
<li><strong><code>-t</code></strong>：为镜像指定标签，例如 <code>docker build -t my-image .</code>。</li>
</ul>
<hr>
<h4 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a><strong>容器使用</strong></h4><ul>
<li><p><strong>获取镜像</strong></p>
<p>如果我们本地没有 ubuntu 镜像，我们可以使用 <strong><code>docker pull</code></strong> 命令来载入 ubuntu 镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动容器</strong></p>
<p>以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>-i</code></strong></td>
<td>交互式操作</td>
</tr>
<tr>
<td><strong><code>-t</code></strong></td>
<td>终端</td>
</tr>
<tr>
<td><strong><code>ubuntu</code></strong></td>
<td>ubuntu 镜像</td>
</tr>
<tr>
<td><strong><code>/bin/bash</code></strong></td>
<td>放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 <code>/bin/bash</code></td>
</tr>
</tbody></table>
<p>要退出终端，直接输入 <strong>exit</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed09e4490c57:/# <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动已停止运行的容器</strong></p>
<p>查看所有的容器命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker-container-psa.png" alt="img"></p>
<p>使用 docker start 启动一个已停止的容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker start b750bbbcfd88 </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>后台运行</strong></p>
<p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 <strong>-d</strong> 指定容器的运行模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>**注：**加了 <strong><code>-d</code></strong> 参数默认不会进入容器，想要进入容器需要使用指令 <strong><code>docker exec</code></strong>。</p>
</li>
<li><p><strong>停止一个容器</strong></p>
<p>停止容器的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker stop &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker-stop-1.png" alt="img"></p>
<p>停止的容器可以通过 docker restart 重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>进入容器</strong></p>
<p>在使用 <strong>-d</strong> 参数时启动容器时，容器会运行在后台，这时如果要进入容器，可以通过以下命令进入：</p>
<ul>
<li><strong><code>docker attach</code></strong>：允许你与容器的标准输入（stdin）、输出（stdout）和标准错误（stderr）进行交互。</li>
<li><strong><code>docker exec</code></strong>：<strong>推荐</strong>大家使用 docker exec 命令，因为此命令<font color="red"><strong>会退出容器终端，但不会导致容器的停止。</strong></font></li>
</ul>
<p><strong>attach 命令</strong></p>
<p>使用 <code>docker attach</code> 命令实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker attach 1e560fca3906 </span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 如果从这个容器退出，<strong>会导致容器的停止</strong>。</p>
<p><strong>exec 命令</strong></p>
<p>使用 docker exec 命令实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 243c32535da7 /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 如果从这个容器退出，容器不会停止，这就是为什么推荐大家使用 <strong>docker exec</strong>。</p>
</li>
<li><p><strong>导出和导入容器</strong></p>
<p><strong>导出容器</strong></p>
<p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">export</span> 1e560fca3906 &gt; ubuntu.tar</span><br><span class="line"><span class="comment"># 导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。</span></span><br></pre></td></tr></table></figure>

<p><strong>导入容器快照</strong></p>
<p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> docker/ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1</span><br><span class="line"><span class="comment"># 将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</span></span><br></pre></td></tr></table></figure>

<p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除容器</strong></p>
<p>删除容器使用 <strong>docker rm</strong> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> -f 1e560fca3906</span><br></pre></td></tr></table></figure>

<p>下面的命令可以清理掉所有处于终止状态的容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="部署-web-应用"><a href="#部署-web-应用" class="headerlink" title="部署 web 应用"></a>部署 web 应用</h4><p><a href="https://blog.csdn.net/H_porridge/article/details/123613736">教程一</a></p>
<p><a href="https://www.cnblogs.com/big-white/p/15239079.html">教程二</a></p>
<p><a href="https://segmentfault.com/a/1190000021008496">部署 Vue + Spring Boot 项目</a></p>
<hr>
<ul>
<li><p><strong>访问网络端口</strong></p>
<p><strong><code>docker port</code><strong>命令可以查看指定 （<strong>ID</strong> 或者</strong>名字</strong>）容器的某个确定端口映射到宿主机的端口号。</p>
</li>
<li><p><strong>查看WEB应用程序容器的进程</strong></p>
<p><strong><code>docker top</code></strong></p>
</li>
<li><p><strong>查看 WEB 应用程序日志</strong></p>
<p><strong><code>docker logs [ID或者名字]</code></strong> </p>
<p><strong><code>-f</code>:</strong> 让 <strong><code>docker logs</code></strong> 像使用 <strong><code>tail -f</code></strong> 一样来输出容器内部的标准输出。</p>
</li>
<li><p><strong>检查 WEB 应用程序</strong></p>
<p><strong><code>docker inspect</code></strong> 用来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p>
</li>
<li><p><strong>停止 WEB 应用容器</strong></p>
<p><strong><code>docker stop</code></strong></p>
</li>
<li><p><strong>重启WEB应用容器</strong></p>
<p> <strong><code>docker restart</code></strong></p>
</li>
<li><p><strong>移除WEB应用容器</strong></p>
<p><strong><code>docker rm</code></strong> 命令来删除不需要的容器</p>
</li>
</ul>
<hr>
<h3 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h3><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p>
<h4 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h4><p><strong><code>docker images</code></strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker images           </span><br><span class="line">REPOSITORY    TAG      IMAGE ID         CREATED        SIZE</span><br><span class="line">ubuntu       14.04    90d5884b1ee0     5 days ago     188 MB</span><br></pre></td></tr></table></figure>

<p>各个选项说明:</p>
<ul>
<li><p>**REPOSITORY：**表示镜像的仓库源</p>
</li>
<li><p>**TAG：**镜像的标签</p>
<p>同一仓库源可以有多个 TAG，代表这个仓库源的<strong>不同个版本</strong></p>
<p>使用时指定版本：（默认为 <strong><code>ubuntu:latest</code></strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash </span><br><span class="line">root@d77ccb2e5cca:/#</span><br><span class="line"><span class="comment"># -i: 交互式操作。</span></span><br><span class="line"><span class="comment"># -t: 终端。</span></span><br><span class="line"><span class="comment"># ubuntu:15.10: 这是指用 ubuntu 15.10 版本镜像为基础来启动容器。</span></span><br><span class="line"><span class="comment"># /bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**IMAGE ID：**镜像ID</p>
</li>
<li><p>**CREATED：**镜像创建时间</p>
</li>
<li><p>**SIZE：**镜像大小</p>
</li>
</ul>
<h4 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h4><p> <strong><code>docker pull</code></strong> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker pull ubuntu:13.10</span><br></pre></td></tr></table></figure>

<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><p><strong><code>docker search</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$  docker search httpd</span><br></pre></td></tr></table></figure>

<p><strong>NAME:</strong> 镜像仓库源的名称</p>
<p><strong>DESCRIPTION:</strong> 镜像的描述</p>
<p><strong>OFFICIAL:</strong> 是否 docker 官方发布</p>
<p><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思。</p>
<p><strong>AUTOMATED:</strong> 自动构建。</p>
<h4 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a>拖取镜像</h4><p><strong><code>docker pull</code></strong> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker pull httpd</span><br></pre></td></tr></table></figure>

<p>下载完成后，我们就可以使用这个镜像了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run httpd</span><br></pre></td></tr></table></figure>

<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p><strong><code>docker rmi</code></strong>&#96;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker rmi hello-world</span><br></pre></td></tr></table></figure>

<h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><p>当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。</p>
<ul>
<li>从已经创建的容器中更新镜像，并且提交这个镜像</li>
<li>使用 <strong>Dockerfile</strong> 指令来创建一个新的镜像</li>
</ul>
<h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><p>更新镜像之前，我们需要使用镜像来创建一个容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure>

<p>进入容器后，更新系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade -y</span><br></pre></td></tr></table></figure>

<p>在完成操作之后，输入 <code>exit</code> 命令来退出这个容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过命令 <code>docker commit</code> 来提交容器副本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker commit -m=<span class="string">&quot;has update&quot;</span> -a=<span class="string">&quot;runoob&quot;</span> e218edb10161 runoob/ubuntu:v2</span><br></pre></td></tr></table></figure>

<p>各个参数说明：</p>
<ul>
<li><strong>-m:</strong> 提交的描述信息</li>
<li><strong>-a:</strong> 指定镜像作者</li>
<li>**e218edb10161：**容器 ID</li>
<li><strong>runoob&#x2F;ubuntu:v2:</strong> 指定要创建的目标镜像名</li>
</ul>
<p>可以使用 <strong><code>docker images</code></strong> 命令来查看我们的新镜像 <strong>runoob&#x2F;ubuntu:v2</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY      TAG     IMAGE ID        CREATED         SIZE</span><br><span class="line">runoob/ubuntu    v2   70bf1840fd7c   15 seconds ago   158.5 MB</span><br></pre></td></tr></table></figure>

<p>使用我们的新镜像 <strong>runoob&#x2F;ubuntu</strong> 来启动一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -t -i runoob/ubuntu:v2 /bin/bash                            </span><br><span class="line">root@1a9fbdeb5da3:/#</span><br></pre></td></tr></table></figure>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p> <strong><code>docker build</code></strong></p>
<p>从零开始来创建一个新的镜像。为此，我们需要创建一个 <strong>Dockerfile</strong> 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     /bin/echo <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span><br><span class="line">RUN     /bin/echo -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<p>第一条FROM：指定使用哪个镜像源</p>
<p>RUN 指令告诉docker 在镜像内执行命令，安装了什么。</p>
<p>然后，我们使用 <strong>Dockerfile</strong> 文件，通过 docker build 命令来构建一个镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker build -t runoob/centos:6.7 .</span><br><span class="line">Sending build context to Docker daemon 17.92 kB</span><br><span class="line">Step 1 : FROM centos:6.7</span><br><span class="line"> ---&amp;gt; d95b5ca17cc3</span><br><span class="line">Step 2 : MAINTAINER Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0c92299c6f03</span><br><span class="line">Step 3 : RUN /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0397ce2fbd0a</span><br><span class="line">Step 4 : RUN useradd runoob</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong><code>-t</code></strong> ：指定要创建的目标镜像名</li>
<li><strong><code>.</code></strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li>
</ul>
<p>使用**<code>docker images</code>** 查看创建的镜像已经在列表中存在,镜像ID为860c279d2fec</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker images </span><br><span class="line">REPOSITORY      TAG     IMAGE ID         CREATED           SIZE</span><br><span class="line">runoob/centos   6.7   860c279d2fec  About a minute ago   190.6 MB</span><br></pre></td></tr></table></figure>

<p>可以使用新的镜像来创建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -t -i runoob/centos:6.7  /bin/bash</span><br><span class="line">[root@41c28d18b5fb /]# <span class="built_in">id</span> runoob</span><br><span class="line">uid=500(runoob) gid=500(runoob) <span class="built_in">groups</span>=500(runoob)</span><br></pre></td></tr></table></figure>

<h4 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h4><p><strong><code>docker tag</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker tag 860c279d2fec runoob/centos:dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker images</span><br><span class="line">REPOSITORY    	TAG        IMAGE ID       CREATED        SIZE</span><br><span class="line">runoob/centos  	6.7   	 860c279d2fec  	5 hours ago    190.6 MB</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h3><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <strong><code>-P</code></strong> 或 <strong><code>-p</code></strong> 参数来指定端口映射。</p>
<h4 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h4><p>我们通过 <strong><code>-P</code></strong> 或 <strong><code>-p</code></strong> 参数来指定端口映射。</p>
<ul>
<li><strong><code>-P</code>：<strong>是容器内部端口</strong>随机</strong>映射到主机的端口。（大写）</li>
<li><strong><code>-p</code>：<strong>是容器内部端口绑定到</strong>指定</strong>的主机端口。（小写）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">33e4523d30aaf0258915c368e66e03b49535de0ef20317d3f639d40222ba6bc0</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...           PORTS                     NAMES</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...   0.0.0.0:5000-&gt;5000/tcp    berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...   0.0.0.0:32768-&gt;5000/tcp   grave_hopper</span><br></pre></td></tr></table></figure>

<p>我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br><span class="line">95c6ceef88ca3e71eaf303c2833fd6701d8d1b2572b5613b5a932dfdfe8a857c</span><br><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...     PORTS                                NAMES</span><br><span class="line">95c6ceef88ca        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...  5000/tcp, 127.0.0.1:5001-&gt;5000/tcp   adoring_stonebraker</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...  0.0.0.0:5000-&gt;5000/tcp               berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...    0.0.0.0:32768-&gt;5000/tcp              grave_hopper</span><br></pre></td></tr></table></figure>

<p>上面的例子中，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 <strong><code>/udp</code></strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br><span class="line">6779686f06f6204579c1d655dd8b2b31e8e809b245a97b2d3a8e35abe9dcd22a</span><br><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...   PORTS                                NAMES</span><br><span class="line">6779686f06f6        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...   5000/tcp, 127.0.0.1:5000-&gt;5000/udp   drunk_visvesvaraya</span><br><span class="line">95c6ceef88ca        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...    5000/tcp, 127.0.0.1:5001-&gt;5000/tcp   adoring_stonebraker</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...     0.0.0.0:5000-&gt;5000/tcp               berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">&quot;python app.py&quot;</span>   ...    0.0.0.0:32768-&gt;5000/tcp              grave_hopper</span><br></pre></td></tr></table></figure>

<p><strong><code>docker port</code></strong> 命令可以让我们快捷地查看端口的绑定情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker port adoring_stonebraker 5000</span><br><span class="line">127.0.0.1:5001</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Docker-容器互联"><a href="#Docker-容器互联" class="headerlink" title="Docker 容器互联"></a>Docker 容器互联</h4><p>端口映射并不是唯一把 docker 连接到另一个容器的方法。</p>
<p>docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。</p>
<p>docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>
<ul>
<li><p><strong>容器命名</strong></p>
<p>当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 <strong><code>--name</code></strong> 标识来命名容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$  docker run -d -P --name runoob training/webapp python app.py</span><br><span class="line">43780a6eabaaf14e590b6e849235c75f3012995403f97749775e38436db9a441</span><br></pre></td></tr></table></figure>

<p>使用 <strong><code>docker ps</code></strong> 命令来查看容器名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps -l</span><br><span class="line">CONTAINER ID     IMAGE            COMMAND           ...    PORTS                     NAMES</span><br><span class="line">43780a6eabaa     training/webapp   <span class="string">&quot;python app.py&quot;</span>  ...     0.0.0.0:32769-&gt;5000/tcp   runoob</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>新建网络</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network create -d bridge test-net</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p><strong><code>-d</code></strong>：参数指定 Docker 网络类型，有 bridge、overlay。</p>
<p>其中 overlay 网络类型用于 Swarm mode，在本小节中你可以忽略它。</p>
</li>
<li><p><strong>连接容器</strong></p>
<p>运行一个容器并连接到新建的 test-net 网络:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name test1 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>打开新的终端，再运行一个容器并加入到 test-net 网络:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name test2 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>通过 <code>ping</code> 来证明 test1 容器和 test2 容器建立了互联关系。</p>
<ul>
<li><p>在 test1 容器输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ede85fdf10cf:/# ping test2</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 test2 容器输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@87f4914213d5:/# ping test1</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果你有多个容器之间需要互相连接，推荐使用 Docker Compose</p>
</li>
</ul>
<hr>
<h4 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h4><p>我们可以在宿主机的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;114.114.114.114&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。</p>
<p>配置完，需要重启 docker 才能生效。</p>
<p>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --<span class="built_in">rm</span>  ubuntu  <span class="built_in">cat</span> etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p><strong>手动指定容器的配置</strong></p>
<p>如果只想在指定的容器设置 DNS，则可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --<span class="built_in">rm</span> -h host_ubuntu  --dns=114.114.114.114 --dns-search=test.com ubuntu</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p><strong><code>--rm</code></strong>：容器退出时自动清理容器内部的文件系统。</p>
<p><strong><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code></strong>： 设定容器的主机名，它会被写到容器内的 &#x2F;etc&#x2F;hostname 和 &#x2F;etc&#x2F;hosts。</p>
<p><strong><code>--dns=IP_ADDRESS</code></strong>： 添加 DNS 服务器到容器的 &#x2F;etc&#x2F;resolv.conf 中，让容器用这个服务器来解析所有不在 &#x2F;etc&#x2F;hosts 中的主机名。</p>
<p><strong><code>--dns-search=DOMAIN</code></strong>： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。</p>
<p>如果在容器启动时没有指定 <strong><code>--dns</code></strong> 和 <strong><code>--dns-search</code></strong>，Docker 会默认用宿主主机上的 &#x2F;etc&#x2F;resolv.conf 来配置容器的 DNS。</p>
<hr>
<h3 id="Docker-仓库管理"><a href="#Docker-仓库管理" class="headerlink" title="Docker 仓库管理"></a>Docker 仓库管理</h3><p>仓库（Repository）是集中存放镜像的地方。以下介绍一下 <a href="https://hub.docker.com/">Docker Hub</a>。当然不止 docker hub，只是远程的服务商不一样，操作都是一样的。</p>
<h4 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h4><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/">Docker Hub</a>。</p>
<p>大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>
<p><strong>注册</strong></p>
<p>在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p>
<p><strong>登录和退出</strong></p>
<p>登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure>

<p><strong>退出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure>

<p><strong>拉取镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull 镜像名称如ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>搜索镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>推送镜像</strong></p>
<p>用户登录后，可以通过 <code>docker push</code> 命令将自己的镜像推送到 Docker Hub。</p>
<p>以下命令中的 username 请替换为你的 Docker 账号用户名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag ubuntu:18.04 username/ubuntu:18.04</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Docker-Dockerfile"><a href="#Docker-Dockerfile" class="headerlink" title="Docker Dockerfile"></a>Docker Dockerfile</h3><h4 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h4><p>Dockerfile 是一个文本文件，包含了<strong>构建 Docker 镜像的所有指令</strong>。</p>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<p>通过定义一系列命令和参数，Dockerfile 指导 Docker 构建一个自定义的镜像。</p>
<h4 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h4><p><strong>之前的构建镜像使用过</strong></p>
<p>这里仅讲解如何运行 Dockerfile 文件来定制一个镜像，具体 Dockerfile 文件内指令详解，将在下一节中介绍，这里你只要知道构建的流程即可。</p>
<ul>
<li><p><strong>下面以定制一个 nginx 镜像（构建好的镜像内会有一个 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html 文件）</strong></p>
<p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;这是一个本地构建的nginx镜像&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FROM 和 RUN 指令的作用</strong></p>
<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>
<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>
<p>shell 格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>

<p>exec 格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget</span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure>

<p>以上执行会创建 3 层镜像。可简化为以下格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum -y install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure>

<p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p>
</li>
<li><p><strong>开始构建镜像</strong></p>
<p>在 Dockerfile 文件的存放目录下，执行构建动作。</p>
<p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。</p>
<p><strong>注</strong>：最后的 <strong><code>.</code></strong> 代表本次执行的上下文路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t nginx:v3 .</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>上下文路径</strong> <strong><code>.</code></strong> </font>：是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>
<p><strong>解析</strong>：由于 docker 的运行模式是 C&#x2F;S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>
<p><font color="red"><strong>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</strong></font></p>
<p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢</p>
</li>
</ul>
<h4 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a><a href="https://www.runoob.com/docker/docker-dockerfile.html">指令详解</a></h4><table>
<thead>
<tr>
<th align="left">Dockerfile 指令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">FROM</td>
<td align="left">指定基础镜像，用于后续的指令构建。</td>
</tr>
<tr>
<td align="left">MAINTAINER</td>
<td align="left">指定Dockerfile的作者&#x2F;维护者。（已弃用，推荐使用LABEL指令）</td>
</tr>
<tr>
<td align="left">LABEL</td>
<td align="left">添加镜像的元数据，使用键值对的形式。</td>
</tr>
<tr>
<td align="left">RUN</td>
<td align="left">在构建过程中在镜像中执行命令。</td>
</tr>
<tr>
<td align="left">CMD</td>
<td align="left">指定容器创建时的默认命令。（可以被覆盖）</td>
</tr>
<tr>
<td align="left">ENTRYPOINT</td>
<td align="left">设置容器创建时的主要命令。（不可被覆盖）</td>
</tr>
<tr>
<td align="left">EXPOSE</td>
<td align="left">声明容器运行时监听的特定网络端口。</td>
</tr>
<tr>
<td align="left">ENV</td>
<td align="left">在容器内部设置环境变量。</td>
</tr>
<tr>
<td align="left">ADD</td>
<td align="left">将文件、目录或远程URL复制到镜像中。</td>
</tr>
<tr>
<td align="left">COPY</td>
<td align="left">将文件或目录复制到镜像中。</td>
</tr>
<tr>
<td align="left">VOLUME</td>
<td align="left">为容器创建挂载点或声明卷。</td>
</tr>
<tr>
<td align="left">WORKDIR</td>
<td align="left">设置后续指令的工作目录。</td>
</tr>
<tr>
<td align="left">USER</td>
<td align="left">指定后续指令的用户上下文。</td>
</tr>
<tr>
<td align="left">ARG</td>
<td align="left">定义在构建过程中传递给构建器的变量，可使用 “docker build” 命令设置。</td>
</tr>
<tr>
<td align="left">ONBUILD</td>
<td align="left">当该镜像被用作另一个构建过程的基础时，添加触发器。</td>
</tr>
<tr>
<td align="left">STOPSIGNAL</td>
<td align="left">设置发送给容器以退出的系统调用信号。</td>
</tr>
<tr>
<td align="left">HEALTHCHECK</td>
<td align="left">定义周期性检查容器健康状态的命令。</td>
</tr>
<tr>
<td align="left">SHELL</td>
<td align="left">覆盖Docker中默认的shell，用于RUN、CMD和ENTRYPOINT指令。</td>
</tr>
</tbody></table>
<hr>
<h3 id="Docker-Compose-1"><a href="#Docker-Compose-1" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 <strong>YML</strong> 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 <strong>YML</strong> 文件配置中创建并启动所有服务。</p>
<p>Compose 使用的三个步骤：</p>
<ul>
<li>使用 Dockerfile 定义应用程序的环境。</li>
<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>
</ul>
<p>docker-compose.yml 的配置案例如下（配置参数参考下文）：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml 配置实例</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Compose-安装"><a href="#Compose-安装" class="headerlink" title="Compose 安装"></a>Compose 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>将可执行权限应用于二进制文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>创建软链：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>测试是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose version</span><br><span class="line">cker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。</p>
<h4 id="Compose-使用"><a href="#Compose-使用" class="headerlink" title="Compose 使用"></a>Compose 使用</h4><ul>
<li><p><strong>准备</strong></p>
<p>创建一个测试目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> composetest</span><br><span class="line">$ <span class="built_in">cd</span> composetest</span><br></pre></td></tr></table></figure>

<p>在测试目录中创建一个名为 composetest&#x2F;app.py 的文件，并复制粘贴以下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure>

<p>在此示例中，redis 是应用程序网络上的 redis 容器的主机名，该主机使用的端口为 6379。</p>
<p>在 composetest 目录中创建另一个名为 <strong>requirements.txt</strong> 的文件，内容如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 Dockerfile 文件</strong></p>
<p>在 composetest 目录中，创建一个名为 <strong>Dockerfile</strong> 的文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP app.py</span><br><span class="line">ENV FLASK_RUN_HOST 0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">COPY . .</span><br><span class="line">CMD [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>Dockerfile 内容解释：</strong></p>
<ul>
<li><p><strong>FROM python:3.7-alpine</strong>: 从 Python 3.7 映像开始构建镜像。</p>
</li>
<li><p><strong>WORKDIR &#x2F;code</strong>: 将工作目录设置为 &#x2F;code。</p>
</li>
<li><pre><code class="language-bash">ENV FLASK_APP app.py
ENV FLASK_RUN_HOST 0.0.0.0
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  设置 flask 命令使用的环境变量。</span><br><span class="line"></span><br><span class="line">- **RUN apk add --no-cache gcc musl-dev linux-headers**: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</span><br><span class="line"></span><br><span class="line">- ```bash</span><br><span class="line">  COPY requirements.txt requirements.txt</span><br><span class="line">  RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

复制 requirements.txt 并安装 Python 依赖项。
</code></pre>
</li>
<li><p><strong>COPY . .</strong>: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</p>
</li>
<li><p><strong>CMD [“flask”, “run”]</strong>: 容器提供默认的执行命令为：flask run。</p>
</li>
</ul>
</li>
<li><p><strong>创建 docker-compose.yml</strong></p>
<p>在测试目录中创建一个名为 docker-compose.yml 的文件，然后粘贴以下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml 配置</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>

<p>该 Compose 文件定义了两个服务：web 和 redis。</p>
<ul>
<li><strong>web</strong>：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li>
<li><strong>redis</strong>：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li>
</ul>
</li>
<li><p><strong>使用 Compose 命令构建和运行您的应用</strong></p>
<p>在测试目录中，执行以下命令来启动应用程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>如果你想在后台执行该服务可以加上 <strong>-d</strong> 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="YML-配置指令参考"><a href="#YML-配置指令参考" class="headerlink" title="YML 配置指令参考"></a><a href="https://www.runoob.com/docker/docker-compose.html">YML 配置指令参考</a></h4><hr>
<h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a><a href="https://www.runoob.com/docker/docker-machine.html">Docker Machine</a></h3><p>Docker Machine 是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机。</p>
<p>Docker Machine 也可以集中管理所有的 docker 主机，比如快速的给 100 台服务器安装上 docker。</p>
<p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。</p>
<p>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>
<hr>
<h3 id="Docker-Swarm-集群管理"><a href="#Docker-Swarm-集群管理" class="headerlink" title="Docker Swarm 集群管理"></a><a href="https://www.runoob.com/docker/docker-swarm.html">Docker Swarm 集群管理</a></h3><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。</p>
<p>Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p>
<p>支持的工具包括但不限于以下各项：</p>
<ul>
<li>Dokku</li>
<li>Docker Compose</li>
<li>Docker Machine</li>
<li>Jenkins</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/blog2025.github.io/2025/05/28/ES6/</url>
    <content><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2015/03/react.html">React 教程</a></p>
<p><a href="https://www.w3cschool.cn/escript6/escript6-m42v37eq.html">ES6 教程</a></p>
<p><a href="https://www.runoob.com/w3cnote/es6-tutorial.html">ES6 教程 2</a></p>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h2><ol>
<li><p>（ES）ECMAScript 是 JavaScript 语言的浏览器脚本语言标准，JavaScript 是ECMAScript 的实现。ES6 目前仍然是开发的主力基准。</p>
</li>
<li><p><strong>webpack</strong>：</p>
<p>一个现代 JavaScript 应用程序的静态模块打包器 (module bundler) 。打包后的结果一般为“xx.js”样式。</p>
<p>其包含：</p>
<p>入口（entry）、输出（output）、loader、插件（plugins）</p>
<ul>
<li><p>入口（entry）：指示 webpack 应该使用哪个模块作为开始。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出（output）：指示 webpack 输出包（bundler）的命名及其路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>loader：指示 webpack 处理非 JavaScript 文件，loader 可以将所有类型的文件转换为 webpack 能够处理的模块（例如：ES6 转换为 ES5）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: [</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插件（plugins）：打包优化、压缩、定义环境变量等。</p>
<p>语法：require()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 用于访问内置插件 </span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Babel 转码器</strong>：</p>
<p>可以将 ES6 代码转换为 ES5 代码，方便兼容老版本的浏览器。</p>
</li>
</ol>
<h2 id="二、关键字let和const"><a href="#二、关键字let和const" class="headerlink" title="二、关键字let和const"></a>二、关键字let和const</h2><ol>
<li><h3 id="let"><a href="#let" class="headerlink" title="let"></a><strong>let</strong></h3><ul>
<li><p>let 声明的变量只在 let 命令所在的代码块内有效。<strong>（块级作用域）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在代码块大括号外边是无法调用 a 的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>let 在代码块中只能声明一次。<strong>（不能重复声明）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错：a 已经被声明了</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>let 应用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出十个 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 0123456789</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>let 不能存在变量提升**（必须在使用前声明）**</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;banana&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="const"><a href="#const" class="headerlink" title="const"></a><strong>const</strong></h3><p>本质：const 保证变量指向的内存地址所保存的数据不允许改动。</p>
<ul>
<li><p>const 声明一个只读的常量，一旦声明<strong>并初始化</strong>，常量的值就不能改变。</p>
</li>
<li><p>const 使用必须初始化，否则会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>const 声明的变量只在 const 命令所在的代码块内有效。<strong>（块级作用域）</strong></p>
</li>
<li><p>const 在代码块中只能声明一次。<strong>（不能重复声明）</strong></p>
</li>
<li><p>const 不能存在变量提升**（必须在使用前声明）**</p>
</li>
</ul>
</li>
</ol>
<h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><p><strong>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。</strong></p>
<h3 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h3><ol>
<li><h4 id="数组的解构赋值："><a href="#数组的解构赋值：" class="headerlink" title="数组的解构赋值："></a><strong>数组的解构赋值</strong>：</h4><ul>
<li><p>模式匹配：</p>
<p>ES6 之前：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>ES6：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>如果解构不成功，变量的值就等于undefined。</p>
</li>
<li><p>不完全结构：</p>
<p>等号左边的模式，只匹配一部分的等号右边的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可嵌套</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="comment">// c = 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可忽略</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="comment">// b = 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>剩余运算符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a = 1</span></span><br><span class="line"><span class="comment">//b = [2, 3]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>]; <span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="对象的解构赋值："><a href="#对象的解构赋值：" class="headerlink" title="对象的解构赋值："></a>对象的解构赋值：</h4><p><strong>结构</strong>：对象的<strong>变量</strong>必须与<strong>属性</strong>同名，才能取到正确的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;属性<span class="attr">A</span>: 变量名a, 属性<span class="attr">B</span>: 变量名b&#125; = &#123;属性A：<span class="string">&#x27;值a&#x27;</span>,属性B：<span class="string">&#x27;值b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表面上：</span></span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">	<span class="comment">// foo = &#x27;aaa&#x27;</span></span><br><span class="line">	<span class="comment">// bar = &#x27;bbb&#x27;</span></span><br><span class="line"><span class="comment">//实际上：</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</strong></p>
<ul>
<li><p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>常见</strong>：</p>
<ul>
<li><p>基本样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// foo = &#x27;aaa&#x27;</span></span><br><span class="line"><span class="comment">// bar = &#x27;bbb&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> &#123; baz : foo &#125; = &#123; baz : <span class="string">&#x27;ddd&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// foo = &#x27;ddd&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果解构失败，变量的值等于undefined。</p>
</li>
<li><p>解构默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a = <span class="number">10</span>, b = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// a = 3; b = 5;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// aa = 3; bb = 5;</span></span><br></pre></td></tr></table></figure>

<p>。。。</p>
</li>
</ul>
<p><strong>注意点</strong>：</p>
<ul>
<li><p>已经声明的变量用于解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="字符串的解构赋值："><a href="#字符串的解构赋值：" class="headerlink" title="字符串的解构赋值："></a>字符串的解构赋值：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a <span class="comment">// &quot;h&quot;</span></span><br><span class="line">b <span class="comment">// &quot;e&quot;</span></span><br><span class="line">c <span class="comment">// &quot;l&quot;</span></span><br><span class="line">d <span class="comment">// &quot;l&quot;</span></span><br><span class="line">e <span class="comment">// &quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;length : len&#125; = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数值和布尔值的解构赋值："><a href="#数值和布尔值的解构赋值：" class="headerlink" title="数值和布尔值的解构赋值："></a>数值和布尔值的解构赋值：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="函数参数的解构赋值："><a href="#函数参数的解构赋值：" class="headerlink" title="函数参数的解构赋值："></a>函数参数的解构赋值：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a><strong>用途</strong></h3><ol>
<li><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="title function_">example</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = <span class="title function_">example</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[x, y, z]</span>) &#123; ... &#125;</span><br><span class="line"><span class="title function_">f</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123;x, y, z&#125;</span>) &#123; ... &#125;</span><br><span class="line"><span class="title function_">f</span>(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="提取-JSON-数据"><a href="#提取-JSON-数据" class="headerlink" title="提取 JSON 数据"></a>提取 JSON 数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id, status, number);</span><br><span class="line"><span class="comment">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123;status = <span class="literal">true</span>, finished = <span class="literal">false</span>&#125; = &#123;&#125;</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetch</span>(<span class="params">url, &#123; body = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;GET&#x27;</span>, headers = &#123;&#125; &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(method);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com&#x27;</span>, &#123;&#125;)</span><br><span class="line"><span class="comment">// &quot;GET&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="遍历-Map-结构"><a href="#遍历-Map-结构" class="headerlink" title="遍历 Map 结构"></a>遍历 Map 结构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SourceMapConsumer</span>, <span class="title class_">SourceNode</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四、模板"><a href="#四、模板" class="headerlink" title="四、模板"></a>四、模板</h2><h3 id="模板字符串："><a href="#模板字符串：" class="headerlink" title="模板字符串："></a>模板字符串：</h3><ol>
<li><p>使用符号：`&#96;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`Hello world`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>嵌入变量：需要将变量名或者方法名写在${}之中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">user = &#123;</span><br><span class="line">    username=<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">	age = <span class="string">&#x27;12&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`My name is <span class="subst">$&#123;user.username&#125;</span>, I am <span class="subst">$&#123;user.age&#125;</span>, I like <span class="subst">$&#123;f()&#125;</span>`</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><ol>
<li><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>

<p>结合解构赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure>

<p>length 属性：返回没有指定默认值的参数个数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="rest-剩余参数"><a href="#rest-剩余参数" class="headerlink" title="rest 剩余参数"></a>rest 剩余参数</h3><p>rest 参数（形式为 <strong>…变量名</strong> ），用于获取函数的多余参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>函数的 length 属性，不包括 rest 参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>) &#123;&#125;).<span class="property">length</span>  <span class="comment">// 1</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">...a</span>) &#123;&#125;).<span class="property">length</span>  <span class="comment">// 0</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a, ...b</span>) &#123;&#125;).<span class="property">length</span>  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = 参数 =&gt; 返回体;</span><br></pre></td></tr></table></figure>

<p>单个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>无参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>多个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>返回对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">getTempItem</span> = id =&gt; (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">id</span>: id,  <span class="comment">// 或简写为 id,</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>变量解构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">full</span> = (<span class="params">&#123; first, last &#125;</span>) =&gt; first + <span class="string">&#x27; &#x27;</span> + last;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">full</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> person.<span class="property">first</span> + <span class="string">&#x27; &#x27;</span> + person.<span class="property">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化回调函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例子一：</span><br><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line">例子二：</span><br><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>

<p>rest 参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  箭头函数写法（ES6+）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numbers</span> = (<span class="params">...nums</span>) =&gt; nums;</span><br><span class="line"><span class="title function_">numbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 返回 [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价写法1（ES5及以下，通过 arguments 对象）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">numbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 返回相同结果</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="六、Symbol"><a href="#六、Symbol" class="headerlink" title="六、Symbol"></a>六、Symbol</h2><p>Symbol ，表示<strong>独一无二</strong>的值，最大的用法是用来定义对象的唯一属性名。</p>
<p>ES6 数据类型包含： </p>
<p>Number 、 String 、 Boolean 、 Object、 null 、 undefined 和 Symbol。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="title class_">Symbol</span>(<span class="string">&quot;KK&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sy);   <span class="comment">// Symbol(KK)</span></span><br><span class="line"><span class="title function_">typeof</span>(sy);        <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 相同参数 Symbol() 返回的值不相等</span></span><br><span class="line"><span class="keyword">let</span> sy1 = <span class="title class_">Symbol</span>(<span class="string">&quot;kk&quot;</span>); </span><br><span class="line">sy === sy1;       <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ol>
<li><p>作为属性名：Symbol 作为对象的属性名，可以保证属性不重名。</p>
<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，如果要读取到一个对象的 Symbol 属性，可以通过 <code>Object.getOwnPropertySymbols()</code>  和 <code>Reflect.ownKeys()</code> 取到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> syObject = &#123;&#125;;</span><br><span class="line">syObject[sy] = <span class="string">&quot;kk&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(syObject);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> syObject) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;    <span class="comment">// 无输出</span></span><br><span class="line"> </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(syObject);                     <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(syObject);    <span class="comment">// [Symbol(key1)]</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(syObject);                 <span class="comment">// [Symbol(key1)]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义常量：使用 Symbol 定义常量，这样就可以保证这一组常量的值都不相等。</p>
</li>
<li><p>Symbol.for()：</p>
<p>首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p>
<p><code>Symbol.for()</code>与<code>Symbol()</code>这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在<strong>全局环境</strong>中供搜索，后者不会。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> yellow = <span class="title class_">Symbol</span>(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> yellow1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line">yellow === yellow1;      <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> yellow2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line">yellow1 === yellow2;     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.keyFor()</p>
<p>返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> yellow1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(yellow1);    <span class="comment">// &quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.prototype.description</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">sym.<span class="property">description</span> <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<p>…</p>
</li>
</ol>
<h2 id="七、Set-与-Map"><a href="#七、Set-与-Map" class="headerlink" title="七、Set 与 Map"></a>七、Set 与 Map</h2><h3 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h3><h4 id="set-概念："><a href="#set-概念：" class="headerlink" title="set 概念："></a>set 概念：</h4><p>set 成员的值都是唯一的，<strong>没有重复的值</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span> =&gt;</span> s.<span class="title function_">add</span>(x));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.<span class="property">size</span> <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>去除数组重复成员的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br></pre></td></tr></table></figure>

<p>去除字符串里面的重复字符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="set-方法："><a href="#set-方法：" class="headerlink" title="set 方法："></a><strong>set 方法：</strong></h4><ul>
<li><p>Set.prototype.add(value) ：添加某个值，返回 Set 结构本身。</p>
</li>
<li><p>Set.prototype.delete(value) ：删除某个值，返回一个布尔值，表示删除是否成功。</p>
</li>
<li><p>Set.prototype.has(value) ：返回一个布尔值，表示该值是否为 Set 的成员。</p>
</li>
<li><p>Set.prototype.clear() ：清除所有成员，没有返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 注意2被加入了两次</span></span><br><span class="line">s.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Array.from</strong> 方法可以将 Set 结构转为数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(items);</span><br></pre></td></tr></table></figure>

<h4 id="set-遍历：（插入排序）"><a href="#set-遍历：（插入排序）" class="headerlink" title="set 遍历：（插入排序）"></a>set 遍历：（插入排序）</h4><ul>
<li><p>Set.prototype.keys() ：返回键名的遍历器</p>
</li>
<li><p>Set.prototype.values() ：返回键值的遍历器</p>
</li>
<li><p>Set.prototype.entries() ：返回键值对的遍历器</p>
</li>
<li><p>Set.prototype.forEach() ：使用回调函数遍历每个成员</p>
<p>由于 Set 结构没有键名，只有键值（或者说<strong>键名和键值是同一个值</strong>），所以<code>keys</code>方法和 <code>values</code>方法的行为完全一致。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>forEach()</strong></p>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>…set名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> arr = [...set];</span><br><span class="line"><span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));</span><br><span class="line"><span class="comment">// 返回Set结构：&#123;2, 4&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// （a 相对于 b 的）差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h3><h4 id="Map概念："><a href="#Map概念：" class="headerlink" title="Map概念："></a>Map概念：</h4><p>Map 结构提供了“值—值”的对应，Object 结构提供了“字符串—值”的对应。</p>
<p>Set 和 Map 都可以用来生成新的 Map。</p>
<p>如果对同一个键多次赋值，后面的值将覆盖前面的值。</p>
<p>只有对同一个对象的引用，Map 结构才将其视为同一个键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>([<span class="string">&#x27;a&#x27;</span>], <span class="number">555</span>);</span><br><span class="line">map.<span class="title function_">get</span>([<span class="string">&#x27;a&#x27;</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">//表面是针对同一个键，但实际上这是两个不同的数组实例，内存地址是不一样的，因此 get 方法无法读取该键，返回 undefined 。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">map</span><br><span class="line">.<span class="title function_">set</span>(k1, <span class="number">111</span>)</span><br><span class="line">.<span class="title function_">set</span>(k2, <span class="number">222</span>);</span><br><span class="line">map.<span class="title function_">get</span>(k1) <span class="comment">// 111</span></span><br><span class="line">map.<span class="title function_">get</span>(k2) <span class="comment">// 222</span></span><br><span class="line"><span class="comment">//变量 k1 和 k2 的值是一样的，但是它们在 Map 结构中被视为两个键。</span></span><br></pre></td></tr></table></figure>

<h4 id="Map方法："><a href="#Map方法：" class="headerlink" title="Map方法："></a>Map方法：</h4><ul>
<li><p><strong>size 属性</strong>：返回 Map 结构的成员总数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map.prototype.set(key, value)</strong>：</p>
<p>set 方法设置键名 key 对应的键值为 value ，然后返回整个 Map 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)        <span class="comment">// 键是字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>)     <span class="comment">// 键是数值</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)    <span class="comment">// 键是 undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map.prototype.get(key)</strong>：</p>
<p>get 方法读取 key 对应的键值，如果找不到 key ，返回 undefined 。</p>
</li>
<li><p><strong>Map.prototype.has(key)</strong>：</p>
<p>has 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p>
</li>
<li><p><strong>Map.prototype.delete(key)</strong>：</p>
<p>delete 方法删除某个键，返回 true 。如果删除失败，返回 false 。</p>
</li>
<li><p><strong>Map.prototype.clear()</strong>：</p>
<p>clear 方法清除所有成员，没有返回值。</p>
</li>
</ul>
<h4 id="Map遍历：（插入排序）"><a href="#Map遍历：（插入排序）" class="headerlink" title="Map遍历：（插入排序）"></a>Map遍历：（插入排序）</h4><ul>
<li><p>Map.prototype.keys() ：返回键名的遍历器。</p>
</li>
<li><p>Map.prototype.values() ：返回键值的遍历器。</p>
</li>
<li><p>Map.prototype.entries() ：返回所有成员的遍历器。</p>
</li>
<li><p>Map.prototype.forEach() ：遍历 Map 的所有成员。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符（ … ）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line">[...map.<span class="title function_">keys</span>()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">[...map.<span class="title function_">values</span>()]</span><br><span class="line"><span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line">[...map.<span class="title function_">entries</span>()]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>再借助于转换后的数组利用 map 和 filter 方法进行遍历：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map0 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27;&#125;</span></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">map</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&#x27;_&#x27;</span> + v])</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;2 =&gt; &#x27;_a&#x27;, 4 =&gt; &#x27;_b&#x27;, 6 =&gt; &#x27;_c&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>forEach()</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="八、Reflect-与-Proxy"><a href="#八、Reflect-与-Proxy" class="headerlink" title="八、Reflect 与 Proxy"></a>八、Reflect 与 Proxy</h2><p>Reflect 可以用于获取目标对象的行为；</p>
<p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。</p>
<h3 id="Proxy："><a href="#Proxy：" class="headerlink" title="Proxy："></a>Proxy：</h3><p>一个 Proxy 对象由两个部分组成： target 、 handler 。</p>
<p>在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getting &#x27;</span>+key);</span><br><span class="line">        <span class="keyword">return</span> target[key]; <span class="comment">// 不是target.key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setting &#x27;</span>+key);</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">name</span>     <span class="comment">// 实际执行 handler.get</span></span><br><span class="line">proxy.<span class="property">age</span> = <span class="number">25</span> <span class="comment">// 实际执行 handler.set</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// setting age</span></span><br><span class="line"><span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<h4 id="Proxy-方法："><a href="#Proxy-方法：" class="headerlink" title="Proxy 方法："></a>Proxy 方法：</h4><ul>
<li><p>get(target, propKey, receiver)：用于 target 对象上 propKey 的读取操作。</p>
</li>
<li><p>set(target, propKey, value, receiver)：</p>
<p>用于拦截 target 对象上的 propKey 的赋值操作。如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用。</p>
</li>
<li><p><a href="https://www.w3cschool.cn/escript6/escript6-41xy37f5.html">更多方法</a></p>
</li>
<li><p><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html">更多方法</a></p>
</li>
</ul>
<h3 id="Reflect："><a href="#Reflect：" class="headerlink" title="Reflect："></a>Reflect：</h3><p>将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上；</p>
<p>修改某些 Object 方法的返回结果，让其变得更合理。</p>
<h4 id="Reflect-方法："><a href="#Reflect-方法：" class="headerlink" title="Reflect 方法："></a>Reflect 方法：</h4><ul>
<li><p>Reflect.get(target, name, receiver)：查找并返回 target 对象的 name 属性。</p>
</li>
<li><p>Reflect.set(target, name, value, receiver)：</p>
<p>将 target 的 name 属性设置为 value。返回值为 boolean ，true 表示修改成功，false 表示失败。当 target 为不存在的对象时，会报错。</p>
</li>
<li><p><a href="https://www.w3cschool.cn/escript6/escript6-2bck37f6.html">更多方法</a></p>
</li>
<li><p><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html">更多方法</a></p>
</li>
</ul>
<h3 id="组合使用："><a href="#组合使用：" class="headerlink" title="组合使用："></a>组合使用：</h3><p>Reflect 对象的方法与 Proxy 对象的方法是一一对应的。所以 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作。</p>
<h2 id="九、对象"><a href="#九、对象" class="headerlink" title="九、对象"></a>九、对象</h2><p><strong>属性：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	<span class="attr">age</span>: age,</span><br><span class="line">    <span class="attr">name</span>: name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHi</span>();  <span class="comment">//&quot;Hi&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>对象的拓展运算符（…）：</strong></p>
<ul>
<li><p>用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...person &#125;;</span><br><span class="line">someone;  <span class="comment">//&#123;name: &quot;Amy&quot;, age: 15&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可用于合并两个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> person = &#123;...age, ...name&#125;;</span><br><span class="line">person;  <span class="comment">//&#123;age: 15, name: &quot;Amy&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>对象的新方法：</strong></p>
<ul>
<li><p>Object.assign(target, source_1, ···)：<strong>（浅拷贝）</strong></p>
<p>用于将源对象的所有可枚举属性复制到目标对象中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object2 = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object3 = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target,object2,object3);  </span><br><span class="line"><span class="comment">// 第一个参数是目标对象，后面的参数是源对象</span></span><br><span class="line">target;  <span class="comment">// &#123;a: 1, b: 2, c: 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。</li>
</ul>
</li>
<li><p>Object.is(value1, value2)：</p>
<p>用来比较两个值是否严格相等，与（&#x3D;&#x3D;&#x3D;）基本类似。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&quot;q&quot;</span>,<span class="string">&quot;q&quot;</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">1</span>,<span class="number">1</span>);          <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>([<span class="number">1</span>],[<span class="number">1</span>]);      <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;<span class="attr">q</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">q</span>:<span class="number">1</span>&#125;);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>与（&#x3D;&#x3D;&#x3D;）的区别</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一是+0不等于-0</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>);  <span class="comment">//false</span></span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span>  <span class="comment">//true</span></span><br><span class="line"><span class="comment">//二是NaN等于本身</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>  <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="十、Class-类"><a href="#十、Class-类" class="headerlink" title="十、Class 类"></a>十、Class 类</h2><p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：直接 new</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">  <span class="title function_">doStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stuff&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line">b.<span class="title function_">doStuff</span>() <span class="comment">// &quot;stuff&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Example</span>.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取值函数 getter 和 存值函数 setter</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a; <span class="comment">// 实例化时调用 set 方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">a</span>()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getter&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">a</span>(<span class="params">a</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = a; <span class="comment">// 自身递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> exam = <span class="keyword">new</span> <span class="title class_">Example</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>extends 实现类的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><code>__proto__</code> 属性，指向对应的构造函数的 <code>prototype</code> 属性。</p>
<ul>
<li><p>子类的 <strong>proto</strong> 属性，表示构造函数的继承，总是指向父类。</p>
</li>
<li><p>子类 prototype 属性的 <strong>proto</strong> 属性，表示方法的继承，总是指向父类的 prototype 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property">__proto__</span> === A <span class="comment">// true</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === A.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>super：</p>
<ul>
<li><p>子类 constructor 方法中必须有 super ，且必须出现在 this 之前。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="comment">// or </span></span><br><span class="line">    <span class="comment">// constructor(a) &#123;</span></span><br><span class="line">        <span class="comment">// this.a = a;</span></span><br><span class="line">        <span class="comment">// super();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title class_">Child</span>(); <span class="comment">// Uncaught ReferenceError: Must call super </span></span><br><span class="line"><span class="comment">// constructor in derived class before accessing &#x27;this&#x27; or returning </span></span><br><span class="line"><span class="comment">// from derived constructor</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用父类构造函数,只能出现在子类的构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 调用父类普通方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">test</span>()); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 调用父类静态方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">test1</span>+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(); <span class="comment">// Uncaught SyntaxError: &#x27;super&#x27; keyword unexpected     </span></span><br><span class="line">        <span class="comment">// here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>this：</p>
<p><code>this()</code> 调用本类其他构造方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">  <span class="title function_">printName</span>(<span class="params">name = <span class="string">&#x27;there&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">print</span>(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">print</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>私有方法：<code>_方法名()&#123;&#125;</code></p>
<p>公有方法：<code>方法名()&#123;&#125;</code></p>
<p>私有属性：<code>#属性名</code></p>
<h2 id="十一、模块-Module"><a href="#十一、模块-Module" class="headerlink" title="十一、模块 Module"></a>十一、模块 Module</h2><p>export 命令用于规定模块的对外接口，（输出）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>

<p>import 命令用于输入其他模块提供的功能。（引用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="十二、Promise-对象-异步编程"><a href="#十二、Promise-对象-异步编程" class="headerlink" title="十二、Promise 对象-异步编程"></a>十二、Promise 对象-异步编程</h2><h3 id="Promise-状态"><a href="#Promise-状态" class="headerlink" title="Promise 状态"></a>Promise 状态</h3><p><strong>特点：</strong></p>
<p>Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。除了异步操作的结果，任何其他操作都无法改变这个状态。</p>
<p>Promise 对象只有：从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再变了即 resolved（已定型）。</p>
<p><strong>缺点：</strong></p>
<p>无法取消 Promise ，一旦新建它就会立即执行，无法中途取消。</p>
<p>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</p>
<p>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p><strong>then() 方法：</strong><br>then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<p>**catch() 方法：**用于指定发生错误时的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>**finally() 方法：**用于指定不管<code>Promise</code>对象最后状态如何，都会执行的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="十二、迭代器"><a href="#十二、迭代器" class="headerlink" title="十二、迭代器"></a>十二、迭代器</h2><p>每一次调用 next 方法，都会返回数据结构的当前成员的信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = <span class="title function_">makeIterator</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value: &quot;a&quot;, done: false &#125;</span></span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value: &quot;b&quot;, done: false &#125;</span></span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="十三、Generator-函数"><a href="#十三、Generator-函数" class="headerlink" title="十三、Generator 函数"></a>十三、Generator 函数</h2><p>ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流<strong>挂起</strong>，为改变执行流程提供了可能，从而为异步编程提供解决方案。 </p>
<h3 id="Generator-函数组成"><a href="#Generator-函数组成" class="headerlink" title="Generator 函数组成"></a><strong>Generator 函数组成</strong></h3><p>Generator 有两个区分于普通函数的部分：</p>
<ul>
<li><p>在 function 后面，函数名之前有个 * ，表示函数为 Generator 函数，</p>
</li>
<li><p>函数内部有 yield 表达式，用来定义函数内部的状态。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span>; </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行机制：</strong></p>
<p>Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;1&quot;, done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">f.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;2&quot;, done: false&#125;</span></span><br><span class="line"> </span><br><span class="line">f.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;3&quot;, done: true&#125;</span></span><br><span class="line"> </span><br><span class="line">f.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="for…of-循环："><a href="#for…of-循环：" class="headerlink" title="for…of 循环："></a>for…of 循环：</h3><p><code>for...of</code>循环可以自动遍历 <code>Generator</code> 函数运行时生成的<code>Iterator</code>对象，且此时不再需要调用 next 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<h2 id="十四、async-函数"><a href="#十四、async-函数" class="headerlink" title="十四、async 函数"></a>十四、async 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">name</span>(<span class="params">[param[, param[, ... param]]]</span>) &#123; statements &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>name: 函数名称。</li>
<li>param: 要传递给函数的参数的名称。</li>
<li>statements: 函数体语句。</li>
</ul>
<p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;helloAsync&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">helloAsync</span>())  <span class="comment">// Promise &#123;&lt;resolved&gt;: &quot;helloAsync&quot;&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">helloAsync</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async 函数中可能会有 <strong>await</strong> 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">testAwait</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloAsync&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">helloAsync</span>();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>

<p><strong>await：</strong></p>
<p>await 操作符用于等待一个 Promise 对象, 它只能在异步函数 async function 内部使用。</p>
<p>await针对所跟不同表达式的处理方式：</p>
<ul>
<li>Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。</li>
<li>非 Promise 对象：直接返回对应的值。</li>
</ul>
<h2 id="十五、ES6-风格"><a href="#十五、ES6-风格" class="headerlink" title="十五、ES6 风格"></a>十五、ES6 风格</h2><p><strong>let 取代 var</strong></p>
<p>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code></p>
<p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`bbbbb`</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p>使用数组成员对变量赋值时，优先使用解构赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.<span class="property">firstName</span>;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">k1</span>: v1,</span><br><span class="line">  <span class="attr">k2</span>: v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">&#x27;some value&#x27;</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="attr">ref</span>: ref,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">addValue</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="property">value</span> + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="title function_">addValue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.<span class="property">value</span> + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>数组：使用扩展运算符（…）拷贝数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>

<p>函数：</p>
<p>立即执行函数可以写成箭头函数的形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Welcome to the Internet.&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure>

<p>布尔值不可直接作为参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b, option = <span class="literal">false</span> </span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b, &#123; option = <span class="literal">false</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模块：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.<span class="property">func1</span>;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.<span class="property">func2</span>;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Breadcrumbs</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Breadcrumbs</span>;</span><br></pre></td></tr></table></figure>

<p>如果模块只有一个输出值，就使用<code>export default</code> ，如果模块有多个输出值，就不使用 <code>export default</code> ， <code>export default</code> 与普通的 <code>export</code>不要同时使用。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Hibernate</title>
    <url>/blog2025.github.io/2025/04/02/Hibernate/</url>
    <content><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>Hibernate 是 Java 生态中广泛使用的 ‌<strong>ORM（对象关系映射）框架</strong>‌，用于简化数据库操作，将 Java 对象与关系型数据库表自动映射，提供高效、面向对象的数据访问能力。</p>
<p>结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   ├── com.example.model       # 实体类（如 User.java）‌</span><br><span class="line">│   │   ├── com.example.dao         # DAO 接口与实现类（如 UserDaoImpl）‌</span><br><span class="line">│   │   ├── com.example.service     # 业务逻辑类（如 UserService）‌</span><br><span class="line">│   │   └── com.example.util        # 工具类（如 HibernateUtil.java）‌</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── hibernate.cfg.xml       # Hibernate 主配置文件‌ </span><br><span class="line">│       └── com/example/model/      # 实体映射文件（如 User.hbm.xml，注解方式可省略）‌</span><br><span class="line">└── test/</span><br><span class="line">    └── java/</span><br><span class="line">        └── com.example.test        # 单元测试类（如 UserTest.java）‌</span><br></pre></td></tr></table></figure>



<h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><ol>
<li>‌<strong>ORM 映射</strong>-‌-&gt;O代表的是Objcet，R代表的是Relative，M代表的是Mapping<ul>
<li>自动将 Java 类映射到数据库表，属性映射到字段，<strong>减少手动 SQL 编写</strong>。</li>
<li>支持继承、多态等面向对象特性在关系型数据库中的实现。</li>
</ul>
</li>
<li>‌<strong>数据库无关性</strong>‌<ul>
<li>通过 <code>Hibernate Dialect</code> 适配不同数据库（如 MySQL、Oracle），切换数据库只需修改配置。</li>
</ul>
</li>
<li>‌<strong>高效性能</strong>‌<ul>
<li>提供一级缓存（Session 级别）、二级缓存（SessionFactory 级别）和查询缓存，减少数据库访问频率。</li>
<li>延迟加载（Lazy Loading）机制优化资源使用。</li>
</ul>
</li>
<li>‌<strong>简化事务管理</strong>‌<ul>
<li>与 Spring 框架无缝集成，支持声明式事务（<code>@Transactional</code>）。</li>
</ul>
</li>
</ol>
<h3 id="三、组件"><a href="#三、组件" class="headerlink" title="三、组件"></a>三、组件</h3><ol>
<li>‌<strong>配置文件</strong>‌<ul>
<li>‌**<code>hibernate.cfg.xml</code>**‌：全局配置数据库连接、缓存策略、Dialect 方言（不同于其他数据库的语言）等。</li>
<li>‌<strong>映射文件（<code>\*.hbm.xml</code>）或注解</strong>‌：定义对象与表的映射关系。</li>
</ul>
</li>
<li>‌<strong>核心接口与类</strong>‌<ul>
<li>‌**<code>SessionFactory</code>**‌：重量级对象，管理数据库连接池和二级缓存，全局唯一。</li>
<li>‌**<code>Session</code>**‌：轻量级对象，代表一次数据库会话，提供 CRUD 方法（如 <code>save()</code>, <code>get()</code>, <code>update()</code>）。</li>
<li>‌**<code>Transaction</code>**‌：管理事务的提交与回滚。</li>
<li>‌**<code>Query</code> &#x2F; <code>Criteria</code>**‌：执行 HQL（Hibernate Query Language）或 Criteria 查询。</li>
</ul>
</li>
</ol>
<h3 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h3><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Maven 依赖示例（Hibernate 5.x） --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.14.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p>**配置 <code>hibernate.cfg.xml</code>**‌</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接配置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- Dialect 配置 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 显示 SQL 语句 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 其他，可写可不写 --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 格式化sql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动建表  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载所有映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/pojo/User.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义实体类与映射</strong></p>
<ul>
<li><p>‌**注解方式（推荐）**‌：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="comment">// Getter &amp; Setter  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>操作数据库</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 1. 创建 SessionFactory  </span></span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>()  </span><br><span class="line">                .configure(<span class="string">&quot;hibernate.cfg.xml&quot;</span>)  </span><br><span class="line">                .buildSessionFactory();  </span><br><span class="line">        <span class="comment">// 2. 获取 Session  </span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession()) &#123;  </span><br><span class="line">            <span class="comment">// 3. 开启事务  </span></span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();  </span><br><span class="line">            <span class="comment">// 4. 插入数据  </span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  </span><br><span class="line">            user.setName(<span class="string">&quot;Alice&quot;</span>);  </span><br><span class="line">            session.save(user);  </span><br><span class="line">            <span class="comment">// 5. 查询数据  </span></span><br><span class="line">            <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> session.get(User.class, <span class="number">1L</span>);  </span><br><span class="line">            System.out.println(result.getName());  </span><br><span class="line">            <span class="comment">// 6. 提交事务  </span></span><br><span class="line">            tx.commit();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、‌Hibernate和JDBC区别"><a href="#五、‌Hibernate和JDBC区别" class="headerlink" title="五、‌Hibernate和JDBC区别"></a>五、‌<strong>Hibernate</strong>和JDBC区别</h3><table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>JDBC</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>抽象级别</strong>‌</td>
<td>面向对象（ORM）</td>
<td>面向 SQL（低层 API）</td>
</tr>
<tr>
<td>‌<strong>开发效率</strong>‌</td>
<td>高（自动映射、代码生成）</td>
<td>低（手动编写 SQL 和映射）</td>
</tr>
<tr>
<td>‌<strong>性能</strong>‌</td>
<td>需合理配置缓存和查询</td>
<td>直接控制，理论上更高效</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>复杂业务对象模型、快速开发</td>
<td>简单操作、高性能要求场景</td>
</tr>
</tbody></table>
<h3 id="六、Hibernate和MyBatis区别"><a href="#六、Hibernate和MyBatis区别" class="headerlink" title="六、Hibernate和MyBatis区别"></a>六、Hibernate和MyBatis区别</h3><table>
<thead>
<tr>
<th><strong>组件&#x2F;文件</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>MyBatis</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>实体类</strong>‌</td>
<td>使用 JPA 注解（如 <code>@Entity</code>, <code>@Table</code>）或 XML 映射文件定义对象与表的映射关系，需包含关联关系配置（如 <code>@OneToMany</code>）‌</td>
<td>实体类通常为 POJO，无需复杂注解（仅需字段与表字段对应），关联关系通过 SQL 或 ResultMap 手动处理‌</td>
</tr>
<tr>
<td>‌<strong>配置文件</strong>‌</td>
<td>全局配置文件 <code>hibernate.cfg.xml</code>，管理数据库连接、缓存、Dialect 等‌</td>
<td>全局配置文件 <code>mybatis-config.xml</code>，定义数据源、插件及全局设置，每个 Mapper 接口需对应 XML 文件或注解 SQL‌</td>
</tr>
<tr>
<td>‌<strong>数据访问层</strong>‌</td>
<td>DAO 类通过 <code>Session</code> 操作数据库（如 <code>session.save()</code>），方法中无需显式 SQL‌</td>
<td>Mapper 接口与 XML 文件（或注解）绑定，需手动编写 SQL 语句及结果映射（如 <code>&lt;select id=&quot;...&quot;&gt;</code>）‌</td>
</tr>
<tr>
<td>‌<strong>工具类</strong>‌</td>
<td>需 <code>SessionFactory</code> 管理会话（如 <code>HibernateUtil</code>）‌</td>
<td>需 <code>SqlSessionFactory</code> 管理会话（如 <code>MyBatisUtil</code>），通常与 Spring 集成后自动管理‌</td>
</tr>
</tbody></table>
<ul>
<li><p>‌<strong>Hibernate</strong>‌</p>
<ul>
<li>‌<strong>自动 SQL 生成</strong>‌：通过实体类注解自动生成 DDL&#x2F;DML，减少手动 SQL 编写‌。</li>
<li>‌<strong>关联关系管理</strong>‌：支持级联操作（如 <code>CascadeType.ALL</code>）和延迟加载（<code>FetchType.LAZY</code>）‌。</li>
<li>‌<strong>事务整合</strong>‌：通常与 Spring 的 <code>@Transactional</code> 注解结合使用‌。</li>
</ul>
</li>
<li><p>‌<strong>MyBatis</strong>‌</p>
<ul>
<li>‌<strong>SQL 灵活性</strong>‌：需手动编写 SQL，支持动态 SQL（如 <code>&lt;if&gt;</code>, <code>&lt;foreach&gt;</code>）及存储过程调用‌。</li>
<li>‌<strong>结果集映射</strong>‌：通过 <code>&lt;resultMap&gt;</code> 或注解显式定义字段与对象属性的映射关系‌。</li>
<li>‌<strong>插件扩展</strong>‌：支持自定义插件（如分页插件 PageHelper）优化 SQL 执行流程‌。</li>
</ul>
</li>
<li><p>‌<strong>Hibernate</strong>‌</p>
<ul>
<li>‌<strong>适用场景</strong>‌：领域模型复杂、需快速开发且对 SQL 优化要求较低的项目（如企业内部系统）‌。</li>
<li>‌<strong>结构特点</strong>‌：代码简洁，ORM 配置集中，但可能因自动生成 SQL 导致性能优化困难‌。</li>
</ul>
</li>
<li><p>‌<strong>MyBatis</strong>‌</p>
<ul>
<li>‌<strong>适用场景</strong>‌：需高度 SQL 控制、复杂查询优化或遗留数据库迁移的项目（如互联网高并发系统）‌。</li>
<li>‌<strong>结构特点</strong>‌：SQL 分散在 XML 或注解中，灵活性高但维护成本增加‌。</li>
</ul>
</li>
</ul>
<h3 id="七、模板"><a href="#七、模板" class="headerlink" title="七、模板"></a>七、模板</h3><ol>
<li><p><strong>Maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hibernate 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.14.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（hibernate.cfg.xml）</strong></p>
<p>配置数据库连接和实体类：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test?useSSL=false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Hibernate 行为配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 自动更新表结构 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注册实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.example.model.User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类（User.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;email&quot;, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须有无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter &amp; Setter</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Hibernate 工具类（HibernateUtil.java）</strong></p>
<p>管理 <code>SessionFactory</code> 和 <code>Session</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory <span class="title function_">buildSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StandardServiceRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardServiceRegistryBuilder</span>()</span><br><span class="line">                .configure(<span class="string">&quot;hibernate.cfg.xml&quot;</span>) <span class="comment">// 默认加载类路径下的配置文件</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetadataSources</span>(registry).buildMetadata().buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            StandardServiceRegistryBuilder.destroy(registry);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;初始化 SessionFactory 失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title function_">getSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        getSessionFactory().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>DAO 层（UserDao.java）</strong></p>
<p>实现增删改查操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.save(user);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID查询用户</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            <span class="keyword">return</span> session.get(User.class, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.update(user);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> HibernateUtil.getSessionFactory().openSession()) &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> session.get(User.class, id);</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                session.delete(user);</span><br><span class="line">            &#125;</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HibernateException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tx != <span class="literal">null</span>) tx.rollback();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用示例（Main.java）</strong></p>
<p>测试 CRUD 操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        user1.setEmail(<span class="string">&quot;alice@example.com&quot;</span>);</span><br><span class="line">        userDao.save(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.getById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询结果: &quot;</span> + user2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新用户</span></span><br><span class="line">        user2.setEmail(<span class="string">&quot;new_alice@example.com&quot;</span>);</span><br><span class="line">        userDao.update(user2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除用户</span></span><br><span class="line">        userDao.delete(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 SessionFactory</span></span><br><span class="line">        HibernateUtil.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>/blog2025.github.io/2025/03/19/JAVA/</url>
    <content><![CDATA[<h3 id="一-Java历史"><a href="#一-Java历史" class="headerlink" title="一.Java历史"></a>一.Java历史</h3><ol>
<li><p>运行流程：</p>
<p>&emsp;&emsp;代码——&gt;字节码——&gt;虚拟机——&gt;执行（一次编写，处处运行）</p>
</li>
<li><p>版本：</p>
<p>&emsp;&emsp;Java SE：标准版（JVM和标准库）；</p>
<p>&emsp;&emsp;Java EE：企业版（SE基础上增加大量API和库）Spring框架等；</p>
<p>&emsp;&emsp;Java ME：嵌入式版本。</p>
</li>
<li><p>JDK：（开发工具包）包含JRE、编译器、调试器等，</p>
<p>&emsp;&emsp;JRE：（开发环境）运行Java字节码的虚拟机、库。</p>
</li>
<li><p>第一个Java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
</ol>
<h3 id="二、Java基础"><a href="#二、Java基础" class="headerlink" title="二、Java基础"></a>二、Java基础</h3><ol>
<li><h4 id="命名格式："><a href="#命名格式：" class="headerlink" title="命名格式："></a>命名格式：</h4><p>类名格式：大写字母开头+数字&#x2F;下划线</p>
<p>方法名格式：小写字母开头+数字&#x2F;下划线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()：方法名</span><br><span class="line">String[]：参数类型</span><br><span class="line">args：参数名</span><br><span class="line"></span><br><span class="line">HelloWorld.java（源码）—编译—&gt;HelloWorld.class（字节码）—执行—&gt;JVM</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内容</span></span><br><span class="line"><span class="comment">/*内容*/</span></span><br><span class="line"><span class="comment">/**内容*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + a);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h4><table>
<thead>
<tr>
<th>类型</th>
<th></th>
<th>字节数</th>
<th>格式</th>
<th>包装（引用类型）</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>byte</td>
<td>1</td>
<td>127</td>
<td>java.lang.Byte</td>
</tr>
<tr>
<td></td>
<td>short</td>
<td>2</td>
<td>100</td>
<td>java.lang.Short</td>
</tr>
<tr>
<td></td>
<td>int</td>
<td>4</td>
<td>100</td>
<td>java.lang.Integer</td>
</tr>
<tr>
<td></td>
<td>long</td>
<td>8</td>
<td>100L</td>
<td>java.lang.Long</td>
</tr>
<tr>
<td>浮点型</td>
<td>float</td>
<td>4</td>
<td>3.14f</td>
<td>java.lang.Float</td>
</tr>
<tr>
<td></td>
<td>double</td>
<td>8</td>
<td>3.14</td>
<td>java.lang.Double</td>
</tr>
<tr>
<td>字符型</td>
<td>char</td>
<td>2</td>
<td></td>
<td>java.lang.Character</td>
</tr>
<tr>
<td>布尔型</td>
<td>boolean</td>
<td>1</td>
<td>true&#x2F;false</td>
<td>java.lang.Boolean</td>
</tr>
</tbody></table>
</li>
<li><h4 id="引用数据类型："><a href="#引用数据类型：" class="headerlink" title="引用数据类型："></a>引用数据类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String</span><br><span class="line"><span class="type">String</span> <span class="variable">sentence</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="省略变量类型："><a href="#省略变量类型：" class="headerlink" title="省略变量类型："></a>省略变量类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 代替方法名</span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> 方法名();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="运算："><a href="#运算：" class="headerlink" title="运算："></a>运算：</h4><p>简写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a += <span class="number">100</span>；等价于a = a + <span class="number">100</span>；</span><br><span class="line">a -+ <span class="number">100</span>；等价于a = a — <span class="number">100</span>；</span><br><span class="line">a *= <span class="number">100</span>；等价于a = a * <span class="number">100</span>；</span><br><span class="line">a /= <span class="number">100</span>；等价于a = a / <span class="number">100</span>；</span><br></pre></td></tr></table></figure>

<p>自增自减：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>；</span><br><span class="line">a++;	<span class="comment">//先引用a，再+1</span></span><br><span class="line">a--;	<span class="comment">//先引用a，再100</span></span><br><span class="line">++a;	<span class="comment">//先+1，再引用a</span></span><br><span class="line">--a;	<span class="comment">//先-1，再引用a</span></span><br></pre></td></tr></table></figure>

<p>三元运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt; <span class="number">1</span> ? a : <span class="number">50</span></span><br><span class="line">    判断a是否大于<span class="number">1</span>，若大于<span class="number">1</span>，则b = a，否则b = <span class="number">50</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="字符和字符串："><a href="#字符和字符串：" class="headerlink" title="字符和字符串："></a>字符和字符串：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">\：转义字符</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[个数];</span><br><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;等价于<span class="type">int</span> [] 变量名 = &#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&quot;王麻子&quot;</span>;	<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h3><ol>
<li><h4 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();	<span class="comment">//读取输入并获取字符串</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();		<span class="comment">//读取输入并获取整数</span></span><br><span class="line">输出：</span><br><span class="line">    System.out.println();		<span class="comment">//输出换行</span></span><br><span class="line">	System.out.print();			<span class="comment">//输出</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="if条件："><a href="#if条件：" class="headerlink" title="if条件："></a>if条件：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断相等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==		：比较值</span><br><span class="line">equals()：比较内存地址</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Switch多重选择："><a href="#Switch多重选择：" class="headerlink" title="Switch多重选择："></a>Switch多重选择：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="while循环："><a href="#while循环：" class="headerlink" title="while循环："></a>while循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先判断再执行：</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="do-while循环："><a href="#do-while循环：" class="headerlink" title="do while循环："></a>do while循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先执行再判断：</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;布尔表达式;自增或自减)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for each循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量类型 变量值 : 循环对象)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a : num)&#123;</span><br><span class="line">    sout(a);</span><br><span class="line">&#125;</span><br><span class="line">结果为：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="break、continue、return"><a href="#break、continue、return" class="headerlink" title="break、continue、return"></a>break、continue、return</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>：终止所有循环，跳出循环体。</span><br><span class="line"><span class="keyword">continue</span>：终止本次循环，开始下一次循环。</span><br><span class="line"><span class="keyword">return</span>：结束方法。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、数组："><a href="#四、数组：" class="headerlink" title="四、数组："></a>四、数组：</h3><ol>
<li><h4 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i&lt;num.length ; i++)&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num[i];</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n : num)&#123;</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java 标准库遍历：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sout(Arrays.toString(num));</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">各类排序算法：</span><br><span class="line">插入排序：</span><br><span class="line">    - 直接插入排序</span><br><span class="line">    - 希尔排序</span><br><span class="line">交换排序：</span><br><span class="line">    - 冒泡排序</span><br><span class="line">    - 快速排序</span><br><span class="line">选择排序：</span><br><span class="line">    - 简单选择排序</span><br><span class="line">    - 树形选择排序</span><br><span class="line">    - 堆排序</span><br><span class="line">归并排序</span><br><span class="line">基数排序 </span><br><span class="line"></span><br><span class="line">典型：</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num[i];</span><br><span class="line">	num[i] = num2[i+<span class="number">1</span>];</span><br><span class="line">	num2[i+<span class="number">1</span>] = temp;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java 标准库排序：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">Arrays.sort(num);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="多维数组："><a href="#多维数组：" class="headerlink" title="多维数组："></a>多维数组：</h4><p>二维数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多维数组从0开始</span><br><span class="line"> 	arr[0][0],arr[0][1],arr[0][2];</span><br><span class="line">    arr[1][0],arr[1][1],arr[1][2];</span><br><span class="line">	arr[2][0],arr[2][1],arr[2][2];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[][] num = new int[3][4];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] num = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">调用：sout(num[<span class="number">1</span>][<span class="number">2</span>]);=&gt;<span class="number">6</span></span><br><span class="line">    </span><br><span class="line">打印二维数组：<span class="keyword">for</span> each</span><br><span class="line"><span class="title function_">for</span><span class="params">(<span class="type">int</span>[] arr : num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n : arr)&#123;</span><br><span class="line">        sout(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java标准库打印：</span><br><span class="line">sout(Arrays.deepToString(num));</span><br></pre></td></tr></table></figure>

<p>三维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][][] num = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">16</span>,<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="number">18</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印：</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[][] arr : num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] arr2 : arr)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n : arr2)&#123;</span><br><span class="line">                sout(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h3><ol>
<li><h4 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:所有类可见</span><br><span class="line"><span class="keyword">private</span>:同一类可见（该种类只能通过get、set方法被外部类访问）</span><br><span class="line"><span class="keyword">protected</span>:对同一包内的类和所有子类可见</span><br><span class="line">    <span class="keyword">static</span>: 静态变量、方法</span><br><span class="line">    <span class="keyword">final</span>: 常量方法、类、变量（常量方法无法被继承、常量无法被修改）</span><br><span class="line">    <span class="keyword">abstract</span>: 抽象类和抽象方法</span><br><span class="line">    <span class="keyword">synchronized</span>: 该方法同一时间只能被一个线程访问</span><br><span class="line">    <span class="keyword">transient</span>: 不会持久化变量</span><br><span class="line">    <span class="keyword">volatile</span>: 线程访问中强制同步变量值</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="类：（对象的蓝图-原型）"><a href="#类：（对象的蓝图-原型）" class="headerlink" title="类：（对象的蓝图\原型）"></a>类：（对象的蓝图\原型）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="对象：（类的实例化）"><a href="#对象：（类的实例化）" class="headerlink" title="对象：（类的实例化）"></a>对象：（类的实例化）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span>  <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">访问成员：</span><br><span class="line">ps.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">ps.age = <span class="number">10</span>;</span><br><span class="line">ps.<span class="keyword">do</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="this关键字：（引用当前对象的实例）"><a href="#this关键字：（引用当前对象的实例）" class="headerlink" title="this关键字：（引用当前对象的实例）"></a>this关键字：（引用当前对象的实例）</h4><p>this必须在构造方法的首行，(static)静态方法中不能使用this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）指向当前对象的成员变量</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name1)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name1; <span class="comment">// this.name 是成员变量，name1 是参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）在构造方法中调用其他构造方法</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(<span class="number">10</span>, <span class="number">10</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.width = width;</span><br><span class="line">            <span class="built_in">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">（<span class="number">3</span>）<span class="built_in">this</span>在getter和setter中使用（JavaBean，在IDE中可以快速生成getter和setter）</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            </span><br><span class="line">            ps.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setAge(<span class="number">10</span>);</span><br><span class="line">            sout(ps.getName()+ps.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">	&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="静态方法和动态方法区别："><a href="#静态方法和动态方法区别：" class="headerlink" title="静态方法和动态方法区别："></a>静态方法和动态方法区别：</h4><table>
<thead>
<tr>
<th>静态方法</th>
<th>动态方法</th>
</tr>
</thead>
<tbody><tr>
<td>使用static修饰，属于类本身</td>
<td>不使用static修饰，属于对象实例</td>
</tr>
<tr>
<td>通过类名调用<br>MathUtils.add(1,1)</td>
<td>通过对象实例调用<br>Person ps &#x3D; new Pserson()<br>ps.getName()</td>
</tr>
<tr>
<td>只能访问静态变量、方法</td>
<td>可以访问实例变量、方法和静态变量、方法</td>
</tr>
<tr>
<td>不支持多态，无法重写</td>
<td>支持多态，可以被重写</td>
</tr>
</tbody></table>
</li>
<li><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numAdd</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;和为&quot;</span>+numAdd(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">HelloMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        HelloMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="构造方法：-方法名与类名相同"><a href="#构造方法：-方法名与类名相同" class="headerlink" title="构造方法：(方法名与类名相同)"></a>构造方法：(方法名与类名相同)</h4><p>无参数构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">		name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">        sout(name +<span class="string">&quot;&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>含参数构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//含参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="方法重载-Overload：（方法名称相同，参数不同）"><a href="#方法重载-Overload：（方法名称相同，参数不同）" class="headerlink" title="方法重载 Overload：（方法名称相同，参数不同）"></a>方法重载 Overload：（方法名称相同，参数不同）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三;</span></span><br><span class="line"><span class="string">    private int age=10;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1()&#123;</span></span><br><span class="line"><span class="string">        sout(&quot;</span>hah1<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1(String name)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func2(String name, int age)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot; + age)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><p>子类无法访问父类的private字段或者private方法，需要把private改为protected</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ww</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">        </span><br><span class="line">        dog1.ww();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="方法重写-Override：子类的方法覆盖父类中的方法。"><a href="#方法重写-Override：子类的方法覆盖父类中的方法。" class="headerlink" title="方法重写 Override：子类的方法覆盖父类中的方法。"></a>方法重写 Override：子类的方法覆盖父类中的方法。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="重写-运行时执行-和重载-编译时执行-的区别："><a href="#重写-运行时执行-和重载-编译时执行-的区别：" class="headerlink" title="重写(运行时执行)和重载(编译时执行)的区别："></a>重写(运行时执行)和重载(编译时执行)的区别：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD.png" alt="重写和重载"></p>
</li>
<li><h4 id="super关键字：（访问父类-超类中的方法、构造器、变量）"><a href="#super关键字：（访问父类-超类中的方法、构造器、变量）" class="headerlink" title="super关键字：（访问父类\超类中的方法、构造器、变量）"></a>super关键字：（访问父类\超类中的方法、构造器、变量）</h4><p><strong>super()必须在构造器第一行‌：与this()冲突，二者不能共存。</strong></p>
<p>(static)静态方法中不能使用super</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）访问父类的成员变量		</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">printNames</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">super</span>.name); <span class="comment">// 父类的name：输出 &quot;Animal&quot;</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);  <span class="comment">// 子类的name：输出 &quot;Dog&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）调用父类的方法</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.makeSound(); <span class="comment">// 先调用父类方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">3</span>）调用父类的构造器</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String breed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name); <span class="comment">// 调用父类有参构造器</span></span><br><span class="line">            <span class="built_in">this</span>.breed = breed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="抽象类和抽象方法-Abstract："><a href="#抽象类和抽象方法-Abstract：" class="headerlink" title="抽象类和抽象方法 Abstract："></a>抽象类和抽象方法 Abstract：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">抽象类：无法实例化的类</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类无法实例化，需要通过继承该抽象类才能访问该抽象类的成员：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象构造函数</span></span><br><span class="line">    Animal()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//重写抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现抽象构造函数</span></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用抽象方法</span></span><br><span class="line">		<span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//抽象类无法实例化,需要通过继承该抽象类才能访问该抽象类的成员：</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//实现非抽象方法</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="接口-Interface：-一个类可以实现多个接口"><a href="#接口-Interface：-一个类可以实现多个接口" class="headerlink" title="接口 Interface：(一个类可以实现多个接口)"></a>接口 Interface：(一个类可以实现多个接口)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.sleep();</span><br><span class="line">        dog.eat(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h4><p>运行时多态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法重写Override   </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Dog</span>  <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">          dog.eat();</span><br><span class="line"></span><br><span class="line">          <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">          cat.eat();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>编译时多态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法重载：方法名相同，参数不同</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;food&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food,String drink)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;鱼&quot;</span>+drink+<span class="string">&quot;水&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="封装：（将字段和方法绑定到单个类中）"><a href="#封装：（将字段和方法绑定到单个类中）" class="headerlink" title="封装：（将字段和方法绑定到单个类中）"></a>封装：（将字段和方法绑定到单个类中）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常用<span class="keyword">private</span>和<span class="keyword">protected</span>隐藏数据和方法，用于实现封装</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="内部类：（在一个类中定义另一个类）"><a href="#内部类：（在一个类中定义另一个类）" class="headerlink" title="内部类：（在一个类中定义另一个类）"></a>内部类：（在一个类中定义另一个类）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;内部类&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建外部类Outer的对象</span></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//使用外部类Outer创建内部类Inner的对象</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        sout(inner.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）"><a href="#匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）" class="headerlink" title="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）"></a>匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">havePet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建匿名类，继承Animal</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">                sout(<span class="string">&quot;匿名类内部+吃饭&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        ps.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======&gt;匿名类内部+吃饭</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="枚举类："><a href="#枚举类：" class="headerlink" title="枚举类："></a>枚举类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span>&#123;</span><br><span class="line">    Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常用工具类："><a href="#常用工具类：" class="headerlink" title="常用工具类："></a>常用工具类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math: 计算</span><br><span class="line">Random: 随机数</span><br><span class="line">DateUtils: 时间</span><br><span class="line">StringBuilder: 处理字符串(字符串拼装、增删改查、反转、)====&gt;非线程安全(常用)</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">1024</span>);  <span class="comment">// 初始容量1024</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">        .append(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">        .append(user.getName())</span><br><span class="line">        .append(<span class="string">&quot;! Your age is &quot;</span>)</span><br><span class="line">        .append(user.getAge())</span><br><span class="line">        .toString();</span><br><span class="line">=======&gt;Hello,Your age is </span><br><span class="line">StringBuffer: 多线程====&gt;线程安全(<span class="keyword">synchronized</span>保证线程安全)</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="反射：reflection"><a href="#反射：reflection" class="headerlink" title="反射：reflection"></a>反射：reflection</h4><p>允许程序在运行时动态<strong>获取类的信息并操作对象</strong>，</p>
<p>包括：类信息(类名、父类、接口、字段、方法、构造方法)；</p>
<p>&emsp;&emsp;&emsp;操作对象(创建实例、调用方法、修改字段值)；</p>
<p>&emsp;&emsp;&emsp;访问权限。</p>
<p>应用于：<strong>Spring依赖注入</strong>、动态配置与插件开发、动态代理与Spring AOP编程(日志和事务)、测试框架(<strong>JUnit</strong>自动运行测试方法)、<strong>序列化与反序列化(JSON&#x2F;XML)</strong>。</p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-reflection.html">链接</a></p>
</li>
</ol>
<h3 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h3><ol>
<li><h4 id="异常层次及类型："><a href="#异常层次及类型：" class="headerlink" title="异常层次及类型："></a>异常层次及类型：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%BC%82%E5%B8%B8.png"></p>
</li>
<li><h4 id="捕获异常："><a href="#捕获异常：" class="headerlink" title="捕获异常："></a>捕获异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType e<span class="comment">/*异常类型*/</span>)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e2)&#123;</span><br><span class="line"></span><br><span class="line">&#125;...<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1 | 异常类型 e2)&#123;</span><br><span class="line">	捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="throw抛出异常："><a href="#throw抛出异常：" class="headerlink" title="throw抛出异常："></a>throw抛出异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">实例化异常，再抛出异常</span><br><span class="line">例子：</span><br><span class="line">    <span class="type">NullPointerException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">	<span class="keyword">throw</span> e;</span><br><span class="line">或者：</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="throws声明其中可能发生的异常类型："><a href="#throws声明其中可能发生的异常类型：" class="headerlink" title="throws声明其中可能发生的异常类型："></a>throws声明其中可能发生的异常类型：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() <span class="keyword">throws</span> 异常类型<span class="number">1</span>，异常类型<span class="number">2</span>，异常类型<span class="number">3</span>&#123;</span><br><span class="line">    </span><br><span class="line">	&#125;</span><br><span class="line">例：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">继承RuntimeException或者Exception实现自定义异常。</span><br><span class="line">自定义的异常需要提供多个构造方法。</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message,Throwable cause)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">BaseException</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="断言-Assertion：调试"><a href="#断言-Assertion：调试" class="headerlink" title="断言 Assertion：调试"></a>断言 Assertion：调试</h4><p>参考:<a href="https://liaoxuefeng.com/books/java/exception/assert/index.html">链接</a></p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-assertions.html">链接</a></p>
</li>
<li><h4 id="日志-Logging：Log4j"><a href="#日志-Logging：Log4j" class="headerlink" title="日志 Logging：Log4j"></a>日志 Logging：Log4j</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(类名.class.getName());</span><br></pre></td></tr></table></figure>

<p>参考:<a href="https://liaoxuefeng.com/books/java/exception/jdk-logging/index.html">链接</a></p>
<p>参考:<a href="https://www.cainiaojc.com/java/java-logging.html">链接</a></p>
</li>
</ol>
<h3 id="七、泛型"><a href="#七、泛型" class="headerlink" title="七、泛型"></a>七、泛型</h3><p>&emsp;&emsp;模板：用来适应任意类型，不必对类型进行强制转换。</p>
<h3 id="八、集合"><a href="#八、集合" class="headerlink" title="八、集合"></a>八、集合</h3><p><img src="/blog2025.github.io/2025/03/19/JAVA/JAVA%E9%9B%86%E5%90%88.png"></p>
<table>
<thead>
<tr>
<th>Collection</th>
<th>包含</th>
</tr>
</thead>
<tbody><tr>
<td>List（有序可重复）</td>
<td>ArrayList(查)、LinkedList(增，删)、Vector、Stack</td>
</tr>
<tr>
<td>Set（无序不可重复）</td>
<td>HashSet(去重)(无序)、TreeSet(用于排序)(有序)</td>
</tr>
<tr>
<td>Queue</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><h4 id="Collection："><a href="#Collection：" class="headerlink" title="Collection："></a>Collection：</h4><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素插入到集合中</span><br><span class="line">size() - 返回集合的大小</span><br><span class="line">remove() - 从集合中删除指定的元素</span><br><span class="line">iterator() - 返回一个迭代器以访问集合的元素</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">removeAll() - 从集合中删除指定集合的所有元素</span><br><span class="line">clear() - 删除集合中的所有元素</span><br><span class="line">sort() - 排序</span><br><span class="line">shuffle() - 随机输出</span><br><span class="line">reverse() - 反转元素的顺序</span><br><span class="line">fill() - 用指定的值替换集合中的每个元素</span><br><span class="line">copy() - 创建从指定源到目标的元素副本</span><br><span class="line">swap() - 交换集合中两个元素的位置</span><br><span class="line">binarySearch() - 搜索指定元素，返回该元素在集合中的位置</span><br><span class="line">disjoint() - 检查两个集合是否包含一些公共元素</span><br><span class="line">frequency() - 返回元素在集合中存在的次数计数</span><br><span class="line">min() - 查找最小元素</span><br><span class="line">max() - 查找最大元素</span><br></pre></td></tr></table></figure>

<h5 id="1-1-List"><a href="#1-1-List" class="headerlink" title="1.1 List:"></a>1.1 List:</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将元素添加到列表</span><br><span class="line">addAll() - 将一个列表的所有元素添加到另一个</span><br><span class="line">get() - 有助于从列表中随机访问元素</span><br><span class="line">iterator() - 返回迭代器对象，该对象可用于顺序访问列表的元素</span><br><span class="line">set() - 更改列表的元素</span><br><span class="line">remove() - 从列表中删除一个元素</span><br><span class="line">removeAll() - 从列表中删除所有元素</span><br><span class="line">clear() - 从列表中删除所有元素（比removeAll()效率更高）</span><br><span class="line">size() - 返回列表的长度</span><br><span class="line">toArray() - 将列表转换为数组</span><br><span class="line">contains() -  如果列表包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">indexOf</span><span class="params">()</span> - 返回元素第一次出现的索引</span><br><span class="line">lastIndexOf() - 返回元素最后一次出现的索引</span><br><span class="line">addFirst() - 将指定的元素添加到链接列表的开头</span><br><span class="line">addLast() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">getFirst() - 返回第一个元素</span><br><span class="line">getLast() - 返回最后一个元素</span><br><span class="line">removeFirst() - 删除第一个元素</span><br><span class="line">removeLast() - 删除最后一个元素</span><br><span class="line">peek() - 返回链表的第一个元素（头）</span><br><span class="line">poll() - 返回并从链表中删除第一个元素   </span><br><span class="line">offer() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">toString() - 转换为字符串</span><br><span class="line">clone() - 创建相同的新数组列表</span><br></pre></td></tr></table></figure>

<p>创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Linkedlist</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h6 id="（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）"><a href="#（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）" class="headerlink" title="（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）"></a>（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现ArrayList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//②使用ArrayList创建</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法①：for循环遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numbers.size();i++ )&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法②：迭代器遍历所有元素</span></span><br><span class="line">        <span class="comment">//boolean hasNext() - 判断是否有下一个元素；</span></span><br><span class="line">        <span class="comment">//next() - 返回下一个元素</span></span><br><span class="line">        <span class="comment">//remove() -删除next()返回的最后一个元素</span></span><br><span class="line">        <span class="comment">//forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Integer&gt; num = numbers.iterator();numbers.hasNext();)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> num.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法③：迭代器for each遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(String s : numbers)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法④：while循环</span></span><br><span class="line">        Iterator&lt;Integer&gt;  num = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">            System.out.print(num.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）LinkedList："><a href="#（2）LinkedList：" class="headerlink" title="（2）LinkedList："></a>（2）LinkedList：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现LinkedList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">//②使用LinkedList创建</span></span><br><span class="line">        LinkedList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用indexOf()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> numbers.indexOf(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;位置3的元素是 &quot;</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//和ArrayList遍历相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>List转换为Array：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<p>Array转换为List：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);<span class="comment">//JDK11之后</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(array);<span class="comment">//JDK11之前</span></span><br></pre></td></tr></table></figure>

<h6 id="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"><a href="#（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）" class="headerlink" title="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"></a>（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）</h6><p>创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector&lt;Type&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vector&lt;String&gt; mammals= <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用add()方法</span></span><br><span class="line">        mammals.add(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        mammals.add(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用索引号</span></span><br><span class="line">        mammals.add(<span class="number">2</span>, <span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Vector: &quot;</span> + mammals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 addAll() 方法</span></span><br><span class="line">        Vector&lt;String&gt; animals = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        animals.add(<span class="string">&quot;Crocodile&quot;</span>);</span><br><span class="line"></span><br><span class="line">        animals.addAll(mammals);</span><br><span class="line">        System.out.println(<span class="string">&quot;New Vector: &quot;</span> + animals);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-Set："><a href="#1-2-Set：" class="headerlink" title="1.2 Set："></a>1.2 Set：</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素添加到集合中</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">iterator() -返回一个迭代器，该迭代器可用于顺序访问集合中的元素</span><br><span class="line">remove() - 从集合中移除指定的元素</span><br><span class="line">removeAll() - 从存在于另一个指定集合中的集合中删除所有元素</span><br><span class="line">keepAll()  -保留集合中所有还存在于另一个指定集合中的所有元素</span><br><span class="line">clear() - 从集合中删除所有元素</span><br><span class="line">size() - 返回集合的长度（元素数）</span><br><span class="line">toArray() - 返回包含集合中所有元素的数组</span><br><span class="line">contains() -  如果集合包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">containsAll</span><span class="params">()</span> - 如果集合包含指定集合的所有元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">hashCode</span><span class="params">()</span> -返回哈希码值（集合中元素的地址）</span><br><span class="line">retainAll() - 找出两个集合中的相同值</span><br></pre></td></tr></table></figure>

<h6 id="（1）HashSet："><a href="#（1）HashSet：" class="headerlink" title="（1）HashSet："></a>（1）HashSet：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到set1</span></span><br><span class="line">        set1.add(<span class="number">2</span>);</span><br><span class="line">        set1.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set1: &quot;</span> + set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用HashSet类创建另一个集合</span></span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set2.add(<span class="number">1</span>);</span><br><span class="line">        set2.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set2: &quot;</span> + set2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个集合的并集</span></span><br><span class="line">        set2.addAll(set1);</span><br><span class="line">        System.out.println(<span class="string">&quot;并集是: &quot;</span> + set2);</span><br><span class="line">        <span class="comment">//交集</span></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        <span class="comment">//差集</span></span><br><span class="line">        set1.removeAll(set2);</span><br><span class="line">        <span class="comment">//子集</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> set1.containsAll(set2);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//①迭代器循环：</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//②for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set1)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）TreeSet："><a href="#（2）TreeSet：" class="headerlink" title="（2）TreeSet："></a>（2）TreeSet：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将元素添加到set集合</span></span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用iterator()访问元素</span></span><br><span class="line">        System.out.print(<span class="string">&quot;使用iterator()访问元素: &quot;</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterate = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterate.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterate.next());</span><br><span class="line">            System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-迭代器："><a href="#1-3-迭代器：" class="headerlink" title="1.3 迭代器："></a>1.3 迭代器：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> - 判断是否有下一个元素；</span><br><span class="line">next() - 返回下一个元素</span><br><span class="line">remove() -删除next()返回的最后一个元素</span><br><span class="line">forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; num = numbers.iterator();</span><br><span class="line"><span class="comment">//迭代器1</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    System.out.print(num.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器2</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    num.forEachRemaining((value)-&gt;System.out.print(value+<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ListIterator:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hasNext() - 如果列表中存在元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span> - 返回列表的下一个元素</span><br><span class="line">nextIndex() - 返回next()方法将返回的元素的索引</span><br><span class="line">previous() - 返回列表的前一个元素</span><br><span class="line">previousIndex()- 返回previous()方法将返回的元素的索引</span><br><span class="line">remove()- 删除由next()或previous()返回的元素</span><br><span class="line">set() - 将next()或previous()返回的元素替换为指定的元素</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个ArrayList</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ListIterator的实例</span></span><br><span class="line">        ListIterator&lt;Integer&gt; iterate = numbers.listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用next()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> iterate.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素: &quot;</span> + number1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用nextIndex()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> iterate.nextIndex();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素位置: &quot;</span> + index1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用hasNext()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还有下一个元素吗? &quot;</span> + iterate.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-队列Queue：先进先出"><a href="#1-4-队列Queue：先进先出" class="headerlink" title="1.4 队列Queue：先进先出"></a>1.4 队列Queue：先进先出</h5><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add() - 将指定的元素插入队列。如果任务成功，则add()返回<span class="literal">true</span>，否则将引发异常。</span><br><span class="line">offer() - 将指定的元素插入队列。如果任务成功，则offer()返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line">element() - 返回队列的开头。如果队列为空，则引发异常。</span><br><span class="line">peek() - 返回队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">remove() - 返回并删除队列的头部。如果队列为空，则引发异常。</span><br><span class="line">poll() - 返回并删除队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">    </span><br><span class="line">Queue和PriorityQueue区别：</span><br><span class="line">    PriorityQueue的出队顺序与元素的优先级有关。</span><br><span class="line">    PriorityQueue 调用 remove()或 poll()方法，返回的总是优先级最高的元素。</span><br><span class="line">PriorityQueue的优先级默认（必须实现Comparable接口）为按照字符，但可以通过Comparator实现自定义。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Queue 使用LinkedList 类</span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 使用 ArrayDeque 创建</span></span><br><span class="line">		Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">// 使用PriorityQueue类创建队列 </span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加元素到 Queue</span></span><br><span class="line">        numbers.offer(<span class="number">1</span>);</span><br><span class="line">        numbers.offer(<span class="number">2</span>);</span><br><span class="line">        numbers.offer(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Queue: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问队列的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">accessedNumber</span> <span class="operator">=</span> numbers.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素： &quot;</span> + accessedNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队列中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素： &quot;</span> + removedNumber);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的 Queue： &quot;</span> + numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-栈Stack：先进后出"><a href="#1-5-栈Stack：先进后出" class="headerlink" title="1.5 栈Stack：先进后出"></a>1.5 栈Stack：先进后出</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;Type&gt; stacks = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到Stack</span></span><br><span class="line">        animals.push(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Stack: &quot;</span> + animals);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除堆栈元素，后进先出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从顶部访问元素，后进先出的原则</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;顶部元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//搜索元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> animals.search(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素Horse的位置: &quot;</span> + position);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//检查堆栈是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> animals.empty();</span><br><span class="line">        System.out.println(<span class="string">&quot;堆栈是空的吗? &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-其他"><a href="#1-6-其他" class="headerlink" title="1.6 其他"></a>1.6 其他</h5><p>双端队列Deque：参考:<a href="https://www.cainiaojc.com/java/java-deque.html">链接</a></p>
<p>堆栈ArrayDeque：参考:<a href="https://www.cainiaojc.com/java/java-arraydeque.html">链接</a></p>
</li>
<li><h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4><table>
<thead>
<tr>
<th>Map</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>HashMap（无序）（键值映射）</td>
<td></td>
</tr>
<tr>
<td>TreeMap（有序）（用于排序）</td>
<td></td>
</tr>
</tbody></table>
<p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Key, Value&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map包含Collection的所有方法，自己特殊方法：</span><br><span class="line">put(K,V) - 将键K和值V的关联插入到map中。如果键已经存在，则新值将替换旧值。</span><br><span class="line">putAll() - 将指定Map集合中的所有条目插入此Map集合中。</span><br><span class="line">putIfAbsent(K,V) - 如果键K尚未与value关联，则插入关联V。</span><br><span class="line">get(K) - 返回与指定键K关联的值。如果找不到该键，则返回<span class="literal">null</span>。</span><br><span class="line">getOrDefault(K,defaultValue) - 返回与指定键K关联的值。如果找不到键，则返回defaultValue。</span><br><span class="line">containsKey(K） - 检查指定的键K是否在map中。</span><br><span class="line">containsValue(V) - 检查指定的值V是否存在于map中。</span><br><span class="line">replace(K,V) - 将键K的值替换为新的指定值V。</span><br><span class="line">replace(K,oldValue,newValue) - 仅当键K与值oldValue相关联时，才用新值newValue替换键K的值。</span><br><span class="line">replaceAll(function) - 用指定函数的结果替换映射的每个值</span><br><span class="line">remove(K) - 从键K表示的Map中删除条目。</span><br><span class="line">remove(K,V) - 从Map集合中删除键K与值V相关联的条目。。</span><br><span class="line">keySet() -返回Map集合中存在的所有键的集合。</span><br><span class="line">values() -返回一组包含在Map集合中的所有值。</span><br><span class="line">entrySet() -返回map中存在的所有键/值映射的集合。</span><br><span class="line">compute() - 使用指定的函数计算新值。然后将计算值与指定的键相关联。</span><br><span class="line">computeIfAbsent() - 如果指定的键没有映射到任何值，该方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">computeIfPresent() - 如果指定的键已经映射到任何值，此方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">merge() - 方法将指定的值与指定的键关联。</span><br><span class="line">clear()	- 从映射中删除所有条目</span><br><span class="line">isEmpty() -	检查map是否为空并返回布尔值</span><br><span class="line">size()	- 返回map的大小</span><br></pre></td></tr></table></figure>

<h5 id="2-1-HashMap："><a href="#2-1-HashMap：" class="headerlink" title="2.1 HashMap："></a>2.1 HashMap：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity,loadFactor);</span><br><span class="line"></span><br><span class="line">capacity - HashMap的容量为<span class="number">8</span>。意味着，它可以存储<span class="number">8</span>个条目。</span><br><span class="line">loadFactor -  hashmap的负载因子为<span class="number">0.6</span>。这意味着，每当哈希表被填满<span class="number">60</span>%时，条目就会被移动到一个新哈希表，其大小是原始哈希表的两倍。</span><br><span class="line"></span><br><span class="line">HashMap为空时的容量默认为<span class="number">16</span>，负载因子为<span class="number">0.75</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashMap类创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素插入map集合</span></span><br><span class="line">        numbers.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        numbers.put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Map: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Keys: &quot;</span> + numbers.keySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Values: &quot;</span> + numbers.values());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的条目</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Entries: &quot;</span> + numbers.entrySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> numbers.remove(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的值是: &quot;</span> + value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String key : numbers.keySet())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for each循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry : numbers.entrySet())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器循环</span></span><br><span class="line">        <span class="comment">/*key-value*/</span></span><br><span class="line">        Iterator&lt;Entry&lt;String, Integer&gt;&gt; it = numbers.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*key*/</span></span><br><span class="line">        Iterator&lt;String&gt; it2 = numbers.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.println(it2.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*value*/</span></span><br><span class="line">        Iterator&lt;Integer&gt; it3 = numbers.values().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">            System.out.println(it3.nexy());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-TreeMap："><a href="#2-2-TreeMap：" class="headerlink" title="2.2 TreeMap："></a>2.2 TreeMap：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeMap创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; values = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入元素到map</span></span><br><span class="line">        values.put(<span class="string">&quot;Second&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        values.put(<span class="string">&quot;First&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用TreeMap创建map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换值</span></span><br><span class="line">        values.replace(<span class="string">&quot;First&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        values.replace(<span class="string">&quot;Second&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新的Map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedValue</span> <span class="operator">=</span> values.remove(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的值: &quot;</span> + removedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-其他"><a href="#2-3-其他" class="headerlink" title="2.3 其他"></a>2.3 其他</h5><p>双向链表LinkedHashMap：<a href="https://www.cainiaojc.com/java/java-linkedhashmap.html">链接</a></p>
</li>
</ol>
<h3 id="九、IO流"><a href="#九、IO流" class="headerlink" title="九、IO流"></a>九、IO流</h3><ol>
<li><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">字节流<span class="type">byte</span>：InputStream、OutputStream</span><br><span class="line">字符流<span class="type">char</span>：Reader、Writer</span><br><span class="line"></span><br><span class="line">同步：数据返回——&gt;执行后续代码，（代码编写简单，但CPU执行效率低。）上述的皆为同步。</span><br><span class="line">异步：发出请求——&gt;执行后续代码，（代码编写复杂，但CPU执行效率高。）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="File文件："><a href="#File文件：" class="headerlink" title="File文件："></a>File文件：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用路径创建File对象 </span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(String pathName);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">createNewFile() - 创建文件</span><br><span class="line">read() - 读取文件</span><br><span class="line">write() - 写入文件</span><br><span class="line">delete() - 删除文件</span><br><span class="line">    </span><br><span class="line">读文件：</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;文件名&quot;</span>)	<span class="comment">//创建Reader</span></span><br><span class="line">fr.read(字符)	<span class="comment">//读取字符</span></span><br><span class="line">fr.close()	<span class="comment">//关闭reader</span></span><br><span class="line">写文件：</span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;文件名&quot;</span>);	<span class="comment">//创建Writer</span></span><br><span class="line">fw.write(<span class="string">&quot;&quot;</span>)	<span class="comment">//将字符串写入文件</span></span><br><span class="line">fw.close()		<span class="comment">//关闭writer</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="InputStream："><a href="#InputStream：" class="headerlink" title="InputStream："></a>InputStream：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileInputStream</span><br><span class="line">    ByteArrayInputStream</span><br><span class="line">    ObjectInputStream</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个InputStream</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ead() - 从输入流中读取一个字节的数据</span><br><span class="line">read(<span class="type">byte</span>[] array) - 从流中读取字节并存储在指定的数组中</span><br><span class="line">available() - 返回输入流中可用的字节数</span><br><span class="line">mark() - 标记输入流中数据所在的位置</span><br><span class="line">reset() -将控制点返回到流中设置标记的点</span><br><span class="line">markSupported()- 检查流中是否支持mark()和reset()方法</span><br><span class="line">skips(数字) - 跳过和丢弃输入流中的指定字节数</span><br><span class="line">close() - 关闭输入流   </span><br></pre></td></tr></table></figure>

<p>FileInputStream：文件输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//InputStream使用FileInputStream</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件路径</span></span><br><span class="line">			<span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(stringPath);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件的对象</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File fileObject);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//返回可用字节数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件中的可用字节: &quot;</span> + input.available());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从输入流中读取字节</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;从文件读取的数据: &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字节数组转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            System.out.println(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ByteArrayInputStream ：数据数组输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取整个数组</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取数组的一部分</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> length);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read()  - 从输入流中存在的数组中读取单个字节</span><br><span class="line">read(<span class="type">byte</span>[] array)  - 从输入流中读取字节并存储在指定的数组中</span><br><span class="line">read(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length) - 从流中读取等于length的字节数，并从位置start开始存储在指定的数组中</span><br></pre></td></tr></table></figure>

<p>ObjectInputStream：对象输入流（相应的流转换为Java对象—&gt;<strong>反序列化</strong>）ObjectOutputStream<strong>序列化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建与指定文件链接的文件输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用文件输入流创建对象输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read() - 从输入流中读取一个字节的数据</span><br><span class="line">readBoolean() - 以布尔形式读取数据</span><br><span class="line">readChar() - 以字符形式读取数据</span><br><span class="line">readInt() - 以整数形式读取数据</span><br><span class="line">readObject() - 从输入流中读取对象 </span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="OutputStream："><a href="#OutputStream：" class="headerlink" title="OutputStream："></a>OutputStream：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileOutputStream</span><br><span class="line">    ByteArrayOutputStream</span><br><span class="line">    ObjectOutputStream</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将指定的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array) - 将指定数组中的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)-从位置start开始将等于length的字节数写入数组的输出流</span><br><span class="line">flush() -  强制将输出流中存在的所有数据写入目标</span><br><span class="line">close() - 关闭输出流</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;这是文件内的一行文本。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串转换为字节</span></span><br><span class="line">            <span class="type">byte</span>[] dataBytes = data.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数据写入输出流</span></span><br><span class="line">            out.write(dataBytes);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据被写入文件。&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输出流</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileOutputStream：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用文件路径</span></span><br><span class="line"><span class="comment">//包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path, <span class="type">boolean</span> value);</span><br><span class="line"><span class="comment">//不包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(File fileObject);</span><br></pre></td></tr></table></figure>

<p>ByteArrayOutputStream：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个默认大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="comment">//创建具有指定大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="type">int</span> size);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">writeTo(ByteArrayOutputStream out1) - 将当前输出流的全部数据写入指定的输出流</span><br><span class="line">toByteArray() - 返回输出流中存在的数组</span><br><span class="line">toString() - 以字符串形式返回输出流的全部数据</span><br></pre></td></tr></table></figure>

<p>ObjectOutputStream：Java对象转换为流—&gt;<strong>序列化</strong></p>
<p>ObjectOutputStream仅写入那些实现Serializable接口的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个FileOutputStream，其中写入ObjectOutputStream中的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String file);</span><br><span class="line"><span class="comment">//创建ObjectOutputStream</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将字节数据写入输出流</span><br><span class="line">writeBoolean() - 以布尔形式写入数据</span><br><span class="line">writeChar() - 以字符形式写入数据</span><br><span class="line">writeInt() - 以整数形式写入数据</span><br><span class="line">writeObject() - 将对象写入输出流</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Reader："><a href="#Reader：" class="headerlink" title="Reader："></a>Reader：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">BufferedReader</span><br><span class="line">InputStreamReader</span><br><span class="line">FileReader</span><br><span class="line">StringReader</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Reader</span></span><br><span class="line"><span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ready() - 检查Reader是否准备好读取</span><br><span class="line">read(<span class="type">char</span>[] array)  - 从流中读取字符并存储在指定的数组中</span><br><span class="line">read(<span class="type">char</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)- 从流中读取length相等的字符数，并从start开始存储在指定的数组中</span><br><span class="line">mark() - 标记流中已读取数据的位置</span><br><span class="line">reset() - 重置流。如果流已被标记，然后尝试进行标记，以重新定位。如果该流未被标注，然后尝试将其复位在适当的特定流的一些方法，例如通过将其重新定位到其起始点。</span><br><span class="line">skip() -从流中丢弃指定数量的字符</span><br><span class="line">close() - 关闭reader</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字符数组</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileReader创建Reader</span></span><br><span class="line">            <span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//检查Reader是否准备就绪 </span></span><br><span class="line">            System.out.println(<span class="string">&quot;流中有数据吗?  &quot;</span> + input.ready());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取字符</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;流中的数据:&quot;</span>);</span><br><span class="line">            System.out.println(array);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭reader</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>BufferedReader：磁盘读取字符—&gt;存储在内部缓冲区—&gt;单独读取字符。(更快地读取字符)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个FileReader</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String file);</span><br><span class="line"><span class="comment">//创建一个BufferedReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个具有指定大小的内部缓冲区的BufferdReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure>

<p>InputStreamReader：字节流和字符流之间的桥梁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个InputStream</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader，指定字符编码</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于在输入流中存储数据的编码类型</span><br></pre></td></tr></table></figure>

<p>FileReader：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(File fileObj);</span><br></pre></td></tr></table></figure>

<p>StringReader：从字符串读取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 StringReader</span></span><br><span class="line"><span class="type">StringReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(String data);</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Writer："><a href="#Writer：" class="headerlink" title="Writer："></a>Writer：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类：</span><br><span class="line">    BufferedWriter</span><br><span class="line">	OutputStreamWriter</span><br><span class="line">	FileWriter</span><br><span class="line">	StringWriter</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Writer</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>();</span><br><span class="line">方法：</span><br><span class="line">write(<span class="type">char</span>[] array) - 将指定数组中的字符写入输出流</span><br><span class="line">write(String data) - 将指定的字符串写入写入器</span><br><span class="line">append(<span class="type">char</span> c) - 将指定字符插入当前写入器</span><br><span class="line">flush() - 强制将写入器中存在的所有数据写入相应的目的地</span><br><span class="line">close() - 关闭写入器</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;This is the data in the output file&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileWriter创建一个Writer</span></span><br><span class="line">            <span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串写入文件</span></span><br><span class="line">            output.write(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭写入器</span></span><br><span class="line">            output.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BufferedWriter：字符被写入内部缓冲区而不是磁盘，写入字符更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 FileWriter</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//创建 BufferedWriter</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(file);</span><br></pre></td></tr></table></figure>

<p>OutputStreamWriter：字节流和字符流之间的桥梁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter，指定字符编码</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于将数据写入输出流的编码类型</span><br></pre></td></tr></table></figure>

<p>FileWriter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringWriter<span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileWriter</span>  <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(File fileObj);</span><br></pre></td></tr></table></figure>

<p>StringWriter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"><span class="comment">//创建具有指定字符串缓冲区容量的StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(<span class="type">int</span> size);</span><br></pre></td></tr></table></figure>

<p>StringBuffer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getBuffer() - 返回字符串缓冲区中存在的数据</span><br><span class="line">toString() -将字符串缓冲区中存在的数据作为字符串返回</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回字符串缓冲区</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> output.getBuffer();</span><br><span class="line">System.out.println(<span class="string">&quot;StringBuffer: &quot;</span> + stringBuffer);</span><br><span class="line"><span class="comment">//以字符串形式返回字符串缓冲区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> output.toString();</span><br><span class="line">System.out.println(<span class="string">&quot;String: &quot;</span> + string);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="十、线程"><a href="#十、线程" class="headerlink" title="十、线程"></a>十、线程</h3><ol>
<li><p>状态</p>
<p>创建、就绪、执行、阻塞、终止、挂起、激活</p>
</li>
<li><p>创建线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通过实现 Runnable 接口；</span><br><span class="line">通过继承  Thread 类本身；</span><br><span class="line">通过 Callable 和 Future 创建线程。</span><br></pre></td></tr></table></figure>

<p>详细实现：<a href="https://www.cainiaojc.com/java/java-multithreading.html">链接</a></p>
</li>
</ol>
<h3 id="十一、泛型"><a href="#十一、泛型" class="headerlink" title="十一、泛型"></a>十一、泛型</h3><ol>
<li><p>集合框架中使用泛型，可以实现存储任类型的数据、代码可复用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">泛型类：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">fx</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">fx</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">泛型方法：</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fx</span><span class="params">(T data)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="十二、Lambda-表达式"><a href="#十二、Lambda-表达式" class="headerlink" title="十二、Lambda 表达式"></a>十二、Lambda 表达式</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameter list) -&gt; lambda body</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p>本文参考1:<a href="https://www.cainiaojc.com/java/java-tutorial.html">链接</a></p>
<p>本文参考2:<a href="https://liaoxuefeng.com/books/java/introduction/index.html">链接</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/blog2025.github.io/2025/04/02/JDBC/</url>
    <content><![CDATA[<h3 id="一、什么是JDBC？"><a href="#一、什么是JDBC？" class="headerlink" title="一、什么是JDBC？"></a>一、什么是JDBC？</h3><p>JDBC（Java Database Connectivity）是 Java 语言用于连接和操作关系型数据库的标准 API，提供了一套统一接口，支持与多种数据库交互‌。</p>
<h3 id="二、模板"><a href="#二、模板" class="headerlink" title="二、模板"></a>二、模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">    <span class="comment">//MySQL8.0：&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//MySQL8.0：com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2. 获得数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.操作数据库，实现增删改查</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM student&quot;</span>);</span><br><span class="line">        <span class="comment">//如果有数据，rs.next()返回true</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot; 年龄：&quot;</span>+rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        rs.close();  </span><br><span class="line">		stmt.close();  </span><br><span class="line">		conn.close();  <span class="comment">// 防止连接泄漏‌:ml-citation&#123;ref=&quot;2,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE student SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);  </span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;John&quot;</span>);  </span><br><span class="line">pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line">pstmt.executeUpdate();  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM student WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, age FROM user&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();        </span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;ID: %d, Name: %s, Age: %d\n&quot;</span>, id, name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详解：</p>
<ul>
<li><strong><code>Driver</code> 接口</strong>：‌定义驱动能力，需通过 <code>Class.forName()</code> 加载驱动类（如 <code>com.mysql.jdbc.Driver</code>）‌。</li>
<li>‌**<code>DriverManager</code> 类**‌：管理驱动并创建数据库连接（<code>Connection</code>）‌。</li>
<li>‌**<code>Connection</code> 接口**：‌代表与数据库的会话，用于创建 <code>Statement</code> 或 <code>PreparedStatement</code>‌。</li>
<li>‌**<code>Statement</code> 与 <code>PreparedStatement</code>**：‌执行 SQL 语句，后者可预编译并防止 SQL 注入‌。</li>
<li>‌**<code>ResultSet</code> 接口**：‌封装查询结果集，支持遍历和操作数据‌。</li>
</ul>
<h3 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h3><ol>
<li><strong>事务管理：</strong><ul>
<li>‌<strong>开启事务</strong>‌：<code>conn.setAutoCommit(false);</code></li>
<li>‌<strong>提交&#x2F;回滚</strong>‌：<code>conn.commit();</code> 或 <code>conn.rollback();</code>‌</li>
</ul>
</li>
<li><strong>防止 SQL 注入：</strong><ul>
<li>使用 <code>PreparedStatement</code> 替代 <code>Statement</code>，预编译 SQL 并参数化输入‌。</li>
</ul>
</li>
<li><strong>连接泄漏：</strong><ul>
<li>‌使用 <code>try-with-resources</code> 自动关闭资源‌。</li>
</ul>
</li>
<li><strong>编码问题：</strong><ul>
<li>‌在 JDBC URL 中指定字符集（如 <code>useUnicode=true&amp;characterEncoding=UTF-8</code>）‌</li>
</ul>
</li>
</ol>
<h3 id="四、JdbcTemplate模板"><a href="#四、JdbcTemplate模板" class="headerlink" title="四、JdbcTemplate模板"></a>四、JdbcTemplate模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplate</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库连接配置（建议抽取到配置文件）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);  <span class="comment">// 加载驱动（MySQL 8.0+）</span></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user (name, age) VALUES (?, ?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> id, String newName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user SET name = ? WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setString(<span class="number">1</span>, newName);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;更新成功，影响行数：&quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, age FROM user&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">             <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery()) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;ID: %d, Name: %s, Age: %d\n&quot;</span>, id, name, age);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        demo.insert(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);  <span class="comment">// 插入</span></span><br><span class="line">        demo.update(<span class="number">1</span>, <span class="string">&quot;Bob&quot;</span>);     <span class="comment">// 更新</span></span><br><span class="line">        demo.delete(<span class="number">2</span>);            <span class="comment">// 删除</span></span><br><span class="line">        demo.queryAll();           <span class="comment">// 查询</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/blog2025.github.io/2025/05/28/JavaScript/</url>
    <content><![CDATA[<h1 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a><a href="https://blog.csdn.net/qq_52736131/article/details/123563321">DOM和BOM</a></h1><p><img src="/blog2025.github.io/2025/05/28/JavaScript/91ccc53af38ce227f42999e03197fd6f.jpeg" alt="img"></p>
<h3 id="一、DOM（Document-Object-Model-文档对象模型）📄"><a href="#一、DOM（Document-Object-Model-文档对象模型）📄" class="headerlink" title="一、DOM（Document Object Model ,文档对象模型）📄"></a>一、DOM（<strong>Document Object Model</strong> ,文档对象模型）📄</h3><p>‌<strong>定义</strong>‌：将 HTML&#x2F;XML 文档解析为树形结构对象<br>‌<strong>作用</strong>‌：操作网页内容<br>‌<strong>核心对象</strong>‌：<code>document</code><br>‌<strong>主要功能</strong>‌：</p>
<ol>
<li><p>‌节点操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Codedocument</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)  <span class="comment">// 获取元素</span></span><br><span class="line">element.<span class="title function_">appendChild</span>(newNode)    <span class="comment">// 添加节点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌内容修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Codeelement</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;b&gt;新内容&lt;/b&gt;&#x27;</span>  <span class="comment">// 修改HTML</span></span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;纯文本&#x27;</span>        <span class="comment">// 修改文本</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌样式控制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Codeelement</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>       <span class="comment">// 行内样式</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)   <span class="comment">// 类名操作</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌事件处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Codebutton</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮被点击&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>‌<strong>示例场景</strong>‌：动态更新列表、表单验证、页面元素交互</p>
<h3 id="二、BOM（Browser-Object-Model，浏览器对象模型）🌐"><a href="#二、BOM（Browser-Object-Model，浏览器对象模型）🌐" class="headerlink" title="二、BOM（Browser Object Model，浏览器对象模型）🌐"></a>二、BOM（<strong>Browser Object Model</strong>，浏览器对象模型）🌐</h3><p>‌<strong>定义</strong>‌：提供与浏览器窗口交互的对象模型<br>‌<strong>作用</strong>‌：控制浏览器行为<br>‌<strong>核心对象</strong>‌：<code>window</code>（可省略前缀）<br>‌<strong>主要组件</strong>‌：</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>navigator</code></td>
<td>浏览器信息</td>
<td><code>navigator.userAgent</code></td>
</tr>
<tr>
<td><code>location</code></td>
<td>URL操作</td>
<td><code>location.href = &#39;https://...&#39;</code></td>
</tr>
<tr>
<td><code>history</code></td>
<td>浏览历史</td>
<td><code>history.back()</code></td>
</tr>
<tr>
<td><code>screen</code></td>
<td>屏幕尺寸</td>
<td><code>screen.width</code></td>
</tr>
<tr>
<td><code>localStorage</code></td>
<td>本地存储</td>
<td><code>localStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code></td>
</tr>
</tbody></table>
<p>‌<strong>常用方法</strong>‌：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Codealert</span>(<span class="string">&#x27;提示信息&#x27;</span>)              <span class="comment">// 弹窗</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="number">1000</span>)    <span class="comment">// 定时器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/newpage&#x27;</span>)       <span class="comment">// 新窗口</span></span><br></pre></td></tr></table></figure>

<p>‌<strong>示例场景</strong>‌：页面跳转、浏览器检测、本地数据存储</p>
<h3 id="三、DOM-vs-BOM-对比表"><a href="#三、DOM-vs-BOM-对比表" class="headerlink" title="三、DOM vs BOM 对比表"></a>三、DOM vs BOM 对比表</h3><table>
<thead>
<tr>
<th>特性</th>
<th>DOM</th>
<th>BOM</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>标准化</strong>‌</td>
<td>W3C 标准</td>
<td>无官方标准，浏览器自行实现</td>
</tr>
<tr>
<td>‌<strong>操作对象</strong>‌</td>
<td>网页文档</td>
<td>浏览器窗口</td>
</tr>
<tr>
<td>‌<strong>核心对象</strong>‌</td>
<td>document</td>
<td>window</td>
</tr>
<tr>
<td>‌<strong>典型应用</strong>‌</td>
<td>元素增删改查</td>
<td>页面跳转、弹窗、存储</td>
</tr>
<tr>
<td>‌<strong>跨浏览器</strong>‌</td>
<td>一致性较高</td>
<td>部分API存在兼容问题</td>
</tr>
</tbody></table>
<h3 id="四、协同工作示例"><a href="#四、协同工作示例" class="headerlink" title="四、协同工作示例"></a>四、协同工作示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascriptCopy <span class="title class_">Code</span><span class="comment">// 通过BOM获取窗口尺寸</span></span><br><span class="line"><span class="keyword">const</span> windowWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用DOM调整布局</span></span><br><span class="line"><span class="keyword">const</span> sidebar = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sidebar&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (windowWidth &lt; <span class="number">768</span>) &#123;</span><br><span class="line">  sidebar.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过BOM存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;lastWidth&#x27;</span>, windowWidth)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过BOM的history API操作浏览记录</span></span><br><span class="line">history.<span class="title function_">pushState</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">&#x27;Page 1&#x27;</span>, <span class="string">&#x27;?page=1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="五、常见误区"><a href="#五、常见误区" class="headerlink" title="五、常见误区"></a>五、常见误区</h3><ol>
<li>‌**❌ <code>window</code> 是BOM的全部**‌ → 还包含location&#x2F;navigator等对象</li>
<li>‌**❌ DOM只能操作现有元素**‌ → 可动态创建新元素</li>
<li>‌**❌ BOM完全标准化**‌ → 不同浏览器可能实现不同（如IE的<code>attachEvent</code> vs 标准的<code>addEventListener</code>）</li>
</ol>
<h3 id="‌总结‌："><a href="#‌总结‌：" class="headerlink" title="‌总结‌："></a>‌<strong>总结</strong>‌：</h3><ul>
<li>‌<strong>DOM</strong>‌ 是你的网页手术刀（精确操作内容）</li>
<li>‌<strong>BOM</strong>‌ 是你的浏览器遥控器（控制浏览器行为）<br>两者配合使用，才能实现完整的网页交互功能。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/blog2025.github.io/2025/04/03/MyBatis/</url>
    <content><![CDATA[<h3 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h3><ol>
<li><h4 id="MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。"><a href="#MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。" class="headerlink" title="MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。"></a>MyBatis是一个开源、轻量级的数据持久化框架，内部封装了JDBC。</h4></li>
<li><h4 id="MyBatis核心对象："><a href="#MyBatis核心对象：" class="headerlink" title="MyBatis核心对象："></a>MyBatis核心对象：</h4><h5 id="（1）核心接口和类："><a href="#（1）核心接口和类：" class="headerlink" title="（1）核心接口和类："></a><strong>（1）核心接口和类：</strong></h5><ul>
<li><p><strong>SqlSessionFactoryBuilder</strong>：临时工具类，用完即销毁，无状态，无需长期持有。</p>
</li>
<li><p><strong>SqlSessionFactory</strong>：线程安全，与应用同生命周期，通常只初始化一次，避免重复解析配置；缓存数据库配置、Mapper 映射等元信息；由 IoC 容器管理其生命周期。</p>
</li>
<li><p><strong>SqlSession</strong>：线程不安全，需在方法内创建并使用后立即关闭；代表一次数据库会话，用于执行 SQL、管理事务、获取 Mapper 接口。</p>
<ul>
<li><p><strong>构建阶段</strong>‌：<code>SqlSessionFactoryBuilder</code> 读取配置文件 → 创建 <code>SqlSessionFactory</code>。</p>
</li>
<li><p><strong>运行阶段</strong>‌：<code>SqlSessionFactory</code> 生产 <code>SqlSession</code> → <code>SqlSession</code> 执行 SQL。</p>
</li>
<li><p><strong>销毁阶段</strong>‌：<code>SqlSession</code> 执行完毕后关闭，<code>SqlSessionFactory</code> 随应用关闭销毁。</p>
<span id="more"></span></li>
</ul>
</li>
</ul>
<h5 id="（2）MyBatis核心配置文件（mybatis-config-xml）"><a href="#（2）MyBatis核心配置文件（mybatis-config-xml）" class="headerlink" title="（2）MyBatis核心配置文件（mybatis-config.xml）"></a><strong>（2）MyBatis核心配置文件（mybatis-config.xml）</strong></h5><ul>
<li><p><code>&lt;properties resource=&quot;相对路径&quot;/&gt;</code>:指定外部文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;database.properties&quot;</span>/&gt;</span></span><br><span class="line">database.properties:数据库连接的相关配置</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;environment&gt;</code>：环境配置，包括<code>&lt;transactionmanager&gt;</code>，<code>&lt;dataSource&gt;</code>。</p>
</li>
<li><p><code>&lt;settings&gt;</code>：配置，例;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 延迟加载的全局开关,在特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;typeAliases&gt;</code>：指定别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给&quot;com.example.Student&quot;起别名为&quot;Student&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span> = <span class="string">&quot;Student&quot;</span> <span class="attr">type</span> = <span class="string">&quot;com.example.Student&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;transactionManager&gt;</code>：事务管理器，提交、回滚。</p>
</li>
<li><p><code>&lt;dataSource&gt;</code>：配置数据库中的连接属性，包括驱动程序名称、URL、用户名、密码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type=&quot;&quot;</span></span><br><span class="line"><span class="comment">			UNPOOLED：没有数据库连接池，效率低下，通常应用于简单的应用程序。 </span></span><br><span class="line"><span class="comment">			POOLED：MyBatis对每个数据库的操作都会用数据池，减少创建新连接时间。</span></span><br><span class="line"><span class="comment">			JNDI：JNDI 数据源？？？(动态绑定外部资源)</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接数据库的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;mapper&gt;</code>:指定SQL映射文件的路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/mapper/Student.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（3）SQL映射文件（mapper-xml）"><a href="#（3）SQL映射文件（mapper-xml）" class="headerlink" title="（3）SQL映射文件（mapper.xml）"></a><strong>（3）SQL映射文件（mapper.xml）</strong></h5><ul>
<li><p>映射器-XML文件方式</p>
<ul>
<li><p>定义参数类型</p>
</li>
<li><p>配置缓存</p>
</li>
<li><p>提供 SQL 语句和动态 SQL</p>
</li>
<li><p>定义查询结果和 POJO 的映射关系</p>
</li>
<li><p>例：StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有网站信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还需要在Mybatis配置xml中添加资源路径，引入XML文件，生成映射器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper resource=<span class="string">&quot;com/example/mapper/StudentMapper.xml&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>映射器-注解方式</p>
<ul>
<li><p><code>@Select</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(value = &quot;select * from student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Insert</td>
<td>实现新增</td>
</tr>
<tr>
<td>@Delete</td>
<td>实现删除</td>
</tr>
<tr>
<td>@Update</td>
<td>实现更新</td>
</tr>
<tr>
<td>@Select</td>
<td>实现查询</td>
</tr>
<tr>
<td>@Result</td>
<td>实现结果集封装</td>
</tr>
<tr>
<td>@Results</td>
<td>可以与@Result 一起使用，封装多个结果集</td>
</tr>
<tr>
<td>@ResultMap</td>
<td>实现引用@Results 定义的封装</td>
</tr>
<tr>
<td>@One</td>
<td>实现一对一结果集封装，（@Result（one&#x3D;@One）（）））</td>
</tr>
<tr>
<td>@Many</td>
<td>实现一对多结果集封装，（@Result（many&#x3D;@many）（）））</td>
</tr>
</tbody></table>
<p><a href="https://blog.csdn.net/weixin_43883917/article/details/113830667">更多注解</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="执行SQL方式"><a href="#执行SQL方式" class="headerlink" title="执行SQL方式"></a>执行SQL方式</h4><ul>
<li>通过 SqlSession 发送 SQL</li>
<li>通过 SqlSession 获取 Mapper 接口，通过 Mapper 接口发送 SQL**（主流）**</li>
</ul>
</li>
<li><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><ul>
<li><h5 id=""><a href="#" class="headerlink" title="&lt;select&gt;"></a><code>&lt;select&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME,FROM student WHERE NAME LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>id</code>：尽量和Mapper.java的方法名相同。</p>
</li>
<li><p><code>resultType</code>：返回结果类型。（字段名与对象属性名完全一致时，自动映射到 entity）</p>
</li>
<li><p><code>resultMap</code>：映射规则、级联。（字段名与属性名不一致，手动映射），一对一、一对多；返回的可以是<code>resultMap</code>也可以是是<code>resultType</code></p>
<p><em><strong>MyBatis 的每一个查询映射的返回类型都是 resultMap,当提供的是resultType时，MyBatis会自动把值赋给resultType所指定的属性；当提供的是resultMap时，MyBatis会自动映射。</strong></em></p>
<p><font color="red"><em><strong>resultMap 和 resultType 不能同时使用。</strong></em></font></p>
</li>
<li><p><code>resultSetType</code>：FORWARD_ONLY（只允许向前访问）、SCROLL_SENSITIVE（双向滚动，但不及时更新）、SCROLLJNSENSITIVE（双向滚动，及时更新）。</p>
</li>
<li><p><code>parameterType</code>：int、float、String、JavaBean、Map。</p>
</li>
<li><p><code>fetchSize</code>：限制获取的总记录数。</p>
</li>
<li><p><code>timeout</code>：设置超时参数，单位秒，超时则报错。</p>
</li>
</ul>
<p><strong>3种传递参数方式：</strong></p>
<p><strong>StudentMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> &gt;</span></span><br><span class="line">    SELECT id,FROM student WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME FROM student WHERE name = #&#123;name&#125; AND id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,NAME FROM student WHERE id = #&#123;id&#125; AND name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByJavaBean&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name,age FROM student WHERE name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 级联ResultMap查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对多关联学生关联课程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.example.entity.Class&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_id&quot;</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStuWithClass&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithClass&quot;</span>&gt;</span></span><br><span class="line">	SELECT name FROM student</span><br><span class="line">    LEFT JOIN class on student.id = class.student_id</span><br><span class="line">    WHERE student.id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>StudentMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Student <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByMap</span><span class="params">(Map&lt;String,id&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectByJavaBean</span><span class="params">(Student student)</span>;</span><br><span class="line"><span class="comment">//级联ResultMap查询</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">selectStuWithClass</span><span class="params">(<span class="type">int</span> studentId)</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-1"><a href="#-1" class="headerlink" title="&lt;insert&gt;"></a><code>&lt;insert&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    insert into student(name)</span><br><span class="line">    values(#&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>id</code>：尽量和Mapper.java的方法名相同。</li>
<li><code>parameterType</code>：int、float、String、JavaBean、Map。</li>
<li><code>timeout</code>：设置超时参数，单位秒，超时则报错。</li>
</ul>
<p><strong>3种传递参数方式：</strong></p>
<p><strong>StudentMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id) values (#&#123;name&#125;,#&#123;id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id) values (#&#123;name&#125;,#&#123;id&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    insert into Student (name,id,age) values (#&#123;name&#125;,#&#123;id&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>StudentMapper.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数		</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByMap</span><span class="params">(Map&lt;String,id&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用		</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-2"><a href="#-2" class="headerlink" title="&lt;update&gt;"></a><code>&lt;update&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>            </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3种传递参数方式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;,age= #&#123;age&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    update student set name = #&#123;name&#125;,age= #&#123;age&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    update student </span><br><span class="line">    set </span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>age= #&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByMap</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="-3"><a href="#-3" class="headerlink" title="&lt;delete&gt;"></a><code>&lt;delete&gt;</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3种传递参数方式</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @Param注解形式传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByParam&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaBean形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudentByJavaBean&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    delete from student where name = #&#123;name&#125; and class= #&#123;class&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map传递参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByMap</span><span class="params">(Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"><span class="comment">//@Param注解形式传递参数---常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;class&quot;)</span> <span class="type">int</span> class)</span>;</span><br><span class="line"><span class="comment">//JavaBean形式,可以传递多个参数---参数多时常用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteStudentByJavaBean</span><span class="params">(Student student)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="仅支持查询"><a href="#仅支持查询" class="headerlink" title="&lt;resultMap&gt;仅支持查询"></a><code>&lt;resultMap&gt;</code>仅支持查询</h5><p>用于解决实体类属性名和数据库表中字段名不一致的情况。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span><span class="comment">&lt;!-- 类再实例化时用来注入结果到构造方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span>&gt;</span><span class="tag">&lt;/<span class="name">idArg</span>&gt;</span><span class="comment">&lt;!-- ID参数，结果为ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span>&gt;</span><span class="tag">&lt;/<span class="name">arg</span>&gt;</span><span class="comment">&lt;!-- 注入到构造方法的一个普通结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!-- 用于表示哪个列是主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span><span class="comment">&lt;!-- 注入到字段或JavaBean属性的普通结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span><span class="comment">&lt;!-- 用于一对一关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span><span class="comment">&lt;!-- 用于一对多、多对多关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="comment">&lt;!-- 使用结果值来决定使用哪个结果映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span><span class="comment">&lt;!-- 基于某些值的结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&lt;resultMap&gt;</code>的type&#x3D;”实体类的相对路径”</p>
</li>
<li><p><code>&lt;id&gt;</code>和<code>&lt;result&gt;</code>包含：</p>
<table>
<thead>
<tr>
<th align="left">元素</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">property</td>
<td align="left">映射到列结果的字段或属性。如果 POJO 的属性和 SQL 列名（column元素）是相同的，那么 MyBatis 就会映射到 POJO 上</td>
</tr>
<tr>
<td align="left">column</td>
<td align="left">对应 SQL 列</td>
</tr>
</tbody></table>
</li>
</ul>
<p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联ResultMap查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键映射 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通字段映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>一对一映射</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Room room; <span class="comment">// 一对一关联对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roomName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithRoomMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 association 映射单个对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;room&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Room&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;room_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roomName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;room_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserWithRoom&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithRoomMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        stu.id, stu.name, </span><br><span class="line">        r.room_id, r.room_name </span><br><span class="line">    FROM student stu</span><br><span class="line">    LEFT JOIN room r ON stu.room_id = r.room_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 通过用户ID查询用户及其部门信息</span></span><br><span class="line">    User <span class="title function_">selectUserWithRoom</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一对多映射</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&gt; class; <span class="comment">// 一对一关联对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuWithClass&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对多使用 collection 映射集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;class&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Class&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStuWithClass&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuWithClass&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        stu.id, stu.name, </span><br><span class="line">        c.class_id, c.class_name </span><br><span class="line">    FROM student stu</span><br><span class="line">    LEFT JOIN class c ON stu.id = c.stu_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 通过用户ID查询用户及其所有订单</span></span><br><span class="line">    User <span class="title function_">selectStuWithClass</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多对多映射</strong>：</p>
<ul>
<li>查询学生及其所有老师</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer studentId;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Teacher&gt; teachers;  <span class="comment">// 多对多关联</span></span><br><span class="line">    <span class="comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;  <span class="comment">// 反向关联（可选）</span></span><br><span class="line">    <span class="comment">// 省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- StudentMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithTeachersMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联老师集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teachers&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithTeachersById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithTeachersMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        s.student_id, s.student_name,</span><br><span class="line">        t.teacher_id, t.teacher_name</span><br><span class="line">    FROM student s</span><br><span class="line">    LEFT JOIN student_teacher st ON s.student_id = st.student_id</span><br><span class="line">    LEFT JOIN teacher t ON st.teacher_id = t.teacher_id</span><br><span class="line">    WHERE s.student_id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StudentMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据学生ID查询学生及其老师</span></span><br><span class="line">    Student <span class="title function_">selectStudentWithTeachersById</span><span class="params">(Integer studentId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询老师及其所有学生</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TeacherMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherWithStudentsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacher_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联学生集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTeacherWithStudentsById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherWithStudentsMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        t.teacher_id, t.teacher_name,</span><br><span class="line">        s.student_id, s.student_name</span><br><span class="line">    FROM teacher t</span><br><span class="line">    LEFT JOIN student_teacher st ON t.teacher_id = st.teacher_id</span><br><span class="line">    LEFT JOIN student s ON st.student_id = s.student_id</span><br><span class="line">    WHERE t.teacher_id = #&#123;teacherId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据老师ID查询老师及其学生</span></span><br><span class="line">    Teacher <span class="title function_">selectTeacherWithStudentsById</span><span class="params">(Integer teacherId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ResultMap 对比 ResultType</strong>:</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>ResultMap</strong>‌</th>
<th>‌<strong>ResultType</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>字段名与属性名不一致</td>
<td>✅ 必须使用</td>
<td>❌ 无法直接映射</td>
</tr>
<tr>
<td>一对一关联查询</td>
<td>✅ 通过 <code>&lt;association&gt;</code> 实现</td>
<td>❌ 无法嵌套对象</td>
</tr>
<tr>
<td>一对多关联查询</td>
<td>✅ 通过 <code>&lt;collection&gt;</code> 实现</td>
<td>❌ 无法映射集合</td>
</tr>
<tr>
<td>动态复杂映射</td>
<td>✅ 灵活定义映射规则</td>
<td>❌ 仅支持简单自动映射</td>
</tr>
<tr>
<td>代码简洁性</td>
<td>❌ 配置较多</td>
<td>✅ 直接指定实体类</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><table>
<thead>
<tr>
<th align="left">元素</th>
<th align="left">作用</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">if</td>
<td align="left">判断语句</td>
<td align="left">单条件分支判断</td>
</tr>
<tr>
<td align="left">choose（when、otherwise）</td>
<td align="left">相当于 Java 中的 switch case 语句</td>
<td align="left">多条件分支判断</td>
</tr>
<tr>
<td align="left">trim、where</td>
<td align="left">辅助元素</td>
<td align="left">用于处理一些SQL拼装问题</td>
</tr>
<tr>
<td align="left">foreach</td>
<td align="left">循环语句</td>
<td align="left">在in语句等列举条件常用</td>
</tr>
<tr>
<td align="left">bind</td>
<td align="left">辅助元素</td>
<td align="left">拼接参数</td>
</tr>
</tbody></table>
<ul>
<li><p><code>&lt;if&gt;/&lt;where&gt;</code></p>
<p><em><strong><code>where</code>的引入是为了解决1&#x3D;1这个问题，当条件多个时，不采用1&#x3D;1，会使SQL语句中出现多余的词如：AND。</strong></em></p>
<p><em><strong><code>&lt;where&gt;</code>自动去除条件中的AND&#x2F;OR</strong></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;判断条件&quot;</span>&gt;</span></span><br><span class="line">    SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND where name like #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">        AND where age like #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;choose&gt;/&lt;when&gt;/&lt;otherwise&gt;/&lt;where&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件1&quot;</span>&gt;</span></span><br><span class="line">        SQL语句1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件2&quot;</span>&gt;</span></span><br><span class="line">        SQL语句2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;判断条件3&quot;</span>&gt;</span></span><br><span class="line">        SQL语句3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        SQL语句4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findstudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>AND name = #&#123;name&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>AND age = #&#123;age&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>AND status = 1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;foreach&gt;</code>批量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list|array|map key&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    参数值</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>item：表示集合中每一个元素进行迭代时的别名。</li>
<li>index：指定一个名字，表示在迭代过程中每次迭代到的位置。</li>
<li>open：表示该语句以什么开始（既然是 in 条件语句，所以必然以(开始）。</li>
<li>separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以,作为分隔符）。</li>
<li>close：表示该语句以什么结束（既然是 in 条件语句，所以必然以“)”开始）</li>
<li>collection：必选属性，分为3种情况list、array、map</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  WHERE id IN</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量插入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsertStudent&quot;</span>&gt;</span></span><br><span class="line">  INSERT INTO student (name, age) VALUES</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (#&#123;student.name&#125;, #&#123;student.age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;batchUpdateStudent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;student&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    UPDATE user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;student.name != null&quot;</span>&gt;</span>name = #&#123;student.name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;student.age != null&quot;</span>&gt;</span>age = #&#123;student.age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;student.id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;where&gt;</code></p>
<p>自动去除首条条件的 <code>AND</code>&#x2F;<code>OR</code>，若无条件则忽略 <code>WHERE</code>。</p>
</li>
<li><p><code>&lt;set&gt;</code></p>
<p>自动去除末尾逗号，用于更新语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span>&gt;</span></span><br><span class="line">  UPDATE student</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>age = #&#123;age&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;trim&gt;</code>自定义截取规则，代替<code>&lt;if&gt;</code>+<code>&lt;where&gt;/&lt;set&gt;</code>多条件查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;前缀&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;后缀&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;忽略前缀字符&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;忽略后缀字符&quot;</span>&gt;</span></span><br><span class="line">    SQL语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">prefix</td>
<td align="left">给SQL语句拼接的前缀，为 trim 包含的内容加上前缀</td>
</tr>
<tr>
<td align="left">suffix</td>
<td align="left">给SQL语句拼接的后缀，为 trim 包含的内容加上后缀</td>
</tr>
<tr>
<td align="left">prefixOverrides</td>
<td align="left">去除 SQL 语句前面的关键字或字符，该关键字或者字符由 prefixOverrides 属性指定。</td>
</tr>
<tr>
<td align="left">suffixOverrides</td>
<td align="left">去除 SQL 语句后面的关键字或者字符，该关键字或者字符由 suffixOverrides 属性指定。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>AND name = #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span>OR age = #&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;bind&gt;</code>在 SQL 中复用表达式或处理复杂逻辑（如模糊查询），或者说拼接||。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + keyword + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM student</span><br><span class="line">  WHERE name LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>value：对应传入实体类的某个字段，可以进行字符串拼接等特殊处理。</li>
<li>name：给对应参数取的别名。</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h4><ul>
<li><p>物理分页，MySQL的<code>LIMIT</code>和<code>OFFSET</code>—<em><strong>大数据量</strong></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM users </span><br><span class="line">  LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">2</span>;  <span class="comment">// 当前页码  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;  </span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize;  </span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">params.put(<span class="string">&quot;offset&quot;</span>, offset);  </span><br><span class="line">params.put(<span class="string">&quot;pageSize&quot;</span>, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectUsers(params);</span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑分页，MyBatis的<code>RowBounds</code>—<em><strong>小数据量</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Mapper</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectUsersWithRowBounds</span><span class="params">(RowBounds rowBounds)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(offset, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectUsersWithRowBounds(rowBounds);</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页插件<code>PageHelper</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis 配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用分页</span></span><br><span class="line">PageHelper.startPage(page, pageSize);  </span><br><span class="line">List&lt;User&gt; users = userMapper.selectAllUsers();  </span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(users);</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis-Plus 分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, pageSize);  </span><br><span class="line">IPage&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);  </span><br><span class="line">List&lt;User&gt; users = userPage.getRecords();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li><p><strong>参数处理与占位符</strong></p>
<p>**<code>#&#123;&#125;</code> vs <code>$&#123;&#125;</code>**‌</p>
<ul>
<li><code>#&#123;&#125;</code> 使用预编译防止 SQL 注入，适用于参数值传递（如 <code>WHERE id = #&#123;id&#125;</code>）‌。</li>
<li><code>$&#123;&#125;</code> 直接替换 SQL 片段，适用于动态表名或排序字段（如 <code>ORDER BY $&#123;sortColumn&#125;</code>），需手动过滤风险参数‌。</li>
</ul>
</li>
<li><p><strong>参数类型匹配</strong>‌</p>
<ul>
<li>简单类型（如 <code>int</code>, <code>String</code>）可直接传递；多参数需用 <code>@Param</code> 注解或封装为 Map&#x2F;ENTITY。</li>
<li>批量操作时，集合参数通过 <code>&lt;foreach&gt;</code> 遍历处理（如 <code>IN</code> 查询）‌。</li>
</ul>
</li>
<li><p>‌<strong>避免过度嵌套</strong></p>
<ul>
<li>优先使用 <code>&lt;where&gt;</code>、<code>&lt;set&gt;</code> 自动处理前缀，减少冗余条件（如 <code>AND</code>&#x2F;<code>OR</code> 前缀）‌。</li>
<li>复杂逻辑用 <code>&lt;choose&gt;</code> 替代多层 <code>&lt;if&gt;</code>，提高可读性‌。</li>
</ul>
</li>
<li><p><strong>性能优化</strong></p>
<ul>
<li><p>减少动态标签数量，避免 SQL 语句频繁变化导致数据库硬解析‌。</p>
</li>
<li><p>模糊查询用 <code>&lt;bind&gt;</code> 或数据库函数（如 <code>CONCAT</code>）统一处理，而非拼接 <code>%</code>‌。</p>
<p><code>WHERE NAME LIKE CONCAT (&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</code></p>
</li>
<li><p>分页时优先物理分页（如 <code>LIMIT</code>），而非逻辑分页（<code>RowBounds</code>）‌。</p>
</li>
</ul>
</li>
<li><p><strong>字段名映射</strong></p>
<ul>
<li><p><code>mybatis-config.xml</code>启用驼峰命名自动转换（<code>mapUnderscoreToCamelCase=true</code>），避免手动别名‌。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键配置：启用驼峰命名映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂对象使用 <code>&lt;resultMap&gt;</code> 显式映射，尤其多表关联查询‌。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><a href="https://www.cainiaoplus.com/mybatis/mybatis-info.html">本文参考</a></p>
<h3 id="二、项目结构及模板"><a href="#二、项目结构及模板" class="headerlink" title="二、项目结构及模板"></a>二、项目结构及模板</h3><ol>
<li><h4 id="Spring-MVC搭配MyBatis"><a href="#Spring-MVC搭配MyBatis" class="headerlink" title="Spring MVC搭配MyBatis"></a>Spring MVC搭配MyBatis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssm-template/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   │   └── com.example/</span><br><span class="line">│   │   │           ├── controller/           # 控制层（SpringMVC 处理HTTP请求）</span><br><span class="line">│   │   │           ├── service/              # 业务层接口</span><br><span class="line">│   │   │           ├── service/impl/         # 业务层实现类</span><br><span class="line">│   │   │           ├── dao/                  # MyBatis Mapper接口</span><br><span class="line">│   │   │           └── entity/               # 实体类</span><br><span class="line">│   │   ├── resources/</span><br><span class="line">│   │   │   ├── spring/                       # Spring配置</span><br><span class="line">│   │   │   │   ├── spring-mvc.xml            # Spring MVC配置（视图解析器、拦截器等）</span><br><span class="line">│   │   │   │   └── spring-mybatis.xml        # MyBatis配置</span><br><span class="line">│   │   │   ├── mapper/                       # MyBatis XML映射文件（UserMapper.xml等）</span><br><span class="line">│   │   │   ├── database.properties           # 数据库连接配置</span><br><span class="line">│   │   │   └── log4j.properties              # 日志配置</span><br><span class="line">│   │   └── webapp/</span><br><span class="line">│   │       └── WEB-INF/</span><br><span class="line">│   │       │   ├── views/        			  # JSP/HTML视图文件</span><br><span class="line">│   │       │   └── web.xml                   # Servlet配置</span><br><span class="line">│   │       └── static/          			  # 静态资源（CSS/JS/图片）</span><br><span class="line">│   └── test/                                  # 单元测试</span><br><span class="line">└── pom.xml                                    # Maven依赖管理</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>User实体层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Controller层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Model model)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>Service层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>DAO层（Mapper接口）UserMapper.java或UserDao.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-mybatis.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载数据库参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关键配置：启用驼峰命名映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源（以Druid为例） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper接口扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.example.dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>database.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库驱动类名（根据数据库类型调整）</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JDBC连接URL（格式：jdbc:数据库类型://IP:端口/数据库名?参数）</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可选：连接池配置（以Druid为例）</span></span><br><span class="line"><span class="attr">jdbc.initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">jdbc.minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">jdbc.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">jdbc.maxWait</span>=<span class="string">60000</span></span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>部署至Tomcat</strong>‌</p>
<ul>
<li>将项目打包为WAR文件，放入Tomcat的<code>webapps</code>目录，启动服务‌</li>
</ul>
<p><strong>访问测试</strong>‌</p>
<ul>
<li>浏览器访问 <code>http://localhost:8080/……</code>，若返回用户详情页面则成功‌</li>
</ul>
</li>
<li><h4 id="Spring-Boot搭配MyBatis"><a href="#Spring-Boot搭配MyBatis" class="headerlink" title="Spring Boot搭配MyBatis"></a>Spring Boot搭配MyBatis</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-mybatis-demo/   # 项目根目录</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main/</span><br><span class="line">│   │   ├── java/           # Java 源代码</span><br><span class="line">│   │   │   └── com.example/</span><br><span class="line">│   │   │           ├── Application.java         		# Spring Boot 启动类</span><br><span class="line">│   │   │           ├── controller/UserController.java  # Controller 层（API入口）</span><br><span class="line">│   │   │           ├── service/UserService.java  		# Service 层（业务逻辑）</span><br><span class="line">│   │   │           ├── mapper/UserMapper.java  		# Mapper 接口（MyBatis DAO层）</span><br><span class="line">│   │   │           └── entity/User.java          	    # 实体类（POJO）</span><br><span class="line">│   │   └── resources/      # 资源文件</span><br><span class="line">│   │       ├── mapper/      # MyBatis XML 映射文件（如 UserMapper.xml）</span><br><span class="line">│   │       ├── static/      # 静态资源（CSS/JS/图片）</span><br><span class="line">│   │       ├── templates/   # 模板文件（如 Thymeleaf/FreeMarker）</span><br><span class="line">│   │       ├── application.yml或application.properties # 主配置文件（数据源、MyBatis配置）</span><br><span class="line">│   │       └── application-dev.yml   # 开发环境配置（可选）</span><br><span class="line">│   └── test/               # 单元测试</span><br><span class="line">│       └── java/</span><br><span class="line">│           └── com.example/</span><br><span class="line">│                   ├── controller/</span><br><span class="line">│                   └── service/</span><br><span class="line">├── target/                 # 编译输出目录（自动生成）</span><br><span class="line">├── pom.xml                 # Maven 依赖管理（或 build.gradle）</span><br><span class="line">└── README.md               # 项目文档</span><br></pre></td></tr></table></figure>

<p><strong>Application.java（启动类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span>  <span class="comment">// 必须声明 Mapper 接口扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User.java（实体类）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// Lombok 自动生成 Getter/Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserController.java（Controller 层）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.demo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserService.java（Service 层）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.java（Mapper 接口）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 注解方式实现 SQL（或使用 XML）</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可在此补充复杂 SQL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml‌</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_db?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span>  <span class="comment"># XML 映射文件路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span>  <span class="comment"># 实体类包别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  <span class="comment"># 开启驼峰命名映射</span></span><br></pre></td></tr></table></figure>

<p><strong>pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-mybatis-template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis Starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok（可选） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h4><table>
<thead>
<tr>
<th><strong>对比维度</strong>‌</th>
<th>‌<strong>SpringMVC+MyBatis</strong>‌</th>
<th>‌<strong>SpringBoot+MyBatis</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>核心定位</td>
<td>传统企业级应用，需精细控制‌</td>
<td>快速构建现代化应用，强调开箱即用‌</td>
</tr>
<tr>
<td>配置复杂度</td>
<td>高（需手动配置多个组件）‌</td>
<td>低（自动配置）‌</td>
</tr>
<tr>
<td>依赖管理</td>
<td>手动维护，易冲突‌</td>
<td>Starter依赖自动管理‌</td>
</tr>
<tr>
<td>部署方式</td>
<td><strong>WAR</strong>包部署至外部容器‌</td>
<td>内嵌容器，<strong>JAR</strong>包独立运行‌</td>
</tr>
<tr>
<td>最佳适用场景</td>
<td>复杂业务定制、遗留系统维护‌</td>
<td>微服务、快速迭代项目‌</td>
</tr>
<tr>
<td>配置文件</td>
<td>多个XML文件（spring-mvc.xml等）</td>
<td>单一<code>application.properties</code>或YAML</td>
</tr>
<tr>
<td>启动类</td>
<td>无，依赖外部容器启动</td>
<td>需<code>@SpringBootApplication</code>主类</td>
</tr>
<tr>
<td>内嵌服务器</td>
<td>无，需外部Tomcat</td>
<td>支持内嵌Tomcat&#x2F;Jetty</td>
</tr>
<tr>
<td>依赖管理</td>
<td>手动管理版本</td>
<td>通过<code>starter</code>自动管理</td>
</tr>
<tr>
<td>启动入口</td>
<td>依赖外部Servlet容器（如Tomcat）通过 <code>web.xml</code> 触发‌</td>
<td>通过 <code>@SpringBootApplication</code> 主类调用 <code>SpringApplication.run()</code>‌</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis-plus</title>
    <url>/blog2025.github.io/2025/04/04/MyBatis-plus/</url>
    <content><![CDATA[<h3 id="一、MyBatis-plus初级"><a href="#一、MyBatis-plus初级" class="headerlink" title="一、MyBatis-plus初级"></a>一、MyBatis-plus初级</h3><p><a href="https://baomidou.com/introduce/">官方网站</a></p>
<ol>
<li><h4 id="MyBatis-plus新功能"><a href="#MyBatis-plus新功能" class="headerlink" title="MyBatis-plus新功能"></a>MyBatis-plus新功能</h4><ul>
<li><p>增强版的MyBatis，简化开发，提高效率；</p>
</li>
<li><p>启动会自动注入CRUD，性能无损耗；</p>
</li>
<li><p>内置通用Mapper，通用Service；</p>
</li>
<li><p>支持Lambda形式调用；</p>
</li>
<li><p>支持主键自动生成；</p>
</li>
<li><p>内置代码生成器，可快速生成Mapper、Model、Service、Controller代码；</p>
</li>
<li><p>内置分页插件（MyBatis物理分页-LIMIT），支持多种数据库；</p>
</li>
<li><p>内置性能分析插件；</p>
</li>
<li><p>内置全局拦截插件；</p>
<span id="more"></span></li>
</ul>
</li>
<li><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Spring-Boot配置文件"><a href="#Spring-Boot配置文件" class="headerlink" title="Spring Boot配置文件"></a>Spring Boot配置文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_demo?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="Spring-Boot启动类"><a href="#Spring-Boot启动类" class="headerlink" title="Spring Boot启动类"></a>Spring Boot启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul>
<li><p><strong><code>@MapperScan(&quot;com.example.mapper&quot;)</code></strong></p>
<p>扫描指定包下的Mapper接口，避免在每个Mapper接口上单独添加<code>@Mapper</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span> <span class="comment">// 扫描指定包下的Mapper接口</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@ComponentScan</code></strong></p>
<p>组件扫描扩展，自定义Spring组件扫描范围，但不直接关联MyBatis Mapper扫描。</p>
</li>
<li><p><strong><code>@TableName(&quot;数据库表名&quot;)</code></strong></p>
<p>在实体类中，用于表名注解，标识实体类对应的表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">			……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableId(value=&quot;id&quot;,type=&quot;IdType.AUTO&quot;)</code></strong></p>
<p>在实体类中，用于主键字段，<code>IdType.AUTO</code>自增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableField(&quot;数据库表中属性名&quot;)</code></strong></p>
<p><code>@TableField(value=&quot;name&quot;,fill=FieldFill.INSERT)</code></p>
<p><code>fill</code>：自动填充策略（插入&#x2F;更新时自动填充值）</p>
<ul>
<li><code>DEFAULT</code>：不处理</li>
<li><code>INSERT</code>：插入时填充</li>
<li><code>UPDATE</code>：更新时填充</li>
<li><code>INSERT_UPDATE</code>：插入和更新时填充</li>
</ul>
<p>在实体类中，用于字段注解上方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;stuname&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@EnumValue</code></strong></p>
<p>普通枚举类注解的枚举字段上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GenderEnum</span> &#123;</span><br><span class="line">    <span class="meta">@EnumValue</span>  <span class="comment">// 存储到数据库的值</span></span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> GenderEnum gender;  <span class="comment">// 自动映射code值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@OrderBy</code></strong></p>
<p>内置 SQL 默认指定排序，优先级低于 wrapper 条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OrderBy(sort = 1, isDesc = true)</span> <span class="comment">// 优先级1，倒序</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@TableLogic</code></strong></p>
<p>表字段逻辑处理注解（逻辑删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@KeySequence</code></strong></p>
<p>序列主键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@KeySequence(value = &quot;SEQ_USER&quot;, clazz = Long.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@Version</code></strong></p>
<p>乐观锁注解字段，（更新时自动检查版本号）</p>
<p><em>乐观锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，只在更新的时候会判断一下在此期间别人有没有去更新这个数据。</em></p>
<p><a href="https://zhuanlan.zhihu.com/p/137818729">乐观锁和悲观锁</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;  <span class="comment">// 版本号字段</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@SqlParser</code></strong></p>
<p>SQL解析过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SqlParser(filter = true)</span>  <span class="comment">// 忽略多租户SQL解析</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 自定义SQL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@InterceptorIgnore</code></strong> </p>
<p> 拦截器忽略，动态忽略 MyBatis-Plus 内置拦截器（如分页、多租户）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InterceptorIgnore(tenantLine = &quot;true&quot;)</span> <span class="comment">// 忽略多租户拦截器</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>@AutoResultMap</code></strong> </p>
<p>自动生成结果映射，配合 <code>@TableName(autoResultMap = true)</code> 自动生成复杂映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableField(typeHandler = JsonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">// Address对象转为JSON存储</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-ji5u3mgf.html">本文参考</a></p>
<h3 id="二、MyBatis-plus核心"><a href="#二、MyBatis-plus核心" class="headerlink" title="二、MyBatis-plus核心"></a>二、MyBatis-plus核心</h3><ol>
<li><h4 id="代码生成模板："><a href="#代码生成模板：" class="headerlink" title="代码生成模板："></a>代码生成模板：</h4><p><strong><code>依赖配置（pom.xml）</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus 代码生成器核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 模板引擎（必选） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动（以MySQL为例） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Lombok（可选） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><code>代码生成器主类（CodeGenerator.java）</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/your_database?useSSL=false&amp;serverTimezone=UTC&quot;</span>, </span><br><span class="line">                                <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">            .globalConfig(builder -&gt; </span><br><span class="line">                builder.author(<span class="string">&quot;YourName&quot;</span>)  <span class="comment">// 作者名</span></span><br><span class="line">                    .outputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/java&quot;</span>)  <span class="comment">// 输出路径</span></span><br><span class="line">                    .disableOpenDir()  <span class="comment">// 生成后不打开目录</span></span><br><span class="line">            )</span><br><span class="line">            .packageConfig(builder -&gt; </span><br><span class="line">                builder.parent(<span class="string">&quot;com.example&quot;</span>)  <span class="comment">// 父包名</span></span><br><span class="line">                    .moduleName(<span class="string">&quot;system&quot;</span>)  <span class="comment">// 模块名（可选）</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, </span><br><span class="line">                        System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/mapper&quot;</span>))  <span class="comment">// XML文件路径(与application.yml 中 mapper-locations 配置一致)</span></span><br><span class="line">            )</span><br><span class="line">            .strategyConfig(builder -&gt; </span><br><span class="line">                builder.addInclude(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;order&quot;</span>)  <span class="comment">// 指定生成表名</span></span><br><span class="line">                    .addTablePrefix(<span class="string">&quot;t_&quot;</span>)  <span class="comment">// 忽略表前缀</span></span><br><span class="line">                    .entityBuilder()</span><br><span class="line">                        .enableLombok()  <span class="comment">// 启用Lombok</span></span><br><span class="line">                        .enableTableFieldAnnotation()  <span class="comment">// 字段添加@TableField注解</span></span><br><span class="line">                    .controllerBuilder()</span><br><span class="line">                        .enableRestStyle()  <span class="comment">// RestController风格</span></span><br><span class="line">                    .mapperBuilder()</span><br><span class="line">                        .enableMapperAnnotation()  <span class="comment">// Mapper接口添加@Mapper注解</span></span><br><span class="line">            )</span><br><span class="line">            .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())  <span class="comment">// 模板引擎（默认Freemarker）</span></span><br><span class="line">            .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行生成器</strong>‌<br>直接运行 <code>CodeGenerator.main()</code> 方法，控制台输出 <code>Success</code> 即表示生成成功‌</p>
<p><strong>生成文件结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com/example/system</span><br><span class="line">    ├── controller/UserController.java  # REST接口</span><br><span class="line">    ├── entity/User.java                # 实体类（带Lombok注解）</span><br><span class="line">    ├── mapper/UserMapper.java          # Mapper接口</span><br><span class="line">    └── service/UserService.java        # Service接口与实现类</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="CRUD接口"><a href="#CRUD接口" class="headerlink" title="CRUD接口"></a>CRUD接口</h4><p><font color="red"><em>通过继承 <strong>BaseMapper</strong> 获得通用 CRUD 方法，不需要写SQL代码</em></font></p>
<ul>
<li><p>查</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>T selectById(Serializable id)</code></td>
<td>根据 ID 查询</td>
<td><code>userMapper.selectById(1L)</code></td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectBatchIds(Collection&lt;?&gt; idList)</code></td>
<td>批量查询（根据 ID 列表）</td>
<td><code>userMapper.selectBatchIds(Arrays.asList(1,2,3))</code></td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectByMap(Map&lt;String, Object&gt; columnMap)</code></td>
<td>根据字段名-值的 Map 条件查询‌</td>
<td><code>Map.of(&quot;status&quot;, 1)</code> → 查询 status&#x3D;1 的记录</td>
</tr>
<tr>
<td><code>List&lt;T&gt; selectList(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据 <code>Wrapper</code> 条件查询列表‌</td>
<td>结合 <code>QueryWrapper</code> 动态构建条件‌</td>
</tr>
<tr>
<td><code>T selectOne(Wrapper&lt;T&gt; wrapper)</code></td>
<td>查询单条记录（需确保结果唯一）‌</td>
<td>动态条件查询唯一用户</td>
</tr>
<tr>
<td><code>Long selectCount(Wrapper&lt;T&gt; wrapper)</code></td>
<td>统计符合条件的数据总数‌</td>
<td>统计 <code>age &gt; 25</code> 的用户数量‌</td>
</tr>
</tbody></table>
</li>
<li><p>增加</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int insert(T entity)</code></td>
<td>插入一条记录</td>
<td><code>userMapper.insert(user)</code></td>
</tr>
<tr>
<td><code>int insertBatch(Collection&lt;T&gt; list)</code></td>
<td>批量插入（需数据库驱动支持批量操作）</td>
<td><code>userMapper.insertBatch(users)</code></td>
</tr>
</tbody></table>
</li>
<li><p>修改</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int updateById(T entity)</code></td>
<td>根据 ID 更新记录</td>
<td><code>userMapper.updateById(user)</code></td>
</tr>
<tr>
<td><code>int update(T entity, Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件更新记录</td>
<td><code>userMapper.update(user, new UpdateWrapper&lt;User&gt;().eq(&quot;name&quot;, &quot;Alice&quot;))</code></td>
</tr>
<tr>
<td><code>int updateBatchById(Collection&lt;T&gt; entityList);</code></td>
<td>根据ID 批量更新</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>删除</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>int deleteById(Serializable id)</code></td>
<td>根据 ID 删除</td>
<td><code>userMapper.deleteById(1L)</code></td>
</tr>
<tr>
<td><code>int deleteBatchIds(Collection&lt;?&gt; idList)</code></td>
<td>批量删除（根据 ID 列表）</td>
<td><code>userMapper.deleteBatchIds(Arrays.asList(1,2,3))</code></td>
</tr>
<tr>
<td><code>int deleteByMap(Map&lt;String, Object&gt; columnMap)</code></td>
<td>根据字段名-值的 Map 条件删除‌</td>
<td><code>Map.of(&quot;age&quot;, 20)</code> → 删除 age&#x3D;20 的记录</td>
</tr>
<tr>
<td><code>int delete(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件构造器 <code>Wrapper</code> 删除‌</td>
<td>结合 <code>QueryWrapper</code> 构建动态条件‌</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-o6xn3mgo.html">更多接口</a></p>
<ul>
<li>Save</li>
<li>Remove</li>
<li>Get</li>
<li>List</li>
<li>Count</li>
<li>Page</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h4><ul>
<li><p>通过 <code>QueryWrapper</code> 或 <code>LambdaQueryWrapper</code> 构建动态条件：</p>
<p>查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询年龄大于 20 且状态为激活的用户</span></span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .eq(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        .orderByDesc(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将名字包含 &quot;Tom&quot; 的用户的年龄设置为 25</span></span><br><span class="line">userMapper.update(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">User</span>().setAge(<span class="number">25</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">        .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="扩展接口"><a href="#扩展接口" class="headerlink" title="扩展接口"></a>扩展接口</h4><ul>
<li><p>分页查询</p>
<p>需先配置分页插件（<code>PaginationInterceptor</code>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = userMapper.selectPage(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">10</span>), <span class="comment">// 当前页, 每页条数</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">);</span><br><span class="line">List&lt;User&gt; records = page.getRecords(); <span class="comment">// 分页数据</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();          <span class="comment">// 总记录数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>链式查询</p>
<p>通过 <code>QueryChainWrapper</code> 实现链式调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = userMapper.query()</span><br><span class="line">    .eq(<span class="string">&quot;dept_id&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    .ge(<span class="string">&quot;create_time&quot;</span>, <span class="string">&quot;2023-01-01&quot;</span>)</span><br><span class="line">    .list();</span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑删除</p>
<p>在实体类字段上添加 <code>@TableLogic</code> 注解后，自动启用逻辑删除：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeleted;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="MyBatisX插件"><a href="#MyBatisX插件" class="headerlink" title="MyBatisX插件"></a>MyBatisX插件</h4><p><a href="https://www.w3cschool.cn/mybatis_plus/mybatis_plus-6sxw3ml0.html">插件</a></p>
</li>
<li><h4 id="Spring-Boot-3-x-MyBatis-Plus-5-x-可运行-CRUD-接口模板"><a href="#Spring-Boot-3-x-MyBatis-Plus-5-x-可运行-CRUD-接口模板" class="headerlink" title="Spring Boot 3.x + MyBatis-Plus 5.x 可运行 CRUD 接口模板"></a>Spring Boot 3.x + MyBatis-Plus 5.x 可运行 CRUD 接口模板</h4><ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类与 Mapper 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span> <span class="comment">// 关联数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">// 主键自增</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer userAge;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123; </span><br><span class="line">    <span class="comment">// 继承 BaseMapper 获得通用 CRUD 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Service 层与 Controller 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span>;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(<span class="literal">null</span>); <span class="comment">// 查询全部数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.listUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test_db?useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true # 自动驼峰命名转换</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="三、Spring-Boot-MyBatis-plus模板"><a href="#三、Spring-Boot-MyBatis-plus模板" class="headerlink" title="三、Spring Boot+MyBatis-plus模板"></a>三、Spring Boot+MyBatis-plus模板</h3><ol>
<li><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com.example.demo</span><br><span class="line">│   ├── config         # 配置类 （插件等等）</span><br><span class="line">│   │   ├── MybatisPlusConfig.java</span><br><span class="line">│   │   └── SwaggerConfig.java</span><br><span class="line">│   ├── controller     # 控制器层</span><br><span class="line">│   │   └── UserController.java</span><br><span class="line">│   ├── entity         # 实体类</span><br><span class="line">│   │   └── User.java</span><br><span class="line">│   ├── mapper         # Mapper接口</span><br><span class="line">│   │   └── UserMapper.java</span><br><span class="line">│   ├── service        # 服务层</span><br><span class="line">│   │   ├── UserService.java</span><br><span class="line">│   │   └── impl</span><br><span class="line">│   │       └── UserServiceImpl.java</span><br><span class="line">│   └── DemoApplication.java  # 启动类</span><br><span class="line">resources</span><br><span class="line">├── application.yml    # 配置文件</span><br><span class="line">└── generator           # 代码生成器配置（可选）</span><br><span class="line">    └── generator-config.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="各模块代码："><a href="#各模块代码：" class="headerlink" title="各模块代码："></a>各模块代码：</h4><p><strong><code>pom.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基础配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis-Plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Swagger 3（可选） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类<code>DemoApplication.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件<code>application.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_demo?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 打印SQL日志</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>         <span class="comment"># 主键自增</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span>  <span class="comment"># 逻辑删除字段</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span>        <span class="comment"># 删除状态</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span>    <span class="comment"># 未删除状态</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br></pre></td></tr></table></figure>

<p><strong>配置类<code>MyBatisPlusConfig.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动填充处理器（可选）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MetaObjectHandler <span class="title function_">metaObjectHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MetaObjectHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime::now, LocalDateTime.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实体类<code>User.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;        <span class="comment">// 逻辑删除字段</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 自动填充</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime; <span class="comment">// 自动填充</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Mapper接口<code>UserMapper.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 可自定义复杂SQL</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE age &gt; #&#123;age&#125;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUsersOlderThan</span><span class="params">(Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service层<code>UserService.java</code>+<code>UserServiceImpl.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 自定义业务方法</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUsersOlderThan</span><span class="params">(Integer age)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsersOlderThan</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectUsersOlderThan(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>控制器<code>UserController.java</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">listUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;User&gt; <span class="title function_">pageUsers</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer pageNum,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>Swagger 配置（可选）SwaggerConfig.java</code></strong></p>
<p>在前后端分离开发的过程中，前端和后端需要进行api对接进行交互，就需要一个<strong>api规范文档</strong>，方便前后端的交互，但api文档不能根据代码的变化发生实时动态的改变，这样后端修改了接口，前端不能及时获取最新的接口，导致调用出错，需要手动维护<strong>api文档</strong>，加大了开发的工作量和困难，而swagger的出现就是为了解决这一系列的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demo.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build()</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            .title(<span class="string">&quot;MyBatis-Plus Demo API&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/iqiuq/p/14883839.html">Swagger教程</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>React</title>
    <url>/blog2025.github.io/2025/04/13/React/</url>
    <content><![CDATA[<p>教程：<a href="https://zhuanlan.zhihu.com/p/634471047?utm_psn=1687962556264763392">https://zhuanlan.zhihu.com/p/634471047?utm_psn=1687962556264763392</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/blog2025.github.io/2025/04/02/SpringBoot/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/cuiqwei/article/details/118188540">SpringBoot2教程1</a><br><a href="https://www.cainiaojc.com/springboot/springboot-tutorial.html">SpringBoot2教程2</a></p>
<h3 id="一、Spring-Boot："><a href="#一、Spring-Boot：" class="headerlink" title="一、Spring Boot："></a>一、Spring Boot：</h3><ol>
<li><h4 id="Spring-Boot是什么？"><a href="#Spring-Boot是什么？" class="headerlink" title="Spring Boot是什么？"></a>Spring Boot是什么？</h4><ul>
<li><p>微框架—微服务。</p>
</li>
<li><p><strong>Spring Boot</strong> &#x3D; <strong>Spring</strong> + <strong>Tomcat&#x2F;Jetty</strong>(Http Servers) + <strong>XML</strong>(Configuration)</p>
</li>
<li><p>起因：Spring的开发需要配置繁琐的XML文件、整合配置第三方框架，导致了开发和配置效率的降低。</p>
</li>
<li><p>特征：</p>
<ul>
<li><p>Spring Boot集成了大量常用的第三方库配置，零配置开箱即用；</p>
</li>
<li><p>Spring Boot不需要很多XML配置；</p>
</li>
<li><p>Spring Boot旨在尽可能地快速启动和运行，需要最少的Spring前期配置；</p>
<p><img src="/blog2025.github.io/2025/04/02/SpringBoot/1.png"></p>
<p>Spring Boot：<em>Build Anything</em>， Build任何东西；</p>
<p>SpringCloud：<em>Coordinate Anything</em>，协调任何事情；</p>
<p>SpringCloud Data Flow：<em>Connect everything</em>，连接任何东西。</p>
<span id="more"></span></li>
</ul>
</li>
<li><p>优点：</p>
<ul>
<li><p>继承了Spring框架的优秀特点，可以更快搭建Spring框架；</p>
</li>
<li><p>简化编码，一个<code>spring-boot-starter-web</code>则可以包含多个需要的依赖；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>简化配置，Spring Boot相较于Spring更多的采用Java Config配置方式，而非XML方式；</p>
<p><strong>Spring Boot使用<code>@Configuration</code>、<code>@Bean</code>等注解替代XML的<code>&lt;bean&gt;</code>标签；</strong></p>
<p><strong>Spring Boot使用<code>application.properties</code>或<code>application.yml</code>代替XML的<code>&lt;context:property-placeholder&gt;</code>‌；</strong></p>
</li>
<li><p>简化部署，Spring Boot内嵌了Tomcat，只需要将项目打包为<strong>jar</strong>包，即可启动项目；Spring则需要打包为<strong>war</strong>包再部署到Tomcat上；（jar包适用于微服务场景）</p>
</li>
<li><p>简化监控，引入 <code>spring-boot-start-actuator</code>依赖，直接使用REST方式获取进程的运行期性能参数，从而达到监控的目的；同时需要Spring Cloud的<strong>服务发现与注册的配套功能</strong>，<strong>外围监控集成方案</strong>，<strong>外围安全管理方案</strong>搭配使用。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Spring和Spring-Boot"><a href="#Spring和Spring-Boot" class="headerlink" title="Spring和Spring Boot"></a>Spring和Spring Boot</h4><table>
<thead>
<tr>
<th>Spring</th>
<th>Spring Boot</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Spring Framework</strong>是用于构建应用程序的广泛使用的Java EE框架。</td>
<td><strong>SpringBoot Framework</strong> 被广泛用于开发 <strong>REST API</strong> 。</td>
</tr>
<tr>
<td>它旨在简化Java EE开发，从而使开发人员更加高效。</td>
<td>它旨在缩短代码长度，并提供开发 <strong>Web应用程序</strong>的最简单方法。</td>
</tr>
<tr>
<td>Spring Framework的主要功能是<strong>依赖注入</strong>和<strong>控制反转</strong>(IoC)</td>
<td>Spring Boot的主要功能是<strong>自动配置</strong>。它会根据需求自动配置类。</td>
</tr>
<tr>
<td>通过允许我们开发<strong>松耦合</strong>应用程序，可以使事情变得更简单。</td>
<td>它有助于创建配置更少的<strong>独立</strong>应用。</td>
</tr>
<tr>
<td>开发人员编写了大量代码(<strong>模板代码</strong>)来完成最小的任务。</td>
<td>它<strong>减少</strong>样板代码。</td>
</tr>
<tr>
<td>要测试Spring项目，我们需要显式设置服务器。</td>
<td>SpringBoot提供了<strong>嵌入式服务器</strong>，例如 <strong>Jetty</strong> 和 <strong>Tomcat</strong> 等。</td>
</tr>
<tr>
<td>它不支持内存数据库。</td>
<td>它提供了多个插件来处理嵌入式和<strong>内存中</strong>数据库，例如 <strong>H2</strong> 。</td>
</tr>
<tr>
<td>开发人员在 <strong>pom.xml</strong> 中为Spring项目手动定义依赖项。</td>
<td>Spring Boot在pom.xml文件中带有 <strong>starter</strong> 概念，该概念内部负责根据Spring Boot要求下载依赖项 <strong>JAR</strong> 。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="Spring-Boot和Spring-MVC"><a href="#Spring-Boot和Spring-MVC" class="headerlink" title="Spring Boot和Spring MVC"></a>Spring Boot和Spring MVC</h4><table>
<thead>
<tr>
<th>SpringBoot</th>
<th>SpringMVC</th>
</tr>
</thead>
<tbody><tr>
<td><strong>SpringBoot</strong> 是Spring的模块，用于使用合理的默认值打包基于Spring的应用程序。</td>
<td><strong>SpringMVC</strong> 是Spring框架下基于模型视图控制器的Web框架。</td>
</tr>
<tr>
<td>它提供了用于构建 <strong>Spring-powered</strong> 框架的默认配置。</td>
<td>它提供了<strong>易于使用</strong>功能来构建Web应用程序。</td>
</tr>
<tr>
<td>无需手动构建配置。</td>
<td>它需要手动进行构建配置。</td>
</tr>
<tr>
<td><strong>不需要</strong>部署描述符。</td>
<td><strong>必需</strong>。</td>
</tr>
<tr>
<td>它避免了样板代码，并将依赖项包装在一个单元中。</td>
<td>它分别指定每个依赖项。</td>
</tr>
<tr>
<td>它<strong>减少</strong>开发时间并提高生产率。</td>
<td>要花费相同的时间，要花费<strong>更多</strong>。</td>
</tr>
</tbody></table>
</li>
<li><h4 id="Spring-Boot项目结构"><a href="#Spring-Boot项目结构" class="headerlink" title="Spring Boot项目结构"></a>Spring Boot项目结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/</span><br><span class="line">├── java/</span><br><span class="line">│   └── com.example/</span><br><span class="line">│       ├── controller/			</span><br><span class="line">│       ├── service/			</span><br><span class="line">│       ├── dao/				</span><br><span class="line">│       └── Application.java  # 启动类（含 @SpringBootApplication）</span><br><span class="line">├── resources/</span><br><span class="line">│   ├── static/</span><br><span class="line">│   ├── templates/</span><br><span class="line">│   └── application.properties</span><br><span class="line">└── test/java</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="二、Spring-Boot开发："><a href="#二、Spring-Boot开发：" class="headerlink" title="二、Spring Boot开发："></a>二、Spring Boot开发：</h3><ol>
<li><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul>
<li><p><strong><code>@SpringBootApplication</code></strong>：入口标识，是下列三个注解的整合：</p>
<ul>
<li><p><strong><code>@EnableAutoConfiguration</code></strong>：启用自动配置，自动配置类路径中存在的bean，自动配置Spring应用上下文，根据依赖自动加载组件（如数据源、Web MVC）‌；</p>
</li>
<li><p><strong><code>@ComponentScan</code></strong>：组件扫描，扫描软件包中的bean；</p>
</li>
<li><p><strong><code>@Configuration</code></strong>：声明配置类，替代传统XML配置文件，内部通过<code>@Bean</code>方法注册组件‌；</p>
</li>
</ul>
</li>
<li><p>‌**<code>@Component</code>**系列：将Java类标记为Bean</p>
<ul>
<li><p><strong><code>@Controller</code></strong>：控制层。通常与 <code>@RequestMapping</code> 注解一起使用。（返回字符串）</p>
</li>
<li><p><strong><code>@Service</code></strong>：业务层</p>
</li>
<li><p><strong><code>@Repository</code></strong>：持久层</p>
</li>
<li><p><strong><code>@RestController</code></strong>：组合<font color="red"><code>@Controller</code>与<code>@ResponseBody</code></font>，用于构建RESTful API‌</p>
</li>
</ul>
</li>
<li><p>路径映射：</p>
<ul>
<li><strong><code>@RequestMapping(&quot;/&quot;)</code></strong>：通用HTTP请求映射，支持定义路径、方法类型（GET&#x2F;POST等）‌；</li>
<li><strong><code>@GetMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</li>
<li><strong><code>@PostMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</li>
<li><strong><code>@PutMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</li>
<li><strong><code>@DeleteMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</li>
<li><strong><code>@PatchMapping</code></strong>：等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</li>
</ul>
</li>
<li><p>参数处理：</p>
<ul>
<li><p><strong><code>@PathVariable</code></strong>：用于从URL路径中提取参数（如&#x2F;user&#x2F;{id}）；</p>
</li>
<li><p><strong><code>@RequestHeader</code></strong>：用于获取有关HTTP请求标头的详细信息；</p>
</li>
<li><p><strong><code>@RequestAttribute</code></strong>：用于将方法参数绑定到请求属性；</p>
</li>
<li><p><strong><code>@RequestParam</code></strong>：用于从URL提取查询参数或表单数据‌；</p>
</li>
<li><p><strong><code>@RequestBody</code></strong>：将请求体<font color="red"><strong>反序列化</strong></font>为Java对象‌；（<strong>JSON&#x3D;&gt;对象</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123; </span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;User created&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>响应处理：</p>
<ul>
<li><p><strong><code>@ResponseBody</code></strong>：将方法返回值直接写入HTTP响应体（如JSON&#x2F;XML）‌<font color="red"><strong>序列化</strong></font>（<strong>对象&#x3D;&gt;JSON</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// 等效于@Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id); <span class="comment">// 返回User对象自动转为JSON</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>方向</strong>‌</th>
<th>‌<strong>作用阶段</strong>‌</th>
<th>‌<strong>数据转换类型</strong>‌</th>
<th>‌<strong>底层实现</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌**@ResponseBody**‌</td>
<td>服务端 → 客户端</td>
<td>处理‌<strong>响应</strong>‌时</td>
<td>‌<strong>序列化</strong>‌</td>
<td>使用<code>HttpMessageConverter</code>（如Jackson的<code>MappingJackson2HttpMessageConverter</code>）将Java对象转为JSON&#x2F;XML等格式</td>
</tr>
<tr>
<td>‌**@RequestBody**‌</td>
<td>客户端 → 服务端</td>
<td>处理‌<strong>请求</strong>‌时</td>
<td>‌<strong>反序列化</strong>‌</td>
<td>使用<code>HttpMessageConverter</code>将请求体中的JSON&#x2F;XML等数据转为Java对象</td>
</tr>
</tbody></table>
<ul>
<li><p><strong><code>@Required</code></strong>：在配置时使用必需的属性填充；</p>
</li>
<li><p><strong><code>@Autowired</code></strong>：自动注入依赖，默认按类型匹配‌；<strong>byType注入</strong></p>
</li>
<li><p><strong><code>@Qualifier</code></strong>：指定具体Bean名称解决注入歧义‌；</p>
</li>
<li><p><strong><code>@Resource</code></strong>：自动注入依赖，默认按名称匹配‌；<strong>byName注入</strong></p>
</li>
<li><p><strong><code>@Bean</code></strong> :在配置类中声明方法返回值作为Bean，支持自定义初始化逻辑‌；</p>
</li>
<li><p>外部配置：</p>
<ul>
<li><strong><code>@PropertySource</code></strong>：加载自定义配置文件（如<code>config.properties</code>）‌；</li>
<li><strong><code>@Value</code></strong>：注入配置文件中的属性值‌；</li>
</ul>
</li>
<li><p>条件化注册：</p>
<ul>
<li><strong><code>@ConditionalOnProperty</code></strong>：根据配置属性存在性决定是否注册Bean‌；</li>
<li><strong><code>@ConditionalOnClass</code></strong>：类路径存在指定类时生效‌；</li>
<li><strong><code>@Profile</code></strong>：根据环境激活配置（如<code>dev</code>&#x2F;<code>prod</code>）‌；</li>
</ul>
</li>
<li><p>其他：</p>
<table>
<thead>
<tr>
<th><strong>分类</strong>‌</th>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>功能</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>数据访问</strong>‌</td>
<td><code>@Transactional</code></td>
<td>声明事务管理‌</td>
</tr>
<tr>
<td>‌<strong>AOP</strong>‌</td>
<td><code>@Aspect</code>&#x2F;<code>@Around</code></td>
<td>定义切面与环绕通知‌</td>
</tr>
<tr>
<td>‌<strong>测试</strong>‌</td>
<td><code>@SpringBootTest</code></td>
<td>标记Spring Boot集成测试类‌</td>
</tr>
<tr>
<td>‌<strong>监控</strong>‌</td>
<td><code>@EnableActuator</code></td>
<td>启用健康检查、性能监控端点（需配合<code>spring-boot-actuator</code>依赖）‌</td>
</tr>
</tbody></table>
</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="数据封装：jackson"><a href="#数据封装：jackson" class="headerlink" title="数据封装：jackson"></a>数据封装：jackson</h4><ul>
<li><p>项目开发的接口与接口之间，数据传输使用JSON格式，Spring Boot使用<font color="red"><strong>序列化‌@ResponseBody</strong></font>（<strong>对象&#x3D;&gt;JSON</strong>）和<font color="red"><strong>反序列化@RequestBody</strong></font>（<strong>JSON&#x3D;&gt;对象</strong>）实现数据的传输；</p>
<p>fastJson：阿里巴巴JSON处理工具；</p>
</li>
<li><p>状态码code、信息msg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，默认状态码为0，提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = <span class="string">&quot;操作成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若没有数据返回，可以人为指定状态码和提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(String code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回时，状态码为0，默认提示信息为：操作成功！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = <span class="string">&quot;操作成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有数据返回，状态码为0，人为指定提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(T data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略get和set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jsonresult&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResultController</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(user);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">    &quot;data&quot;:&#123;&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,</span></span><br><span class="line"><span class="comment">    &quot;msg&quot;:&quot;操作成功！&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;测试课&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(userList, <span class="string">&quot;获取用户列表成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">	&quot;data&quot;:[</span></span><br><span class="line"><span class="comment">                &#123;&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,									&#123;&quot;id&quot;:2,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;达人课&quot;&#125;</span></span><br><span class="line"><span class="comment">		   ],</span></span><br><span class="line"><span class="comment">	&quot;msg&quot;:&quot;获取用户列表成功&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Map&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;测试&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;用户&quot;</span>, user);</span><br><span class="line">        map.put(<span class="string">&quot;年龄&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;备注&quot;</span>, <span class="string">&quot;哈哈哈哈哈&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(map);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	&quot;code&quot;:&quot;0&quot;,</span></span><br><span class="line"><span class="comment">	&quot;data&quot;:&#123;</span></span><br><span class="line"><span class="comment">			&quot;用户&quot;:&#123;&quot;id&quot;:1,&quot;password&quot;:&quot;&quot;,&quot;username&quot;:&quot;测试&quot;&#125;,</span></span><br><span class="line"><span class="comment">			&quot;年龄&quot;:null,</span></span><br><span class="line"><span class="comment">			&quot;备注&quot;:&quot;哈哈哈哈哈&quot;</span></span><br><span class="line"><span class="comment">		   &#125;,</span></span><br><span class="line"><span class="comment">	&quot;msg&quot;:&quot;操作成功！&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="日志：slf4j框架（简单日志门面）-风格：logback-默认-或log4j-需要引入依赖"><a href="#日志：slf4j框架（简单日志门面）-风格：logback-默认-或log4j-需要引入依赖" class="headerlink" title="日志：slf4j框架（简单日志门面）|风格：logback(默认)或log4j(需要引入依赖)"></a>日志：<em>slf4j</em>框架（简单日志门面）|风格：<em>logback</em>(默认)或log4j(需要引入依赖)</h4><p><a href="https://springdoc.cn/spring-boot-logging-tutorial/#google_vignette">日志1</a></p>
<p><a href="https://springdoc.cn/spring-boot-logging/">日志2</a></p>
<p>阿里巴巴默认使用slf4j+logback</p>
<ul>
<li><p>步骤一：使用LoggerFactory 创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Test.class);</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤二：日志的配置</p>
<ul>
<li><p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、日志级别设置</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">WARN          # 全局日志级别</span></span><br><span class="line"><span class="attr">logging.level.com.example</span>=<span class="string">DEBUG  # 指定包路径日志级别</span></span><br><span class="line"><span class="comment"># 支持的级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL‌</span></span><br><span class="line"><span class="comment"># 2、日志文件输出</span></span><br><span class="line"><span class="attr">logging.file.name</span>=<span class="string">/var/log/app.log  # 指定日志文件名（自动创建）</span></span><br><span class="line"><span class="attr">logging.file.max-size</span>=<span class="string">10MB          # 单个文件最大容量</span></span><br><span class="line"><span class="attr">logging.file.max-history</span>=<span class="string">30         # 保留历史文件数</span></span><br><span class="line"><span class="comment"># 3、日志格式自定义</span></span><br><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n  # 控制台格式</span></span><br><span class="line"><span class="attr">logging.pattern.file</span>=<span class="string">%d&#123;ISO8601&#125; [%t] %level %c&#123;0&#125; - %m%n  # 文件格式</span></span><br><span class="line"><span class="comment"># 在配置文件中启用异步日志，提升性能</span></span><br><span class="line"><span class="attr">logging.async.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">logging.async.queue-capacity</span>=<span class="string">1000  # 队列容量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application.yml</code> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">WARN</span>                 <span class="comment"># 全局日志级别</span></span><br><span class="line"><span class="comment"># 级别：TRACE&lt;DEBUG&lt; INFO(默认)&lt;WARN(低于 WARN 的信息都不会输出)&lt;ERROR&lt;FATAL。</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">DEBUG</span>         <span class="comment"># 指定包路径日志级别</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/var/log/app.log</span>     <span class="comment"># 日志文件路径（自动创建）</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">10MB</span>             <span class="comment"># 单个文件最大容量</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">30</span>            <span class="comment"># 保留历史文件数</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>  <span class="comment"># 控制台格式</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">&quot;%d&#123;ISO8601&#125; [%t] %level %c&#123;0&#125; - %m%n&quot;</span>                                 <span class="comment"># 文件格式</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">logback.xml</span>			<span class="comment"># 用来指定项目启动的时候，读取哪个配置文件</span></span><br><span class="line">  <span class="attr">async:</span>						<span class="comment"># 启用异步日志（需搭配spring-boot-starter-aop依赖）</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">queue-capacity:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Debug message&quot;</span>);  <span class="comment">// 输出调试信息</span></span><br><span class="line">        logger.info(<span class="string">&quot;Info message&quot;</span>);    <span class="comment">// 输出普通信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// 自动生成名为log的Logger对象</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;Warning message&quot;</span>);  <span class="comment">// 直接使用log对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日志使用模板</strong>：</p>
<ul>
<li><p>项目依赖（<code>pom.xml</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok简化日志代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Actuator用于动态调整日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	&lt;!-- 排除默认Logback依赖： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 切换为Log4j2依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	 --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日志配置文件（<code>application.yml</code>）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span>                  <span class="comment"># 全局默认级别</span></span><br><span class="line">    <span class="attr">com.example.demo:</span> <span class="string">DEBUG</span>      <span class="comment"># 指定包路径的日志级别</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">logs/app.log</span>          <span class="comment"># 日志文件路径（自动创建logs目录）</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">50MB</span>              <span class="comment"># 单个日志文件最大大小</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">30</span>             <span class="comment"># 保留最近30天的历史日志</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %highlight(%-5level) %cyan(%logger&#123;40&#125;) - %msg%n&quot;</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;40&#125; - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Actuator配置（动态调整日志级别）</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">loggers,health</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">loggers:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多环境配置示例</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">WARN</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/opt/logs/prod-app.log</span>  <span class="comment"># 生产环境日志路径</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>日志代码示例（Controller层）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// Lombok自动生成log对象</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testLog</span><span class="params">()</span> &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Trace级别日志&quot;</span>);  <span class="comment">// 默认不输出</span></span><br><span class="line">        log.debug(<span class="string">&quot;Debug级别日志&quot;</span>);  <span class="comment">// 仅在com.example.demo包下输出</span></span><br><span class="line">        log.info(<span class="string">&quot;Info级别日志&quot;</span>);    <span class="comment">// 全局可见</span></span><br><span class="line">        log.error(<span class="string">&quot;Error级别日志&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;日志测试成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义日志配置（<code>logback-spring.xml</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件滚动策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logs/app-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境关闭DEBUG日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Spring-Boot项目属性"><a href="#Spring-Boot项目属性" class="headerlink" title="Spring Boot项目属性"></a>Spring Boot项目属性</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-properties.html">属性</a></p>
<ul>
<li><p><strong><code>applicaiton.properties</code>模板</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========== 服务器配置 ==========</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080                       # 应用启动端口</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/api       # 应用上下文路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 数据源配置 ==========</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">10  # Hikari连接池最大连接数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== JPA/Hibernate配置 ==========</span></span><br><span class="line"><span class="attr">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update    # DDL策略（none/update/create-drop）</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true                # 显示SQL语句</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true  # 格式化SQL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 缓存配置 ==========</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=<span class="string">redis                 # 使用Redis缓存</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=                  <span class="string"># 密码（无密码则留空）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 日志配置 ==========</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">INFO</span></span><br><span class="line"><span class="attr">logging.level.com.example</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">logging.file.name</span>=<span class="string">logs/app.log          # 日志文件路径</span></span><br><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== Actuator监控配置 ==========</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">health,info,metrics</span></span><br><span class="line"><span class="attr">management.endpoint.health.show-details</span>=<span class="string">always  # 显示健康检查详情</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ========== 安全配置 ==========</span></span><br><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>application.yml</code> 模板</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========== 服务器配置 ==========</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>                   <span class="comment"># 应用启动端口</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span>         <span class="comment"># 应用上下文路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 数据源配置 ==========</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">10</span>    <span class="comment"># Hikari连接池最大连接数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ========== JPA/Hibernate配置 ==========</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span>         <span class="comment"># DDL策略（none/update/create-drop）</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span>             <span class="comment"># 显示SQL语句</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span>       <span class="comment"># 格式化SQL</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ========== 缓存配置 ==========</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span>                <span class="comment"># 使用Redis缓存</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span>                  <span class="comment"># 密码（无密码则留空）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 日志配置 ==========</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">com.example:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">logs/app.log</span>         <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== Actuator监控配置 ==========</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">health,info,metrics</span>  <span class="comment"># 暴露的监控端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span>     <span class="comment"># 显示健康检查详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ========== 安全配置 ==========</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><p>当开发人员开发新的接口或者更新旧的接口后，方便统一前后端API接口，方便前后端开发人员及时在线测试接口数据。</p>
<p><a href="https://zhuanlan.zhihu.com/p/98560871">使用指南</a></p>
</li>
<li><h4 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h4><p>SpringMVC中常用Thymeleaf模板引擎渲染页面；现代前后端分离的项目中，更多采用Vue+后端API开发。</p>
<table>
<thead>
<tr>
<th>‌<strong>方案</strong>‌</th>
<th>‌<strong>优势</strong>‌</th>
<th>‌<strong>典型场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>Thymeleaf</strong>‌</td>
<td>开发简单、与 Spring Boot 无缝集成</td>
<td>中小型后台系统、内部工具开发‌</td>
</tr>
<tr>
<td>‌<strong>Vue&#x2F;React + API</strong>‌</td>
<td>高交互性、组件化、团队协作友好</td>
<td>复杂业务系统、大型企业级平台‌</td>
</tr>
</tbody></table>
<p><a href="https://www.cnblogs.com/swzx-1213/p/12726432.html">使用指南</a></p>
</li>
<li><h4 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h4><ul>
<li><strong>自动重启</strong><ul>
<li>当类路径（<code>src/main/java</code>、<code>src/main/resources</code> 等）下的代码或配置文件发生修改时，DevTools 会自动触发应用重启。与传统重启不同，DevTools 通过类加载器替换实现‌<strong>快速重启</strong>‌（仅重新加载变更的类），大幅缩短等待时间‌。</li>
</ul>
</li>
<li><strong>实时重载</strong><ul>
<li>对静态资源（如 HTML、CSS、JS 文件）的修改会触发浏览器自动刷新，无需手动刷新页面即可查看更新效果‌。</li>
</ul>
</li>
<li><strong>开发环境优化</strong><ul>
<li>默认禁用模板引擎的缓存（如 Thymeleaf、Freemarker），确保修改后直接生效‌；</li>
<li>提供开发者友好的调试日志配置（如启用 Web 组的调试日志）‌。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>优势</strong>‌</th>
<th>‌<strong>典型用例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>本地开发调试</strong>‌</td>
<td>快速验证代码修改，减少手动操作成本</td>
<td>频繁修改业务逻辑或页面样式‌</td>
</tr>
<tr>
<td>‌<strong>团队协作开发</strong>‌</td>
<td>统一开发环境配置，提升协作效率</td>
<td>新成员快速搭建本地开发环境‌</td>
</tr>
<tr>
<td>‌<strong>轻量级热部署需求</strong>‌</td>
<td>无需复杂工具链即可实现基本热更新</td>
<td>中小型项目或原型开发‌</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>总结</strong>‌</p>
<p>Spring Boot DevTools 通过‌<strong>自动化重启与资源重载</strong>‌、‌<strong>开发环境优化</strong>‌等机制，显著提升本地开发效率，适用于需要快速迭代的场景‌。但需注意，其核心定位是‌<strong>开发辅助工具</strong>‌，不适用于生产环境‌。</p>
</li>
</ul>
</li>
<li><h4 id="‌Lombok"><a href="#‌Lombok" class="headerlink" title="‌Lombok"></a>‌<strong>Lombok</strong></h4><p>Lombok 通过注解自动生成 Java 类的 ‌样板代码‌（如 Getter&#x2F;Setter、构造函数、toString() 等），减少重复编码，提升开发效率‌；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 按需选择版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    <span class="comment">&lt;!-- 仅编译和测试阶段生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>‌<strong>注解</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>@Data</code></td>
<td>生成所有字段的 Getter&#x2F;Setter、<code>equals</code>、<code>hashCode</code>、<code>toString</code></td>
<td><code>@Data public class User &#123; private String name; &#125;</code>‌</td>
</tr>
<tr>
<td><code>@Getter</code> &#x2F; <code>@Setter</code></td>
<td>单独生成 Getter 或 Setter 方法</td>
<td><code>@Getter @Setter private Integer id;</code>‌</td>
</tr>
<tr>
<td><code>@NoArgsConstructor</code></td>
<td>生成无参构造函数</td>
<td><code>@NoArgsConstructor public class User &#123;&#125;</code>‌</td>
</tr>
<tr>
<td><code>@AllArgsConstructor</code></td>
<td>生成全参构造函数</td>
<td><code>@AllArgsConstructor public class User &#123; ... &#125;</code>‌</td>
</tr>
<tr>
<td><code>@Builder</code></td>
<td>支持链式构建对象</td>
<td><code>User user = User.builder().name(&quot;Tom&quot;).build();</code>‌78</td>
</tr>
<tr>
<td><code>@Slf4j</code></td>
<td>自动注入日志对象 <code>log</code></td>
<td><code>@Slf4j public class Service &#123; ... log.info(&quot;message&quot;); &#125;</code>‌</td>
</tr>
</tbody></table>
</li>
<li><h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><ul>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com.example</span><br><span class="line">│   ├── exception          // 异常处理模块</span><br><span class="line">│   │   ├── GlobalExceptionHandler.java</span><br><span class="line">│   │   └── BusinessException.java</span><br><span class="line">│   └── Application.java   // Spring Boot 主类</span><br><span class="line">│   └── controller         // 测试接口</span><br><span class="line">│       └── TestController.java</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven 依赖 (<code>pom.xml</code>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全局异常处理器 (<code>GlobalExceptionHandler.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一错误响应格式</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ErrorResult</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ErrorResult</span><span class="params">(<span class="type">int</span> code, String message, String path)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.path = path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理自定义业务异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleBusinessException</span><span class="params">(BusinessException e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(e.getCode(), e.getMessage(), request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数校验异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleBindException</span><span class="params">(BindException e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getFieldError() != <span class="literal">null</span> </span><br><span class="line">                ? e.getFieldError().getDefaultMessage() </span><br><span class="line">                : <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(<span class="number">40000</span>, message, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理其他所有异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResult <span class="title function_">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ErrorResult</span>(<span class="number">50000</span>, <span class="string">&quot;系统繁忙&quot;</span>, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义业务异常 (<code>BusinessException.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(<span class="type">int</span> code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试控制器 (<code>TestController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试业务异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">triggerError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="number">40001</span>, <span class="string">&quot;业务逻辑错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试参数校验</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/param&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@Min(value = 1, message = &quot;ID必须大于0&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试系统异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">triggerException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预期响应</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">40001</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;业务逻辑错误&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/error&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数校验异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">40000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ID必须大于0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/param&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统异常</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">50000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统繁忙&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/test/exception&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>错误码范围</strong>‌</th>
<th>‌<strong>含义</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>40000-40099</td>
<td>客户端参数错误</td>
<td>40001&#x3D;手机号格式错误</td>
</tr>
<tr>
<td>40100-40199</td>
<td>认证&#x2F;权限问题</td>
<td>40101&#x3D;Token过期</td>
</tr>
<tr>
<td>40400-40499</td>
<td>资源不存在</td>
<td>40401&#x3D;用户不存在</td>
</tr>
<tr>
<td>50000-50099</td>
<td>服务端未分类错误</td>
<td>50000&#x3D;系统错误</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="JAR、WAR、EAR包"><a href="#JAR、WAR、EAR包" class="headerlink" title="JAR、WAR、EAR包"></a>JAR、WAR、EAR包</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-packaging.html">介绍</a></p>
</li>
<li><h4 id="SpringBoot事件监听机制"><a href="#SpringBoot事件监听机制" class="headerlink" title="SpringBoot事件监听机制"></a>SpringBoot<strong>事件监听机制</strong></h4><p><strong>事件监听机制</strong>‌是实现模块解耦、异步处理、系统监控的核心功能。</p>
<ul>
<li><p>原生事件监听</p>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>触发时机</th>
<th>典型场景</th>
</tr>
</thead>
<tbody><tr>
<td><code>ApplicationStartingEvent</code></td>
<td>应用启动开始时</td>
<td>初始化全局配置</td>
</tr>
<tr>
<td><code>ApplicationStartedEvent</code></td>
<td>应用上下文创建完成，CommandLineRunner 执行前</td>
<td>数据库连接预热</td>
</tr>
<tr>
<td><code>ApplicationReadyEvent</code></td>
<td>应用已完全启动，可接收外部请求</td>
<td>通知运维系统启动成功</td>
</tr>
<tr>
<td><code>ApplicationFailedEvent</code></td>
<td>启动过程中发生异常导致失败</td>
<td>发送告警通知</td>
</tr>
</tbody></table>
<p>监听实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppLifecycleListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式1：实现 ApplicationListener 接口</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StartingListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationStartingEvent&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationStartingEvent event)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;应用开始启动，环境：&quot;</span> + event.getSpringApplication().getEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式2：使用 @EventListener 注解（推荐）</span></span><br><span class="line">    <span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAppReady</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用已就绪，开始加载缓存数据...&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化缓存或预加载数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件开发</p>
<ul>
<li><strong>定义事件类</strong></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户注册成功事件（继承 ApplicationEvent）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRegisterEvent</span><span class="params">(Object source, String username)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>发布事件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// 用户注册逻辑...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户注册成功：&quot;</span> + username);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, username));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>监听自定义事件</strong></p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步监听（默认）</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleSyncEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[同步] 发送欢迎邮件至：&quot;</span> + event.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步监听（需启用@Async）</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAsyncEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[异步] 记录用户注册日志：&quot;</span> + event.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高级监听配置</p>
<ul>
<li><p><strong>异步事件处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>条件化监听</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.username.startsWith(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAdminEvent</span><span class="params">(UserRegisterEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;管理员账号注册：&quot;</span> + event.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Servlet 监听器扩展</p>
<ul>
<li><p><strong>监听 HTTP 请求生命周期</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLogListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求开始 =&gt; &quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;请求结束 =&gt; &quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册自定义 Servlet 监听器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;RequestLogListener&gt; <span class="title function_">loggingListener</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">RequestLogListener</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>生产环境最佳实践</p>
<ul>
<li><strong>事件监听与事务边界</strong></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAfterCommit</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 事务提交成功后发送通知</span></span><br><span class="line">    notificationService.sendPaymentSuccess(event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>监控集成（Prometheus + Grafana）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trackMetrics</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 上报事件到监控系统</span></span><br><span class="line">    metricsCounter.increment(<span class="string">&quot;spring.events.&quot;</span> + event.getClass().getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>调试与验证</p>
<ul>
<li><p><strong>单元测试示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testEventPublish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRegisterEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, <span class="string">&quot;testUser&quot;</span>);</span><br><span class="line">        eventPublisher.publishEvent(event);</span><br><span class="line">        <span class="comment">// 验证监听器是否执行...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>例子模板：</p>
<ul>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com.example</span><br><span class="line">    ├── Application.java            # Spring Boot主类</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── AsyncConfig.java        # 异步线程池配置</span><br><span class="line">    ├── event</span><br><span class="line">    │   ├── OrderPaidEvent.java     # 自定义事件（订单支付）</span><br><span class="line">    │   └── publisher</span><br><span class="line">    │       └── OrderEventPublisher.java  # 事件发布者</span><br><span class="line">    ├── listener</span><br><span class="line">    │   ├── EmailListener.java     # 邮件通知监听器</span><br><span class="line">    │   └── LogListener.java       # 日志记录监听器</span><br><span class="line">    └── controller</span><br><span class="line">        └── OrderController.java   # 测试接口</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven依赖 (<code>pom.xml</code>)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主类 (<code>Application.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 启用异步监听支持</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件 (<code>OrderPaidEvent.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPaidEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Double amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPaidEvent</span><span class="params">(Object source, Long orderId, Double amount)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getOrderId</span><span class="params">()</span> &#123; <span class="keyword">return</span> orderId; &#125;</span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getAmount</span><span class="params">()</span> &#123; <span class="keyword">return</span> amount; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件发布者 (<code>OrderEventPublisher.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.event.publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventPublisher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEventPublisher</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishOrderPaid</span><span class="params">(Long orderId, Double amount)</span> &#123;</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderPaidEvent</span>(<span class="built_in">this</span>, orderId, amount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听器实现</p>
<ul>
<li>同步监听 - 邮件通知 (<code>EmailListener.java</code>)</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPaymentEmail</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[同步] 发送订单支付邮件：订单ID=%d, 金额=%.2f\n&quot;</span>, </span><br><span class="line">            event.getOrderId(), event.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>异步监听 - 日志记录 (<code>LogListener.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.OrderPaidEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPayment</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[异步] 记录支付日志：订单ID=%d, 金额=%.2f\n&quot;</span>,</span><br><span class="line">            event.getOrderId(), event.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>异步线程池配置 (<code>AsyncConfig.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">3</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;event-async-&quot;</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试接口 (<code>OrderController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.event.publisher.OrderEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderController</span><span class="params">(OrderEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payOrder</span><span class="params">(<span class="meta">@RequestParam</span> Long orderId, </span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam</span> Double amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟支付逻辑</span></span><br><span class="line">        eventPublisher.publishOrderPaid(orderId, amount);</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;订单%d支付成功，金额%.2f&quot;</span>, orderId, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高级功能扩展</p>
<ul>
<li><p>条件过滤监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(condition = &quot;#event.amount &gt; 500&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLargePayment</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;大额支付预警：&quot;</span> + event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务边界监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCommitHandler</span><span class="params">(OrderPaidEvent event)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;事务提交后处理：&quot;</span> + event.getOrderId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听应用生命周期事件</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAppReady</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;应用启动完成，开始初始化...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p><a href="https://www.cainiaojc.com/springboot/springboot-caching.html">指南1</a></p>
<p><a href="https://www.cnblogs.com/JiangLai/p/9999811.html">指南2</a></p>
</li>
<li><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>**定义：**专门拦截对动态资源的后台请求，即拦截对控制层的请求，更多用于是判断用户是否有权限请求后台。</p>
<p><a href="https://blog.csdn.net/o0way0o/article/details/135320565">WebMvcConfigurer(可部分实现—推荐) 和 WebMvcConfigurationSupport(全部重写—复杂)</a></p>
<p><a href="https://developer.aliyun.com/article/1233256">WebMvcConfigurer 和 WebMvcConfigurationSupport 2</a></p>
<p><strong>包括：</strong></p>
<ul>
<li>定义拦截器（<code>implements HandlerInterceptor</code>）</li>
<li>配置拦截器（<code>implements WebMvcConfigurer</code>）。</li>
</ul>
<p><strong>方法：</strong></p>
<ul>
<li><p><code>preHandle(……)</code> 方法：</p>
<ul>
<li><p><strong>执行时机</strong>‌：在控制器方法执行前触发，用于请求预处理‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：权限校验、请求日志记录、参数预处理</p>
</li>
<li><p>‌返回值意义</p>
<ul>
<li><code>true</code>：继续执行后续拦截器和控制器方法</li>
<li><code>false</code>：立即中断请求处理流程‌</li>
</ul>
</li>
<li><p>‌<strong>典型应用</strong>‌：验证请求头中的Token有效性‌</p>
</li>
</ul>
</li>
<li><p><code>postHandle(……)</code> 方法：</p>
<ul>
<li><p>‌<strong>执行时机</strong>‌：在控制器方法执行后触发，视图渲染前执行‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：响应数据加工、修改ModelAndView对象</p>
</li>
<li><p>‌<strong>限制说明</strong>‌：在<code>@ResponseBody</code>或异步请求中不会触发‌</p>
</li>
<li><p>‌<strong>典型应用</strong>‌：统一添加响应头信息、修改返回数据格式‌</p>
</li>
</ul>
</li>
<li><p><code>afterCompletion(……)</code> 方法：</p>
<ul>
<li><p><strong>执行时机</strong>‌：在整个请求完成后触发（视图渲染后）‌</p>
</li>
<li><p>‌<strong>核心功能</strong>‌：资源清理、最终日志记录、异常跟踪</p>
</li>
<li><p>‌<strong>执行条件</strong>‌：仅在<code>preHandle</code>返回<code>true</code>时执行‌</p>
</li>
<li><p>‌<strong>典型应用</strong>‌：记录请求总耗时、释放数据库连接资源‌</p>
</li>
</ul>
</li>
</ul>
<p><strong>方法执行顺序示意图：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preHandle → 控制器方法 → postHandle → 视图渲染 → afterCompletion</span><br></pre></td></tr></table></figure>

<p><strong>模板：</strong></p>
<ul>
<li><p>项目结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">└── com.example</span><br><span class="line">    ├── Application.java          # Spring Boot主类</span><br><span class="line">    ├── config</span><br><span class="line">    │   └── WebMvcConfig.java     # 拦截器配置</span><br><span class="line">    ├── interceptor</span><br><span class="line">    │   ├── LogInterceptor.java   # 日志拦截器</span><br><span class="line">    │   └── AuthInterceptor.java  # 权限拦截器</span><br><span class="line">    └── controller</span><br><span class="line">        └── UserController.java   # 测试接口</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志拦截器 (<code>LogInterceptor.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                             HttpServletResponse response, </span></span><br><span class="line"><span class="params">                             Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录请求开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 请求开始 =&gt; &#123;&#125; &#123;&#125;&quot;</span>, request.getMethod(), request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                           HttpServletResponse response,</span></span><br><span class="line"><span class="params">                           Object handler,</span></span><br><span class="line"><span class="params">                           ModelAndView modelAndView)</span> &#123;</span><br><span class="line">        <span class="comment">// 控制器方法执行后触发（视图渲染前）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">controllerTime</span> <span class="operator">=</span> System.currentTimeMillis() - (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录核心数据</span></span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 控制器处理完成 =&gt; 耗时&#123;&#125;ms | 状态码: &#123;&#125; | 视图: &#123;&#125;&quot;</span>, </span><br><span class="line">            controllerTime, </span><br><span class="line">            response.getStatus(),</span><br><span class="line">            (modelAndView != <span class="literal">null</span>) ? modelAndView.getViewName() : <span class="string">&quot;N/A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                Object handler, </span></span><br><span class="line"><span class="params">                                Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算请求处理时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">        logger.info(<span class="string">&quot;[Log] 请求结束 =&gt; &#123;&#125;ms &#123;&#125;&quot;</span>, duration, request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限拦截器 (<code>AuthInterceptor.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || !token.equals(<span class="string">&quot;123456&quot;</span>)) &#123;</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;: 401, \&quot;msg\&quot;: \&quot;未授权访问\&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态资源拦截器 <code>StaticResourceInterceptor.java</code>（用于放行资源请求）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticResourceInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义静态资源路径前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] STATIC_PATHS = &#123;<span class="string">&quot;/css/&quot;</span>, <span class="string">&quot;/js/&quot;</span>, <span class="string">&quot;/images/&quot;</span>, <span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;/public/&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测是否为静态资源请求</span></span><br><span class="line">        <span class="keyword">for</span> (String prefix : STATIC_PATHS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.startsWith(prefix)) &#123;</span><br><span class="line">                <span class="comment">// 标记为已处理（实际开发中可添加缓存控制等逻辑）</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;static_resource&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 放行但不做后续处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 非静态资源继续后续流程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录拦截器 <code>LoginInterceptor.java</code>（用于会话验证）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从会话中获取登录标记</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;LOGIN_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未登录时重定向到登录页</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 中断请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器配置 (<code>WebMvcConfig.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.AuthInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.LogInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.StaticResourceInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.example.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LogInterceptor logInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthInterceptor authInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StaticResourceInterceptor staticResourceInterceptor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebMvcConfig</span><span class="params">(LogInterceptor logInterceptor, </span></span><br><span class="line"><span class="params">                       AuthInterceptor authInterceptor</span></span><br><span class="line"><span class="params">                       StaticResourceInterceptor staticResourceInterceptor,</span></span><br><span class="line"><span class="params">                       LoginInterceptor loginInterceptor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.logInterceptor = logInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.authInterceptor = authInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.staticResourceInterceptor = staticResourceInterceptor;</span><br><span class="line">        <span class="built_in">this</span>.loginInterceptor = loginInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志拦截器（拦截所有请求）</span></span><br><span class="line">        registry.addInterceptor(logInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限拦截器（排除/login）</span></span><br><span class="line">        registry.addInterceptor(authInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">// 静态资源拦截器（优先注册）</span></span><br><span class="line">        registry.addInterceptor(staticResourceInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .order(<span class="number">0</span>); <span class="comment">// 最高优先级</span></span><br><span class="line">        <span class="comment">// 登录拦截器（后注册）</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                    <span class="string">&quot;/login&quot;</span>,         <span class="comment">// 登录页</span></span><br><span class="line">                    <span class="string">&quot;/api/login&quot;</span>,     <span class="comment">// 登录接口</span></span><br><span class="line">                    <span class="string">&quot;/error&quot;</span>,         <span class="comment">// 错误页</span></span><br><span class="line">                    <span class="string">&quot;/favicon.ico&quot;</span>,   <span class="comment">// 网站图标</span></span><br><span class="line">                    <span class="string">&quot;/static/**&quot;</span>,     <span class="comment">// 静态资源</span></span><br><span class="line">                    <span class="string">&quot;/public/**&quot;</span>      <span class="comment">// 公共资源</span></span><br><span class="line">                )</span><br><span class="line">                .order(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拦截顺序控制:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过order值控制执行顺序（值越小优先级越高）</span></span><br><span class="line">registry.addInterceptor(logInterceptor).order(<span class="number">1</span>);</span><br><span class="line">registry.addInterceptor(authInterceptor).order(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试接口 (<code>UserController.java</code>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/profile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">profile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="集成Redis"><a href="#集成Redis" class="headerlink" title="集成Redis"></a>集成Redis</h4><p>Redis 是一种非关系型数据库（NoSQL）,NoSQL 是以 key-value 的形式存储的.</p>
<p>NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。</p>
<table>
<thead>
<tr>
<th><strong>对比维度</strong>‌</th>
<th>‌<strong>Redis</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>存储介质</strong>‌</td>
<td>基于内存（支持持久化到磁盘）</td>
<td>基于磁盘（数据持久化存储）</td>
</tr>
<tr>
<td>‌<strong>数据模型</strong>‌</td>
<td>键值对、哈希、列表、集合、有序集合等丰富数据结构</td>
<td>关系型数据模型（表格结构，支持 JOIN 和复杂查询）</td>
</tr>
<tr>
<td>‌<strong>读写性能</strong>‌</td>
<td>内存操作，QPS 可达 10万+（适合高并发场景）</td>
<td>依赖磁盘 I&#x2F;O，QPS 通常在千级（适合低频复杂操作）</td>
</tr>
<tr>
<td>‌<strong>事务支持</strong>‌</td>
<td>单命令原子性，无完整 ACID（仅支持简单批量操作）</td>
<td>完整 ACID 事务（支持复杂事务逻辑，如转账、库存扣减）</td>
</tr>
<tr>
<td>‌<strong>数据一致性</strong>‌</td>
<td>最终一致性（主从同步可能存在延迟）</td>
<td>强一致性（通过锁机制和事务保障）</td>
</tr>
<tr>
<td>‌<strong>持久化方式</strong>‌</td>
<td>RDB（快照）和 AOF（日志追加）两种方式</td>
<td>默认通过 binlog 和 redo log 持久化</td>
</tr>
<tr>
<td>‌<strong>扩展性</strong>‌</td>
<td>支持主从复制和集群分片（横向扩展）</td>
<td>通过主从复制、分库分表扩展（复杂度较高）</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>1. 缓存加速（热点数据） 2. 实时统计（计数器、排行榜） 3. 分布式锁、消息队列</td>
<td>1. 核心业务数据存储（订单、用户） 2. 复杂查询和事务处理 3. 数据分析</td>
</tr>
<tr>
<td>‌<strong>资源消耗</strong>‌</td>
<td>内存占用高（需控制数据量）</td>
<td>磁盘和 CPU 消耗为主（适合大数据量存储）</td>
</tr>
<tr>
<td>‌<strong>典型应用</strong>‌</td>
<td>用户会话缓存、商品秒杀库存、实时在线人数统计</td>
<td>银行交易记录、电商订单系统、用户关系管理</td>
</tr>
</tbody></table>
<p>‌<strong>协作模式示例</strong>:‌</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>Redis 角色</strong>‌</th>
<th>‌<strong>MySQL 角色</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>用户登录</td>
<td>缓存 Session 信息（快速验证）</td>
<td>存储用户详细信息（密码、地址等）</td>
</tr>
<tr>
<td>商品详情页</td>
<td>缓存商品基础数据（名称、价格）</td>
<td>存储库存、评价、交易记录等关联数据</td>
</tr>
<tr>
<td>订单支付</td>
<td>分布式锁（防止重复支付）</td>
<td>事务处理（扣减库存、生成订单记录）</td>
</tr>
</tbody></table>
<p>‌<strong>总结</strong>‌</p>
<ul>
<li>‌<strong>Redis 核心价值</strong>‌：内存高速读写、灵活数据结构，解决高并发实时性问题。</li>
<li>‌<strong>MySQL 核心价值</strong>‌：强一致性、复杂查询与事务，保障核心业务数据安全。</li>
<li>‌<strong>协作逻辑</strong>‌：Redis 作为 MySQL 的缓存层和实时数据处理层，提升整体性能与用户体验。</li>
</ul>
<p><strong>Spring Boot+Redis模板：</strong></p>
<ul>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── com/example/demo</span><br><span class="line">│   ├── config/RedisConfig.java      # Redis配置</span><br><span class="line">│   ├── entity/User.java             # 实体类</span><br><span class="line">│   ├── service/UserService.java     # 业务逻辑</span><br><span class="line">│   └── DemoApplication.java         # 启动类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加依赖（<code>pom.xml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认使用 Lettuce 客户端 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
</li>
</ul>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># redis数据库索引(默认为0)，我们使用索引为3的数据库，避免和其他数据库冲突</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># redis服务器地址（默认为localhost）</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.73</span><span class="number">.12</span></span><br><span class="line">    <span class="comment"># redis端口（默认为6379）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># redis访问密码（默认为空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">pwd123</span></span><br><span class="line">    <span class="comment"># redis连接超时时间（单位毫秒）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># redis连接池配置</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="comment"># 最大可用连接数（默认为8，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最大空闲连接数（默认为8，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 最小空闲连接数（默认为0，该值只有为正数才有用）</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>实体类（<code>User.java</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  <span class="comment">// 必须实现序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、Getter/Setter省略（需自行补充）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis配置类（解决序列化问题）（<code>RedisConfig.java</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Key 序列化为字符串</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// Value 序列化为 JSON</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决 Redis 存储乱码问题，支持 JSON 格式数据 ‌</p>
</li>
<li><p><strong>业务层使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(String userId, User user)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user:&quot;</span> + userId, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查用户是否存在</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">existsUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(<span class="string">&quot;user:&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试用例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testStringOps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        opsForValue()：字符串操作</span></span><br><span class="line"><span class="comment">        opsForHash()：哈希表操作（如 hPut, hGetAll</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;demoKey&quot;</span>, <span class="string">&quot;Hello Redis&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;demoKey&quot;</span>);</span><br><span class="line">        System.out.println(value);  <span class="comment">// 输出: Hello Redis</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCRUD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsan@example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试保存</span></span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试查询</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">foundUser</span> <span class="operator">=</span> userService.getUser(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询结果: &quot;</span> + foundUser.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试存在性检查</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户是否存在: &quot;</span> + userService.existsUser(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试删除</span></span><br><span class="line">        userService.deleteUser(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户删除后是否存在: &quot;</span> + userService.existsUser(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="ActiveMQ消息队列"><a href="#ActiveMQ消息队列" class="headerlink" title="ActiveMQ消息队列"></a>ActiveMQ消息队列</h4><p><a href="https://blog.csdn.net/spd96363/article/details/108645809">指南</a></p>
<ul>
<li><p>定义：</p>
<p>发送者把消息发送给消息服务器，消息服务器将消息存放在若干队列&#x2F;主题topic中，在合适的时候，消息服务器回将消息转发给接受者。在这个过程中，发送和接收是异步的，也就是发送无需等待，而且发送者和接受者的生命周期也没有必然的关系。</p>
<p>比较常见的消息队列有：ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ。</p>
<p>Spring Boot的starter中专门集成了ActiveMQ。</p>
</li>
<li><p>用途：</p>
<p>解决应用耦合、异步消息、流量削锋等问题。</p>
</li>
<li><p>分为队列Queue和主题模式Topic。</p>
</li>
<li><p>模板：</p>
<ul>
<li><p><strong>添加依赖（<code>pom.xml</code>）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 JSON 消息时需添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（<code>application.yml</code>）</strong></p>
</li>
</ul>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span>  <span class="comment"># ActiveMQ服务地址</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span>                        <span class="comment"># 默认用户名（无密码可留空）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">packages:</span>                          <span class="comment"># 信任所有包（生产环境需限制）</span></span><br><span class="line">      <span class="attr">trust-all:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span>                   <span class="comment"># 禁用连接池（默认Lettuce）</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">  	<span class="attr">pub-sub-domain:</span> <span class="literal">false</span>			   <span class="comment"># 队列模式</span></span><br><span class="line">  	<span class="attr">pub-sub-domain:</span> <span class="literal">true</span>			   <span class="comment"># 主题模式</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>代码实现</strong></p>
<ul>
<li><p><strong>定义消息队列与主题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点对点队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">sampleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQQueue</span>(<span class="string">&quot;demo.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布/订阅主题</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Topic <span class="title function_">sampleTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveMQTopic</span>(<span class="string">&quot;demo.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消息生产者（发送消息）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送队列消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueueMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">&quot;demo.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送主题消息（JSON格式）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopicMessage</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        jmsTemplate.convertAndSend(<span class="string">&quot;demo.topic&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消息消费者（监听消息）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列消息</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;demo.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveQueueMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到队列消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 监听主题消息（JSON反序列化）</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;demo.topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveTopicMessage</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到主题消息: &quot;</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 持久化订阅（主题模式）</span></span><br><span class="line">    <span class="comment">// @JmsListener(destination = &quot;demo.topic&quot;, subscription = &quot;my-subscription&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActiveMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        producer.sendQueueMessage(<span class="string">&quot;Hello ActiveMQ&quot;</span>);</span><br><span class="line">        producer.sendTopicMessage(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><ul>
<li><p>定义：</p>
<p>Shiro 是一个强大、简单易用的 Java 安全框架，主要用来更便捷的认证，授权，加密，会话管等等，可为任何应用提供安全保障</p>
</li>
<li><p>Shiro和Spring Security：</p>
<p><a href="https://cloud.tencent.com/developer/article/1819901">Shiro和Spring Security选择</a></p>
<p><a href="https://developer.aliyun.com/article/1436929">Shiro和Spring Security选择</a></p>
<ul>
<li><p><strong>核心特性对比</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>Spring Security</strong>‌</th>
<th>‌<strong>Shiro</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位</strong>‌</td>
<td>Spring 官方推荐的安全框架，深度集成 Spring 生态</td>
<td>轻量级通用安全框架，支持多种应用场景</td>
</tr>
<tr>
<td>‌<strong>功能复杂度</strong>‌</td>
<td>功能强大，支持 OAuth2、LDAP、方法级权限控制等</td>
<td>功能简洁，核心聚焦认证与基础授权</td>
</tr>
<tr>
<td>‌<strong>配置复杂度</strong>‌</td>
<td>配置复杂，需理解过滤器链、安全上下文等概念</td>
<td>配置简单，API 设计直观</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>企业级应用、微服务架构、需复杂权限控制场景</td>
<td>小型项目、快速开发场景</td>
</tr>
<tr>
<td>‌<strong>Spring Boot 集成</strong>‌</td>
<td>原生支持，通过 Starter 快速集成</td>
<td>需手动配置，或使用第三方 Starter（简化有限）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h5 id="Shiro："><a href="#Shiro：" class="headerlink" title="Shiro："></a>Shiro：</h5><p><a href="https://blog.csdn.net/qq_48989313/article/details/119561860">指南</a></p>
<p><strong><code>ShiroFilterFactoryBean</code>会拦截前端请求交给<code>DefaultWebSecurityManager</code>，再交给<code>MyRealm</code>进行<font color="red"><em>认证和授权</em></font>处理</strong></p>
<ul>
<li><p>依赖<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>核心配置类<code>ShiroConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置过滤器链</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilter</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factory.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 拦截规则示例</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/admin/**&quot;</span>, <span class="string">&quot;roles[admin]&quot;</span>);</span><br><span class="line">        factory.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		anon:  无需认证就可以访问</span></span><br><span class="line"><span class="comment">		authc: 必须认证了才能访问</span></span><br><span class="line"><span class="comment">		user:  必须拥有 记住我 功能才能用</span></span><br><span class="line"><span class="comment">		perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">		role:  拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        </span><br><span class="line">        factory.setLoginUrl(<span class="string">&quot;/login&quot;</span>);    <span class="comment">// 登录页地址</span></span><br><span class="line">        factory.setUnauthorizedUrl(<span class="string">&quot;/index&quot;</span>); <span class="comment">// 权限不足跳转</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(MyRealm realm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类<code>MyRealm.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证逻辑（登录验证）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPassword(), getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权逻辑（权限加载）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) principals.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">// 从数据库加载角色与权限</span></span><br><span class="line">        info.addRoles(user.getRoles());</span><br><span class="line">        info.setStringPermissions(userService.getUserPermissions(user.getId()));</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录控制器<code>AuthController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(<span class="meta">@RequestParam</span> String username, </span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam</span> String password)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);  <span class="comment">// 触发Realm认证逻辑</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/dashboard&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/login?error=&quot;</span> + e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><ol>
<li><h4 id="Spring-Boot跨域请求处理："><a href="#Spring-Boot跨域请求处理：" class="headerlink" title="Spring Boot跨域请求处理："></a>Spring Boot跨域请求处理：</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.cors.allowed-origins</span>=<span class="string">http://front.com</span></span><br><span class="line"><span class="attr">spring.mvc.cors.allowed-methods</span>=<span class="string">GET,POST</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot异步处理：默认启用异步支持。</p>
</li>
<li><h4 id="重定向和转发："><a href="#重定向和转发：" class="headerlink" title="重定向和转发："></a>重定向和转发：</h4><p><strong>请求次数与客户端行为</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>‌<strong>两次请求</strong>‌：客户端浏览器先向服务器发送请求，服务器返回新URL后，客户端再次发起新请求‌。</li>
<li>‌<strong>客户端驱动</strong>‌：由浏览器主动跳转，地址栏显示<strong>新URL‌</strong>。</li>
</ul>
</li>
<li>‌转发<ul>
<li>‌<strong>单次请求</strong>‌：服务器内部直接将请求转发到目标资源，客户端无感知‌。</li>
<li>‌<strong>地址栏不变</strong>‌：客户端浏览器始终显示<strong>原始请求的URL</strong>。</li>
</ul>
</li>
</ul>
<p><strong>数据传递能力</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>‌<strong>默认不传递数据</strong>‌：两次请求相互独立，需通过<code>Session</code>或<code>RedirectAttributes</code>显式传参‌。</li>
<li>示例：登录成功后重定向到主页，防止表单重复提交‌。</li>
</ul>
</li>
<li>转发<ul>
<li>通过<code>request</code>对象共享数据，所有参数和属性在转发链中可传递‌。</li>
<li>示例：用户权限验证后转发到不同页面，传递用户信息‌。</li>
</ul>
</li>
</ul>
<p> <strong>资源访问范围</strong>‌</p>
<ul>
<li>‌重定向<ul>
<li>可跳转到任意资源（包括外部站点），如<code>https://www.baidu.com</code>‌</li>
</ul>
</li>
<li>转发<ul>
<li>仅限当前Web应用内的资源，无法跨域‌。</li>
<li>示例：<code>/user/list</code>只能转发到同一项目的其他路径（如<code>/user/detail</code>）‌。</li>
</ul>
</li>
</ul>
<p>‌<strong>典型应用场景</strong>‌</p>
<ul>
<li>‌适用重定向的场景<ul>
<li>防止重复提交表单（如支付成功后跳转到结果页）‌。</li>
<li>资源迁移（旧URL重定向到新URL）‌。</li>
</ul>
</li>
<li>‌适用转发的场景<ul>
<li>服务器内部逻辑处理（如权限校验后显示不同视图）‌。</li>
<li>共享请求数据（如查询结果传递到展示页）‌。</li>
</ul>
</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>‌<strong>核心差异</strong>‌：转发是服务器内部跳转（<strong>单次请求</strong>），重定向是客户端跳转（<strong>两次请求</strong>）‌。</li>
<li><strong>‌选择原则</strong>：<ul>
<li>需跨域或避免重复提交 → 重定向‌。</li>
<li>需共享请求数据或保持URL隐蔽 → 转发‌。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="四、Spring-Boot-3-x-Shiro-MyBatis-Vue实现登录验证"><a href="#四、Spring-Boot-3-x-Shiro-MyBatis-Vue实现登录验证" class="headerlink" title="四、Spring Boot 3.x + Shiro+ MyBatis + Vue实现登录验证"></a>四、Spring Boot 3.x + Shiro+ MyBatis + Vue实现登录验证</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端:"></a>后端:</h4><ol>
<li>依赖配置（pom.xml）</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Shiro --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>数据库配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro_demo?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo.entity</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Shiro配置类（ShiroConfig.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Realm <span class="title function_">jwtRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtRealm</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtRealm</span>();</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">credentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        matcher.setHashAlgorithmName(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">        matcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(jwtRealm());</span><br><span class="line">        manager.setSessionManager(sessionManager());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionManager <span class="title function_">sessionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">        sessionManager.setSessionIdCookieEnabled(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/api/auth/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/api/auth/register&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		anon:  无需认证就可以访问</span></span><br><span class="line"><span class="comment">		authc: 必须认证了才能访问</span></span><br><span class="line"><span class="comment">		user:  必须拥有 记住我 功能才能用</span></span><br><span class="line"><span class="comment">		perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">		role:  拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义JWT Realm（JwtReal.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JwtUtil.getUsername(principals.toString());</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">// 添加角色权限</span></span><br><span class="line">        info.setRoles(userService.getUserRoles(username));</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span><br><span class="line">        <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> (String) token.getCredentials();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> JwtUtil.getUsername(jwtToken);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!JwtUtil.verify(jwtToken, username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(<span class="string">&quot;Token验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(jwtToken, jwtToken, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT工具类（JwtUtil.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;your-secret-key&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token, String username)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET_KEY)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">            <span class="keyword">return</span> claims.getSubject().equals(username);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(SECRET_KEY)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody()</span><br><span class="line">                .getSubject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户服务接口（UserService.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    Set&lt;String&gt; <span class="title function_">getUserRoles</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器（AuthController.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; login(<span class="meta">@RequestBody</span> LoginRequest request) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(request.username());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || !passwordMatches(request.password(), user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.generateToken(request.username());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(Map.of(</span><br><span class="line">            <span class="string">&quot;token&quot;</span>, token,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>, user.getUsername()</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">passwordMatches</span><span class="params">(String input, String stored)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现密码验证逻辑（需与Shiro加密方式一致）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sha256Hash</span>(input, <span class="literal">null</span>, <span class="number">3</span>).toString().equals(stored);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">LoginRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><ol>
<li><p>登录组件（Login.vue）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;handleLogin&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; setToken &#125; from &#x27;@/utils/auth&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [&#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          axios.post(&#x27;/api/auth/login&#x27;, this.form)</span><br><span class="line">            .then(res =&gt; &#123;</span><br><span class="line">              setToken(res.data.token);</span><br><span class="line">              this.$router.push(&#x27;/dashboard&#x27;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(() =&gt; &#123;</span><br><span class="line">              this.$message.error(&#x27;登录失败&#x27;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求拦截器（src&#x2F;utils&#x2F;request.js）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="title function_">getToken</span>();</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h4><ol>
<li><pre><code class="language-sql">CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    roles VARCHAR(200)
);

-- 测试用户（密码123456加密后）
INSERT INTO users(username, password, roles) 
VALUES (&#39;admin&#39;, &#39;a7d3df693039ef6e6aedb1e8b1234326f9d297c3b6d91d5d&#39;, &#39;admin,user&#39;);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 测试：</span><br><span class="line"></span><br><span class="line">1. ```http</span><br><span class="line">   POST http://localhost:8080/api/auth/login</span><br><span class="line">   Content-Type: application/json</span><br><span class="line">   </span><br><span class="line">   &#123;</span><br><span class="line">     &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">     &quot;password&quot;: &quot;123456&quot;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/blog2025.github.io/2025/04/01/Spring/</url>
    <content><![CDATA[<h3 id="一、JavaBean（Bean-豆子）"><a href="#一、JavaBean（Bean-豆子）" class="headerlink" title="一、JavaBean（Bean&#x2F;豆子）"></a>一、JavaBean（Bean&#x2F;豆子）</h3><ol>
<li><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一个固定模式的Java类，用于封装数据，包含：</p>
<p>①一个无参构造函数；</p>
<p>②需要序列化（数据结构或对象转换为字节流）并实现Serializable接口；</p>
<p>③可读写属性；</p>
<p>④getter和setter方法方便外部程序读取和修改。</p>
<p>范例：StudentsBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsBean</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">StudentsBean</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
</li>
<li><h4 id="JSP调用"><a href="#JSP调用" class="headerlink" title="JSP调用"></a>JSP调用</h4><p>导入JavaBean组件：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;包名&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>访问JavaBean组件：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;bean 的名字&quot;</span> class=<span class="string">&quot;JavaBean的完整类名(包名)&quot;</span> scope=<span class="string">&quot;bean 的作用域&quot;</span> &gt;&lt;/jsp:useBean&gt;</span><br><span class="line">&lt;!-- scope 的值可以是 page，request，session 或 application --&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;person&quot;</span> class=<span class="string">&quot;com.bean.Person&quot;</span>&gt;&lt;/jsp:useBean&gt;</span><br><span class="line">相当于对象的实例化：</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>设置和访问JavaBean组件中的属性：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;id&quot;</span> class=<span class="string">&quot;bean 编译的类&quot;</span> scope=<span class="string">&quot;bean 作用域&quot;</span>&gt;</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">&quot;bean 的 id&quot;</span> property=<span class="string">&quot;属性名&quot;</span>  value=<span class="string">&quot;value&quot;</span>/&gt;</span><br><span class="line">   &lt;jsp:getProperty name=<span class="string">&quot;bean 的 id&quot;</span> property=<span class="string">&quot;属性名&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;person&quot;</span> property=<span class="string">&quot;name&quot;</span>  value=<span class="string">&quot;jack&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;person&quot;</span> property=<span class="string">&quot;name&quot;</span> /&gt;</span><br><span class="line">相当于：</span><br><span class="line">&lt;%</span><br><span class="line">person.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">person.getName();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>参考1：<a href="https://www.runoob.com/jsp/jsp-javabean.html">https://www.runoob.com/jsp/jsp-javabean.html</a></p>
<p>参考2：<a href="https://blog.csdn.net/keep12moving/article/details/92666633">https://blog.csdn.net/keep12moving/article/details/92666633</a></p>
<p>参考3：<a href="https://blog.csdn.net/wu920604/article/details/72673832">https://blog.csdn.net/wu920604/article/details/72673832</a></p>
</li>
</ol>
<h3 id="二、Spring是什么？能做什么？"><a href="#二、Spring是什么？能做什么？" class="headerlink" title="二、Spring是什么？能做什么？"></a>二、Spring是什么？能做什么？</h3><ol>
<li><h4 id="Spring是什么？（万能工具箱）"><a href="#Spring是什么？（万能工具箱）" class="headerlink" title="Spring是什么？（万能工具箱）"></a>Spring是什么？（万能工具箱）</h4><p>解释①：用来装JavaBean的一种<strong>容器</strong>，即用来管理JavaBean实例化对象的一种容器。</p>
<p><strong>可以通过@bean自动完成对象的实例化。</strong></p>
<p>解释②：为了解决对象的创建和管理。</p>
<p>解释③：Spring 让 Java 开发从“手工作坊”变成“现代化工厂”，专注业务逻辑，而不是重复造轮子。</p>
<p>三层架构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Web层：Spring MVC</span><br><span class="line">业务层：Spring的IoC</span><br><span class="line">持久层：Spring的JDBC、ORM、等持久层框架</span><br></pre></td></tr></table></figure>

<p>核心：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">控制反转：IoC || 依赖注入：DI</span><br><span class="line">面向切面编程：AOP</span><br></pre></td></tr></table></figure>

<p>参考1：<a href="https://blog.csdn.net/lin_whl/article/details/103010425">https://blog.csdn.net/lin_whl/article/details/103010425</a></p>
<p>参考2：<a href="https://blog.csdn.net/YKorey/article/details/80629291">https://blog.csdn.net/YKorey/article/details/80629291</a></p>
</li>
<li><h4 id="Spring能做什么？"><a href="#Spring能做什么？" class="headerlink" title="Spring能做什么？"></a>Spring能做什么？</h4><p>①预定模板||依赖注入（如数据库操作只需要直接让Spring准备好即可，不需要去自己去写。）</p>
<p>②解耦、简化开发、易于测试；</p>
<p>③对事务进行声明；（事务是逻辑上的一组操作，要么都执行，要么都不执行）（如对数据库操作）等。</p>
<p><strong>如果把写代码比作造房子‌，传统方式需要自己搬砖、砌墙、接电线，而 Spring 提供了：</strong></p>
<ul>
<li>‌<strong>预制板</strong>‌（依赖注入）：直接组装现成的模块。</li>
<li>‌<strong>智能管家</strong>‌（AOP）：自动处理水电安装、刷墙等重复工作。</li>
<li>‌<strong>装修模板</strong>‌（Spring Boot）：一键生成基础户型，省去画图纸的时间。</li>
<li>用 ‌<strong>Spring Cloud</strong>‌ 可以快速构建分布式系统（比如电商中的订单、支付等独立服务），解决服务调用、负载均衡等问题。</li>
<li>通过 ‌<strong>Spring MVC</strong>‌ 框架，可以轻松处理网页的请求、响应、路由等，让前后端协作更清晰。<strong>Spring Boot</strong>‌ 进一步简化配置，可以更快启动一个Web项目。</li>
<li><strong>Spring</strong> 整合了 JDBC、JPA 等工具，让数据库操作（增删改查）变得更简单，减少繁琐代码。提供 ‌<strong>事务管理</strong>‌，保证数据库操作的一致性（比如转账失败时自动回滚，避免数据错误）。</li>
</ul>
</li>
</ol>
<h3 id="三、Spring详解："><a href="#三、Spring详解：" class="headerlink" title="三、Spring详解："></a>三、Spring详解：</h3><ol>
<li><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p><font color="red"><strong>Spring将各种功能封装为Bean&#x2F;豆子，使用时自动去调用这个Bean即可</strong></font></p>
<p>更准确的说Spring 的核心机制确实是通过 ‌**“Bean”<strong>‌ 和 ‌</strong>“IoC（控制反转）容器”**‌ 来管理对象。</p>
<p>**（1）Bean 是什么？**‌</p>
<ul>
<li>‌<strong>Bean 是 Spring 管理的对象</strong>‌：比如你的数据库工具类、网络请求处理器、配置参数等，都可以声明为 Bean。</li>
<li>‌<strong>Bean 不是普通的 new 出来的对象</strong>‌：它由 Spring 的 IoC 容器创建、组装和管理，生命周期由容器控制。</li>
</ul>
<p>**（2）IoC 容器：Spring 的<font color="red">“智能仓库”生产零件</font>**‌</p>
<ul>
<li>‌<strong>传统方式</strong>‌：你需要自己手动 <code>new</code> 对象，并层层传递依赖（比如 <code>A</code> 依赖 <code>B</code>，<code>B</code> 依赖 <code>C</code>，需要手动把 <code>C</code> 传给 <code>B</code>，再把 <code>B</code> 传给 <code>A</code>）。</li>
<li>‌<strong>Spring 的做法</strong>‌：你只需告诉 Spring 哪些类是 Bean（通过注解或配置），‌<strong>容器会自动创建这些 Bean，并按需注入它们之间的依赖</strong>‌，就像“智能仓库”自动给你配送零件。</li>
</ul>
<p> **（3）依赖注入（DI）：自动“装配”Bean<font color="red">|拼装零件为产品</font>**‌</p>
<ul>
<li><p>‌<strong>你只需要定义 Bean</strong>‌（比如用 <code>@Component</code> 标记一个类），然后告诉 Spring：“我的类需要某个 Bean”（比如用 <code>@Autowired</code> 注解）。</p>
</li>
<li><p><strong>‌Spring 会自动完成两件事</strong>：</p>
<p>①<strong>创建 Bean</strong>‌：根据配置或扫描路径，实例化对象。</p>
<p>②<strong>注入依赖</strong>‌：如果 Bean A 依赖 Bean B，Spring 会自动把 B 注入到 A 中（无需手动 <code>A.setB(new B())</code>）。</p>
</li>
</ul>
<p><strong>例：</strong></p>
<p>传统写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统写法：手动管理依赖</span></span><br><span class="line"><span class="type">DatabaseUtil</span> <span class="variable">dbUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseUtil</span>();</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(dbUtil);</span><br></pre></td></tr></table></figure>

<p>Spring写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明为 Bean（交给 Spring 管理）</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseUtil</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 自动注入依赖的 Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DatabaseUtil dbUtil;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>①创建 <code>DatabaseUtil</code> 实例（Bean）。</p>
<p>②创建 <code>UserService</code> 实例（Bean）。</p>
<p>③将 <code>DatabaseUtil</code> 的 Bean 注入到 <code>UserService</code> 中。</p>
</li>
<li><h4 id="IoC控制反转：Inversion-of-Control（第三方大管家-相亲婚介所）"><a href="#IoC控制反转：Inversion-of-Control（第三方大管家-相亲婚介所）" class="headerlink" title="IoC控制反转：Inversion of Control（第三方大管家&#x2F;相亲婚介所）"></a>IoC控制反转：Inversion of Control（第三方大管家&#x2F;相亲婚介所）</h4><p><img src="/blog2025.github.io/2025/04/01/Spring/IoC.png"></p>
<ul>
<li><p>**‌定义：**IoC容器负责实例化，配置和组装对象。 IoC容器从XML文件获取信息并相应地工作。</p>
</li>
<li><p>**任务：**实例化应用程序类、配置对象、组装对象之间的依赖关系</p>
</li>
<li><p>**IoC容器类型：**BeanFactory、ApplicationContext(功能更强大，推荐使用)</p>
<p>BeanFactory：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Resource resource=new ClassPathResource(&quot;applicationContext.xml&quot;);</span><br><span class="line">BeanFactory factory=new XmlBeanFactory(resource);</span><br></pre></td></tr></table></figure>

<p>ApplicationContext：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = </span><br><span class="line">    new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>传统控制权在程序员</strong>‌：你决定何时创建对象、如何传递依赖。</p>
</li>
<li><p>‌<strong>Spring 控制权反转</strong>‌：你只定义 Bean 和依赖关系，由 Spring 决定何时创建、如何注入。这就是“‌<strong>你不用找依赖，依赖会找你</strong>‌”的核心思想。</p>
</li>
</ul>
<p><strong>Bean的创建注解：</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>将修饰的资源交予spring管理。value属性：为资源命名（唯一标识）</td>
</tr>
<tr>
<td>@Controller</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰表示层的资源。</td>
</tr>
<tr>
<td>@Service</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰业务逻辑层的资源。</td>
</tr>
<tr>
<td>@Repository</td>
<td>衍生注解，与@Component作用和属性相同。特用于修饰数据访问层的资源。</td>
</tr>
</tbody></table>
<p>参考1：<a href="https://blog.csdn.net/ivan820819/article/details/79744797">https://blog.csdn.net/ivan820819/article/details/79744797</a></p>
<p>参考2：<a href="https://blog.csdn.net/xianyu120/article/details/120611838">https://blog.csdn.net/xianyu120/article/details/120611838</a></p>
<p>IoC和DI简单理解：<a href="https://blog.csdn.net/bestone0213/article/details/47424255">https://blog.csdn.net/bestone0213/article/details/47424255</a></p>
</li>
<li><h4 id="DI依赖注入：3种（IoC的其他角度描述）"><a href="#DI依赖注入：3种（IoC的其他角度描述）" class="headerlink" title="DI依赖注入：3种（IoC的其他角度描述）"></a>DI依赖注入：3种（IoC的其他角度描述）</h4><p><strong>Bean的注入风格：（XML、Java配置、注解）</strong></p>
<p><strong>Bean的注入方式：（字段注入、构造函数注入、Setter注入）</strong></p>
<ul>
<li><p>‌**（1）XML 配置**‌（早期方式）：在 XML 文件中声明 Bean 和依赖关系。</p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello: &quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②创建XML文件student-beans.xml；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用注解扫描（指定包路径） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 或者手动声明 Bean（无需注解） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;/&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 构造器注入示例 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg value=&quot;John Doe&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Setter 注入示例 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;student&quot; class=&quot;com.pojo.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;Jane Smith&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③调用Bean中的方法。<strong>IoC控制反转</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//方法1：</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Resource resource=new ClassPathResource(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">        BeanFactory factory=new XmlBeanFactory(resource);</span></span><br><span class="line"><span class="comment">        Student student=(Student)factory.getBean(&quot;student-beans&quot;);</span></span><br><span class="line"><span class="comment">        student.displayInfo();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">//方法2：</span></span><br><span class="line">        <span class="comment">// 加载 XML 配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;student-beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 从容器中获取 Student Bean</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line">        <span class="comment">// 使用 Bean</span></span><br><span class="line">        student.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        student.displayInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌**（2）Java 配置**‌：通过 <code>@Configuration</code> 和 <code>@Bean</code> 在代码中显式定义。</p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②创建配置类AppConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pojo&quot;)</span> <span class="comment">// 指定扫描包路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不想用 @Component，也可以手动声明 Bean</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="comment">// public Student student() &#123;</span></span><br><span class="line">    <span class="comment">//     return new Student();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③初始化容器并获取Bean；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 Java 配置类</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Bean</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(Student.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Bean</span></span><br><span class="line">        student.setName(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        student.displayInfo(); <span class="comment">// 输出：Hello: Jerry</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>（3）注解</strong>‌（主流方式）：用 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等注解标记类为Bean，其他类使用时用 <code>@Autowired</code> 注入Bean。<font color="red">在传统 Spring 框架（非 Spring Boot）中，使用注解时‌<strong>必须显式启用组件扫描</strong></font></p>
<p>①创建JavaBean类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②写<strong>XML配置</strong>文件或者<strong>AppConfig.java</strong>文件启动组件扫描（同上）</p>
<p>③定义依赖类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line">    <span class="comment">// 字段注入（不推荐，仅示例）</span></span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器注入（推荐）</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">    public StudentService(Student student) &#123;</span></span><br><span class="line"><span class="comment">        this.student = student;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter注入（需手动添加）</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	<span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">	public void setStudent(Student student) &#123;</span></span><br><span class="line"><span class="comment">    	this.student = student;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        student.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        student.displayInfo(); <span class="comment">// 输出：Hello: Alice</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 或使用 Java 配置类：</span></span><br><span class="line">        <span class="comment">// ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(StudentService.class);</span><br><span class="line">        service.useStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="DI依赖注入-自动装配类型：4种"><a href="#DI依赖注入-自动装配类型：4种" class="headerlink" title="DI依赖注入-自动装配类型：4种"></a>DI依赖注入-自动装配类型：4种</h4><p>xml文件中修改:</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>这是默认的自动装配模式。这意味着默认情况下没有自动装配。</td>
</tr>
<tr>
<td>byName</td>
<td>byName模式根据bean的名称注入对象依赖项。在这种情况下，属性名称和bean名称id必须相同。它在内部调用setter方法。<strong>（@Resource默认按照Name注入，但也可以通过Type注入）</strong></td>
</tr>
<tr>
<td>byType</td>
<td>byType模式根据类型注入对象依赖项。因此属性名称和bean名称id可以不同。它在内部调用setter方法。<strong>（@AutoWired仅按照Type注入）</strong></td>
</tr>
<tr>
<td>constructor</td>
<td>构造函数模式通过调用类的构造函数来注入依赖项。它会调用具有大量参数的构造函数。</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.pojo.Student&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;&quot;,type=&quot;&quot;)</span></span><br><span class="line"><span class="meta">@AutoWired(type=&quot;&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="IoC控制反转和DI依赖注入的区别："><a href="#IoC控制反转和DI依赖注入的区别：" class="headerlink" title="IoC控制反转和DI依赖注入的区别："></a>IoC控制反转和DI依赖注入的区别：</h4><p>分工：</p>
<table>
<thead>
<tr>
<th>‌<strong>步骤</strong>‌</th>
<th>‌<strong>执行者</strong>‌</th>
<th>‌<strong>行为</strong>‌</th>
<th>‌<strong>技术体现</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>Bean 的创建</strong>‌</td>
<td>IoC 容器</td>
<td>根据配置（XML&#x2F;Java配置&#x2F;注解）实例化 Bean</td>
<td><code>ApplicationContext</code>、<code>BeanFactory</code></td>
</tr>
<tr>
<td>‌<strong>依赖的注入</strong>‌</td>
<td>DI 机制</td>
<td>将其他 Bean 或值注入到目标 Bean 的属性中</td>
<td><code>@Autowired</code>、构造器参数、Setter 方法</td>
</tr>
</tbody></table>
<p><strong>形象类比：</strong></p>
<ul>
<li>‌<strong>IoC 容器</strong>‌ 像‌<strong>工厂车间</strong>‌：负责生产零件（Bean）。</li>
<li>‌<strong>DI 机制</strong>‌ 像‌<strong>组装流水线</strong>‌：将零件（依赖的 Bean）拼装成完整产品。</li>
</ul>
<p>**IoC 和 DI 是协作关系：**‌</p>
<ul>
<li>‌<strong>IoC 是前提</strong>‌：没有 IoC 容器创建 Bean，DI 将无对象可注入。</li>
<li>‌<strong>DI 是手段</strong>‌：通过依赖注入，IoC 容器才能管理对象间的复杂依赖关系。</li>
</ul>
<p>**总结：**‌</p>
<ul>
<li>‌<strong>IoC 创建 Bean</strong>‌：容器掌控对象的生死（实例化、销毁）。</li>
<li>‌<strong>DI 注入 Bean</strong>‌：容器解决对象的依赖（自动装配）。</li>
</ul>
</li>
<li><h4 id="Bean的作用域："><a href="#Bean的作用域：" class="headerlink" title="Bean的作用域："></a>Bean的作用域：</h4><p>（1）单例模式：引用同一个对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）多例模式：引用不同的对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）@Bean配合@Configuration使用（依赖注入的Java配置文件）可以代替XML配置；</p>
<p>（4）@Bean通过方法参数自动注入其他依赖；</p>
<p>（5）@Bean的核心作用是将一个方法的返回值注册为 Spring 容器管理的 Bean；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">userDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring 自动将 userDao() 方法的返回值注入此处</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserService <span class="title function_">userService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Bean(name&#x3D;”指定Bean的名称”,initMethod&#x3D;”配置初始化方法”,destoryMethod&#x3D;”配置销毁方法”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.pojo&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod=&quot;start&quot;,destoryMethod=&quot;destory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@PostConstruct</td>
<td>初始化方法，项目启动时执行，只会被调用一次。</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>销毁方法，项目关闭时执行，只会被调用一次。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="AOP面向切面编程：Aspect-Oriented-Programming"><a href="#AOP面向切面编程：Aspect-Oriented-Programming" class="headerlink" title="AOP面向切面编程：Aspect Oriented Programming"></a>AOP面向切面编程：<strong>Aspect Oriented Programming</strong></h4><ul>
<li><p>**定义：**模块化功能，把程序重复的代码抽取出来，在需要执行的时候，使用代理的技术，<strong>在不修改原来代码的基础上，对已有方法进行增强</strong>。</p>
</li>
<li><p><strong>核心思想：正是通过“横向切入”的方式，在程序执行的前后（或特定位置）统一添加公共功能</strong>‌。</p>
</li>
<li><p><strong>注解：</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Aspect</td>
<td>把当前类声明成切面类</td>
</tr>
<tr>
<td>@Before</td>
<td>把当前方法看成是前置通知</td>
</tr>
<tr>
<td>@AfterReturning</td>
<td>把当前方法看成是后置通知。</td>
</tr>
<tr>
<td>@AfterThrowing</td>
<td>把当前方法看成是异常通知</td>
</tr>
<tr>
<td>@After</td>
<td>把当前方法看成是最终通知</td>
</tr>
<tr>
<td>@Around</td>
<td>把当前方法看成是环绕通知</td>
</tr>
<tr>
<td>@Pointcut</td>
<td>指定切入点表达式</td>
</tr>
</tbody></table>
<p>代码详解：<a href="https://www.cainiaojc.com/spring/spring-aop-aspectj-annotation-example.html">https://www.cainiaojc.com/spring/spring-aop-aspectj-annotation-example.html</a></p>
</li>
<li><p><strong>核心概念：</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>术语</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>类比</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌**切面（Aspect）**‌</td>
<td>封装公共功能的模块（如日志记录工具类）。</td>
<td>类似一个“插件包”。</td>
</tr>
<tr>
<td>‌**连接点（Join Point）**‌</td>
<td>程序执行过程中的特定点（如方法调用、异常抛出）。</td>
<td>代码中可插入切面的“锚点”。</td>
</tr>
<tr>
<td>‌**切点（Pointcut）**‌</td>
<td>通过表达式匹配需要增强的连接点（例如所有 <code>UserService</code> 的方法）。</td>
<td>定义“在哪些锚点插入功能”。</td>
</tr>
<tr>
<td>‌**通知（Advice）**‌</td>
<td>切面在连接点执行的具体动作（如前置日志、后置事务提交）。</td>
<td>插件包中的具体“功能代码”。</td>
</tr>
<tr>
<td><strong>目标（Target）</strong></td>
<td>代理的目标对象。通俗点讲：你需要增强的类，这个类就是目标对象</td>
<td></td>
</tr>
<tr>
<td><strong>代理（Proxy）</strong></td>
<td>一个类被AOP增强后，就产生一个结果代理类。</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h3 id="四、Spring高级："><a href="#四、Spring高级：" class="headerlink" title="四、Spring高级："></a>四、Spring高级：</h3><ol>
<li><h4 id="数据库事务："><a href="#数据库事务：" class="headerlink" title="数据库事务："></a>数据库事务：</h4><ul>
<li>**原子性Atomicity：**事务是一个不可分割的工作单位，事务中的操作要么都成功，要么都失败。‌</li>
<li>**一致性Consistency：**事务前后数据的完整性必须保持一致。</li>
<li>**隔离性Isolation：**多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务干扰，多个并发事务之间数据要相互隔离。</li>
<li>**持久性Durability：**一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
</li>
<li><h4 id="并发问题："><a href="#并发问题：" class="headerlink" title="并发问题："></a>并发问题：</h4><ul>
<li>**脏读：**事务A读取了事务B ‌未提交的修改‌，若事务B回滚，事务A读取的数据无效‌。‌</li>
<li>**不可重复读：**事务A多次读取同一数据，因事务B的 更新&#x2F;删除操作已提交‌，导致两次结果不一致‌</li>
<li>**幻读：**事务A在范围查询中，因事务B ‌插入新数据并提交‌，导致两次结果集不一致‌</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>问题类型</strong>‌</th>
<th>‌<strong>核心差异</strong>‌</th>
<th>‌<strong>隔离级别要求</strong>‌</th>
<th>‌<strong>技术手段</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>脏读</strong>‌</td>
<td>读取未提交数据</td>
<td><code>READ_COMMITTED</code> 及以上</td>
<td>悲观锁、提交前禁止读取‌</td>
</tr>
<tr>
<td>‌<strong>不可重复读</strong>‌</td>
<td>同一数据被修改&#x2F;删除</td>
<td><code>REPEATABLE_READ</code> 及以上</td>
<td>MVCC、行级锁‌</td>
</tr>
<tr>
<td>‌<strong>幻读</strong>‌</td>
<td>范围查询中出现新数据</td>
<td><code>SERIALIZABLE</code></td>
<td>间隙锁、索引范围锁‌</td>
</tr>
</tbody></table>
<ol start="3">
<li><h4 id="声明式事务管理："><a href="#声明式事务管理：" class="headerlink" title="声明式事务管理："></a>声明式事务管理：</h4><p><code>@Transactional</code> 是 Spring 框架中用于 ‌<strong>声明式事务管理</strong>‌ 的核心注解，通过自动管理事务的开启、提交和回滚，简化数据库操作的原子性和一致性保障。</p>
<p>（1）<strong>核心功能</strong></p>
<ul>
<li>‌<strong>事务原子性保障</strong>‌<br>确保方法内的数据库操作作为一个整体执行：‌<strong>全部成功则提交，任意失败则回滚</strong>‌，符合 ACID 原则的原子性要求‌。</li>
<li>‌<strong>声明式事务管理</strong>‌<br>替代传统编程式事务（手动提交&#x2F;回滚），通过注解配置实现事务逻辑与业务逻辑的解耦‌。</li>
</ul>
<p>（2）<strong>关键特性</strong></p>
<ul>
<li><p><strong>传播行为（Propagation）</strong></p>
<p>定义事务的边界策略，例如：</p>
<ul>
<li><code>REQUIRED</code>（默认）：若当前存在事务则加入，否则新建事务‌。</li>
<li><code>REQUIRES_NEW</code>：始终新建独立事务，挂起当前事务（适用需隔离的场景）‌。</li>
</ul>
</li>
<li><p><strong>隔离级别（Isolation）</strong></p>
</li>
</ul>
<p>  控制事务并发时的数据可见性，如：</p>
<ul>
<li><p><code>READ_COMMITTED</code>：防止脏读（默认级别）‌。</p>
</li>
<li><p><code>SERIALIZABLE</code>：最高隔离级别，避免幻读但性能较低‌。</p>
</li>
<li><p><strong>回滚规则（Rollback）</strong></p>
</li>
<li><p><strong>默认规则</strong>‌：仅回滚 <code>RuntimeException</code> 和 <code>Error</code>‌。</p>
</li>
<li><p><strong>自定义规则</strong>‌：通过 <code>rollbackFor</code> 指定触发回滚的异常类型（如 <code>rollbackFor = Exception.class</code>）‌。‌</p>
</li>
<li><p><strong>超时与只读</strong></p>
</li>
<li><p><code>timeout</code>：设置事务超时时间（秒），超时自动回滚‌。</p>
</li>
<li><p><code>readOnly = true</code>：优化查询操作，禁止写入（部分数据库支持性能优化）‌。</p>
</li>
</ul>
<p>（3）<strong>应用场景</strong></p>
<ul>
<li><strong>数据更新操作</strong>‌<br>如转账业务（扣款与入账需原子性）‌。</li>
<li>‌<strong>批量操作</strong>‌<br>批量插入&#x2F;更新时，事务确保整体成功或回滚‌。</li>
<li>‌<strong>多数据源协调</strong>‌<br>跨多个数据库或微服务调用时，通过分布式事务管理器扩展（需结合其他组件）‌。</li>
</ul>
<p>（4）<strong>使用规范</strong></p>
<p>Spring 通过 AOP 动态代理实现事务管理，‌<strong>自调用（同类方法调用）不触发事务</strong>。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="meta">        isolation = Isolation.READ_COMMITTED,</span></span><br><span class="line"><span class="meta">        rollbackFor = SQLException.class,</span></span><br><span class="line"><span class="meta">        timeout = 30</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba</title>
    <url>/blog2025.github.io/2025/04/08/SpringCloudAlibaba/</url>
    <content><![CDATA[<h3 id="一、Spring-Cloud-Alibaba"><a href="#一、Spring-Cloud-Alibaba" class="headerlink" title="一、Spring Cloud Alibaba"></a>一、Spring Cloud Alibaba</h3><h4 id="缘由："><a href="#缘由：" class="headerlink" title="缘由："></a>缘由：</h4><p>Spring Cloud 的第一代实现 Spring Cloud Netflix 系列大部分组件都进入维护模式后，Spring Cloud 的第二代实现 Spring Cloud Alibaba 成为主流的微服务框架。</p>
<h4 id="定位："><a href="#定位：" class="headerlink" title="定位："></a>定位：</h4><p>Spring Cloud Alibaba 是阿里巴巴结合自身丰富的微服务实践而推出的微服务开发的一站式解决方案，</p>
<h4 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h4><ul>
<li>Nacos：服务注册与发现（Alibaba）</li>
<li>Dubbo：服务调用与负载均衡</li>
<li>Sentinel：流量控制,熔断降级,系统负载保护（Alibaba）</li>
<li><code>Gateway：和Spring Cloud Netflix 使用的一样</code></li>
<li>Seata：分布式事务解决方案（Alibaba）</li>
<li>RocketMQ：高性能、高吞吐量的分布式消息和流计算平台</li>
</ul>
<h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul>
<li>大型复杂的系统，例如大型电商系统。</li>
<li>高并发系统，例如大型门户网站、商品秒杀系统。</li>
<li>需求不明确，且变更很快的系统，例如创业公司业务系统。</li>
</ul>
<span id="more"></span>

<h3 id="二、Spring-Cloud-和-Spring-Cloud-Alibaba"><a href="#二、Spring-Cloud-和-Spring-Cloud-Alibaba" class="headerlink" title="二、Spring Cloud 和 Spring Cloud Alibaba"></a>二、Spring Cloud 和 Spring Cloud Alibaba</h3><ol>
<li><p><strong>服务注册与发现</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>注册中心</strong>‌</td>
<td>Eureka（AP 模式）‌</td>
<td>‌<strong>Nacos</strong>‌（AP&#x2F;CP 模式可切换）‌</td>
</tr>
<tr>
<td>‌<strong>核心差异</strong>‌</td>
<td>pom引入即可，仅支持服务注册与发现‌</td>
<td>需要单独下载，集成配置管理功能，支持动态配置刷新‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>服务调用与负载均衡</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>客户端负载</strong>‌</td>
<td>Ribbon + OpenFeign‌</td>
<td>‌<strong>Dubbo</strong>‌（高性能 RPC）‌</td>
</tr>
<tr>
<td>‌<strong>协议支持</strong>‌</td>
<td>HTTP&#x2F;REST‌</td>
<td>支持 Dubbo 协议（TCP 长连接）‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>流量控制与熔断</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>组件</strong>‌</td>
<td>‌<strong>Spring Cloud</strong>‌</td>
<td>‌<strong>Spring Cloud Alibaba</strong>‌</td>
</tr>
<tr>
<td>‌<strong>熔断降级</strong>‌</td>
<td>Hystrix（已停更）‌</td>
<td>‌<strong>Sentinel</strong>‌（实时监控、规则持久化）</td>
</tr>
<tr>
<td>‌<strong>核心特性</strong>‌</td>
<td>简单熔断策略‌</td>
<td>精细化流量控制（QPS&#x2F;线程数&#x2F;热点参数）‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>配置管理</strong></p>
<table>
<thead>
<tr>
<th><strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>配置中心</strong>‌</td>
<td>Spring Cloud Config‌</td>
<td>‌<strong>Nacos Config</strong>‌（与注册中心一体化）‌</td>
</tr>
<tr>
<td>‌<strong>优势</strong>‌</td>
<td>需独立部署，功能基础‌</td>
<td>动态配置推送、多环境隔离、版本回滚‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>分布式事务</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>解决方案</strong>‌</td>
<td>无原生支持‌</td>
<td>‌<strong>Seata</strong>‌（AT&#x2F;TCC 模式）‌</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>需集成第三方框架‌</td>
<td>跨服务事务一致性保障（如订单扣库存）</td>
</tr>
</tbody></table>
</li>
<li><p><strong>消息队列</strong></p>
<table>
<thead>
<tr>
<th><strong>组件</strong>‌</th>
<th>‌<strong>Spring Cloud</strong>‌</th>
<th>‌<strong>Spring Cloud Alibaba</strong></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>默认集成</strong>‌</td>
<td>RabbitMQ&#x2F;Kafka‌</td>
<td>‌<strong>RocketMQ</strong>‌（事务消息、顺序消息）‌‌</td>
</tr>
<tr>
<td>‌<strong>优势</strong>‌</td>
<td>通用性强‌</td>
<td>高吞吐、低延迟，适合金融级场景‌</td>
</tr>
</tbody></table>
</li>
<li><p><strong>生态系统与适用场景</strong></p>
<ul>
<li>Spring Cloud<ul>
<li>基于 Netflix OSS，适合公有云&#x2F;私有云部署‌。</li>
<li>社区成熟，文档丰富，但部分组件已停更（如 Hystrix）‌。</li>
</ul>
</li>
<li>‌Spring Cloud Alibaba<ul>
<li>深度整合阿里云生态，支持国内企业级需求（如高并发、分布式事务）‌。</li>
<li>组件性能优化（如 Nacos、Sentinel）更适合本土化生产环境‌</li>
</ul>
</li>
</ul>
</li>
<li><p>‌<strong>总结选型建议</strong>‌</p>
<ul>
<li>‌<strong>选择 Spring Cloud</strong>‌：若项目依赖 Netflix 生态或需快速集成国际化云服务‌。</li>
<li><strong>‌选择 Spring Cloud Alibaba</strong>：<ul>
<li>需要高性能 RPC（Dubbo）、动态配置管理（Nacos）或分布式事务（Seata）‌。</li>
<li>国内云环境部署，尤其是阿里云用户‌。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="三、服务注册与发现-Nacos"><a href="#三、服务注册与发现-Nacos" class="headerlink" title="三、服务注册与发现-Nacos"></a>三、服务注册与发现-Nacos</h3><ol>
<li><p><strong>组成</strong>：注册中心和配置中心Config的组合体</p>
<table>
<thead>
<tr>
<th>组成部分</th>
<th>全称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Na</td>
<td>naming&#x2F;nameServer</td>
<td>即服务注册中心，与  Spring Cloud Eureka 的功能类似。</td>
</tr>
<tr>
<td>co</td>
<td>configuration</td>
<td>即配置中心，与 Spring Cloud Config+Spring Cloud Bus 的功能类似。</td>
</tr>
<tr>
<td>s</td>
<td>service</td>
<td>即服务，表示 Nacos 实现的服务注册中心和配置中心都是以服务为核心的。</td>
</tr>
</tbody></table>
<p>用来代替Eureka作为服务注册中心，代替 Spring Cloud Config 作为配置中心（动态刷新）。</p>
</li>
<li><p><strong>特性</strong>：</p>
<ul>
<li><strong>服务发现</strong><ul>
<li>服务提供者向 Nacos 注册服务后，服务消费者可以在 Nacos 上通过 HTTP&amp;API查找、发现服务。</li>
</ul>
</li>
<li><strong>服务健康监测</strong><ul>
<li>提供了一个<strong>健康检查仪表盘</strong>，能够帮助我们根据健康状态管理服务的可用性及流量</li>
</ul>
</li>
<li><strong>动态配置服务</strong><ul>
<li>管理所有环境的应用配置和服务配置</li>
<li>消除了配置变更时重新部署应用和服务的需要</li>
<li>服务按需弹性扩展变得更容易</li>
<li>Nacos 提供了一个简洁易用的 UI 帮助我们管理所有服务和应用的配置<ul>
<li>配置版本跟踪</li>
<li>金丝雀发布</li>
<li>一键回滚配置</li>
<li>客户端配置更新状态跟踪</li>
</ul>
</li>
</ul>
</li>
<li><strong>动态DNS服务</strong><ul>
<li>更容易地实现负载均衡、流量控制以及数据中心内网的简单 DNS 解析服务。</li>
<li>管理服务的关联域名和可用的 IP:PORT 列表。</li>
</ul>
</li>
<li><strong>服务及其元数据管理</strong><ul>
<li>管理服务的描述、生命周期</li>
<li>管理服务的静态依赖分析</li>
<li>管理服务的健康状态</li>
<li>管理服务的流量管理、路由及安全策略</li>
<li>管理服务的 SLA 以及 metrics 统计数据</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>组件：client&#x2F;server-客户端&#x2F;服务端</strong></p>
<ul>
<li><p><strong>Nacos Server</strong></p>
<ul>
<li>可以作为服务注册中心，帮助Client 实现服务的注册与发现</li>
<li>可以作为配置中心，帮助Client 在不重启的情况下，实现配置的动态刷新</li>
</ul>
</li>
<li><p><strong>Nacos Client</strong></p>
<ul>
<li>Client 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-discovery</code>，在服务注册中心（Nacos Server）中实现服务的注册与发现。</li>
<li>Client 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-config</code>，在配置中心（Nacos Server）中实现配置的动态刷新。</li>
</ul>
</li>
<li><p><img src="/blog2025.github.io/2025/04/08/SpringCloudAlibaba/1.png" alt="image-20250409153827822"></p>
<ul>
<li>服务注册中心（Register Service）：它是一个 Nacos Server，可以为服务提供者和服务消费者提供服务注册和发现功能。</li>
<li>服务提供者（Provider Service）：它是一个 Nacos Client，用于对外服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现和调用。</li>
<li>服务消费者（Consumer Service）：它是一个 Nacos Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li>
</ul>
</li>
<li><p><strong>Nacos 实现服务注册与发现的流程</strong>：</p>
<ul>
<li><p>下载 Nacos Server 并运行</p>
<p><a href="https://nacos.io/download/nacos-server/">https://nacos.io/download/nacos-server/</a></p>
</li>
<li><p>服务提供者 Nacos Client 启动时，会把服务以服务名（spring.application.name）的方式注册到服务注册中心（Nacos Server）</p>
</li>
<li><p>服务消费者 Nacos Client 启动时，也会将自己的服务注册到服务注册中心</p>
</li>
<li><p>服务消费者在注册服务的同时，它还会从服务注册中心获取一份服务注册列表信息，该列表中包含了所有注册到服务注册中心上的服务的信息（包括服务提供者和自身的信息）</p>
</li>
<li><p>在获取了服务提供者的信息后，服务消费者通过 <strong>HTTP 或消息中间件</strong>远程调用服务提供者提供的服务</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Nacos的安装与使用</strong></p>
<ul>
<li><p>安装运行</p>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloudAlibaba/image-20250409155001980.png" alt="image-20250409155001980"></p>
<ul>
<li>bin：存放存放 Nacos 的可执行命令</li>
<li>conf：存放 Nacos 配置文件</li>
<li>target：用于存放 Nacos 应用的 jar 包</li>
</ul>
</li>
<li><p>在bin文件下开启命令运行框，执行命令单机模式启动Nacos</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器访问<code>http://localhost:8848/nacos</code>跳转Nacos Server 登陆界面。</p>
<p>登录名：nacos</p>
<p>密码：nacos</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nacos-minimal-demo/</span><br><span class="line">├── pom.xml                          # 父工程（依赖管理）</span><br><span class="line">├── service-provider/                # 服务提供者</span><br><span class="line">│   ├── src/main/</span><br><span class="line">│   │   ├── java/com/example/provider/</span><br><span class="line">│   │   │   ├── ProviderApplication.java    # 启动类</span><br><span class="line">│   │   │   └── ConfigController.java       # 配置中心测试接口</span><br><span class="line">│   │   └── resources/</span><br><span class="line">│   │       ├── bootstrap.yml</span><br><span class="line">│   │       └── application.yml</span><br><span class="line">├── service-consumer/                # 服务消费者</span><br><span class="line">│   ├── src/main/</span><br><span class="line">│   │   ├── java/com/example/consumer/</span><br><span class="line">│   │   │   ├── ConsumerApplication.java    # 启动类</span><br><span class="line">│   │   │   └── ConsumerController.java     # 调用提供者的接口</span><br><span class="line">│   │   └── resources/</span><br><span class="line">│   │       ├── bootstrap.yml</span><br><span class="line">│   │       └── application.yml</span><br></pre></td></tr></table></figure>

<p><strong>父工程</strong>：</p>
<ul>
<li><p>依赖<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-minimal-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringCloud2020及以后的版本默认不启用 bootstrap 配置，我们需要在pom里面显式地引入：--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring Boot 监控模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba 版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>服务提供者</strong>：</p>
<ul>
<li><p>服务提供者添加依赖<code>pom.xml</code>（子工程）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Alibaba Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>服务提供者配置 <code>bootstrap.yml</code>（子工程）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-provider</span>  <span class="comment"># 服务名称（注册到 Nacos 的名称）</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment"># Nacos 服务发现地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment"># Nacos 配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>         <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span>               <span class="comment"># 命名空间（环境隔离）</span></span><br></pre></td></tr></table></figure>

<p>服务提供者配置<code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>服务者提供者启动类（添加 <code>@EnableDiscoveryClient</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">// 激活服务注册与发现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置中心<code>ConfigController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;custom.message:default&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Provider Config: &quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Provider&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>服务消费者</strong>：</p>
<ul>
<li><p>服务消费者添加依赖<code>pom.xml</code>（子工程）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Alibaba Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--由于 Netflix Ribbon 进入停更维护阶段，因此新版本的 Nacos discovery 都已经移除了 Ribbon ，此时我们需要引入 loadbalancer 代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>服务消费者配置 <code>bootstrap.yml</code>（子工程）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>服务消费者配置<code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>服务消费者启动类<code>ConsumerApplication.java</code>需要添加负载均衡支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启服务注册与发现功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 关键注解：启用负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务消费者<code>ConsumerController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call-provider&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过服务名调用提供者</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(</span><br><span class="line">            <span class="string">&quot;http://service-provider/hello&quot;</span>, </span><br><span class="line">            String.class</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/show-config&quot;)</span></span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showConfig</span><span class="params">(<span class="meta">@Value(&quot;$&#123;custom.message&#125;&quot;)</span> String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Consumer Config: &quot;</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>接口测试</strong>：</p>
<ul>
<li><p>服务发现验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看注册的服务列表</span></span><br><span class="line">curl http://localhost:8848/nacos/v1/ns/service/list</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务调用验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bashCopy Codecurl http://localhost:8082/call-provider</span><br><span class="line"><span class="comment"># 输出：Hello from Provider</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置中心验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bashCopy Codecurl http://localhost:8081/config</span><br><span class="line"><span class="comment"># 输出：Provider Config: This is dynamic config from Nacos</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>此模板实现了以下核心功能：</p>
<ol>
<li>‌<strong>服务注册发现</strong>‌：通过 <code>@EnableDiscoveryClient</code> 自动注册到 Nacos</li>
<li>‌<strong>配置中心</strong>‌：通过 <code>bootstrap.yml</code> 自动拉取配置，支持 <code>@RefreshScope</code> 热更新</li>
<li>‌<strong>服务调用</strong>‌：通过 <code>RestTemplate + @LoadBalanced</code> 实现负载均衡调用</li>
<li>‌<strong>环境隔离</strong>‌：通过 <code>namespace</code> 实现多环境配置隔离</li>
</ol>
</li>
</ol>
<p>Nacos集群：<a href="https://c.biancheng.net/springcloud/nacos.html">https://c.biancheng.net/springcloud/nacos.html</a></p>
<h3 id="四、服务调用与负载均衡-Dubbo"><a href="#四、服务调用与负载均衡-Dubbo" class="headerlink" title="四、服务调用与负载均衡-Dubbo"></a>四、<strong>服务调用与负载均衡</strong>-<strong>Dubbo</strong></h3><p>‌在Nacos章节的模板基础上，增加Dubbo作为服务调用。</p>
<ul>
<li><p><strong>父工程</strong>：<strong><code>pom.xml</code> 新增 Dubbo 依赖管理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dubbo Spring Cloud Starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>服务提供者&#x2F;消费者模块 <code>pom.xml</code> 添加</strong></p>
</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>服务提供者改造</strong></p>
<ul>
<li><p><strong>接口定义模块（独立 JAR）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 公共接口定义（需独立模块，供提供者/消费者依赖）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DubboService</span> <span class="comment">// Dubbo 服务暴露注解</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;用户&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>bootstrap.yml</code> 新增 Dubbo 配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-provider-dubbo</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span>  <span class="comment"># 自动分配端口</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://localhost:8848</span>  <span class="comment"># 指定Nacos注册中心</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.example.provider.service</span>  <span class="comment"># Dubbo服务扫描路径</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>服务消费者改造</strong></p>
<ul>
<li><p><strong>调用服务接口注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line">    <span class="meta">@DubboReference</span>  <span class="comment">// Dubbo服务引用注解</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消费者 <code>bootstrap.yml</code> 配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer-dubbo</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://localhost:8848</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">subscribed-services:</span> <span class="string">service-provider-dubbo</span>  <span class="comment"># 订阅指定服务</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Nacos 注册验证</strong></p>
<ul>
<li><p><strong>查看服务列表</strong></p>
<p>访问 <code>http://localhost:8848/nacos</code>，在服务列表中将显示：</p>
<ul>
<li><code>service-provider-dubbo</code>（Dubbo 服务）</li>
<li><code>service-provider</code>（原 Spring Cloud 服务）‌</li>
</ul>
</li>
<li><p><strong>接口调用测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8082/consumer/user/1</span><br><span class="line"><span class="comment"># 返回：&#123;&quot;id&quot;:1, &quot;name&quot;:&quot;用户1&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>扩展优化</strong>：</p>
<ol>
<li>‌<strong>Dubbo 高级特性</strong>‌<ul>
<li>‌<strong>服务分组</strong>‌：通过 <code>group</code> 参数实现环境隔离</li>
<li>‌<strong>版本控制</strong>‌：使用 <code>version</code> 区分接口版本</li>
<li>‌<strong>熔断降级</strong>‌：整合 Sentinel 实现流量控制‌</li>
</ul>
</li>
<li>‌<strong>配置中心整合</strong>‌<br>保持原有 Nacos Config 配置，Dubbo 参数可通过 <code>dubbo.config-center</code> 指定动态配置源‌</li>
</ol>
<h3 id="五、熔断-‌Sentinel"><a href="#五、熔断-‌Sentinel" class="headerlink" title="五、熔断-‌Sentinel"></a>五、熔断-‌<strong>Sentinel</strong></h3><p>‌在Nacos章节的模板基础上，增加Sentinel作为熔断。</p>
<ul>
<li><p><strong>父工程 <code>pom.xml</code> 新增依赖管理</strong>‌</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlCopy Code<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务提供者&#x2F;消费者模块 <code>pom.xml</code> 添加</strong>‌</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载安装 Sentinel 控制台：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p>
<p><a href="https://sentinelguard.io/zh-cn/docs/dashboard.html">Sentinel 控制台</a></p>
<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8180 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>

<p>访问：<code>http://localhost:8180</code>（默认账号&#x2F;密码：<code>sentinel/sentinel</code>）‌</p>
</li>
<li><p><strong>服务端配置</strong></p>
<ul>
<li><p><strong><code>bootstrap.yml</code> 新增配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8180</span>  <span class="comment"># 控制台地址</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span>  <span class="comment"># 启动时立即注册到控制台</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">nacos:</span>  <span class="comment"># 动态规则存储（可选）</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">sentinel-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span>  <span class="comment"># 规则类型（flow/degrade）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断规则示例（Nacos 动态配置）</strong></p>
<p>在 Nacos 创建 Data ID <code>sentinel-rules</code>，内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/consumer/call-provider&quot;</span><span class="punctuation">,</span>  # 受保护的接口路径</span><br><span class="line">    <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>  # 熔断策略（<span class="number">0</span>-慢调用比例，<span class="number">1</span>-异常比例）</span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0.5</span><span class="punctuation">,</span>  # 触发阈值（异常比例≥<span class="number">50</span>%）</span><br><span class="line">    <span class="attr">&quot;timeWindow&quot;</span><span class="punctuation">:</span> <span class="number">5</span>  # 熔断持续时间（秒）</span><br><span class="line">    <span class="attr">&quot;minRequestAmount&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span>                  <span class="comment">// 最小请求数（触发统计的基数）</span></span><br><span class="line">    <span class="attr">&quot;statIntervalMs&quot;</span><span class="punctuation">:</span> <span class="number">1000</span>                  <span class="comment">// 统计时间窗口（毫秒）</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>消费者</strong></p>
<ul>
<li><p><strong>添加熔断注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/call-provider&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">    value = &quot;/consumer/call-provider&quot;, </span></span><br><span class="line"><span class="meta">    fallback = &quot;fallbackMethod&quot;,  # 熔断降级方法</span></span><br><span class="line"><span class="meta">    blockHandler = &quot;blockHandler&quot;  # 流控降级方法</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callProvider</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-provider/hello&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 熔断降级逻辑</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackMethod</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;服务熔断，请稍后重试&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流控降级逻辑</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">blockHandler</span><span class="params">(BlockException ex)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;请求被限流&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>验证步骤</strong></p>
<ul>
<li>‌<strong>触发熔断</strong>‌<br>停止服务提供者，连续访问 <code>http://localhost:8082/call-provider</code>，触发异常后观察返回熔断提示‌</li>
<li>‌<strong>控制台查看规则</strong>‌<br>在 Sentinel 控制台的「熔断降级」页面，可实时查看规则状态和流量统计‌</li>
</ul>
</li>
</ul>
<h3 id="六、分布式事务-‌Seata"><a href="#六、分布式事务-‌Seata" class="headerlink" title="六、分布式事务-‌Seata"></a>六、分布式事务-‌<strong>Seata</strong></h3><p>指南：<a href="https://c.biancheng.net/springcloud/seata.html">https://c.biancheng.net/springcloud/seata.html</a></p>
<p>在分布式微服务架构中，几乎所有业务操作都需要多个服务协作才能完成。必须保证所有这些操作要么全部成功，要么全部失败。（如网购失败，钱也必须退回）</p>
<ul>
<li><strong>分布式事务相关概念</strong>：<ul>
<li><strong>事务</strong>：由一组操作构成的可靠、独立的工作单元，事务具备 ACID 的特性，即原子性、一致性、隔离性和持久性。</li>
<li><strong>本地事务</strong>：数据库管理系统 DBMS，例如 <a href="https://c.biancheng.net/mysql/">MySQL</a>、Oracle 等，严格地支持 ACID 特性，高效可靠。本地事务只能对自己数据库的操作进行控制，对于其他数据库的操作则无能为力。</li>
<li><strong>全局事务</strong>：全局事务指的是一次性操作多个资源管理器完成的事务，由一组分支事务组成。</li>
<li><strong>分支事务</strong>：在分布式事务中，就是一个个受全局事务管辖和协调的本地事务。</li>
</ul>
</li>
<li>分布式事务是一个包含了若干个分支事务的全局事务，要么一起成功提交，要么一起失败回滚。</li>
<li><strong>核心组件</strong>：<ul>
<li>**TC（Transaction Coordinator）**‌：事务协调器，全局事务的调度中心，负责维护全局事务状态和分支事务的提交&#x2F;回滚‌。</li>
<li>‌**TM（Transaction Manager）**‌：控制全局事务边界，通过 <code>@GlobalTransactional</code> 注解开启或结束全局事务‌。</li>
<li>‌**RM（Resource Manager）**‌：管理分支事务资源（如数据库连接），向 TC 注册分支事务并上报状态‌。</li>
</ul>
</li>
<li><strong>Seata 的整体工作流程如下</strong>：<ol>
<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功后，TC 会针对这个全局事务生成一个全局唯一的 XID；</li>
<li>XID 通过服务的调用链传递到其他服务;</li>
<li>RM 向 TC 注册一个分支事务，并将其纳入 XID 对应全局事务的管辖；</li>
<li>TM 根据 TC 收集的各个分支事务的执行结果，向 TC 发起全局事务提交或回滚决议；</li>
<li>TC 调度 XID 下管辖的所有分支事务完成提交或回滚操作</li>
</ol>
</li>
</ul>
<p><strong>Seata 提供了 AT（最方便）、TCC、SAGA 和 XA 四种事务模式，可以快速有效地对分布式事务进行控制。</strong></p>
<ul>
<li><strong>Seata AT 模式工作流程</strong>：<ul>
<li>一阶段（业务执行）<ul>
<li>拦截业务 SQL，生成 ‌**Before Image（前置镜像）**‌ 用于回滚‌</li>
<li>提交本地事务，生成 ‌**After Image（后置镜像）**‌‌</li>
</ul>
</li>
<li>二阶段（全局提交&#x2F;回滚）<ul>
<li>提交成功：删除镜像快照，释放锁‌</li>
<li>提交失败：根据 Before Image 生成反向 SQL 回滚数据‌</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Seata 快速集成步骤</strong>：</p>
<ul>
<li><p><strong>服务端部署（Seata Server）</strong></p>
<ul>
<li><p><strong>下载与启动</strong>‌：<a href="https://github.com/apache/incubator-seata/releases">https://github.com/apache/incubator-seata/releases</a></p>
<p><em>修改配置文件 registry.conf（注册中心配置为 Nacos）‌，并配置 Nacos 地址‌</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">config <span class="punctuation">&#123;</span></span><br><span class="line">  # Seata 支持 file、nacos 、apollo、zk、consul、etcd3 等多种配置中心</span><br><span class="line">  #配置方式修改为 nacos</span><br><span class="line">  type = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  nacos <span class="punctuation">&#123;</span></span><br><span class="line">    #修改为使用的 nacos 服务器地址</span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:1111&quot;</span></span><br><span class="line">    #配置中心的命名空间</span><br><span class="line">    namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">    #配置中心所在的分组</span><br><span class="line">    group = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    #Nacos 配置中心的用户名</span><br><span class="line">    username = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    #Nacos 配置中心的密码</span><br><span class="line">    password = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Seata Server 目录中包含以下子目录：</p>
<ul>
<li>bin：用于存放 Seata Server 可执行命令。</li>
<li>conf：用于存放 Seata Server 的配置文件。</li>
<li>lib：用于存放 Seata Server 依赖的各种 Jar 包。</li>
<li>logs：用于存放 Seata Server 的日志。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>客户端配置（微服务模块）</strong></p>
<ul>
<li><p><strong>依赖引入</strong>‌：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2025.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 与 Spring Cloud Alibaba 版本匹配 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>application.yml</code> 配置</strong>‌：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">nacos:</span>  </span><br><span class="line">      <span class="attr">discovery:</span>  </span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment"># Nacos 地址  </span></span><br><span class="line">    <span class="attr">alibaba:</span>  </span><br><span class="line">      <span class="attr">seata:</span>  </span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">my_tx_group</span>  <span class="comment"># 事务组名称，需与服务端配置一致</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>数据源代理（AT 模式必需）</strong></p>
<ul>
<li><p>‌<strong>自动代理</strong>‌：默认开启，无需额外配置‌。</p>
</li>
<li><p>‌<strong>手动代理</strong>‌（如使用多数据源）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProxy</span>(<span class="keyword">new</span> <span class="title class_">DruidDataSource</span>());  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>数据库表初始化</strong></p>
<p>在每个业务库中创建 ‌<strong>undo_log 表</strong>‌（AT 模式必需）:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> undo_log (  </span><br><span class="line">    id <span class="type">BIGINT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,  </span><br><span class="line">    branch_id <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    xid <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    context <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    rollback_info LONGBLOB <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    log_status <span class="type">INT</span> <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    log_created DATETIME <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    log_modified DATETIME <span class="keyword">NOT NULL</span>,  </span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY ux_undo_log (xid, branch_id)  </span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;  </span><br></pre></td></tr></table></figure>

<p>每个涉及分布式事务的业务数据库均需执行‌</p>
</li>
<li><p>全局事务注解使用</p>
<ul>
<li><p><strong>在事务入口方法添加注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;  </span><br><span class="line">    <span class="meta">@GlobalTransactional(name = &quot;createOrder&quot;, rollbackFor = Exception.class)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 本地事务操作  </span></span><br><span class="line">        orderDao.insert(...);  </span><br><span class="line">        <span class="comment">// 远程服务调用（需支持 Seata 事务传播）  </span></span><br><span class="line">        storageFeignClient.deduct(...);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
</li>
<li><p>异常触发时自动回滚所有分支事务‌</p>
</li>
</ul>
</li>
<li><p>验证与调试</p>
<ul>
<li><strong>事务日志验证</strong>‌<ul>
<li>检查 Seata Server 控制台日志，观察全局事务状态（如 <code>begin</code>、<code>commit</code>、<code>rollback</code>）‌</li>
</ul>
</li>
<li><strong>数据一致性测试</strong>‌<ul>
<li>模拟异常场景（如远程服务调用失败），确认所有分支事务数据回滚‌</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="七、消息队列-‌RocketMQ"><a href="#七、消息队列-‌RocketMQ" class="headerlink" title="七、消息队列-‌RocketMQ"></a>七、<strong>消息队列</strong>-‌<strong>RocketMQ</strong></h3><p><a href="https://developer.aliyun.com/article/1379126">https://developer.aliyun.com/article/1379126</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/blog2025.github.io/2025/05/28/Node.js/</url>
    <content><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js</a></h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><em>Node.js 就是运行在服务端的 JavaScript。</em></p>
<p><em><strong>单线程和事件驱动架构（借助 JavaScript 天生的事件驱动机制）</strong>：Node.js 使用单线程来处理请求，但通过事件驱动和非阻塞 I&#x2F;O 操作的特性，使其可以高效地处理大量并发连接，而不会阻塞线程。</em></p>
<p><em><strong>异步和非阻塞 I&#x2F;O</strong>：这使得 Node.js 能够处理高并发的请求，非常适合 I&#x2F;O 密集型应用，如文件读取、数据库操作和网络请求。</em></p>
<p><em>高性能。</em></p>
<p><em>跨平台。</em></p>
<p><em>基于 Google 的 V8 引擎。</em></p>
<p><em>无需考虑浏览器兼容性问题，直接上 ES6。</em></p>
<p><em>拥有 npm 这个包管理工具。</em> </p>
<p><em>自带 HTTP 服务器模块。</em></p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li><strong>Web 服务器</strong>：由于其高效的处理并发请求的能力，Node.js 常被用于构建快速、可扩展的 web 服务器。</li>
<li><strong>实时应用</strong>：例如<em>聊天应用、实时协作工具</em>等。</li>
<li><strong>API 服务</strong>：Node.js 很适合用来开发 RESTful API 和 GraphQL 服务。</li>
<li><strong>命令行工具</strong>：Node.js 还可以用于构建 CLI 工具，利用其易用的库和包管理器进行快速开发。</li>
</ul>
<h3 id="Node-js-和-SpringBoot"><a href="#Node-js-和-SpringBoot" class="headerlink" title="Node.js 和 SpringBoot"></a>Node.js 和 SpringBoot</h3><h4 id="1、‌核心特性对比‌"><a href="#1、‌核心特性对比‌" class="headerlink" title="1、‌核心特性对比‌"></a>1、‌<strong>核心特性对比</strong>‌</h4><table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>Node.js</strong>‌</th>
<th>‌<strong>Spring Boot</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>语言</strong>‌</td>
<td>基于 JavaScript（动态类型）</td>
<td>基于 Java（强类型、面向对象）</td>
</tr>
<tr>
<td>‌<strong>运行时架构</strong>‌</td>
<td><strong>单线程</strong>事件驱动模型，非阻塞 I&#x2F;O 异步处理</td>
<td><strong>多线程</strong>同步模型，依赖线程池处理请求</td>
</tr>
<tr>
<td>‌<strong>性能特点</strong>‌</td>
<td>高并发 I&#x2F;O 密场景优化（如实时通信）</td>
<td>CPU 密集型和复杂事务处理效率更高</td>
</tr>
<tr>
<td>‌<strong>开发效率</strong>‌</td>
<td>轻量级框架，语法简洁，适合快速迭代</td>
<td>配置复杂但功能完善，适合长期维护的大型项目</td>
</tr>
<tr>
<td>‌<strong>生态系统</strong>‌</td>
<td>依赖 npm 包管理，工具链灵活但碎片化</td>
<td>集成 Spring 生态（如 Spring Security、Spring Data）</td>
</tr>
</tbody></table>
<h4 id="2、‌适用场景与典型应用‌"><a href="#2、‌适用场景与典型应用‌" class="headerlink" title="2、‌适用场景与典型应用‌"></a>2、‌<strong>适用场景与典型应用</strong>‌</h4><table>
<thead>
<tr>
<th>‌<strong>场景类型</strong>‌</th>
<th>‌<strong>Node.js 适用场景</strong>‌</th>
<th>‌<strong>Spring Boot 适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>高频交互型</strong>‌</td>
<td>实时聊天应用、在线协作工具、物联网（IoT）数据处理</td>
<td>高频交易系统（如证券交易）、ERP 业务逻辑层</td>
</tr>
<tr>
<td>‌<strong>数据处理型</strong>‌</td>
<td>流媒体服务器、API 网关、日志分析系统</td>
<td>大数据批处理、复杂报表生成、金融风控计算</td>
</tr>
<tr>
<td>‌<strong>架构类型</strong>‌</td>
<td>微服务轻量化部署、Serverless 函数计算</td>
<td>单体分层架构、分布式事务强一致性系统</td>
</tr>
</tbody></table>
<hr>
<h4 id="3、‌数据库适配建议‌"><a href="#3、‌数据库适配建议‌" class="headerlink" title="3、‌数据库适配建议‌"></a>3、‌<strong>数据库适配建议</strong>‌</h4><table>
<thead>
<tr>
<th>‌<strong>数据库类型</strong>‌</th>
<th>‌<strong>Node.js 推荐搭配</strong>‌</th>
<th>‌<strong>Spring Boot 推荐搭配</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>关系型数据库</strong>‌</td>
<td>PostgreSQL（通过 TypeORM 或 Sequelize 适配）</td>
<td>MySQL（集成 Hibernate&#x2F;JPA）</td>
</tr>
<tr>
<td>‌<strong>NoSQL 数据库</strong>‌</td>
<td>MongoDB（JSON 文档存储天然契合）</td>
<td>Redis（缓存加速）、Cassandra（大规模分布式存储）</td>
</tr>
<tr>
<td>‌<strong>特殊场景</strong>‌</td>
<td>时序数据库（如 InfluxDB，用于 IoT 时序数据存储）</td>
<td>图数据库（如 Neo4j，支持复杂关系分析）</td>
</tr>
</tbody></table>
<h4 id="4、‌选型决策树‌"><a href="#4、‌选型决策树‌" class="headerlink" title="4、‌选型决策树‌"></a>4、‌<strong>选型决策树</strong>‌</h4><ul>
<li>‌<strong>选择 Node.js</strong>‌ 若满足以下条件：<ul>
<li>需快速开发 MVP（最小可行产品）或实时交互功能</li>
<li>团队熟悉 JavaScript 全栈开发（前后端语言统一）</li>
<li>处理高并发请求且 I&#x2F;O 延迟敏感（如社交平台推送）</li>
</ul>
</li>
<li>‌<strong>选择 Spring Boot</strong>‌ 若满足以下条件：<ul>
<li>需严格事务管理（如银行转账）或复杂业务规则</li>
<li>企业已有 Java 技术栈积累（如微服务治理体系）</li>
<li>长期维护需求优先于开发速度（如政府信息系统）</li>
</ul>
</li>
</ul>
<h4 id="5、‌混合架构实践‌"><a href="#5、‌混合架构实践‌" class="headerlink" title="5、‌混合架构实践‌"></a>5、‌<strong>混合架构实践</strong>‌</h4><table>
<thead>
<tr>
<th>‌<strong>组合方案</strong>‌</th>
<th>‌<strong>说明</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>前端+Node.js</strong>‌</td>
<td>使用 Node.js 构建 BFF（Backend For Frontend）层，聚合多后端服务</td>
</tr>
<tr>
<td>‌<strong>Spring Boot+Redis</strong>‌</td>
<td>通过 Redis 缓存高频查询数据，降低 MySQL 负载</td>
</tr>
<tr>
<td>‌<strong>微服务混搭</strong>‌</td>
<td>核心服务用 Spring Boot（强事务），边缘服务用 Node.js（高并发）</td>
</tr>
</tbody></table>
<h3 id="Node-js-组成"><a href="#Node-js-组成" class="headerlink" title="Node.js 组成"></a>Node.js 组成</h3><ul>
<li><strong>require 指令</strong>：在 Node.js 中，使用 require 指令来加载和引入模块，引入的模块可以是内置模块，也可以是第三方模块或自定义模块。</li>
<li>**创建服务器：**服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</li>
<li><strong>接收请求与响应请求</strong> 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</li>
</ul>
<h4 id="1、创建应用："><a href="#1、创建应用：" class="headerlink" title="1、创建应用："></a>1、创建应用：</h4><p>1、<strong>使用 require 指令来加载和引入模块：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;module-name&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>module-name 可以是一个<strong>文件路径</strong>（相对或绝对路径），也可以是一个<strong>模块名称</strong>，如果是一个模块名称，Node.js 会自动从 node_modules 目录中查找该模块。</p>
</li>
<li><p>require 指令会返回被加载的模块的导出对象，可以通过该对象来<strong>访问模块中定义的属性和方法</strong>，如果模块中有多个导出对象，则可以使用<strong>解构赋值</strong> *（解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。）*的方式来获取它们。</p>
</li>
<li><p>使用 <strong>require</strong> 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>2、<strong>创建服务器：</strong></p>
<p>首先创建一个 server.js 文件</p>
<p>使用 <code>http.createServer()</code> 方法创建服务器，并使用 listen 方法绑定 8888 端口。</p>
<p>函数通过 request, response 参数来接收和响应数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.js </span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">        <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">        <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">        response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应数据 &quot;Hello World&quot;</span></span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器正在启动...\n&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器运行在 http://127.0.0.1:8888/&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在 cmd 命令框输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<p>显示：</p>
<p><img src="/blog2025.github.io/image-20250501104811159.png" alt="image-20250501104811159"></p>
<p>在浏览器访问：<a href="http://127.0.0.1:8888/">http://127.0.0.1:8888/</a></p>
<p><img src="/blog2025.github.io/image-20250501104939131.png" alt="image-20250501104939131"></p>
<p><strong>解析 Node.js 的 HTTP 服务器：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入 Node.js 内置的 http 模块。</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个新的 HTTP 服务器，每次有请求时都会执行回调函数。</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123; </span><br><span class="line">    ... </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应状态码和内容类型。</span></span><br><span class="line">response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结束响应并发送数据。</span></span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听指定端口并在服务器启动后输出信息。</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//如:</span></span><br><span class="line">.<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2、工作机制："><a href="#2、工作机制：" class="headerlink" title="2、工作机制："></a>2、<a href="https://www.runoob.com/nodejs/nodejs-http-server.html">工作机制</a>：</h4><p>Node.js 基于 ‌<strong>Chrome V8 引擎</strong>‌ 执行 JavaScript 代码，使用 Node.js API 与操作系统交互，并通过 Libuv 处理异步 I&#x2F;O 操作。事件循环和工作线程确保了 Node.js 的高效和非阻塞特性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程（单线程）</span><br><span class="line">│</span><br><span class="line">├─ 同步任务 → 直接执行  </span><br><span class="line">├─ 异步任务 → 注册至 libuv 线程池或系统内核  </span><br><span class="line">│    ├─ 文件 I/O → 线程池处理  </span><br><span class="line">│    └─ 网络请求 → 系统内核处理  </span><br><span class="line">│  </span><br><span class="line">└─ 事件循环（轮询阶段）  </span><br><span class="line">     │  </span><br><span class="line">     ├─ Timers → I/O Callbacks → Poll → Check → Close  </span><br><span class="line">     │  </span><br><span class="line">     └─ 微任务优先：Promise/process.nextTick 回调</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/1704959020813.png" alt="img"></p>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a><a href="https://www.runoob.com/nodejs/nodejs-npm.html">NPM</a></h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ul>
<li>NPM（Node Package Manager）是一个 JavaScript 包管理工具，也是 Node.js 的默认包管理器。（安装 Node.js 时就会自动安装）</li>
<li>NPM 允许开发者轻松地下载、安装、共享、管理项目的依赖库和工具。</li>
</ul>
<h3 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h3><p><strong>1、升级npm</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure>

<p><strong>2、安装模块</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>比如说安装express框架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>3、全局安装与本地安装</strong>：</p>
<p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有 <strong>-g</strong> 参数。</p>
<ul>
<li><p><strong>本地安装：<strong>将包安装到 node_modules 目录，并将信息保存到 package.json 的 dependencies 中。</strong>（Vue中可见）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express          <span class="comment"># 本地安装</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**全局安装：**用于安装命令行工具或需要在多个项目中使用的包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express -g  	 <span class="comment"># 全局安装</span></span><br></pre></td></tr></table></figure>

<p>全局安装的包版本由 npm 管理，但不会在项目的 <code>package.json</code> 中体现。这意味着全局安装的包可能在不同项目之间共享，但也可能因为版本冲突而导致问题。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">本地安装</th>
<th align="left">全局安装</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>安装范围</strong></td>
<td align="left">仅在当前项目中可用</td>
<td align="left">在系统的全局环境中可用</td>
</tr>
<tr>
<td align="left"><strong>命令使用</strong></td>
<td align="left"><code>npm install package-name</code></td>
<td align="left"><code>npm install -g package-name</code></td>
</tr>
<tr>
<td align="left"><strong>安装位置</strong></td>
<td align="left"><code>node_modules</code> 目录</td>
<td align="left">系统全局目录（依 OS 而异）</td>
</tr>
<tr>
<td align="left"><strong>使用场景</strong></td>
<td align="left">项目依赖（库、框架）</td>
<td align="left">CLI 工具、项目生成器</td>
</tr>
<tr>
<td align="left"><strong>访问方式</strong></td>
<td align="left">通过 <code>require()</code> 或 <code>import</code> 使用</td>
<td align="left">在命令行中直接使用</td>
</tr>
<tr>
<td align="left"><strong>依赖声明</strong></td>
<td align="left">在 <code>package.json</code> 中记录</td>
<td align="left">不在 <code>package.json</code> 中记录</td>
</tr>
<tr>
<td align="left"><strong>版本控制</strong></td>
<td align="left">不同项目中可用不同版本</td>
<td align="left">系统中只保留一个版本</td>
</tr>
<tr>
<td align="left"><strong>权限问题</strong></td>
<td align="left">无需特殊权限</td>
<td align="left">可能需要管理员权限</td>
</tr>
</tbody></table>
<p><strong>4、查看安装信息</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list</span><br><span class="line"><span class="comment"># 查看全局安装的模块</span></span><br><span class="line">npm list -g</span><br><span class="line"><span class="comment"># 查看某个模块的版本号</span></span><br><span class="line">npm list &lt;模块名&gt;</span><br></pre></td></tr></table></figure>

<p><strong>5、卸载：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;模块名&gt;</span><br></pre></td></tr></table></figure>

<p><strong>6、更新</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update &lt;模块名&gt;</span><br></pre></td></tr></table></figure>

<p><strong>7、查找模块：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm search &lt;模块名&gt;</span><br></pre></td></tr></table></figure>

<p><strong>8、创建模块：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501112055816.png" alt="image-20250501112055816"></p>
<p>内容：</p>
<p><img src="/blog2025.github.io/image-20250501112418138.png" alt="image-20250501112418138"></p>
<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250501112456496.png" alt="image-20250501112456496"></p>
<p><img src="/blog2025.github.io/image-20250501112520393.png" alt="image-20250501112520393"></p>
<ul>
<li><p>package.json 说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name：项目的名称，应该是唯一的，通常使用小写字母和连字符。</span><br><span class="line">version：项目的版本号，遵循语义化版本控制（Semantic Versioning）。</span><br><span class="line">description：项目的简短描述。</span><br><span class="line">main：项目的入口文件，通常是应用程序的启动文件。</span><br><span class="line">scripts：定义了一系列的命令行脚本，可以在项目中执行特定的任务。</span><br><span class="line">dependencies：列出了项目运行所需的所有依赖包及其版本。</span><br><span class="line">devDependencies：列出了只在开发过程中需要的依赖包及其版本。</span><br><span class="line">peerDependencies：列出了项目期望其依赖包也依赖的包。</span><br><span class="line">optionalDependencies：列出了可选的依赖包。</span><br><span class="line">engines：指定了项目兼容的 Node.js 版本。</span><br><span class="line">repository：项目的代码仓库信息，如 GitHub 仓库的 URL。</span><br><span class="line">keywords：项目的关键词，有助于在 npm 搜索中找到项目。</span><br><span class="line">author：项目的作者信息。</span><br><span class="line">license：项目的许可证信息。</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>9、发布自创模块到 npm官方：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册用户</span></span><br><span class="line">npm adduser</span><br><span class="line">Username: </span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录npm</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布模块</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销发布的包（一般限 24 小时内）。</span></span><br><span class="line">npm unpublish package-name</span><br></pre></td></tr></table></figure>

<p><strong>10、运行 <code>package.json</code> 中定义的脚本：</strong></p>
<p>例如 <code>npm run start</code>。</p>
<p>这个 start 在之间创建的 package.json 中修改</p>
<p><img src="/blog2025.github.io/image-20250501113202223.png" alt="image-20250501113202223"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run scripts-name</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501113013226.png" alt="image-20250501113013226"></p>
<p><strong>11、更新依赖</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update package-name</span><br></pre></td></tr></table></figure>

<h2 id="REPL（交互式解释器）"><a href="#REPL（交互式解释器）" class="headerlink" title="REPL（交互式解释器）"></a>REPL（交互式解释器）</h2><p>Node.js 提供了一个内置的 REPL（Read-Eval-Print Loop），这是一个交互式编程环境，可以在终端中运行 JavaScript 代码。</p>
<p>REPL：</p>
<ul>
<li><strong>读取（Read）</strong> - 读取用户输入，解析输入的 Javascript 数据结构并存储在内存中。</li>
<li><strong>执行（Eval）</strong> - 执行输入的数据结构</li>
<li><strong>打印（Print）</strong> - 输出结果</li>
<li><strong>循环（Loop）</strong> - 循环操作以上步骤直到用户两次按下 <strong>ctrl-c</strong> 按钮退出。</li>
</ul>
<p>REPL 可以<strong>直接输入并立即执行</strong> JavaScript 代码，快速验证代码片段。</p>
<p>REPL 适合测试简单逻辑和调试以及尝试新语法或 Node.js API。</p>
<p>启动Node：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501121750279.png" alt="image-20250501121750279"></p>
<p>简单逻辑的测试：输入1+1，直接就打印出2</p>
<p><img src="/blog2025.github.io/image-20250501121840456.png" alt="image-20250501121840456"></p>
<p><img src="/blog2025.github.io/image-20250501122117993.png" alt="image-20250501122117993"></p>
<p>说白了就是能直接运行 JavaScript 代码</p>
<p><img src="/blog2025.github.io/image-20250501122003672.png" alt="image-20250501122003672"></p>
<p>使用下划线(_)获取上一个表达式的运算结果：</p>
<p><img src="/blog2025.github.io/image-20250501122305746.png" alt="image-20250501122305746"></p>
<h2 id="回调函数-callback"><a href="#回调函数-callback" class="headerlink" title="回调函数 callback"></a>回调函数 callback</h2><h3 id="Node-js-特性："><a href="#Node-js-特性：" class="headerlink" title="Node.js 特性："></a><strong>Node.js 特性：</strong></h3><ul>
<li><p>Node.js 的核心特性之一是其非阻塞 I&#x2F;O（输入&#x2F;输出）模型，这使得 Node.js 非常适合处理高并发的网络应用。</p>
</li>
<li><p>Node.js <strong>异步</strong>编程的直接体现就是回调。</p>
</li>
<li><p>Node.js 是<strong>单线程</strong>的，但通过事件驱动和回调机制实现异步操作。</p>
</li>
</ul>
<p>在 Node.js 中，回调函数是一种<strong>异步</strong>编程模式，用于处理 I&#x2F;O 操作，如文件读写、数据库交互、网络请求等，这些操作通常需要花费较长时间，如果采用同步方式，会阻塞整个程序的执行，直到操作完成。</p>
<p>使用回调函数，Node.js 可以在 I&#x2F;O 操作进行时继续执行其他代码，一旦 I&#x2F;O 操作完成，再执行回调函数。</p>
<h3 id="回调函数-callback-使用场景："><a href="#回调函数-callback-使用场景：" class="headerlink" title="回调函数 callback 使用场景："></a><strong>回调函数 callback 使用场景：</strong></h3><ul>
<li>读取文件、写入文件等 I&#x2F;O 操作。</li>
<li>处理网络请求。</li>
<li>数据库查询。</li>
</ul>
<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I&#x2F;O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>
<p><strong>回调函数 callback</strong> 一般作为<strong>函数的最后一个参数</strong>出现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params">name, age, callback</span>) &#123; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">value, callback1, callback2</span>) &#123; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻塞和非阻塞对比："><a href="#阻塞和非阻塞对比：" class="headerlink" title="阻塞和非阻塞对比："></a><strong>阻塞和非阻塞对比：</strong></h4><table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>阻塞回调</strong>‌</th>
<th>‌<strong>非阻塞回调</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定义</strong>‌</td>
<td>同步执行，需等待当前操作完成才能继续后续代码</td>
<td>异步执行，立即返回并注册回调函数，主线程继续处理其他任务</td>
</tr>
<tr>
<td>‌<strong>执行线程</strong>‌</td>
<td>阻塞主线程，导致后续逻辑延迟</td>
<td>通过事件循环调度，主线程仅在回调触发时处理结果</td>
</tr>
<tr>
<td>‌<strong>典型方法</strong>‌</td>
<td>同步方法（如 <code>fs.readFileSync</code>）</td>
<td>异步方法（如 <code>fs.readFile</code>）</td>
</tr>
</tbody></table>
<ul>
<li><p>‌<strong>阻塞回调流程</strong>‌：（代码是按照顺序执行的）</p>
<ol>
<li><p>调用同步方法（如 <code>readFileSync</code>）后，主线程<strong>暂停</strong>执行。</p>
</li>
<li><p>等待 I&#x2F;O 操作（如文件读取）完成，期间无法处理其他任务。</p>
</li>
<li><p>操作完成后返回结果，继续执行后续代码。</p>
</li>
</ol>
</li>
<li><p>‌<strong>非阻塞回调流程</strong>‌：（代码是不需要按照顺序执行的）</p>
<ol>
<li><p>调用异步方法（如 <code>readFile</code>）后，主线程立即释放。</p>
</li>
<li><p>I&#x2F;O 操作由底层线程池或系统处理，主线程继续执行后续逻辑。</p>
</li>
<li><p>操作完成后通过事件循环触发回调函数处理结果。</p>
</li>
</ol>
</li>
</ul>
<p><strong>示例代码</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input.txt</span></span><br><span class="line">回调函数测试，哈哈哈哈</span><br></pre></td></tr></table></figure>

<p>callback.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 阻塞回调示例（同步读取文件）</span></span><br><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;input.txt&#x27;</span>);  <span class="comment">// 主线程暂停</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());              <span class="comment">// 需等待文件读取完成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行结束&quot;</span>);               <span class="comment">// 最后执行</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501124018371.png" alt="image-20250501124018371"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 非阻塞回调示例（异步读取文件）</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;   <span class="comment">// 立即返回，主线程继续</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());            <span class="comment">// 在回调中处理结果</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行结束&quot;</span>);               <span class="comment">// 先执行此行</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501124109073.png" alt="image-20250501124109073"></p>
<p><strong>性能与适用场景对比</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>阻塞回调</strong>‌</th>
<th>‌<strong>非阻塞回调</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>吞吐量</strong>‌</td>
<td>低：单线程顺序处理，易堆积请求</td>
<td>高：通过事件循环复用线程，支持高并发 I&#x2F;O 操作</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>简单脚本、需严格顺序执行的场景</td>
<td>高并发服务（如 Web 服务器）、实时数据处理（如聊天应用）</td>
</tr>
<tr>
<td>‌<strong>错误处理</strong>‌</td>
<td>通过 <code>try/catch</code> 捕获异常</td>
<td>依赖回调函数的 <code>err</code> 参数或 Promise 的 <code>catch</code> 方法</td>
</tr>
</tbody></table>
<p><strong>关键设计差异总结</strong>‌</p>
<ul>
<li>‌资源占用：<ul>
<li>阻塞回调占用主线程时间，导致 CPU 闲置等待 I&#x2F;O。</li>
<li>非阻塞回调通过事件循环最大化利用 CPU，适合 I&#x2F;O 密集型任务。</li>
</ul>
</li>
<li>‌代码复杂度：<ul>
<li>阻塞代码逻辑简单，但难以扩展高并发需求。</li>
<li>非阻塞代码需处理回调嵌套（回调地狱），可通过 <code>Promise</code> 或 <code>async/await</code> 优化</li>
</ul>
</li>
</ul>
<p><strong>选型建议</strong>‌</p>
<ul>
<li>‌<strong>优先非阻塞回调</strong>‌：构建 Web 服务、实时系统等高并发场景。</li>
<li>‌<strong>慎用阻塞回调</strong>‌：仅限初始化配置、小型工具脚本等轻量任务</li>
</ul>
<h4 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a><a href="https://www.runoob.com/nodejs/nodejs-callback.html">回调地狱</a></h4><p>使用 Promises 或者 async&#x2F;await 解决回调地狱中的多层嵌套。</p>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>事件循环是 Node.js 处理非阻塞 I&#x2F;O 操作的核心机制，使得单线程能够高效处理多个<strong>并发请求。</strong></p>
<p>事件循环用来处理：</p>
<ul>
<li>文件读取</li>
<li>网络请求</li>
<li>数据库查询</li>
<li>等等</li>
</ul>
<p>事件循环使得 Node.js 能够非阻塞地运行代码、处理多个连接、以及执行异步 I&#x2F;O 操作。</p>
<p>事件循环使得 Node.js 能够处理大量并发的 I&#x2F;O 操作而不会导致线程阻塞，这是 Node.js 高效处理并发请求的关键。</p>
<h3 id="事件循环的阶段"><a href="#事件循环的阶段" class="headerlink" title="事件循环的阶段"></a>事件循环的阶段</h3><ul>
<li><strong>Timers</strong>：<ul>
<li>执行 <code>setTimeout()</code> 和 <code>setInterval()</code> 的回调。</li>
<li>实际执行时间可能因系统调度延迟。</li>
</ul>
</li>
<li><strong>Pending(I&#x2F;O) Callbacks</strong>：<ul>
<li>处理上一轮循环未执行的 I&#x2F;O 异常回调（如 TCP 错误）</li>
</ul>
</li>
<li><strong>Idle&#x2F;prepare</strong>：<ul>
<li>Node.js 内部使用的空闲&#x2F;准备阶段，开发者一般不直接干预。</li>
</ul>
</li>
<li><strong>Poll</strong>：<ul>
<li><strong>执行 I&#x2F;O 回调</strong>‌：处理文件读写、网络请求等异步操作完成后的回调。</li>
<li>‌<strong>等待新事件</strong>‌：若队列为空，则阻塞等待新 I&#x2F;O 事件或直接进入下一阶段。</li>
<li>‌<strong>检查 Check 阶段</strong>‌：若有 <code>setImmediate</code> 回调注册，则提前结束 Poll 阶段。</li>
</ul>
</li>
<li><strong>Check</strong>：<ul>
<li>执行 <code>setImmediate()</code> 回调。</li>
</ul>
</li>
<li><strong>Close Callbacks</strong>：<ul>
<li>处理关闭的回调，如 <code>socket.on(&#39;close&#39;, ...)</code>。</li>
</ul>
</li>
</ul>
<h3 id="事件循环的流程"><a href="#事件循环的流程" class="headerlink" title="事件循环的流程"></a>事件循环的流程</h3><ul>
<li><p><strong>任务进入事件循环队列</strong>。</p>
</li>
<li><p>事件循环按照阶段顺序进行处理，每个阶段有自己的回调队列。</p>
</li>
<li><p>事件循环会在 <code>poll</code> 阶段等待新的事件到达，如果没有事件，会检查其他阶段的回调。</p>
</li>
<li><p>如果 <code>setImmediate()</code> 和 <code>setTimeout()</code> 都存在，<code>setImmediate()</code> 在 <code>check</code> 阶段先执行，而 <code>setTimeout()</code> 在 <code>timers</code> 阶段执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timeout callback&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Immediate callback&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Main thread execution&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/blog2025.github.io/image-20250501125800706.png" alt="image-20250501125800706"></p>
<h4 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a><strong>宏任务与微任务</strong></h4><ul>
<li><strong>宏任务</strong>：<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、I&#x2F;O 操作等。</li>
<li><strong>微任务</strong>：<code>process.nextTick</code>、<code>Promise.then</code>。</li>
</ul>
<p>**执行顺序：**微任务优先级高于宏任务，会在当前阶段的回调结束后立即执行。</p>
<p><strong>微任务队列优先级</strong>‌</p>
<p>每个阶段结束后，‌<strong>优先清空微任务队列</strong>‌，顺序为：</p>
<ol>
<li>‌**<code>process.nextTick</code> 队列**‌：优先级最高，当前阶段结束后立即执行。</li>
<li>‌<strong>Promise 微任务队列</strong>‌：紧随 <code>process.nextTick</code> 后执行。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Check 阶段回调&#x27;</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timers 阶段回调&#x27;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise 微任务&#x27;</span>));</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick 微任务&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：</span></span><br><span class="line"><span class="comment">// nextTick 微任务 → Promise 微任务 → Timers 阶段回调 → Check 阶段回调  </span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501130604259.png" alt="image-20250501130604259"></p>
<h4 id="关键执行规则‌"><a href="#关键执行规则‌" class="headerlink" title="关键执行规则‌"></a><strong>关键执行规则</strong>‌</h4><table>
<thead>
<tr>
<th>‌<strong>规则</strong>‌</th>
<th>‌<strong>说明</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>阶段顺序固定</strong>‌</td>
<td>每个事件循环必须依次执行 6 个阶段，不可跳跃。</td>
</tr>
<tr>
<td>‌<strong>微任务优先于宏任务</strong>‌</td>
<td>当前阶段宏任务执行后，立即清空微任务队列。</td>
</tr>
<tr>
<td>‌**<code>setTimeout</code> vs <code>setImmediate</code>**‌</td>
<td>在主模块中执行顺序不确定，但在 I&#x2F;O 回调中 <code>setImmediate</code> 优先。</td>
</tr>
</tbody></table>
<h4 id="典型流程总结"><a href="#典型流程总结" class="headerlink" title="典型流程总结"></a>典型流程总结</h4><ol>
<li>执行同步代码，注册异步任务（如 <code>fs.readFile</code>）。</li>
<li>事件循环进入 ‌<strong>Timers 阶段</strong>‌，处理到期的定时器回调。</li>
<li>进入 ‌<strong>Poll 阶段</strong>‌，执行 I&#x2F;O 回调，若队列空则等待新事件或跳转至 Check 阶段。</li>
<li>‌<strong>Check 阶段</strong>‌ 处理 <code>setImmediate</code> 回调。</li>
<li>‌<strong>每个阶段结束后</strong>‌，依次清空 <code>process.nextTick</code> 和 Promise 微任务队列。</li>
<li>循环重复，直至没有待处理的任务。</li>
</ol>
<h3 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>Node.js 的事件驱动模型通过 ‌<strong>异步非阻塞架构</strong>‌ 和 ‌<strong>高效的事件调度机制</strong>‌，成为构建高性能分布式系统的核心方案</p>
<p>Node.js 的事件驱动模型基于 ‌<strong>EventEmitter 类</strong>‌、‌<strong>非阻塞 I&#x2F;O</strong>‌ 和 ‌<strong>事件循环机制</strong>‌，通过异步回调实现<strong>高并发</strong>处理能力。其核心设计要点如下：</p>
<p><strong>基本概念：</strong></p>
<ul>
<li><strong>事件</strong>：在程序中发生的动作或状态改变，例如一个文件读取完成或一个 HTTP 请求到达。</li>
<li><strong>事件触发器</strong>：<code>EventEmitter</code> 是 Node.js 的内置模块，用来发出和监听事件。</li>
<li><strong>事件处理器</strong>：与事件关联的回调函数，事件发生时被调用。</li>
</ul>
<p><strong>事件驱动的流程：</strong></p>
<ul>
<li><strong>注册事件</strong>：在程序中通过 <code>EventEmitter</code> 实例注册事件和对应的处理器。</li>
<li><strong>触发事件</strong>：当指定的事件发生时，<code>EventEmitter</code> 会触发该事件。</li>
<li><strong>处理事件</strong>：事件循环会调度相应的回调函数来执行任务。</li>
</ul>
<h4 id="事件驱动模型的核心组件"><a href="#事件驱动模型的核心组件" class="headerlink" title="事件驱动模型的核心组件"></a>事件驱动模型的核心组件</h4><ol>
<li><p>‌**事件循环（Event Loop）**‌</p>
<ul>
<li>按固定阶段（Timers → I&#x2F;O Callbacks → Poll → Check → Close）轮询任务队列，调度异步回调执行顺序。</li>
<li>每个阶段结束后优先处理微任务（<code>process.nextTick</code> → Promise）。</li>
</ul>
</li>
<li><p>‌<strong>EventEmitter 类</strong>‌</p>
<ul>
<li><p>继承自 <code>events</code> 模块，用于创建可触发和监听事件的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>核心方法：</p>
<ul>
<li><code>on(event, listener)</code>：注册事件监听器。</li>
<li><code>emit(event, [args])</code>：触发事件并调用关联的监听器。</li>
</ul>
</li>
</ul>
</li>
<li><p>‌<strong>非阻塞 I&#x2F;O 模型</strong>‌</p>
<ul>
<li>异步操作（如文件读写、网络请求）立即返回，主线程继续执行后续代码。</li>
<li>操作完成后通过回调函数或事件通知主线程处理结果。</li>
</ul>
</li>
</ol>
<h4 id="事件驱动开发流程‌"><a href="#事件驱动开发流程‌" class="headerlink" title="事件驱动开发流程‌"></a><strong>事件驱动开发流程</strong>‌</h4><ol>
<li><p>‌<strong>定义事件与监听器</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件监听器  </span></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">&#x27;userAction&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`捕获用户行为：<span class="subst">$&#123;data&#125;</span>`</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件  </span></span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;userAction&#x27;</span>, <span class="string">&#x27;点击按钮&#x27;</span>);  </span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501132300378.png" alt="image-20250501132300378">‌</p>
<ul>
<li><strong>解耦逻辑</strong>‌：不同监听器处理独立任务（如日志记录、数据统计）。</li>
</ul>
</li>
<li><p>‌<strong>异步任务与回调</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 非阻塞文件读取  </span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;  </span><br><span class="line">  myEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;fileRead&#x27;</span>, data.<span class="title function_">toString</span>());  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听文件读取完成事件  </span></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">&#x27;fileRead&#x27;</span>, <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件内容：<span class="subst">$&#123;content&#125;</span>`</span>);  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure>

<ul>
<li>‌<strong>流程控制</strong>‌：通过事件串联异步操作，避免回调嵌套。</li>
</ul>
</li>
</ol>
<h4 id="典型应用案例‌"><a href="#典型应用案例‌" class="headerlink" title="典型应用案例‌"></a><strong>典型应用案例</strong>‌</h4><ul>
<li>‌<strong>实时监控系统</strong>‌：监听文件访问、网络连接等事件，通过队列异步处理并生成报告。</li>
<li>‌<strong>Web 服务器</strong>‌：使用 <code>http</code> 模块监听请求事件，异步响应客户端。</li>
<li>‌<strong>自定义插件</strong>‌：通过 <code>EventEmitter</code> 扩展模块功能，实现松耦合架构。</li>
</ul>
<h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a><a href="https://www.runoob.com/nodejs/nodejs-event.html">EventEmitter</a></h2><p>Node.js 所有的异步 I&#x2F;O 操作在完成时都会发送一个事件到事件队列。</p>
<p>EventEmitter 是 Node.js 中用于创建、注册和触发事件的核心模块。</p>
<p>EventEmitter 是 Node.js 事件驱动编程的核心模块，通过 ‌<strong>发布-订阅模式</strong>‌ 实现异步事件处理能力，广泛用于网络请求、文件操作等高并发场景。其工作机制与使用要点如下：</p>
<h3 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h3><p>events 模块只提供了一个对象： events.EventEmitter。</p>
<p>EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>实例化时错误 &#x3D;&gt; 触发error事件</li>
<li>添加新的监听器 &#x3D;&gt; 触发 newListener 事件</li>
<li>监听器被移除 &#x3D;&gt; 触发 removeListener 事件</li>
</ul>
<h3 id="EventEmitter-事件组成："><a href="#EventEmitter-事件组成：" class="headerlink" title="EventEmitter 事件组成："></a>EventEmitter 事件组成：</h3><ul>
<li>事件名：一个字符串，如：<code>&#39;SomeEvent&#39;</code><ul>
<li>EventEmitter 支持 若干个事件监听器。</li>
</ul>
</li>
<li>若干参数：</li>
</ul>
<p>如：注册了两个事件监听器的事件 <code>&#39;SomeEvent&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//event.js 文件</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>(); </span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="keyword">function</span>(<span class="params">arg1, arg2</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener1&#x27;</span>, arg1, arg2); </span><br><span class="line">&#125;); </span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="keyword">function</span>(<span class="params">arg1, arg2</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listener2&#x27;</span>, arg1, arg2); </span><br><span class="line">&#125;); </span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;someEvent&#x27;</span>, <span class="string">&#x27;arg1 参数&#x27;</span>, <span class="string">&#x27;arg2 参数&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250501134702344.png" alt="image-20250501134702344"></p>
<h3 id="EventEmitter-API："><a href="#EventEmitter-API：" class="headerlink" title="EventEmitter API："></a>EventEmitter API：</h3><table>
<thead>
<tr>
<th><strong>方法</strong>‌</th>
<th>‌<strong>功能说明</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>on(event, listener)</code></td>
<td>注册事件监听器，可重复添加同一事件的多个监听器</td>
<td><code>emitter.on(&#39;connect&#39;, () =&gt; &#123; console.log(&#39;连接成功&#39;); &#125;)</code></td>
</tr>
<tr>
<td><code>once(event, listener)</code></td>
<td>注册一次性监听器，事件触发后自动移除</td>
<td><code>emitter.once(&#39;init&#39;, () =&gt; &#123; console.log(&#39;初始化完成&#39;); &#125;)</code></td>
</tr>
<tr>
<td><code>emit(event, [...args])</code></td>
<td>触发指定事件，同步调用所有关联的监听器并按注册顺序传递参数</td>
<td><code>emitter.emit(&#39;error&#39;, new Error(&#39;操作失败&#39;))</code></td>
</tr>
<tr>
<td><code>removeListener(event, listener)</code></td>
<td>移除指定事件的某个监听器</td>
<td><code>emitter.removeListener(&#39;data&#39;, dataHandler)</code></td>
</tr>
<tr>
<td><code>removeAllListeners(event)</code></td>
<td>移除指定事件的所有监听器（不传参数则移除全部事件监听器）</td>
<td><code>emitter.removeAllListeners(&#39;log&#39;)</code></td>
</tr>
<tr>
<td><code>addListener(event, listener)</code></td>
<td>为指定事件添加一个监听器到监听器数组的尾部。</td>
<td></td>
</tr>
<tr>
<td><code>setMaxListeners(n)</code></td>
<td>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于改变监听器的默认限制的数量。</td>
<td><code>emitter.setMaxListeners(20)</code></td>
</tr>
<tr>
<td><code>listeners(event)</code></td>
<td>返回指定事件的监听器数组。</td>
<td></td>
</tr>
<tr>
<td><code>listenerCount(emitter, event)</code></td>
<td>返回指定事件的监听器数量。</td>
<td><code>events.emitter.listenerCount(eventName)</code></td>
</tr>
</tbody></table>
<h3 id="继承-EventEmitter"><a href="#继承-EventEmitter" class="headerlink" title="继承 EventEmitter"></a>继承 EventEmitter</h3><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它，包括 fs、net、http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p>
<p>大多数 Node.js 核心模块（如 HTTP、文件系统）都继承了 EventEmitter，你可以创建自己的类来继承 EventEmitter。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> customEmitter = <span class="keyword">new</span> <span class="title class_">MyEmitter</span>();</span><br><span class="line"></span><br><span class="line">customEmitter.<span class="title function_">on</span>(<span class="string">&#x27;customEvent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Custom event fired&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">customEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;customEvent&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Buffer（缓冲）"><a href="#Buffer（缓冲）" class="headerlink" title="Buffer（缓冲）"></a>Buffer（缓冲）</h2><p>说白了就是转换数据用的。</p>
<p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p>
<p>Buffer 类是用于处理二进制数据的核心工具，提供了对二进制数据的高效操作。尤其在处理文件操作、网络通信、图像处理等场景中特别有用。</p>
<p>特性：</p>
<ul>
<li><strong>二进制数据</strong>：<code>Buffer</code> 对象是一个包含原始二进制数据的固定大小的数组。每个元素占用一个字节（8位），因此 <code>Buffer</code> 适合处理二进制数据，如文件内容、网络数据包等。</li>
<li><strong>不可变性</strong>：虽然 <code>Buffer</code> 对象的内容可以在创建后修改，但其长度是固定的，不能动态改变。</li>
</ul>
<h3 id="Buffer-与字符编码"><a href="#Buffer-与字符编码" class="headerlink" title="Buffer 与字符编码"></a>Buffer 与字符编码</h3><p>Buffer 实例一般用于表示编码字符的序列，比如 UTF-8 、 UCS2 、 Base64 、或十六进制编码的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;测试&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 e6b58be8af95</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 5rWL6K+V</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>Node.js 目前支持的字符编码包括：</strong></p>
<ul>
<li><strong>ascii</strong> - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li>
<li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li>
<li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li>
<li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li>
<li><strong>base64</strong> - Base64 编码。</li>
<li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li>
<li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li>
<li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li>
</ul>
<h3 id="Buffer-API"><a href="#Buffer-API" class="headerlink" title="Buffer API"></a>Buffer API</h3><table>
<thead>
<tr>
<th>API</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Buffer.alloc(size[, fill[, encoding]])</strong></td>
<td>创建了一个长度为 size 字节的 Buffer，相当于申请了 size 字节的内存空间，每个字节的值为 0。</td>
</tr>
<tr>
<td><strong>Buffer.allocUnsafe(size)</strong></td>
<td>建了一个长度为 size 字节的 Buffer，但 Buffer 中可能存在旧的数据，可能会影响执行结果，所以叫 unsafe。</td>
</tr>
<tr>
<td><strong>Buffer.allocUnsafeSlow(size)</strong></td>
<td>用于分配给定大小 size 的新 Buffer 实例，但不对其进行初始化。</td>
</tr>
<tr>
<td><strong>Buffer.from(array)</strong></td>
<td>返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）。</td>
</tr>
<tr>
<td><strong>Buffer.from(arrayBuffer[, byteOffset[, length]])</strong></td>
<td>返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</td>
</tr>
<tr>
<td><strong>Buffer.from(buffer)</strong></td>
<td>复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例。</td>
</tr>
<tr>
<td><strong>Buffer.from(string[, encoding])</strong></td>
<td>通过字符串创建 Buffer，可以指定编码，默认为 UTF-8。</td>
</tr>
</tbody></table>
<p><a href="https://www.runoob.com/nodejs/nodejs-buffer.html">更多 API</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span></span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且未初始化的 Buffer。</span></span><br><span class="line"><span class="comment">// 这个方法比调用 Buffer.alloc() 更快，</span></span><br><span class="line"><span class="comment">// 但返回的 Buffer 实例可能包含旧数据，</span></span><br><span class="line"><span class="comment">// 因此需要使用 fill() 或 write() 重写。</span></span><br><span class="line"><span class="keyword">const</span> buf3 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf5 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;tést&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf6 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;tést&#x27;</span>, <span class="string">&#x27;latin1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="写入缓冲区"><a href="#写入缓冲区" class="headerlink" title="写入缓冲区"></a>写入缓冲区</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">write</span>(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li><strong>string</strong> - 写入缓冲区的字符串。</li>
<li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li>
<li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li>
<li><strong>encoding</strong> - 编码类型。默认为 ‘utf8’ 。</li>
</ul>
<p>根据 endoding <strong>编码类型</strong>，将<strong>长度</strong>为 length 的<strong>字符串</strong> string 写入到<strong>缓冲区</strong>的 offset <strong>索引位置</strong>  。</p>
<p>如果缓冲区空间不足，字符串会被截断，只会写入一部分字符串到缓冲区。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> len = buf.<span class="title function_">write</span>(<span class="string">&quot;测试测试测试测试测试&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入字节数 : &quot;</span>+  len);<span class="comment">// 输出 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 在 write() 方法中显式指定编码</span></span><br><span class="line"><span class="keyword">const</span> len = buf.<span class="title function_">write</span>(<span class="string">&quot;测试测试测试测试测试&quot;</span>, <span class="number">0</span>, buf.<span class="property">length</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入字节数 : &quot;</span> + len); <span class="comment">// 输出 9</span></span><br></pre></td></tr></table></figure>

<h3 id="读缓冲区"><a href="#读缓冲区" class="headerlink" title="读缓冲区"></a>读缓冲区</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">toString</span>([encoding[, start[, end]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">buf.<span class="title function_">write</span>(<span class="string">&quot;测试测试测试测试测试&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">    buf[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);<span class="comment">// 输出 &lt;Buffer 00 01 02 03 04 05 06 07 08 09&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 在 write() 方法中显式指定编码和写入长度</span></span><br><span class="line">buf.<span class="title function_">write</span>(<span class="string">&quot;测试测试测试测试测试&quot;</span>, <span class="number">0</span>, buf.<span class="property">length</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>, <span class="number">0</span> , <span class="number">3</span>));<span class="comment">// 输出 &quot;测&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>));<span class="comment">// 输出 &quot;测试测&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="literal">undefined</span>));<span class="comment">// 输出 &quot;测试测&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="将-Buffer-转换为-JSON-对象"><a href="#将-Buffer-转换为-JSON-对象" class="headerlink" title="将 Buffer 转换为 JSON 对象"></a>将 Buffer 转换为 JSON 对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">toJSON</span>()</span><br></pre></td></tr></table></figure>

<p>ASCII 字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toJSON</span>());</span><br><span class="line"><span class="comment">// 输出: &#123; type: &#x27;Buffer&#x27;, data: [ 97, 98, 99 ] &#125;</span></span><br><span class="line"><span class="comment">// data 数组中的 97, 98, 99 是 ASCII 码，对应字符 a, b, c。</span></span><br></pre></td></tr></table></figure>

<p>UTF-8 编码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toJSON</span>());</span><br><span class="line"><span class="comment">// 输出: &#123; type: &#x27;Buffer&#x27;, data: [ 230, 181, 139, 232, 175, 149 ] &#125;</span></span><br><span class="line"><span class="comment">// 每个汉字在 UTF-8 编码下占 3 字节，测试 共 6 字节。</span></span><br></pre></td></tr></table></figure>

<p>空 Buffer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toJSON</span>());</span><br><span class="line"><span class="comment">// 输出: &#123; type: &#x27;Buffer&#x27;, data: [] &#125;</span></span><br></pre></td></tr></table></figure>

<p>‌<strong>JSON 序列化</strong></p>
<p>当需要将 Buffer 数据通过 JSON.stringify() 转换为 JSON 字符串时，toJSON() 会自动调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(buf);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json); </span><br><span class="line"><span class="comment">// 输出: &#123;&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[104,101,108,108,111]&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>反序列化还原 Buffer</strong></p>
<p>通过 <code>Buffer.from(jsonObj.data)</code> 可将 JSON 对象转回 Buffer：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonStr = <span class="string">&#x27;&#123;&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[104,101,108,108,111]&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(jsonObj.<span class="property">data</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>()); <span class="comment">// 输出: hello</span></span><br></pre></td></tr></table></figure>

<h3 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">concat</span>(list[, totalLength])</span><br></pre></td></tr></table></figure>

<p><strong>参数：</strong></p>
<ul>
<li><strong>list</strong> - 用于合并的 Buffer 对象数组列表。</li>
<li><strong>totalLength</strong> - 指定合并后Buffer对象的总长度。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>((<span class="string">&#x27;测试&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> buffer2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>((<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> buffer3 = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([buffer1,buffer2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;buffer3 内容: &quot;</span> + buffer3.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">//输出 buffer3 内容:测试test</span></span><br></pre></td></tr></table></figure>

<h3 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h3><p>可以用于排序和数据校验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">compare</span>(otherBuffer);</span><br></pre></td></tr></table></figure>

<p><strong>参数：</strong></p>
<ul>
<li><strong>otherBuffer</strong> - 与 <strong>buf</strong> 对象比较的另外一个 Buffer 对象。</li>
</ul>
<p><strong>返回值：<code>-1</code>、<code>0</code> 或 <code>1</code>，表示比较结果</strong></p>
<ul>
<li>**<code>-1</code>**‌：当前 Buffer (<code>buf</code>) 在字典序中排在 <code>otherBuffer</code> 之前。</li>
<li>‌**<code>0</code>**‌：两个 Buffer 内容完全相同。</li>
<li>‌**<code>1</code>**‌：当前 Buffer 在字典序中排在 <code>otherBuffer</code> 之后。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> buffer2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;ABCD&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result = buffer1.<span class="title function_">compare</span>(buffer2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer1 + <span class="string">&quot; 在 &quot;</span> + buffer2 + <span class="string">&quot;之前&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer1 + <span class="string">&quot; 与 &quot;</span> + buffer2 + <span class="string">&quot;相同&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer1 + <span class="string">&quot; 在 &quot;</span> + buffer2 + <span class="string">&quot;之后&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出ABC在ABCD之前 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;ABC&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;ABD&#x27;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf1.<span class="title function_">compare</span>(buf2)); <span class="comment">// 输出: -1  </span></span><br><span class="line"><span class="comment">//前两位 A（0x41）和 B（0x42）相同，第三位 C（0x43） &lt; D（0x44），故返回 -1。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf5 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;123&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> buf6 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;ABC&#x27;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf5.<span class="title function_">compare</span>(buf6)); <span class="comment">// 输出: -1  </span></span><br><span class="line"><span class="comment">// 数字字符 1 的 ASCII 码（0x31）小于字母 A（0x41）</span></span><br></pre></td></tr></table></figure>

<p><strong>排序 Buffer 数组</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buffers = [<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Z&#x27;</span>), <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;A&#x27;</span>), <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;M&#x27;</span>)];  </span><br><span class="line">buffers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="title function_">compare</span>(b));  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffers);</span><br><span class="line"><span class="comment">// 输出: [ &lt;Buffer 41&gt;, &lt;Buffer 4d&gt;, &lt;Buffer 5a&gt; ]  </span></span><br></pre></td></tr></table></figure>

<ul>
<li>排序结果为 <code>A</code>、<code>M</code>、<code>Z</code>（按 ASCII 码升序）。</li>
</ul>
<p>‌<strong>数据一致性校验</strong>‌<br>比对文件、网络传输等场景中的二进制数据是否一致：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> file1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;file_content&#x27;</span>);  </span><br><span class="line"><span class="keyword">const</span> file2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;file_content&#x27;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(file1.<span class="title function_">compare</span>(file2) === <span class="number">0</span>); </span><br><span class="line"><span class="comment">// 输出: true </span></span><br></pre></td></tr></table></figure>

<h3 id="缓冲区拷贝"><a href="#缓冲区拷贝" class="headerlink" title="缓冲区拷贝"></a>缓冲区拷贝</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">copy</span>(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li><strong>targetBuffer</strong> - 要拷贝的 Buffer 对象。</li>
<li><strong>targetStart</strong> - 数字, 可选, 默认: 0</li>
<li><strong>sourceStart</strong> - 数字, 可选, 默认: 0</li>
<li><strong>sourceEnd</strong> - 数字, 可选, 默认: buffer.length</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 buf2 插入到 buf1 指定位置上</span></span><br><span class="line">buf2.<span class="title function_">copy</span>(buf1, <span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf1.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;测试测试测试&quot;</span>, <span class="string">&quot;utf8&quot;</span>); <span class="comment">// 18 字节</span></span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;utf8&quot;</span>); <span class="comment">// 6 字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新 Buffer，总长度 = buf1长度 + buf2长度</span></span><br><span class="line"><span class="keyword">const</span> newBuf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(buf1.<span class="property">length</span> + buf2.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制原 buf1 的前 3 字节（&quot;测&quot;）</span></span><br><span class="line">buf1.<span class="title function_">copy</span>(newBuf, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>); </span><br><span class="line"><span class="comment">// 插入 buf2（&quot;哈哈&quot;）</span></span><br><span class="line">buf2.<span class="title function_">copy</span>(newBuf, <span class="number">3</span>); </span><br><span class="line"><span class="comment">// 复制原 buf1 的剩余字节（从第 3 字节到末尾）</span></span><br><span class="line">buf1.<span class="title function_">copy</span>(newBuf, <span class="number">3</span> + buf2.<span class="property">length</span>, <span class="number">3</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newBuf.<span class="title function_">toString</span>()); <span class="comment">// 输出：测哈哈测试测试测试</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测 (0-2) | 哈 (3-5) | 哈 (6-8) | 测 (9-11) | 试 (12-14) | 测 (15-17) |</span></span><br><span class="line"><span class="comment"> 试 (18-20) | 测 (21-23) | 试 (24-26) |</span></span><br><span class="line"><span class="comment">→ &quot;测哈哈测试测试测试&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="缓冲区裁剪"><a href="#缓冲区裁剪" class="headerlink" title="缓冲区裁剪"></a>缓冲区裁剪</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">slice</span>([start[, end]])</span><br></pre></td></tr></table></figure>

<p><strong>参数：</strong></p>
<ul>
<li><strong>start</strong> - 数字, 可选, 默认: 0</li>
<li><strong>end</strong> - 数字, 可选, 默认: buffer.length</li>
</ul>
<p><strong>返回值：</strong></p>
<p>返回一个新的缓冲区，它和旧缓冲区指向<strong>同一块内存</strong>，但是从索引 start 到 end 的位置剪切。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">// 剪切缓冲区</span></span><br><span class="line"><span class="keyword">var</span> buffer2 = buffer1.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;buffer2的内容为: &quot;</span> + buffer2.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">// 输出buffer2的内容为:te</span></span><br></pre></td></tr></table></figure>

<h3 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">buf.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">//  缓冲区长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;buffer 长度为: &quot;</span> + buffer.<span class="property">length</span>);</span><br><span class="line"><span class="comment">// buffer 长度为: 4</span></span><br></pre></td></tr></table></figure>

<h2 id="Stream（流）"><a href="#Stream（流）" class="headerlink" title="Stream（流）"></a>Stream（流）</h2><p>Stream 是一种处理流式数据的抽象接口，广泛应用于文件操作、网络通信等场景。</p>
<p>Node 中有很多对象实现了这个接口。例如，对 http 服务器发起请求的 request 对象就是一个 Stream，还有stdout（标准输出）。</p>
<p>Stream 的一个主要优点是可以在数据<strong>传输过程中</strong>就开始处理数据，而不需要等待整个数据加载完毕，这使得 Node.js 能够<strong>高效地处理大量数据</strong>，而<strong>不会占用过多的内存</strong>。也就是说，Stream（流）允许以流的形式处理数据，而不是一次性将数据全部加载到内存中。</p>
<p><img src="/blog2025.github.io/stream-nodejs.png" alt="img"></p>
<p>Stream 有四种流类型：</p>
<ul>
<li><strong>Readable</strong> - 可读操作。</li>
<li><strong>Writable</strong> - 可写操作。</li>
<li><strong>Duplex</strong> - 可读可写操作.</li>
<li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li>
</ul>
<p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p>
<ul>
<li><strong>data</strong> - 当有数据可读时触发。</li>
<li><strong>end</strong> - 没有更多的数据可读时触发。</li>
<li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li>
<li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li>
</ul>
<h3 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置编码为 utf8。</span></span><br><span class="line">readerStream.<span class="title function_">setEncoding</span>(<span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">chunk</span>)&#123;</span><br><span class="line">    data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">readerStream.on(&#x27;data&#x27;,(chunk)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    data += chunk;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">readerStream.on(&#x27;end&#x27;,()=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(data);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">readerStream.on(&#x27;error&#x27;,(err)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(err.stack);</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>可读流的暂停和恢复</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">chunk</span>)&#123;</span><br><span class="line">    readerStream.<span class="title function_">pause</span>();<span class="comment">//暂停读取</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        readerStream.<span class="title function_">resume</span>();<span class="comment">//恢复读取</span></span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>销毁流</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>,<span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件</span></span><br><span class="line">readerStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">    readerStream.<span class="title function_">destroy</span>()<span class="comment">//销毁流</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="写数据到流"><a href="#写数据到流" class="headerlink" title="写数据到流"></a>写数据到流</h3><p>此代码会覆盖原文件中的内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">flags</span>: <span class="string">&#x27;w&#x27;</span> <span class="comment">// 默认标志为 &#x27;w&#x27;，即覆盖写入</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;流的写入测试&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可以写入的流，写入到文件 output.txt 中</span></span><br><span class="line"><span class="keyword">var</span> writerStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置编码为 utf8。</span></span><br><span class="line">writerStream.<span class="title function_">write</span>(data,<span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记文件末尾</span></span><br><span class="line">writerStream.<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; finish、error</span></span><br><span class="line">writerStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入完成。&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">writerStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果不需要覆盖，需要在<code>createWriteStream</code>中另外添加 <code>flags=&#39;a&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> writerStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">flags</span>: <span class="string">&#x27;a&#x27;</span> <span class="comment">// 追加模式，保留原内容并在末尾写入新数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;流的写入测试&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可以写入的流，写入到文件 output.txt 中</span></span><br><span class="line"><span class="keyword">var</span> writerStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>,&#123;<span class="attr">flags</span>:<span class="string">&#x27;a&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置编码为 utf8。</span></span><br><span class="line">writerStream.<span class="title function_">write</span>(data,<span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记文件末尾</span></span><br><span class="line">writerStream.<span class="title function_">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; finish、error</span></span><br><span class="line">writerStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入完成。&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">writerStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>标志</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;w&#39;</code></td>
<td>覆盖写入（默认）</td>
</tr>
<tr>
<td><code>&#39;a&#39;</code></td>
<td>追加写入（保留原内容，新数据写入到文件末尾）</td>
</tr>
<tr>
<td><code>&#39;wx&#39;</code></td>
<td>排他写入（仅在文件不存在时创建并写入，否则失败）</td>
</tr>
<tr>
<td><code>&#39;r+&#39;</code></td>
<td>读写模式（文件必须存在，从头部开始覆盖写入，不截断文件）</td>
</tr>
</tbody></table>
<h3 id="双工流（Duplex）"><a href="#双工流（Duplex）" class="headerlink" title="双工流（Duplex）"></a>双工流（Duplex）</h3><p>可读可写</p>
<p>应用场景：</p>
<ul>
<li>‌<strong>网络通信</strong>‌：如 <code>net.Socket</code> 对象，同时处理客户端请求（读）和响应（写）；</li>
<li>‌<strong>数据转换中间件</strong>‌：例如加密&#x2F;解密、压缩&#x2F;解压等需要双向处理的场景；</li>
<li>‌<strong>代理服务器</strong>‌：转发请求（读）并修改响应（写）的中间层。</li>
</ul>
<p>TCP 套接字：</p>
<p>可通过 <code>net</code> 模块实现双向数据流的读写。以下是具体实现步骤及核心代码逻辑：</p>
<p>‌<strong>1. 搭建 TCP 服务器</strong>‌</p>
<p>通过 <code>net.createServer</code> 创建服务器，监听客户端连接并处理双向数据流：</p>
<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 TCP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端已连接&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收客户端数据（读操作）</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到客户端数据: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// 向客户端发送响应（写操作）</span></span><br><span class="line">    socket.<span class="title function_">write</span>(<span class="string">`服务器回应: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户端断开连接处理</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端断开连接&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;套接字错误:&#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器运行在 8000 端口&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>2. 创建 TCP 客户端</strong>‌</p>
<p>客户端通过 <code>net.connect</code> 连接服务器，实现主动发送数据和接收响应：</p>
<p><strong>client.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="keyword">const</span> client = net.<span class="title function_">connect</span>(&#123; <span class="attr">port</span>: <span class="number">8000</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已连接到服务器&#x27;</span>);</span><br><span class="line">  <span class="comment">// 发送数据（写操作）</span></span><br><span class="line">  client.<span class="title function_">write</span>(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收服务器响应（读操作）</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到服务器响应: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 关闭连接</span></span><br><span class="line">  client.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接关闭处理</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;与服务器断开连接&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;客户端错误:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>运行</strong></p>
<ul>
<li><p>启动服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node client.js</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>多次发送消息直至退出</strong>：</p>
<p><strong>server.js</strong></p>
<p><img src="/blog2025.github.io/image-20250502114217591.png" alt="image-20250502114217591"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 TCP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端已连接&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听客户端发送的数据</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientMessage = data.<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到客户端消息: <span class="subst">$&#123;clientMessage&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向客户端发送响应（双工写操作）</span></span><br><span class="line">    socket.<span class="title function_">write</span>(<span class="string">`服务器已收到: &quot;<span class="subst">$&#123;clientMessage&#125;</span>&quot;\n`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听客户端断开连接</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端已断开连接&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务器端错误:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 8000 端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动，监听端口 8000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>client.js</strong></p>
<p><img src="/blog2025.github.io/image-20250502114129955.png" alt="image-20250502114129955"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="keyword">const</span> client = net.<span class="title function_">connect</span>(&#123; <span class="attr">port</span>: <span class="number">8000</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已连接到服务器&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建命令行交互接口</span></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">  <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">  <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续监听输入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">askQuestion</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    rl.<span class="title function_">question</span>(<span class="string">&#x27;请输入消息（输入 exit 退出）: &#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (message.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;exit&#x27;</span>) &#123;</span><br><span class="line">        client.<span class="title function_">end</span>();</span><br><span class="line">        rl.<span class="title function_">close</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      client.<span class="title function_">write</span>(message);</span><br><span class="line">      <span class="title function_">askQuestion</span>(); <span class="comment">// 递归调用，持续输入</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收服务器响应（双工读操作）</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">askQuestion</span>(); <span class="comment">// 连接成功后启动输入循环</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听连接关闭</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接已关闭&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;客户端错误:&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="转换流（Transform）"><a href="#转换流（Transform）" class="headerlink" title="转换流（Transform）"></a>转换流（Transform）</h3><p>转换流是一种特殊的双工流，可以修改或转换数据。常见的转换流包括压缩和解压缩流。</p>
<ul>
<li>使用 <code>zlib.createGzip()</code> 生成压缩流；</li>
<li>使用 <code>zlib.createGunzip()</code> 解压数据流</li>
</ul>
<p>如将<strong>input.txt</strong>压缩为<strong>input.txt.gz</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">const</span> readableStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个转换流（压缩）</span></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.<span class="title function_">createGzip</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">const</span> writableStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将可读流管道到转换流，再管道到可写流</span></span><br><span class="line">readableStream.<span class="title function_">pipe</span>(gzip).<span class="title function_">pipe</span>(writableStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听完成事件</span></span><br><span class="line">writableStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件压缩成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>解压缩：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流（读取.gz文件）</span></span><br><span class="line"><span class="keyword">const</span> readableStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建解压转换流</span></span><br><span class="line"><span class="keyword">const</span> gzip = zlib.<span class="title function_">createGunzip</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流（输出解压后的文件）</span></span><br><span class="line"><span class="keyword">const</span> writableStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input副本.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将可读流管道到转换流，再管道到可写流（管道连接）</span></span><br><span class="line">readableStream.<span class="title function_">pipe</span>(gzip).<span class="title function_">pipe</span>(writableStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听完成事件</span></span><br><span class="line">writableStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件压缩成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理（重要！）</span></span><br><span class="line">readableStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取失败:&#x27;</span>, err));</span><br><span class="line">gzip.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;解压失败:&#x27;</span>, err));</span><br><span class="line">writableStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;写入失败:&#x27;</span>, err));</span><br></pre></td></tr></table></figure>

<h3 id="管道流：（pipe）"><a href="#管道流：（pipe）" class="headerlink" title="管道流：（pipe）"></a>管道流：（pipe）</h3><p>管道提供了一个输出流到输入流的机制。</p>
<p>从一个流中获取数据并将数据传递到另外一个流中。</p>
<p>应用：</p>
<ul>
<li><strong>大文件处理</strong>：提供了压缩和解压数据。</li>
<li><strong>实时流处理</strong>：日志、多媒体编码</li>
<li>‌<strong>协议转换</strong>：CSV 表格转换为 JSON</li>
</ul>
<p>将数据从一个文件<strong>input.txt</strong>写到另一个文件<strong>output.txt</strong>中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> writerStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道读写操作</span></span><br><span class="line"><span class="comment">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></span><br><span class="line">readerStream.<span class="title function_">pipe</span>(writerStream);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h3><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。</p>
<p>链式流一般用于管道操作。</p>
<p>链式流通过 ‌<strong>模块化处理单元串联</strong>‌ 实现高效数据流转与任务协作，比如说解压缩：</p>
<p><strong>压缩</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 input.txt 文件为 input.txt.gz</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGzip</span>())</span><br><span class="line">  .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>));</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件压缩完成。&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>解压</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压 input.txt.gz 文件为 input.txt</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGunzip</span>())</span><br><span class="line">  .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>));</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件解压完成。&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="‌转换流、管道流、链式流的关系"><a href="#‌转换流、管道流、链式流的关系" class="headerlink" title="‌转换流、管道流、链式流的关系"></a>‌<strong>转换流、管道流、链式流的关系</strong></h3><p>这三者在数据流处理中扮演不同角色，但通过 ‌<strong>协作模式</strong>‌ 共同实现高效、灵活的数据处理流程。以下是它们的核心关系与区别：</p>
<p> <strong>核心定义与功能</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>概念</strong>‌</th>
<th>‌<strong>定义</strong>‌</th>
<th>‌<strong>典型实现</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>转换流</strong>‌</td>
<td>继承自 <code>Transform</code> 类的流，‌<strong>处理并修改数据</strong>‌（如压缩、加密、格式转换）</td>
<td>Node.js 的 <code>zlib.createGzip()</code></td>
</tr>
<tr>
<td>‌<strong>管道流</strong>‌</td>
<td>通过 <code>.pipe()</code> 方法‌<strong>连接多个流</strong>‌，形成单向数据通道</td>
<td><code>readable.pipe(transform).pipe(writable)</code></td>
</tr>
<tr>
<td>‌<strong>链式流</strong>‌</td>
<td>通过‌<strong>连续方法调用</strong>‌（如 <code>.pipe()</code> 链式操作）将多个处理单元串联成完整流水线</td>
<td>压缩+加密+传输的链式调用</td>
</tr>
</tbody></table>
<p><strong>协作关系与层级</strong>‌</p>
<ul>
<li><p>‌<strong>依赖关系</strong>‌：</p>
<ul>
<li>‌<strong>链式流</strong>‌ 是目标（构建完整处理流程）；</li>
<li>‌<strong>管道流</strong>‌ 是实现链式流的核心方法（通过 <code>.pipe()</code> 串联流）；</li>
<li>‌<strong>转换流</strong>‌ 是链式流中的关键处理节点（修改或增强数据）。</li>
</ul>
</li>
<li><p>‌<strong>数据流转图示</strong>‌：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintextCopy Code输入流 (Readable) </span><br><span class="line">  → [转换流1: 压缩] </span><br><span class="line">  → [转换流2: 加密] </span><br><span class="line">  → 输出流 (Writable)</span><br></pre></td></tr></table></figure>

<p>通过 <code>.pipe()</code> 连接各环节，形成链式流。</p>
</li>
</ul>
<p><strong>关键区别与协作优势</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>转换流</strong>‌</th>
<th>‌<strong>管道流</strong>‌</th>
<th>‌<strong>链式流</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>核心目的</strong>‌</td>
<td>修改数据内容</td>
<td>连接数据流</td>
<td>组织完整处理流程</td>
</tr>
<tr>
<td>‌<strong>代码体现</strong>‌</td>
<td>实现 <code>_transform()</code> 方法</td>
<td>调用 <code>.pipe()</code> 方法</td>
<td>多个 <code>.pipe()</code> 链式调用</td>
</tr>
<tr>
<td>‌<strong>资源消耗</strong>‌</td>
<td>可能占用 CPU（如加密）</td>
<td>仅管理流连接，低开销</td>
<td>整体流程的资源协同优化</td>
</tr>
</tbody></table>
<h2 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h2><h3 id="模块类型："><a href="#模块类型：" class="headerlink" title="模块类型："></a>模块类型：</h3><ul>
<li><strong>内置模块</strong>：Node.js 自带的模块，如 <code>fs</code>、<code>http</code>、<code>path</code> 等。</li>
<li><strong>用户自定义模块</strong>：由开发者创建的模块。</li>
<li><strong>第三方模块</strong>：通过 npm 安装的模块，如 <code>express</code>、<code>lodash</code> 等。</li>
</ul>
<h3 id="导入内置模块："><a href="#导入内置模块：" class="headerlink" title="导入内置模块："></a>导入内置模块：</h3><p>使用<code>require(&#39;&#39;)</code>函数传入模块名称</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入文件系统模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路径模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 HTTP 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="导入第三方模块"><a href="#导入第三方模块" class="headerlink" title="导入第三方模块:"></a>导入第三方模块:</h3><p>先使用 npm 安装到项目中，再使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p>第三方模块安装后，这些模块会被放置在项目的 node_modules 目录下。</p>
<p>自动生成：</p>
<ul>
<li>node_modules </li>
<li><code>package.json</code></li>
<li><code>package-lock.json</code></li>
</ul>
<p>要导入一个第三方模块，同样使用 <code>require()</code> 函数，但传入的是模块的名称。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入第三方模块 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="自定义模块导出与导入（CommonJS-模块）"><a href="#自定义模块导出与导入（CommonJS-模块）" class="headerlink" title="自定义模块导出与导入（CommonJS 模块）"></a>自定义模块导出与导入（CommonJS 模块）</h3><p>CommonJS 是 Node.js 中的默认模块系统，用于打包和管理 JavaScript 代码。</p>
<p>每个文件都被视为一个独立的模块，通过 <em>require</em> 函数加载其他模块，并通过 <em>module.exports</em> 或 <em>exports</em> 对象导出模块内容。</p>
<ul>
<li><p>**导出模块：**使用 <strong>module.exports</strong> 或 <strong>exports</strong> 将函数、对象或变量导出。<font color="red"><strong>两者不建议一同使用。</strong></font></p>
<ul>
<li><code>module.exports</code> 是导出对象的真正引用。（<strong>暴露对象</strong>）</li>
<li><code>exports</code> 是 <code>module.exports</code> 的快捷方式。不能直接赋值 <code>exports = ...</code>，否则会断开引用。（<strong>暴露属性和方法</strong>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; ❌ 无效导出</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; ✅ 正确</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>; <span class="comment">// 正确写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**导入模块：**使用 <strong>require()</strong> 导入模块。</p>
<p><strong>main.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&#x27;./hello&#x27;</span>);</span><br><span class="line">hello.<span class="title function_">world</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在 main.js 中通过 require(&#x27;./hello&#x27;) 加载这个模块，然后就可以直接访问 hello.js 中 exports 对象的成员函数了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//代码 require(&#x27;./hello&#x27;) 引入了当前目录下的 hello.js 文件</span></span><br></pre></td></tr></table></figure>

<p><strong>hello.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">world</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello.js 通过 exports 对象把 world 作为模块的访问接口</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">world</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*箭头函数</span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">    world()&#123;</span></span><br><span class="line"><span class="comment">        console.log(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*分开定义后导出</span></span><br><span class="line"><span class="comment">function sayHello() &#123;</span></span><br><span class="line"><span class="comment">  console.log(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">module.exports = &#123;</span></span><br><span class="line"><span class="comment">  world: sayHello</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自定义模块导出与导入（ES-模块）"><a href="#自定义模块导出与导入（ES-模块）" class="headerlink" title="自定义模块导出与导入（ES 模块）"></a>自定义模块导出与导入（ES 模块）</h3><p>ES 模块使用 <strong>import</strong> 和 <strong>export</strong>，是现代 JavaScript 的模块规范。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js（ES 模块）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js（ES 模块）</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, <span class="variable constant_">PI</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>（需在 <code>package.json</code> 中设置 <code>&quot;type&quot;: &quot;module&quot;</code>）：否则会报错：</p>
<p><img src="/blog2025.github.io/image-20250502131217439.png" alt="image-20250502131217439"></p>
<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span>   <span class="comment">// 🚨 关键配置项</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span>	<span class="comment">//启动入口</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 你的依赖项...</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="加载模块的路径解析"><a href="#加载模块的路径解析" class="headerlink" title="加载模块的路径解析"></a>加载模块的路径解析</h3><p>**1、核心模块：**如 http 和 fs，在 Node.js 安装时就包含，可以直接加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>**2、本地文件模块：**使用相对路径或绝对路径加载，需指定 <strong>.&#x2F;</strong> 或 <strong>&#x2F;</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>**3、第三方模块：**位于 <strong>node_modules</strong> 目录中，只需输入模块名称即可加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="模块缓存"><a href="#模块缓存" class="headerlink" title="模块缓存"></a>模块缓存</h3><p>**模块缓存机制：**Node.js 会将已加载的模块缓存起来，以提高性能。再次 <code>require()</code> 同一模块时，直接返回缓存中的模块，而不是重新加载。</p>
<p>**刷新缓存：**要重新加载模块，可以删除缓存：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./myModule&#x27;</span>)];</span><br></pre></td></tr></table></figure>

<h3 id="服务端的模块"><a href="#服务端的模块" class="headerlink" title="服务端的模块"></a><a href="https://www.runoob.com/nodejs/nodejs-module-system.html">服务端的模块</a></h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Node.js 继承了 JavaScript 的所有函数特性，并在其异步编程模型中发挥了重要作用。</p>
<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>使用 <strong>function</strong> 关键字声明一个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>将函数赋值给一个变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greet = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6 引入的简洁函数表达式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = name =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h3><ul>
<li><p><strong>普通函数</strong></p>
<p>最常见的函数形式，可以有参数和返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名函数</strong></p>
<p>没有名字的函数，通常作为参数传递给其他函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个匿名函数。&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>回调函数</strong></p>
<p>作为参数传递给另一个函数，并在某个操作完成后被调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="string">&#x27;Some data&#x27;</span>;</span><br><span class="line">        <span class="title function_">callback</span>(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>使用 async 和 await 关键字处理异步操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.example.com/users/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching user:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchUser</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(user));</span><br></pre></td></tr></table></figure>

<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul>
<li><p><strong>闭包</strong></p>
<p>闭包是指一个函数能够记住并访问其词法作用域，即使这个函数在其词法作用域之外也能执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">counter</span>()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>高阶函数</strong></p>
<p>接受函数作为参数或返回函数的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">applyOperation</span>(<span class="params">a, b, operation</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operation</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">applyOperation</span>(<span class="number">5</span>, <span class="number">3</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y);</span><br><span class="line"><span class="keyword">const</span> product = <span class="title function_">applyOperation</span>(<span class="number">5</span>, <span class="number">3</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(product); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>在函数声明时为参数提供默认值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name = <span class="string">&#x27;Guest&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(); <span class="comment">// Hello, Guest!</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Alice&#x27;</span>); <span class="comment">// Hello, Alice!</span></span><br></pre></td></tr></table></figure>

<h3 id="Rest-剩余参数-…值"><a href="#Rest-剩余参数-…值" class="headerlink" title="Rest 剩余参数[…值]"></a>Rest 剩余参数[…值]</h3><p>允许将不定数量的参数表示为一个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h3><p>从对象或数组中<strong>提取数据</strong>并将其赋值给变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;name&#125;</span>, Age: <span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="title function_">getUserInfo</span>(user); <span class="comment">// Name: Alice, Age: 30</span></span><br></pre></td></tr></table></figure>

<h3 id="函数推荐写法："><a href="#函数推荐写法：" class="headerlink" title="函数推荐写法："></a>函数推荐写法：</h3><ul>
<li>**函数单一职责：**每个函数应该只做一件事，这样更容易测试和维护。</li>
<li>**避免全局变量：**尽量减少全局变量的使用，使用局部变量和函数参数。</li>
<li>**使用箭头函数：**箭头函数简洁明了，特别是在处理回调函数时。</li>
<li><strong>错误处理：</strong> 使用 try…catch 语句处理可能抛出的错误。</li>
<li><strong>函数作为参数:</strong> 函数作为一个参数来使用。</li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由是处理 HTTP 请求的关键部分，它决定了如何根据不同的 URL 和 HTTP 方法（如 GET、POST、PUT、DELETE 等）来分发请求。</p>
<p>路由通常用于构建 Web 应用程序，特别是 RESTful API。</p>
<p>Node.js 本身并<strong>没有</strong>内置的路由机制，但可以通过中间件库（如 <strong>Express</strong>）来实现。</p>
<p>路由通常涉及以下几个方面：</p>
<ul>
<li><strong>URL 匹配</strong>：根据请求的 URL 来匹配路由规则。</li>
<li><strong>HTTP 方法匹配</strong>：根据请求的 HTTP 方法（GET、POST、PUT、DELETE 等）来匹配路由规则。</li>
<li><strong>请求处理</strong>：一旦匹配到合适的路由规则，就调用相应的处理函数来处理请求。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器并定义路由</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; url, method &#125; = req;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> &amp;&amp; method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Home Page&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about&#x27;</span> &amp;&amp; method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;About Page&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器运行在 http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>一个完整 URL 的 <strong><code>http://localhost:8888/start?foo=bar&amp;hello=world</code></strong> 包含主机、路径和查询字符串。</p>
<p>为了解析这些数据，我们可以使用 <strong>URL</strong> 对象和 <strong>querystring</strong> 模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;http://localhost:8888/start?foo=bar&amp;hello=world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取路径名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myUrl.<span class="property">pathname</span>); <span class="comment">// 输出: /start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取查询参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myUrl.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;foo&quot;</span>));   <span class="comment">// 输出: bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myUrl.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 输出: world</span></span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">myUrl.pathname</span><br><span class="line">          |</span><br><span class="line">          |</span><br><span class="line">        -----</span><br><span class="line">http://localhost:8888/start?foo=bar&amp;hello=world</span><br><span class="line">                                ---       -----</span><br><span class="line">                                 |          |</span><br><span class="line">                                 |          |</span><br><span class="line">           myUrl.searchParams.get(&quot;foo&quot;)    |</span><br><span class="line">                                            |</span><br><span class="line">                                     myUrl.searchParams.get(&quot;hello&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>完善的服务请求</strong>：</p>
<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>); <span class="comment">// 引入 Node.js 的 http 模块，用于创建服务器</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">URL</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>); <span class="comment">// 从 url 模块引入 URL 构造函数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义并导出 start 函数，用于启动服务器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">start</span>(<span class="params">route</span>) &#123;</span><br><span class="line">  <span class="comment">// 定义 onRequest 函数，处理每个请求</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onRequest</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 URL 构造函数解析请求路径</span></span><br><span class="line">    <span class="keyword">const</span> pathname = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">`http://<span class="subst">$&#123;request.headers.host&#125;</span>`</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request for <span class="subst">$&#123;pathname&#125;</span> received.`</span>); <span class="comment">// 打印请求路径</span></span><br><span class="line"> </span><br><span class="line">    <span class="title function_">route</span>(pathname); <span class="comment">// 调用路由函数处理路径</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置响应头和响应内容</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建服务器并监听指定端口</span></span><br><span class="line">  http.<span class="title function_">createServer</span>(onRequest).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server has started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导出 start 函数供其他模块使用</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">start</span> = start;</span><br></pre></td></tr></table></figure>

<p><strong>router.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">route</span>(<span class="params">pathname</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;About to route a request for &quot;</span> + pathname);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导出了 route 函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">route</span> = route;</span><br></pre></td></tr></table></figure>

<p><strong>index.js</strong>（入口文件—启动）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&quot;./server&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"> </span><br><span class="line">server.<span class="title function_">start</span>(router.<span class="property">route</span>);</span><br></pre></td></tr></table></figure>

<p>启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8888/">http://localhost:8888/</a></p>
<p><img src="/blog2025.github.io/image-20250502134436168.png" alt="image-20250502134436168"></p>
<p>访问<a href="http://localhost:8888/home/user/id">http://localhost:8888/home/user/id</a></p>
<p><img src="/blog2025.github.io/image-20250502134531496.png" alt="image-20250502134531496"></p>
<p>页面都是</p>
<p><img src="/blog2025.github.io/image-20250502134614395.png" alt="image-20250502134614395"></p>
<h3 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h3><p><strong>安装 Express：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p><strong>基本路由：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 GET 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 POST 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/submit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Form submitted!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>动态路由：</strong></p>
<p>动态路由允许你使用参数化的 URL。</p>
<p>例如，你可以定义一个路由来处理 <strong>&#x2F;users&#x2F;:id</strong>，其中 <strong>:id</strong> 是一个动态参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`User ID: <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>路由参数：</strong></p>
<p>Express 允许你从 URL 中提取参数，并通过 req.params 对象访问这些参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`User ID: <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search/:query&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">params</span>.<span class="property">query</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`Search query: <span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>查询参数</strong>：</p>
<p>查询参数是 URL 中的键值对，通常用于传递额外的信息。你可以通过 req.query 对象访问查询参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/users/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`User ID: <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/search/:query&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = req.<span class="property">params</span>.<span class="property">query</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`Search query: <span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>路由中间件：</strong></p>
<p>路由中间件是在处理请求之前或之后执行的函数。你可以使用中间件来处理诸如身份验证、日志记录等任务。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 日志记录中间件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logger</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request Type: <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(logger);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>路由分组：</strong></p>
<p>为了更好地组织代码，你可以使用路由分组。Express 提供了 express.Router 对象，可以用来创建模块化的、可挂载的路由处理程序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个路由器实例</span></span><br><span class="line"><span class="keyword">const</span> userRouter = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用户相关的路由</span></span><br><span class="line">userRouter.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;List of users&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">userRouter.<span class="title function_">get</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`User ID: <span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载用户路由器</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/users&#x27;</span>, userRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>高级路由技巧：</strong></p>
<ul>
<li><p><strong>错误处理：</strong> 你可以定义错误处理中间件来捕获和处理路由中的错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>**路由优先级：**路由的定义顺序决定了它们的优先级，先定义的路由会先被匹配。</p>
</li>
<li><p><strong>路由限制：</strong> 你可以使用中间件来限制某些路由的访问，例如仅允许认证用户访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">authMiddleware</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unauthorized&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin&#x27;</span>, authMiddleware, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Admin page&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>全局对象的所有属性都可以在程序的任何地方访问。</p>
<ul>
<li><p>浏览器 JavaScript— window 是全局对象</p>
</li>
<li><p>Node.js — global 是全局对象</p>
<p>所有全局变量（除了 global 本身以外）都是 global 对象的属性。</p>
</li>
</ul>
<h3 id="全局对象与全局变量："><a href="#全局对象与全局变量：" class="headerlink" title="全局对象与全局变量："></a>全局对象与全局变量：</h3><p>global 最根本的作用是作为全局变量的宿主。按照 ES 的定义，满足以下条 件的变量是全局变量：</p>
<ul>
<li>在最外层定义的变量；</li>
<li>全局对象的属性；</li>
<li>隐式定义的变量（未定义直接赋值的变量）。</li>
</ul>
<p><strong>注意：</strong> 最好不要使用 var 定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。</p>
<ul>
<li><p><strong>__filename</strong></p>
<p>表示当前正在执行的脚本的<strong>文件名</strong>。它将输出文件所在位置的<strong>绝对路径</strong>，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250502135806178.png" alt="image-20250502135806178"></p>
</li>
<li><p><strong>__dirname</strong></p>
<p>表示当前执行脚本所在的<strong>目录</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(__dirname)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250502135924044.png" alt="image-20250502135924044"></p>
</li>
<li><p><strong>setTimeout(cb, ms)</strong></p>
<p>在指定的毫秒(ms)数后执行指定函数(cb)。</p>
<p><strong>只执行一次指定函数。</strong></p>
<p>返回一个代表定时器的句柄值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两秒后执行以上函数</span></span><br><span class="line"><span class="built_in">setTimeout</span>(printHello, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>clearTimeout(t)</strong></p>
<p>用于停止一个之前通过 setTimeout() 创建的定时器。 参数 <strong>t</strong> 是通过 setTimeout() 函数创建的定时器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两秒后执行以上函数</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="built_in">setTimeout</span>(printHello, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setInterval(cb, ms)</strong></p>
<p>在指定的毫秒(ms)数后执行指定函数(cb)。</p>
<p>返回一个代表定时器的句柄值。可以使用 <strong>clearInterval(t)</strong> 函数来清除定时器。</p>
<p>setInterval() 方法会<strong>不停地调用函数</strong>，直到 clearInterval() 被调用或窗口被关闭。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两秒后执行以上函数</span></span><br><span class="line"><span class="built_in">setInterval</span>(printHello, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>console</strong></p>
<table>
<thead>
<tr>
<th>**方法 **</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>console.log(data)</strong></td>
<td>向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。</td>
</tr>
<tr>
<td><strong>console.info(data)</strong></td>
<td>该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。</td>
</tr>
<tr>
<td><strong>console.error(data)</strong></td>
<td>输出错误消息的。控制台在出现错误时会显示是红色的叉子。</td>
</tr>
<tr>
<td><strong>console.warn(data)</strong></td>
<td>输出警告消息。控制台出现有黄色的惊叹号。</td>
</tr>
<tr>
<td><strong>console.dir(obj[, options])</strong></td>
<td>用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。</td>
</tr>
<tr>
<td><strong>console.time(label)</strong></td>
<td>输出时间，表示计时开始。</td>
</tr>
<tr>
<td><strong>console.timeEnd(label)</strong></td>
<td>结束时间，表示计时结束。</td>
</tr>
<tr>
<td><strong>console.trace(message[, …])</strong></td>
<td>当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。</td>
</tr>
<tr>
<td><strong>console.assert(value, message)</strong></td>
<td>用于判断某个表达式或变量是否为真，接收两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://www.runoob.com/nodejs/nodejs-global-object.html"><strong>process</strong></a></p>
<p>它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。</p>
<table>
<thead>
<tr>
<th><strong>事件</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>exit</strong></td>
<td>当进程准备退出时触发。</td>
</tr>
<tr>
<td><strong>beforeExit</strong></td>
<td>当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 ‘beforeExit’ 的监听器可以异步调用，这样 node 就会继续执行。</td>
</tr>
<tr>
<td><strong>uncaughtException</strong></td>
<td>当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。</td>
</tr>
<tr>
<td><strong>Signal 事件</strong></td>
<td>当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。</td>
</tr>
</tbody></table>
<p>……</p>
</li>
</ul>
<h2 id="常用工具（util）"><a href="#常用工具（util）" class="headerlink" title="常用工具（util）"></a>常用工具（util）</h2><p><strong>util</strong></p>
<ul>
<li>实用工具函数，用于支持 JavaScript 编程中的调试、错误处理、格式化等功能。</li>
<li>常用函数的集合，用于弥补核心 JavaScript 的功能过于精简的不足。</li>
<li>涵盖了从对象检查、继承到格式化字符串等多个方面。</li>
</ul>
<h3 id="导入-util-模块"><a href="#导入-util-模块" class="headerlink" title="导入 util 模块"></a>导入 util 模块</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="util-方法"><a href="#util-方法" class="headerlink" title="util 方法"></a><a href="https://www.runoob.com/nodejs/nodejs-util.html">util 方法</a></h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
<th>‌<strong>核心参数&#x2F;示例</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>util.format(format, ...args)</code></td>
<td align="left">字符串格式化，支持 <code>%s</code>、<code>%d</code>、<code>%j</code> 占位符。</td>
<td><code>util.format(&#39;%s:%d&#39;, &#39;端口&#39;, 8080); // &#39;端口:8080&#39;</code> <code>参数过多时用空格拼接：util.format(1,2,3) → &#39;1 2 3&#39;</code></td>
<td>支持自动类型转换，默认空格分隔多余参数</td>
</tr>
<tr>
<td align="left"><code>util.inspect(object[, options])</code></td>
<td align="left">将对象转换为字符串，用于调试。</td>
<td><code>util.inspect(obj, &#123; colors: true, depth: 2 &#125;);</code> <code>colors</code> 启用颜色高亮，<code>depth</code> 控制递归层级</td>
<td>常用于日志打印或命令行输出</td>
</tr>
<tr>
<td align="left"><code>util.promisify(function)</code></td>
<td align="left">将回调风格的函数转换为返回 Promise 的函数。</td>
<td><code>const readFileAsync = util.promisify(fs.readFile);</code> <code>readFileAsync(&#39;file.txt&#39;).then(...)</code></td>
<td>需函数符合 Node.js 回调参数规范（<code>(err, data)</code>）</td>
</tr>
<tr>
<td align="left"><code>util.callbackify(fn)</code></td>
<td align="left">将返回 Promise 的函数转换为回调风格函数。</td>
<td><code>const callbackFn = util.callbackify(asyncFn);</code> <code>callbackFn((err, res) =&gt; &#123; ... &#125;)</code></td>
<td>错误处理通过 <code>err.reason</code> 获取 Promise 拒绝原因</td>
</tr>
<tr>
<td align="left"><code>util.inherits(constructor, superConstructor)</code></td>
<td align="left">让一个构造函数继承另一个构造函数的原型方法。</td>
<td><code>util.inherits(SubClass, BaseClass);</code> <code>SubClass 继承 BaseClass 的原型方法</code></td>
<td>ES6 推荐使用 <code>class</code> 和 <code>extends</code> 替代</td>
</tr>
<tr>
<td align="left"><code>util.deprecate(fn, message)</code></td>
<td align="left">标记函数为废弃，调用时会打印警告消息。</td>
<td><code>const deprecatedFn = util.deprecate(() =&gt; &#123;&#125;, &#39;此函数已废弃&#39;);</code></td>
<td>用于代码迁移兼容性处理</td>
</tr>
<tr>
<td align="left"><code>util.types</code></td>
<td align="left">包含多种类型检测方法的集合，例如 <code>isAnyArrayBuffer</code>、<code>isBigInt64Array</code>。</td>
<td><code>util.types.isDate(new Date()) → true</code> <code>util.types.isRegExp(/abc/) → true</code> <code>util.types.isPromise(promiseObj)</code></td>
<td>支持多种类型检测，如 <code>AsyncFunction</code>、<code>ArrayBuffer</code> 等</td>
</tr>
<tr>
<td align="left"><code>util.isDeepStrictEqual(val1, val2)</code></td>
<td align="left">判断两个值是否深度相等，类似于深度比较。</td>
<td><code>util.isDeepStrictEqual(&#123;a:1&#125;, &#123;a:1&#125;); // true</code></td>
<td>替代 <code>assert.deepStrictEqual()</code> 的场景</td>
</tr>
<tr>
<td align="left"><code>util.getSystemErrorName(err)</code></td>
<td align="left">根据错误码返回系统错误名称。</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><code>util.inspect.custom</code></td>
<td align="left">一个 Symbol，可以定义自定义的 <code>inspect</code> 行为，用于调试。</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="util-types-下的类型检测方法"><a href="#util-types-下的类型检测方法" class="headerlink" title="util.types 下的类型检测方法"></a>util.types 下的类型检测方法</h3><p>util.types 是一个包含许多类型检测方法的集合，扩展了 JavaScript 的 typeof 和 instanceof。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>util.types.isAnyArrayBuffer(value)</code></td>
<td align="left">检查值是否为 <code>ArrayBuffer</code> 或 <code>SharedArrayBuffer</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isArrayBuffer(value)</code></td>
<td align="left">检查值是否为 <code>ArrayBuffer</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isAsyncFunction(value)</code></td>
<td align="left">检查值是否为异步函数。</td>
</tr>
<tr>
<td align="left"><code>util.types.isBigInt64Array(value)</code></td>
<td align="left">检查值是否为 <code>BigInt64Array</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isBigUint64Array(value)</code></td>
<td align="left">检查值是否为 <code>BigUint64Array</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isBooleanObject(value)</code></td>
<td align="left">检查值是否为布尔对象。</td>
</tr>
<tr>
<td align="left"><code>util.types.isDataView(value)</code></td>
<td align="left">检查值是否为 <code>DataView</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isDate(value)</code></td>
<td align="left">检查值是否为 <code>Date</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isGeneratorFunction(value)</code></td>
<td align="left">检查值是否为生成器函数。</td>
</tr>
<tr>
<td align="left"><code>util.types.isMap(value)</code></td>
<td align="left">检查值是否为 <code>Map</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isSet(value)</code></td>
<td align="left">检查值是否为 <code>Set</code>。</td>
</tr>
<tr>
<td align="left"><code>util.types.isRegExp(value)</code></td>
<td align="left">检查值是否为正则表达式。</td>
</tr>
<tr>
<td align="left"><code>util.types.isSymbolObject(value)</code></td>
<td align="left">检查值是否为符号对象。</td>
</tr>
</tbody></table>
<h2 id="文件系统（fs-模块）"><a href="#文件系统（fs-模块）" class="headerlink" title="文件系统（fs 模块）"></a><a href="https://www.runoob.com/nodejs/nodejs-fs.html">文件系统（fs 模块）</a></h2><p>文件系统模块（fs 模块）提供了丰富的 API，用于读取、写入、删除文件以及执行其他文件系统操作。</p>
<p>fs 模块既支持同步方法也支持异步方法，使得开发者可以根据具体需求选择合适的方式来处理文件操作。</p>
<p><strong>导入 fs 模块</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h3><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本。</p>
<p>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。</p>
<h3 id="文件操作类-API‌"><a href="#文件操作类-API‌" class="headerlink" title="文件操作类 API‌"></a>文件操作类 API‌</h3><table>
<thead>
<tr>
<th>‌<strong>方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>参数示例</strong>‌</th>
<th>‌<strong>同步版本</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.readFile()</code></td>
<td>异步读取文件内容</td>
<td><code>fs.readFile(&#39;file.txt&#39;, &#39;utf8&#39;, (err, data) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.readFileSync()</code></td>
</tr>
<tr>
<td><code>fs.writeFile()</code></td>
<td>异步写入文件（覆盖原内容）</td>
<td><code>fs.writeFile(&#39;log.txt&#39;, &#39;content&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.writeFileSync()</code></td>
</tr>
<tr>
<td><code>fs.appendFile()</code></td>
<td>异步追加内容到文件末尾</td>
<td><code>fs.appendFile(&#39;log.txt&#39;, &#39;new data&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.appendFileSync()</code></td>
</tr>
<tr>
<td><code>fs.copyFile()</code></td>
<td>异步复制文件</td>
<td><code>fs.copyFile(&#39;src.txt&#39;, &#39;dest.txt&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.copyFileSync()</code></td>
</tr>
<tr>
<td><code>fs.rename()</code></td>
<td>异步重命名&#x2F;移动文件</td>
<td><code>fs.rename(&#39;old.txt&#39;, &#39;new.txt&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.renameSync()</code></td>
</tr>
<tr>
<td><code>fs.unlink()</code></td>
<td>异步删除文件</td>
<td><code>fs.unlink(&#39;file.txt&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.unlinkSync()</code></td>
</tr>
<tr>
<td><code>fs.open</code></td>
<td>打开文件</td>
<td><code>fs.open(&#39;file.txt&#39;, &#39;r&#39;, (err, fd) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.openSync()</code></td>
</tr>
<tr>
<td><code>fs.read()</code></td>
<td>读取文件内容</td>
<td><code>fs.read(fd, buffer, offset, length, position, callback);</code></td>
<td><code>fs.readSync()</code></td>
</tr>
<tr>
<td><code>fs.write()</code></td>
<td>写入文件内容</td>
<td><code>fs.write(fd, buffer[, offset[, length[, position]]], callback);</code><br/><code>fs.write(fd, string[, position[, encoding]], callback);</code></td>
<td><code>fs.writeSync()</code></td>
</tr>
<tr>
<td><code>fs.close()</code></td>
<td>关闭文件描述符</td>
<td><code>fs.close(fd, callback);</code></td>
<td><code>fs.closeSync()</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="‌目录操作类-API‌"><a href="#‌目录操作类-API‌" class="headerlink" title="‌目录操作类 API‌"></a>‌目录操作类 API‌</h3><table>
<thead>
<tr>
<th>‌<strong>方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>参数示例</strong>‌</th>
<th>‌<strong>同步版本</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.readdir()</code></td>
<td>异步读取目录内容列表</td>
<td><code>fs.readdir(&#39;./src&#39;, (err, files) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.readdirSync()</code></td>
</tr>
<tr>
<td><code>fs.mkdir()</code></td>
<td>异步创建目录（支持递归创建）</td>
<td><code>fs.mkdir(&#39;newDir&#39;, &#123; recursive: true &#125;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.mkdirSync()</code></td>
</tr>
<tr>
<td><code>fs.rmdir()</code></td>
<td>异步删除空目录</td>
<td><code>fs.rmdir(&#39;emptyDir&#39;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.rmdirSync()</code></td>
</tr>
<tr>
<td><code>fs.rm()</code></td>
<td>异步递归删除目录及内容（Node.js 14.14+）</td>
<td><code>fs.rm(&#39;dir&#39;, &#123; recursive: true &#125;, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.rmSync()</code></td>
</tr>
</tbody></table>
<h3 id="文件信息与权限‌"><a href="#文件信息与权限‌" class="headerlink" title="文件信息与权限‌"></a>文件信息与权限‌</h3><table>
<thead>
<tr>
<th>‌<strong>方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>参数示例</strong>‌</th>
<th>‌<strong>同步版本</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.stat()</code></td>
<td>异步获取文件&#x2F;目录元信息（大小、创建时间、权限等）</td>
<td><code>fs.stat(&#39;file.txt&#39;, (err, stats) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.statSync()</code></td>
</tr>
<tr>
<td><code>fs.access()</code></td>
<td>异步检查文件&#x2F;目录权限（可读、可写、可执行）</td>
<td><code>fs.access(&#39;file.txt&#39;, fs.constants.R_OK, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.accessSync()</code></td>
</tr>
<tr>
<td><code>fs.chmod()</code></td>
<td>异步修改文件&#x2F;目录权限</td>
<td><code>fs.chmod(&#39;file.txt&#39;, 0o755, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.chmodSync()</code></td>
</tr>
<tr>
<td><code>fs.utimes()</code></td>
<td>异步修改文件访问时间和修改时间</td>
<td><code>fs.utimes(&#39;file.txt&#39;, new Date(), new Date(), (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.utimesSync()</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="‌流式文件操作"><a href="#‌流式文件操作" class="headerlink" title="‌流式文件操作"></a>‌流式文件操作</h3><table>
<thead>
<tr>
<th>‌<strong>方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>参数示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.createReadStream()</code></td>
<td>创建可读流，分块读取大文件</td>
<td><code>fs.createReadStream(&#39;video.mp4&#39;).pipe(process.stdout)</code></td>
<td>视频&#x2F;日志流式处理</td>
</tr>
<tr>
<td><code>fs.createWriteStream()</code></td>
<td>创建可写流，分块写入文件</td>
<td><code>const ws = fs.createWriteStream(&#39;output.log&#39;); ws.write(&#39;data&#39;)</code></td>
<td>大文件写入或实时日志记录</td>
</tr>
</tbody></table>
<hr>
<h3 id="‌高级功能‌"><a href="#‌高级功能‌" class="headerlink" title="‌高级功能‌"></a>‌高级功能‌</h3><table>
<thead>
<tr>
<th>‌<strong>方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>参数示例</strong>‌</th>
<th>‌<strong>同步版本</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>fs.watch()</code></td>
<td>监听文件&#x2F;目录变化（跨平台兼容性有限）</td>
<td><code>fs.watch(&#39;dir&#39;, (event, filename) =&gt; &#123; ... &#125;)</code></td>
<td>-</td>
</tr>
<tr>
<td><code>fs.realpath()</code></td>
<td>异步解析文件绝对路径（含符号链接追踪）</td>
<td><code>fs.realpath(&#39;./symlink&#39;, (err, resolvedPath) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.realpathSync()</code></td>
</tr>
<tr>
<td><code>fs.truncate()</code></td>
<td>异步截断文件至指定长度（直接通过文件路径操作）</td>
<td><code>fs.truncate(&#39;file.txt&#39;, 100, (err) =&gt; &#123; ... &#125;)</code></td>
<td><code>fs.truncateSync()</code></td>
</tr>
<tr>
<td><code>fs.ftruncate()</code></td>
<td>截取文件（通过已打开的文件描述符操作）</td>
<td><code>fs.ftruncate(fd, len, callback)</code></td>
<td><code>fs.ftruncateSync()</code></td>
</tr>
</tbody></table>
<h2 id="Node-js应用"><a href="#Node-js应用" class="headerlink" title="Node.js应用"></a>Node.js应用</h2><h3 id="构建简单应用"><a href="#构建简单应用" class="headerlink" title="构建简单应用"></a>构建简单应用</h3><ul>
<li><p>创建项目文件夹 my-first-node-app</p>
</li>
<li><p>初始化项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init </span><br></pre></td></tr></table></figure>

<p>生成 package.json 文件，其包含项目的配置信息。</p>
<p>或者使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p><code>-y</code> 参数的作用是跳过交互式问卷环节，自动接受所有默认配置选项并直接生成 package.json 文件。（系统会直接采用默认值填充项目名称、版本、描述等信息）</p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-first-node-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里的<code>&quot;scripts&quot;: &#123;&quot;test&quot;：&quot;...&quot;,&quot;start&quot;: 后续需要修改为项目的入口文件&#125;</code></p>
<p>如：<code>&quot;scripts&quot;: &#123;&quot;test&quot;: &quot;test server&quot;, &quot;start&quot;: &quot;node server.js&quot;&#125;</code></p>
</li>
<li><p>创建入口文件：</p>
<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置HTTP响应的状态码和头信息</span></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="comment">// 设置内容类型为 HTML，并指定字符集为 UTF-8，这样中文不会乱码</span></span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=utf-8&#x27;</span> </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送响应体</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;p&gt;这是我的第一个 Node.js 应用。&lt;/p&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503092619234.png" alt="image-20250503092619234"></p>
<p><img src="/blog2025.github.io/image-20250503092710434.png" alt="image-20250503092710434"></p>
</li>
<li><p>更完善的写法—增加路由（解耦合）</p>
<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>); <span class="comment">// 导入路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置默认字符集（UTF-8保证中文不亂碼）</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将请求交给路由处理</span></span><br><span class="line">  router.<span class="title function_">handleRequests</span>(req, res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器已启动: http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>router.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = &#123;</span><br><span class="line">  <span class="title function_">handleRequests</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; url &#125; = req;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 路由映射表</span></span><br><span class="line">    <span class="keyword">const</span> routes = &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=utf-8&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;你好世界！&lt;/h1&gt;&lt;p&gt;这是我的第一个 Node.js 应用。&lt;/p&gt;&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/about&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;关于我们&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;404&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span> &#125;);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;404 页面不存在&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行匹配的路由处理函数，无匹配则返回404</span></span><br><span class="line">    (routes[url] || routes[<span class="string">&#x27;404&#x27;</span>])();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="GET-POST命令"><a href="#GET-POST命令" class="headerlink" title="GET&#x2F;POST命令"></a>GET&#x2F;POST命令</h3><h4 id="GET："><a href="#GET：" class="headerlink" title="GET："></a>GET：</h4><p>使用 url.parse 方法来解析 URL 中的参数</p>
<ul>
<li><p>获取 URL 的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>); <span class="comment">// 解析路径和查询参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = parsedUrl;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`GET 路径：<span class="subst">$&#123;pathname&#125;</span>\n参数：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(query)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>访问<code>&quot;http://localhost:3000/api?name=张三&amp;age=20&quot;</code></p>
<p>输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET 路径：/api</span><br><span class="line">参数：<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;20&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>url的属性和方法</p>
<table>
<thead>
<tr>
<th><strong>属性&#x2F;方法</strong>‌</th>
<th>‌<strong>功能描述</strong>‌</th>
<th>‌<strong>示例值&#x2F;说明</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>href</strong></td>
<td>获取或设置完整 URL 字符串</td>
<td><code>&#39;https://www.example.com:8080/api?name=test#hash&#39;</code></td>
</tr>
<tr>
<td>‌<strong>origin</strong>‌</td>
<td>获取协议+主机名+端口的组合（只读属性）</td>
<td><code>&#39;https://www.example.com:8080&#39;</code></td>
</tr>
<tr>
<td>‌<strong>protocol</strong>‌</td>
<td>获取或设置协议部分（含冒号）</td>
<td><code>&#39;https:&#39;</code></td>
</tr>
<tr>
<td>‌<strong>hostname</strong>‌</td>
<td>获取或设置主机名（不含端口）</td>
<td><code>&#39;www.example.com&#39;</code></td>
</tr>
<tr>
<td>‌<strong>port</strong>‌</td>
<td>获取或设置端口号（空字符串表示默认端口）</td>
<td><code>&#39;8080&#39;</code></td>
</tr>
<tr>
<td>‌<strong>host</strong>‌</td>
<td>获取或设置完整主机（含端口）</td>
<td><code>&#39;www.example.com:8080&#39;</code></td>
</tr>
<tr>
<td>‌<strong>username</strong>‌</td>
<td>获取或设置认证用户名</td>
<td>若 URL 为 <code>http://user:pass@example.com</code>，则值为 <code>&#39;user&#39;</code></td>
</tr>
<tr>
<td>‌<strong>password</strong>‌</td>
<td>获取或设置认证密码</td>
<td>同上例中为 <code>&#39;pass&#39;</code></td>
</tr>
<tr>
<td>‌<strong>pathname</strong>‌</td>
<td>获取或设置路径部分（以 <code>/</code> 开头）</td>
<td><code>&#39;/api/data&#39;</code></td>
</tr>
<tr>
<td>‌<strong>search</strong>‌</td>
<td>获取或设置查询字符串（含 <code>?</code>）</td>
<td><code>&#39;?name=张三&amp;age=20&#39;</code></td>
</tr>
<tr>
<td>‌<strong>searchParams</strong>‌</td>
<td>获取 <code>URLSearchParams</code> 对象（用于操作查询参数）</td>
<td>支持 <code>get()</code>, <code>set()</code>, <code>append()</code> 等方法</td>
</tr>
<tr>
<td><strong>get(name)</strong></td>
<td>获取指定名称的查询参数值</td>
<td><code>myUrl.searchParams.get(&quot;name&quot;)</code></td>
</tr>
<tr>
<td><strong>set(name, value)</strong></td>
<td>设置查询字符串中指定名称的参数（若已存在则更新）</td>
<td><code>myUrl.searchParams.set(&quot;name&quot;, &quot;lisi&quot;)</code><br /><code>?name=lisi</code></td>
</tr>
<tr>
<td><strong>delete(name)</strong></td>
<td>删除指定名称的查询参数</td>
<td><code>myUrl.searchParams.delete(&quot;age&quot;)</code></td>
</tr>
<tr>
<td><strong>has(name)</strong></td>
<td>判断查询字符串中是否存在指定名称的参数</td>
<td><code>myUrl.searchParams.has(&quot;foo&quot;)</code>返回<code>true</code> 或 <code>false</code></td>
</tr>
<tr>
<td><strong>append(name, value)</strong></td>
<td>向查询字符串中追加新的参数</td>
<td><code>myUrl.searchParams.append(&quot;age&quot;, &quot;18&quot;)</code><br /><code>?name=zhangsan&amp;age=18</code></td>
</tr>
<tr>
<td>‌<strong>hash</strong>‌</td>
<td>获取或设置哈希值（含 <code>#</code>）</td>
<td><code>&#39;#section1&#39;</code></td>
</tr>
<tr>
<td>‌**toString()**‌</td>
<td>返回完整 URL 字符串（等效于 <code>href</code> 属性）</td>
<td><code>url.toString() → &#39;https://example.com/&#39;</code></td>
</tr>
<tr>
<td>‌**toJSON()**‌</td>
<td>序列化时自动调用 <code>toString()</code>（兼容 JSON 序列化需求）</td>
<td>调用 <code>JSON.stringify(url)</code> 时自动触发</td>
</tr>
</tbody></table>
<p><strong>关键功能演示代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">URL</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 URL 对象</span></span><br><span class="line"><span class="keyword">const</span> myUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://user:pass@example.com:8080/path?key=val#hash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作属性示例</span></span><br><span class="line">myUrl.<span class="property">protocol</span> = <span class="string">&#x27;http:&#x27;</span>;  <span class="comment">// 修改协议为 HTTP</span></span><br><span class="line">myUrl.<span class="property">searchParams</span>.<span class="title function_">append</span>(<span class="string">&#x27;newParam&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);  <span class="comment">// 添加查询参数</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myUrl.<span class="property">href</span>);  </span><br><span class="line"><span class="comment">// 输出: http://user:pass@example.com:8080/path?key=val&amp;newParam=123#hash</span></span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<ul>
<li><p>‌<strong>构造 URL 对象</strong>‌<br>必须使用 <code>new URL(input[, base])</code> 语法，相对路径需指定 <code>base</code> 参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> relativeUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>); </span><br><span class="line"><span class="comment">// → https://example.com/api</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>编码处理</strong>‌<br>特殊字符需通过 <code>encodeURIComponent()</code> 处理，避免 URL 解析错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> safeParam = <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;特殊字符&amp;值&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>参数操作</strong>‌<br>通过 <code>searchParams</code> 方法链式操作查询参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myUrl.<span class="property">searchParams</span></span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  .<span class="title function_">delete</span>(<span class="string">&#x27;oldKey&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="POST："><a href="#POST：" class="headerlink" title="POST："></a>POST：</h4><p>需要监听并处理 <strong>request</strong> 对象的 <strong>data</strong> 和 <strong>end</strong> 事件。</p>
<ul>
<li><strong>监听 <code>data</code> 事件</strong>：当数据块到达服务器时，<code>data</code> 事件触发，数据块作为回调的参数传递。</li>
<li><strong>监听 <code>end</code> 事件</strong>：当整个请求体接收完毕时，<code>end</code> 事件触发，这时可以对完整的 POST 数据进行处理。</li>
</ul>
<p>‌<strong>原生模块处理代码</strong>‌</p>
<p><strong>1. 基础数据接收</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> body = [];</span><br><span class="line">    <span class="comment">// 监听 data 事件，逐块接收数据</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> body.<span class="title function_">push</span>(chunk));  <span class="comment">// 分块接收数据</span></span><br><span class="line">    <span class="comment">// 监听 end 事件，数据接收完毕</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      body = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(body).<span class="title function_">toString</span>();</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">`接收数据：<span class="subst">$&#123;body&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>检测请求方法</strong>：通过 <code>req.method === &#39;POST&#39;</code> 来判断请求类型是否为 POST。</li>
<li><strong>接收数据</strong>：在 <code>req.on(&#39;data&#39;)</code> 事件中累加数据块，形成完整的数据体。</li>
<li><strong>完成接收</strong>：在 <code>req.on(&#39;end&#39;)</code> 事件中处理完整的 POST 数据。</li>
<li><strong>响应客户端</strong>：完成数据接收和处理后，向客户端发送响应。</li>
</ul>
<p>测试：</p>
<p><img src="/blog2025.github.io/image-20250503112310095.png" alt="image-20250503112310095"></p>
<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250503112331620.png" alt="image-20250503112331620"></p>
<p><strong>2‌. JSON 数据解析</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(body);  <span class="comment">// 直接解析 </span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">data</span>: jsonData &#125;));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">400</span>;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Invalid JSON&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/blog2025.github.io/image-20250503113237340.png" alt="image-20250503113237340"></p>
<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250503113257451.png" alt="image-20250503113257451"></p>
<p><strong>3. 表单</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; req.<span class="property">url</span> === <span class="string">&#x27;/submit&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> body = [];</span><br><span class="line">    <span class="comment">// 分块接收数据:ml-citation&#123;ref=&quot;2,5&quot; data=&quot;citationList&quot;&#125;</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> body.<span class="title function_">push</span>(chunk))</span><br><span class="line">       .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> data = querystring.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(body).<span class="title function_">toString</span>());</span><br><span class="line">         <span class="keyword">if</span> (!data.<span class="property">username</span> || !data.<span class="property">password</span>) &#123;</span><br><span class="line">           res.<span class="title function_">writeHead</span>(<span class="number">400</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">           <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;参数缺失&#x27;</span> &#125;));</span><br><span class="line">         &#125;</span><br><span class="line">         res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;);</span><br><span class="line">         res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>, data &#125;));</span><br><span class="line">       &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Not Found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原生服务运行于 http://localhost:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/blog2025.github.io/image-20250503120118983.png" alt="image-20250503120118983"></p>
<p><img src="/blog2025.github.io/image-20250503120134242.png" alt="image-20250503120134242"></p>
<p><img src="/blog2025.github.io/image-20250503120147672.png" alt="image-20250503120147672"></p>
<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250503120203537.png" alt="image-20250503120203537"></p>
<h3 id="工具模块"><a href="#工具模块" class="headerlink" title="工具模块"></a><a href="https://www.runoob.com/nodejs/nodejs-utitlity-module.html">工具模块</a></h3><table>
<thead>
<tr>
<th align="left">模块名</th>
<th align="left">描述</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/nodejs/nodejs-os-module.html"><strong>OS 模块</strong></a></td>
<td align="left">提供基本的系统操作函数。</td>
<td><code>const os = require(&#39;os&#39;);</code><br/><code>console.log(os.cpus());</code> &#x2F;&#x2F; 查看 CPU 信息</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/nodejs/nodejs-path-module.html"><strong>Path 模块</strong></a></td>
<td align="left">提供了处理和转换文件路径的工具。</td>
<td><code>const path = require(&#39;path&#39;);</code><br/><code>const fullPath = path.join(__dirname, &#39;data&#39;, &#39;test.txt&#39;);</code></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/nodejs/nodejs-net-module.html"><strong>Net 模块</strong></a></td>
<td align="left">用于底层的网络通信。提供了服务端和客户端的的操作。</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/nodejs/nodejs-dns-module.html"><strong>DNS 模块</strong></a></td>
<td align="left">用于解析域名。</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/nodejs/nodejs-domain-module.html"><strong>Domain 模块</strong></a></td>
<td align="left">简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。</td>
<td></td>
</tr>
<tr>
<td align="left">‌<strong>Util 模块</strong></td>
<td align="left">提供类型检查、字符串格式化、回调转 Promise 等实用工具</td>
<td><code>const util = require(&#39;util&#39;);</code><br/><code>util.promisify(fs.readFile)(&#39;file.txt&#39;); // 回调转 Promise</code></td>
</tr>
<tr>
<td align="left">‌<strong>Querystring 模块</strong></td>
<td align="left">解析 URL 查询参数，支持对象与字符串互转</td>
<td><code>const qs = require(&#39;querystring&#39;);</code><br/><code>const params = qs.parse(&#39;name=Alice&amp;age=25&#39;);</code></td>
</tr>
</tbody></table>
<h3 id="Web-模块"><a href="#Web-模块" class="headerlink" title="Web 模块"></a>Web 模块</h3><p>Web服务器：一般指网站服务器，</p>
<p>Web服务器的基本功能：提供Web信息浏览服务。</p>
<p>Web 服务器都支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器。</p>
<p>Web服务器最主流的是 Apache、Nginx、IIS。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/09/web_architecture.jpg" alt="img"></p>
<ul>
<li><strong>Client</strong> - 客户端，一般指浏览器，浏览器可以通过 HTTP 协议向服务器请求数据。</li>
<li><strong>Server</strong> - 服务端，一般指 Web 服务器，可以接收客户端请求，并向客户端发送响应数据。</li>
<li><strong>Business</strong> - 业务层， 通过 Web 服务器处理应用程序，如与数据库交互，逻辑运算，调用外部程序等。</li>
<li><strong>Data</strong> - 数据层，一般由数据库组成。</li>
</ul>
<h4 id="使用-Node-创建-Web-服务器"><a href="#使用-Node-创建-Web-服务器" class="headerlink" title="使用 Node 创建 Web 服务器"></a>使用 Node 创建 Web 服务器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>( <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;  </span><br><span class="line">   <span class="comment">// 解析请求，包括文件名</span></span><br><span class="line">   <span class="keyword">var</span> pathname = url.<span class="title function_">parse</span>(request.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出请求的文件名</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request for &quot;</span> + pathname + <span class="string">&quot; received.&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></span><br><span class="line">   fs.<span class="title function_">readFile</span>(pathname.<span class="title function_">substr</span>(<span class="number">1</span>), <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;             </span><br><span class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>&#125;);    </span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 响应文件内容</span></span><br><span class="line">         response.<span class="title function_">write</span>(data.<span class="title function_">toString</span>());        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.<span class="title function_">end</span>();</span><br><span class="line">   &#125;);   </span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 控制台会输出以下信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8080/&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250503121623965.png" alt="image-20250503121623965"></p>
<h4 id="使用-Node-创建-Web-客户端"><a href="#使用-Node-创建-Web-客户端" class="headerlink" title="使用 Node 创建 Web 客户端"></a>使用 Node 创建 Web 客户端</h4><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用于请求的选项</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">   <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">   <span class="attr">port</span>: <span class="string">&#x27;8080&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/index.html&#x27;</span>  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">   <span class="comment">// 不断更新数据</span></span><br><span class="line">   <span class="keyword">var</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   response.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      body += data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   response.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 数据接收完成</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向服务端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.<span class="title function_">request</span>(options, callback);</span><br><span class="line">req.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node client.js</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/blog2025.github.io/image-20250503121806344.png" alt="image-20250503121806344"></p>
<p><img src="/blog2025.github.io/image-20250503121827728.png" alt="image-20250503121827728"></p>
<h3 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p>
<p>使用 Express 可以快速地搭建一个完整功能的网站。</p>
<p>Express 框架核心特性：</p>
<ul>
<li>可以设置<strong>中间件</strong>来响应 HTTP 请求。</li>
<li>定义了<strong>路由表</strong>用于执行不同的 HTTP 请求动作。</li>
<li>可以通过向模板传递参数来<strong>动态渲染</strong> HTML <strong>页面</strong>。</li>
</ul>
<h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p>自动安装 Express 到自动生成的 node_modules 目录下。</p>
<p>还需安装几个重要框架搭配 express 使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install body-parser --save</span><br><span class="line">npm install cookie-parser --save</span><br><span class="line">npm install multer --save</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>body-parser</strong> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</li>
<li><strong>cookie-parser</strong> - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</li>
<li><strong>multer</strong> - node.js 中间件，用于处理 enctype&#x3D;”multipart&#x2F;form-data”（设置表单的MIME编码）的表单数据。</li>
</ul>
<p><strong>package.json</strong></p>
<p><img src="/blog2025.github.io/image-20250503122544098.png" alt="image-20250503122544098"></p>
<h4 id="第一个示例"><a href="#第一个示例" class="headerlink" title="第一个示例"></a>第一个示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//express_demo.js 文件</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503122747221.png" alt="image-20250503122747221"></p>
<h4 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h4><p>Express 使用回调函数的参数： <strong>request</strong> 和 <strong>response</strong> 对象来处理请求和响应的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   <span class="comment">// --</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>Request 对象</strong> - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>req.app</strong></td>
<td>当callback为外部文件时，用req.app访问express的实例</td>
</tr>
<tr>
<td><strong>req.baseUrl</strong></td>
<td>获取路由当前安装的URL路径</td>
</tr>
<tr>
<td><strong>req.body &#x2F; req.cookies</strong></td>
<td>获得「请求主体」&#x2F; Cookies</td>
</tr>
<tr>
<td><strong>req.fresh &#x2F; req.stale</strong></td>
<td>判断请求是否还「新鲜」</td>
</tr>
<tr>
<td><strong>req.hostname &#x2F; req.ip</strong></td>
<td>获取主机名和IP地址</td>
</tr>
<tr>
<td><strong>req.originalUrl</strong></td>
<td>获取原始请求URL</td>
</tr>
<tr>
<td><strong>req.params</strong></td>
<td>获取路由的parameters</td>
</tr>
<tr>
<td><strong>req.path</strong></td>
<td>获取请求路径</td>
</tr>
<tr>
<td><strong>req.protocol</strong></td>
<td>获取协议类型</td>
</tr>
<tr>
<td><strong>req.query</strong></td>
<td>获取URL的查询参数串</td>
</tr>
<tr>
<td><strong>req.route</strong></td>
<td>获取当前匹配的路由</td>
</tr>
<tr>
<td><strong>req.subdomains</strong></td>
<td>获取子域名</td>
</tr>
<tr>
<td><strong>req.accepts()</strong></td>
<td>检查可接受的请求的文档类型</td>
</tr>
<tr>
<td><strong>req.acceptsCharsets &#x2F; req.acceptsEncodings &#x2F; req.acceptsLanguages</strong></td>
<td>返回指定字符集的第一个可接受字符编码</td>
</tr>
<tr>
<td><strong>req.get()</strong></td>
<td>获取指定的HTTP请求头</td>
</tr>
<tr>
<td><strong>req.is()</strong></td>
<td>判断请求头Content-Type的MIME类型</td>
</tr>
</tbody></table>
<p><strong>Response 对象</strong> - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>res.app</strong></td>
<td>当callback为外部文件时，用res.app访问express的实例</td>
</tr>
<tr>
<td><strong>res.append()</strong></td>
<td>追加指定HTTP头</td>
</tr>
<tr>
<td><strong>res.set()</strong></td>
<td>在res.append()后将重置之前设置的头</td>
</tr>
<tr>
<td><strong>res.cookie(name，value [，option])</strong></td>
<td>设置Cookie</td>
</tr>
<tr>
<td><strong>opition</strong></td>
<td>domain &#x2F; expires &#x2F; httpOnly &#x2F; maxAge &#x2F; path &#x2F; secure &#x2F; signed</td>
</tr>
<tr>
<td><strong>res.clearCookie()</strong></td>
<td>清除Cookie</td>
</tr>
<tr>
<td><strong>res.download()</strong></td>
<td>传送指定路径的文件</td>
</tr>
<tr>
<td><strong>res.get()</strong></td>
<td>返回指定的HTTP头</td>
</tr>
<tr>
<td><strong>res.json()</strong></td>
<td>传送JSON响应</td>
</tr>
<tr>
<td><strong>res.jsonp()</strong></td>
<td>传送JSONP响应</td>
</tr>
<tr>
<td><strong>res.location()</strong></td>
<td>只设置响应的Location HTTP头，不设置状态码或者close response</td>
</tr>
<tr>
<td><strong>res.redirect()</strong></td>
<td>设置响应的Location HTTP头，并且设置状态码302</td>
</tr>
<tr>
<td><strong>res.render(view,[locals],callback)</strong></td>
<td>渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</td>
</tr>
<tr>
<td><strong>res.send()</strong></td>
<td>传送HTTP响应</td>
</tr>
<tr>
<td><strong>res.sendFile(path [，options] [，fn])</strong></td>
<td>传送指定路径的文件 -会自动根据文件extension设定Content-Type</td>
</tr>
<tr>
<td><strong>res.set()</strong></td>
<td>设置HTTP头，传入object可以一次设置多个头</td>
</tr>
<tr>
<td><strong>res.status()</strong></td>
<td>设置HTTP状态码</td>
</tr>
<tr>
<td><strong>res.type()</strong></td>
<td>设置Content-Type的MIME类型</td>
</tr>
</tbody></table>
<h4 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  主页输出 &quot;Hello World&quot;</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主页 GET 请求&quot;</span>);</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;Hello GET&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//  POST 请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主页 POST 请求&quot;</span>);</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;Hello POST&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  /del_user 页面响应</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/del_user&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;/del_user 响应 DELETE 请求&quot;</span>);</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;删除页面&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  /list_user 页面 GET 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list_user&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;/list_user GET 请求&quot;</span>);</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;用户列表页面&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab*cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;/ab*cd GET 请求&quot;</span>);</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;正则匹配&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>Express 提供了内置的中间件 <strong>express.static</strong> 来设置静态文件如：图片， CSS, JavaScript 等。</p>
<p>使用 <strong>express.static</strong> 中间件来设置静态文件路径。</p>
<p>例如，如果你将图片、CSS、 JavaScript 文件放在 <strong>public</strong> 目录下，调用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503123947310.png" alt="image-20250503123947310"></p>
<h4 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h4><p>示例：</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/process_get&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;first_name&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;last_name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/process_get&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 JSON 格式</span></span><br><span class="line">   <span class="keyword">var</span> response = &#123;</span><br><span class="line">       <span class="string">&quot;first_name&quot;</span>:req.<span class="property">query</span>.<span class="property">first_name</span>,</span><br><span class="line">       <span class="string">&quot;last_name&quot;</span>:req.<span class="property">query</span>.<span class="property">last_name</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">   res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503124347263.png" alt="image-20250503124347263"></p>
<p><img src="/blog2025.github.io/image-20250503124411249.png" alt="image-20250503124411249"></p>
<h4 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h4><p>示例：</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8081/process_post&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;first_name&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;last_name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/process_post&#x27;</span>, urlencodedParser, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 JSON 格式</span></span><br><span class="line">   <span class="keyword">var</span> response = &#123;</span><br><span class="line">       <span class="string">&quot;first_name&quot;</span>:req.<span class="property">body</span>.<span class="property">first_name</span>,</span><br><span class="line">       <span class="string">&quot;last_name&quot;</span>:req.<span class="property">body</span>.<span class="property">last_name</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">   res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response));</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503124916262.png" alt="image-20250503124916262"></p>
<p><img src="/blog2025.github.io/image-20250503124933080.png" alt="image-20250503124933080"></p>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>示例：</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.error</span> &#123; <span class="attribute">color</span>: red; <span class="attribute">display</span>: none; &#125;  <span class="comment">/* 错误提示样式*/</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/file_upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return validateForm()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            选择一个文件上传: <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>请先选择文件！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> errorMsg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;errorMsg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (fileInput.<span class="property">files</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;  <span class="comment">// 检查文件是否为空</span></span></span><br><span class="line"><span class="language-javascript">                errorMsg.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;inline&#x27;</span>;  <span class="comment">// 显示错误提示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 允许提交</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态隐藏错误提示（当用户选择新文件时）</span></span></span><br><span class="line"><span class="language-javascript">     	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;errorMsg&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>server.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;/tmp/&#x27;</span>&#125;).<span class="title function_">array</span>(<span class="string">&#x27;image&#x27;</span>));</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">   res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/file_upload&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>[<span class="number">0</span>]);  <span class="comment">// 上传的文件信息</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">var</span> des_file = __dirname + <span class="string">&quot;/&quot;</span> + req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">originalname</span>;</span><br><span class="line">   fs.<span class="title function_">readFile</span>( req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">path</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">writeFile</span>(des_file, data, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>( err )&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>( err );</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               response = &#123;</span><br><span class="line">                   <span class="attr">message</span>:<span class="string">&#x27;File uploaded successfully&#x27;</span>, </span><br><span class="line">                   <span class="attr">filename</span>:req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">originalname</span></span><br><span class="line">              &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>( response );</span><br><span class="line">          res.<span class="title function_">end</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>( response ) );</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">  <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503125907472.png" alt="image-20250503125907472"></p>
<p><img src="/blog2025.github.io/image-20250503130001095.png" alt="image-20250503130001095"></p>
<p><img src="/blog2025.github.io/image-20250503130240872.png" alt="image-20250503130240872"></p>
<p><img src="/blog2025.github.io/image-20250503130021263.png" alt="image-20250503130021263"></p>
<h4 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h4><p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 Cookie 中间件（启用签名）</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(<span class="string">&#x27;your_secret_key&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础路由（测试页面）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;body style=&quot;padding: 20px;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;Cookie 管理测试&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;location.href=&#x27;/set-cookie&#x27;&quot;&gt;设置 Cookie&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;location.href=&#x27;/get-cookie&#x27;&quot;&gt;读取 Cookie&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;button onclick=&quot;location.href=&#x27;/clear-cookie&#x27;&quot;&gt;删除 Cookie&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;p style=&quot;color: green&quot;&gt;<span class="subst">$&#123;req.signedCookies.user ? <span class="string">`当前用户: <span class="subst">$&#123;req.signedCookies.user&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置签名 Cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/set-cookie&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,    <span class="comment">// 1 小时有效期</span></span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>,            <span class="comment">// 禁止客户端脚本访问</span></span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>,             <span class="comment">// 开发环境设为 false，生产环境需设为 true</span></span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>               <span class="comment">// 启用签名防篡改</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/get-cookie&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> unsignedUser = req.<span class="property">cookies</span>.<span class="property">user</span>;        <span class="comment">// 未签名 Cookie</span></span><br><span class="line">  <span class="keyword">const</span> signedUser = req.<span class="property">signedCookies</span>.<span class="property">user</span>;    <span class="comment">// 签名 Cookie</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (signedUser === <span class="literal">false</span>) &#123;                   <span class="comment">// 签名校验失败处理</span></span><br><span class="line">    res.<span class="title function_">clearCookie</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&#x27;Cookie 签名校验失败，已清除&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">`签名 Cookie: <span class="subst">$&#123;signedUser || <span class="string">&#x27;无&#x27;</span>&#125;</span>&lt;br&gt;普通 Cookie: <span class="subst">$&#123;unsignedUser || <span class="string">&#x27;无&#x27;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 Cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/clear-cookie&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">clearCookie</span>(<span class="string">&#x27;user&#x27;</span>, &#123; </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span> </span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">stack</span>);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;服务器错误&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`运行地址: http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250503131301081.png" alt="image-20250503131301081"></p>
<p><img src="/blog2025.github.io/image-20250503131319686.png" alt="image-20250503131319686"></p>
<p><img src="/blog2025.github.io/image-20250503131353687.png" alt="image-20250503131353687"></p>
<p><img src="/blog2025.github.io/image-20250503131412960.png" alt="image-20250503131412960"></p>
<h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a><a href="https://www.runoob.com/w3cnote/restful-architecture.html">RESTful API</a></h3><h4 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：</p>
<ul>
<li><strong>GET</strong> - 用于获取数据。</li>
<li><strong>PUT</strong> - 用于更新或添加数据。</li>
<li><strong>DELETE</strong> - 用于删除数据。</li>
<li><strong>POST</strong> - 用于添加数据。</li>
</ul>
<p>示例：</p>
<p><strong>db.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bob&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bob@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1746322845393</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1111@163.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1746322868169</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lisi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;222@163.cpm&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;products&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>app.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB_PATH</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;db.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>)); <span class="comment">// 托管静态文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据库</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readDB</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> fs.<span class="title function_">readFile</span>(<span class="variable constant_">DB_PATH</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> fs.<span class="title function_">writeFile</span>(<span class="variable constant_">DB_PATH</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">users</span>: [] &#125;, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">users</span>: [] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据库</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">writeDB</span> = <span class="keyword">async</span> (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> fs.<span class="title function_">writeFile</span>(<span class="variable constant_">DB_PATH</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RESTful API</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> <span class="title function_">readDB</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(db.<span class="property">users</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Database error&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/users&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> <span class="title function_">readDB</span>();</span><br><span class="line">    <span class="keyword">const</span> newUser = &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), ...req.<span class="property">body</span> &#125;;</span><br><span class="line">    db.<span class="property">users</span>.<span class="title function_">push</span>(newUser);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">writeDB</span>(db);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newUser);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Create failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/api/users/:id&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> <span class="title function_">readDB</span>();</span><br><span class="line">    <span class="keyword">const</span> user = db.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>));</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;User not found&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(user, req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">writeDB</span>(db);</span><br><span class="line">    res.<span class="title function_">json</span>(user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Update failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/api/users/:id&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> <span class="title function_">readDB</span>();</span><br><span class="line">    <span class="keyword">const</span> initialLength = db.<span class="property">users</span>.<span class="property">length</span>;</span><br><span class="line">    db.<span class="property">users</span> = db.<span class="property">users</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> !== <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (db.<span class="property">users</span>.<span class="property">length</span> === initialLength) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;User not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">writeDB</span>(db);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">send</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Delete failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>public&#x2F;index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 添加用户表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;userForm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用户列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;userList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取DOM元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> userForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userForm&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> userList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 加载用户列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">loadUsers</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> users = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">      userList.<span class="property">innerHTML</span> = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div class=&quot;user-card&quot; data-id=&quot;<span class="subst">$&#123;user.id&#125;</span>&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;span&gt;<span class="subst">$&#123;user.name&#125;</span>&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;small&gt;<span class="subst">$&#123;user.email&#125;</span>&lt;/small&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;button onclick=&quot;editUser(<span class="subst">$&#123;user.id&#125;</span>)&quot;&gt;编辑&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;button onclick=&quot;deleteUser(<span class="subst">$&#123;user.id&#125;</span>)&quot;&gt;删除&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加用户</span></span></span><br><span class="line"><span class="language-javascript">    userForm.<span class="property">onsubmit</span> = <span class="title function_">async</span> (e) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> newUser = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">email</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/users&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newUser)</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      userForm.<span class="title function_">reset</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 删除用户</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">deleteUser</span> = <span class="title function_">async</span> (id) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&#x27;确定要删除吗？&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 编辑用户（弹窗修改）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">editUser</span> = <span class="title function_">async</span> (id) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> newName = <span class="title function_">prompt</span>(<span class="string">&#x27;输入新姓名&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> newEmail = <span class="title function_">prompt</span>(<span class="string">&#x27;输入新邮箱&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (newName &amp;&amp; newEmail) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: newName, <span class="attr">email</span>: newEmail &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化加载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>public&#x2F;styles.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f0f2f5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-id">#userForm</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0056b3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.user-card</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.user-card</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.user-card</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.user-card</span> small &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Node.js 是以单线程的模式运行的，但可以使用事件驱动来处理并发，从而创建多个子进程。实现：</p>
<ul>
<li>‌<strong>充分利用多核 CPU</strong>‌（横向扩展）</li>
<li>‌<strong>隔离高 CPU 消耗任务</strong>‌（避免阻塞事件循环）</li>
<li>‌<strong>提高应用稳定性</strong>‌（单个进程崩溃不影响整体）</li>
</ul>
<h4 id="子进程组成：（三大标准流）"><a href="#子进程组成：（三大标准流）" class="headerlink" title="子进程组成：（三大标准流）"></a>子进程组成：（三大标准流）</h4><ul>
<li><p>child.stdin</p>
<ul>
<li>用于向子进程 ‌<strong>发送输入数据</strong>‌（如命令参数、交互式输入）</li>
<li>本质是可写流（Writable Stream），通过 <code>.write()</code> 写入数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">child.<span class="property">stdin</span>.<span class="title function_">write</span>(<span class="string">&#x27;ping example.com\n&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>child.stdout </p>
<ul>
<li>接收子进程的 ‌<strong>标准输出数据</strong>‌（例如命令行执行结果）</li>
<li>本质是可读流（Readable Stream），通过监听 <code>data</code> 事件获取数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程输出：<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>child.stderr</p>
<ul>
<li>捕获子进程的 ‌<strong>错误输出</strong>‌（如命令执行失败、异常信息）</li>
<li>同样为可读流，需单独监听以避免与正常输出混淆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误信息：<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>‌<strong>数据流向示意图</strong>‌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父进程 → [child.stdin] → 子进程  </span><br><span class="line">子进程 → [child.stdout] → 父进程  </span><br><span class="line">子进程 → [child.stderr] → 父进程</span><br></pre></td></tr></table></figure>

<p>‌<strong>典型使用场景</strong>‌</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>对应流</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>交互式命令</strong>‌</td>
<td><code>stdin</code> + <code>stdout</code></td>
<td>如 SSH 连接后持续输入指令</td>
</tr>
<tr>
<td>‌<strong>日志收集</strong>‌</td>
<td><code>stdout</code>&#x2F;<code>stderr</code></td>
<td>分离正常日志和错误日志</td>
</tr>
<tr>
<td>‌<strong>管道操作</strong>‌</td>
<td>组合使用</td>
<td>将 A 进程的输出作为 B 进程的输入</td>
</tr>
</tbody></table>
<p>‌<strong>注意事项</strong>‌</p>
<ul>
<li>‌<strong>流模式差异</strong>‌<br><code>spawn</code> 默认使用流式处理（适合大数据），而 <code>exec</code> 会缓冲全部输出后返回</li>
<li>‌<strong>共享与独立</strong>‌<br>子进程的 stdio 流可与父进程共享（默认），也可通过配置设为独立管道</li>
<li>‌<strong>资源释放</strong>‌<br>需手动关闭流：<code>child.stdin.end()</code> 终止输入</li>
<li>‌<strong>错误处理</strong>‌<br>必须监听 <code>stderr</code> 和 <code>error</code> 事件，否则可能导致未捕获异常</li>
</ul>
<h4 id="多进程核心模块"><a href="#多进程核心模块" class="headerlink" title="多进程核心模块"></a>多进程核心模块</h4><p> ‌**<code>child_process</code> 模块**</p>
<ul>
<li><p>‌关键方法：</p>
<ul>
<li><code>spawn()</code>: 启动子进程执行命令（适合长时间运行）</li>
<li><code>exec()</code>: 执行 Shell 命令并缓冲输出（适合短命令）</li>
<li><code>fork()</code>: 专用 <code>spawn()</code>，创建新的 Node.js 进程（自动建立 IPC(进程间) 通信）</li>
</ul>
<p><a href="https://www.runoob.com/nodejs/nodejs-process.html">详细参数看链接</a></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：使用 fork 创建子进程</span></span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">fork</span>(<span class="string">&#x27;subprocess.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;来自子进程的消息:&#x27;</span>, msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">send</span>(&#123; <span class="attr">parent</span>: <span class="string">&#x27;Hello from parent&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p><strong><code>cluster</code> 模块</strong></p>
<ul>
<li>‌<strong>核心功能</strong>‌：自动创建主进程（Master）和工作进程（Worker）</li>
<li>‌<strong>典型场景</strong>‌：创建 HTTP 服务器集群</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`主进程 <span class="subst">$&#123;process.pid&#125;</span> 启动`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建工作进程</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.<span class="title function_">fork</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">worker</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`工作进程 <span class="subst">$&#123;worker.process.pid&#125;</span> 已退出`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 工作进程共享同一个端口</span></span><br><span class="line">  http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">  &#125;).<span class="title function_">listen</span>(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`工作进程 <span class="subst">$&#123;process.pid&#125;</span> 启动`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JXcore-打包（不建议使用-不支持ES6）"><a href="#JXcore-打包（不建议使用-不支持ES6）" class="headerlink" title="JXcore 打包（不建议使用-不支持ES6）"></a>JXcore 打包（不建议使用-不支持ES6）</h3><p>JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。</p>
<h4 id="JXcore-安装"><a href="#JXcore-安装" class="headerlink" title="JXcore 安装"></a>JXcore 安装</h4><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。</p>
<p>下载地址：<a href="https://github.com/jxcore/jxcore-release">https://github.com/jxcore/jxcore-release</a></p>
<p><img src="/blog2025.github.io/image-20250504101946525.png" alt="image-20250504101946525"></p>
<p>打包项目：</p>
<p><img src="/blog2025.github.io/image-20250504102326113.png" alt="image-20250504102326113"></p>
<p>以 <strong>app.js</strong> 为入口文件，指定 <strong>app.js</strong> 为node.js项目的主文件：</p>
<ul>
<li>基本打包命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jx package &lt;入口文件&gt; &lt;输出文件名&gt; [选项]</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">jx package app.js myapp -native</span><br><span class="line">-native：生成当前平台的可执行文件</span><br><span class="line">-slim：精简依赖包体积		 -slim fs,net</span><br><span class="line">-library：是否生成动态链接库	-library <span class="literal">false</span></span><br><span class="line">-extract：保持文件结构不压缩	-extract</span><br><span class="line">-password：加密打包文件	  -password mySecret123</span><br><span class="line">--target：跨平台打包(默认生成当前平台的可执行文件)	--target=windows,linux</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250504102304618.png" alt="image-20250504102304618"></p>
<p>执行成功，会生成以下两个文件：</p>
<p><img src="/blog2025.github.io/image-20250504102404458.png" alt="image-20250504102404458"></p>
<ul>
<li><strong>app.jx</strong>：这是一个完整包信息的二进制文件，可运行在客户端上。</li>
<li><strong>app.jxp</strong>：这是一个中间件文件，包含了需要编译的完整项目信息。</li>
</ul>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jx app.jx</span><br></pre></td></tr></table></figure>

<h4 id="兼容性问题："><a href="#兼容性问题：" class="headerlink" title="兼容性问题："></a>兼容性问题：</h4><ol>
<li>‌<strong>引擎版本差异</strong>‌<br>JXcore 使用的 JavaScript 引擎为 <strong><code>SpiderMonkey</code> 或旧版 V8</strong>，默认不支持 ES6 箭头函数等新特性</li>
<li>‌<strong>编译模式限制</strong>‌<br>使用 <code>jx package</code> 打包时若未开启 ES6 支持，编译器会将箭头函数识别为非法语法</li>
</ol>
<p><strong>解决方案：</strong></p>
<ul>
<li>‌**方案1：代码降级（推荐）**‌</li>
</ul>
<p>将箭头函数改写为传统函数表达式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方案2：强制启用 ES6 模式</strong>‌</li>
</ul>
<p>在打包命令中添加 <code>-es6</code> 参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jx package server.js server --es6</span><br></pre></td></tr></table></figure>

<ul>
<li>**方案3：使用 Babel 转译（完整ES6支持）**‌</li>
</ul>
<ol>
<li>安装 Babel 依赖：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 <code>.babelrc</code> 配置文件：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 Babel 预处理代码后再打包：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel server.js --out-file compiled.js &amp;&amp; jx package compiled.js server</span><br></pre></td></tr></table></figure>

<h3 id="pkg-nexe-Next-js-等打包工具"><a href="#pkg-nexe-Next-js-等打包工具" class="headerlink" title="pkg&#x2F;nexe&#x2F;Next.js 等打包工具"></a>pkg&#x2F;nexe&#x2F;Next.js 等打包工具</h3><table>
<thead>
<tr>
<th>工具</th>
<th>打包速度</th>
<th>输出体积</th>
<th>ES6支持</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>nexe</strong>‌</td>
<td>中等</td>
<td>较大</td>
<td>完整</td>
</tr>
<tr>
<td>‌<strong>pkg</strong>‌</td>
<td>快速</td>
<td>较小</td>
<td>完整</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>工具类型</th>
<th>推荐工具</th>
<th>适用场景</th>
<th>关键特性</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>轻量级</strong>‌</td>
<td><code>pkg</code></td>
<td>CLI工具或小型服务</td>
<td>单文件输出、零配置依赖</td>
</tr>
<tr>
<td>‌<strong>复杂应用</strong>‌</td>
<td><code>Webpack + nexe</code></td>
<td>多模块项目或需动态加载</td>
<td>代码分割、热更新支持</td>
</tr>
<tr>
<td>‌<strong>全栈开发</strong>‌</td>
<td><code>Next.js</code></td>
<td>SSR&#x2F;SSG应用或一体化API服务</td>
<td>内置优化、开发体验流畅</td>
</tr>
</tbody></table>
<hr>
<h4 id="pkg教程（推荐）"><a href="#pkg教程（推荐）" class="headerlink" title="pkg教程（推荐）"></a>pkg教程（推荐）</h4><p><strong>全局安装 pkg</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pkg@latest</span><br></pre></td></tr></table></figure>

<p><strong>项目配置</strong>（这个需要<code>npm init</code>去生成）<br>在 <code>package.json</code> 中配置入口文件与打包参数：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pkg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node18-win-x64&quot;</span><span class="punctuation">,</span> <span class="string">&quot;node18-linux-x64&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;public/&amp;zwnj;**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;views/**&amp;zwnj;/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>targets</code>：指定目标平台与 Node.js 版本（格式：<code>node版本-平台-架构</code>）</li>
<li><code>assets</code>：声明需打包的静态资源目录（如图片、CSS 文件等）</li>
</ul>
<p><strong><font color="red">本地开发环境与打包目标的 Node.js 版本需严格一致</font></strong></p>
<hr>
<p><strong>基础打包命令</strong></p>
<p><strong>1. 单文件打包</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg index.js --target node18-win-x64 --output myapp.exe</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--target</code>：指定目标运行环境（默认生成当前系统平台的可执行文件）</li>
<li><code>--output</code>：自定义输出文件名</li>
<li><code>index.js</code>：入口文件</li>
<li><code>--output</code>：输出文件名</li>
</ul>
<p><img src="/blog2025.github.io/image-20250504112144603.png" alt="image-20250504112144603"></p>
<p>‌<strong>2. 多平台打包</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg . --targets node18-win-x64,node18-macos-x64,node18-linux-x64 --out-path dist/</span><br></pre></td></tr></table></figure>

<ul>
<li>生成不同平台的二进制文件并输出到 <code>dist/</code> 目录</li>
</ul>
<hr>
<p><strong>静态资源处理</strong>‌</p>
<p>‌<strong>1. 自动打包资源文件</strong>‌<br>在 <code>package.json</code> 的 <code>assets</code> 字段声明需包含的静态资源：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;pkg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;node18-win-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;node18-linux-x64&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;public/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;config/*.json&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;app.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<ul>
<li>支持通配符 <code>*</code> 和 <code>**</code> 匹配多级目录</li>
</ul>
<p><strong>2. 运行时路径适配</strong>‌<br>代码中需使用 <code>__dirname</code> 动态获取资源路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> configPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;config/settings.json&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>打包效果</strong>：</p>
<p><img src="/blog2025.github.io/image-20250504112943771.png" alt="image-20250504112943771"></p>
<hr>
<p><strong>测试验证</strong>：‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myapp.exe --<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/image-20250504113008729.png" alt="image-20250504113008729"></p>
<hr>
<p><strong>详细配置看<code>node-packagetest</code>代码包</strong></p>
<p><strong>第一次打包慢，后头就快了。</strong></p>
<hr>
<h4 id="nexe教程（存在联网问题）"><a href="#nexe教程（存在联网问题）" class="headerlink" title="nexe教程（存在联网问题）"></a>nexe教程（存在联网问题）</h4><p>‌<strong>全局安装 Nexe</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nexe@latest</span><br></pre></td></tr></table></figure>

<p><strong>基础打包流程</strong></p>
<p>1.<strong>单文件打包</strong>‌<br>对简单脚本直接生成可执行文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe app.js -o myapp</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-o</code> 指定输出文件名，默认生成当前平台的二进制文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe app.js -o app --target node18.17.0-win-x64 --build</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--target</code>：指定目标运行环境（默认生成当前系统平台的可执行文件）</li>
<li><code>--build</code>：项目包含 <code>.node</code> 文件（如 SQLite3、bcrypt），需通过 <code>--build</code> 参数显式触发重新编译</li>
</ul>
<p>‌2.<strong>完整项目打包</strong>‌<br>处理多文件项目时需指定入口文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe ./src/main.js --build --resource <span class="string">&quot;public/**/*&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>--build</code> 启用编译优化模式</li>
<li><code>--resource</code> 包含静态资源文件（如图片、配置文件）</li>
<li><code>./src/main.js</code>：入口文件</li>
</ul>
<p><img src="/blog2025.github.io/image-20250504114813603.png" alt="image-20250504114813603"></p>
<p><strong>高级配置选项</strong></p>
<ol>
<li><p>‌<strong>跨平台打包</strong>‌<br>通过 <code>--target</code> 参数指定目标平台：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe app.js --target windows-x64,linux-x64,macos-x64</span><br></pre></td></tr></table></figure>

<ul>
<li>支持组合生成多平台可执行文件</li>
</ul>
</li>
<li><p>‌<strong>锁定 Node.js 版本</strong>‌<br>指定项目依赖的 Node.js 运行时版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe app.js --target node18.17.0-win-x64</span><br></pre></td></tr></table></figure>

<ul>
<li>避免因环境差异导致运行异常</li>
</ul>
</li>
</ol>
<p><strong>静态资源处理</strong>‌</p>
<ul>
<li><p>使用<code>__dirname</code>获取运行时绝对路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> configPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;config/settings.json&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>--resource</code>参数声明资源目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexe app.js --resource <span class="string">&quot;assets/**/*.json&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>支持通配符匹配多级目录文件</li>
</ul>
</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h3><p>‌<strong>安装依赖</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install mysql2</span><br></pre></td></tr></table></figure>

<p><strong>创建 MySQL 数据库与表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> testdb;</span><br><span class="line">USE testdb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> users (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入示例数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users (username, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;user1@example.com&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;user2@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>可运行代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2/promise&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库配置</span></span><br><span class="line"><span class="keyword">const</span> dbConfig = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;testdb&#x27;</span>,</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">queueLimit</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(dbConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改查操作封装</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line">  <span class="comment">// 添加用户</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">addUser</span>(<span class="params">username, email</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;INSERT INTO users (username, email) VALUES (?, ?)&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, [username, email]);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">insertId</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询所有用户</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">getAllUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;SELECT * FROM users&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> pool.<span class="title function_">query</span>(sql);</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新用户</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">updateUser</span>(<span class="params">id, newEmail</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;UPDATE users SET email = ? WHERE id = ?&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, [newEmail, id]);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">affectedRows</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除用户</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">deleteUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;DELETE FROM users WHERE id = ?&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, [id]);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">affectedRows</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="keyword">const</span> newUserId = <span class="keyword">await</span> <span class="title class_">UserDAO</span>.<span class="title function_">addUser</span>(<span class="string">&#x27;new_user&#x27;</span>, <span class="string">&#x27;new@example.com&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`添加成功，用户ID: <span class="subst">$&#123;newUserId&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">UserDAO</span>.<span class="title function_">getAllUsers</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前用户列表:&#x27;</span>, users);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="keyword">const</span> updatedRows = <span class="keyword">await</span> <span class="title class_">UserDAO</span>.<span class="title function_">updateUser</span>(newUserId, <span class="string">&#x27;updated@example.com&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`更新影响行数: <span class="subst">$&#123;updatedRows&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">const</span> deletedRows = <span class="keyword">await</span> <span class="title class_">UserDAO</span>.<span class="title function_">deleteUser</span>(newUserId);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除影响行数: <span class="subst">$&#123;deletedRows&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终用户列表</span></span><br><span class="line">    <span class="keyword">const</span> finalUsers = <span class="keyword">await</span> <span class="title class_">UserDAO</span>.<span class="title function_">getAllUsers</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最终用户列表:&#x27;</span>, finalUsers);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;操作失败:&#x27;</span>, error);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭连接池</span></span><br><span class="line">    <span class="keyword">await</span> pool.<span class="title function_">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="示例二：（页面-解耦）"><a href="#示例二：（页面-解耦）" class="headerlink" title="示例二：（页面+解耦）"></a><strong>示例二</strong>：（页面+解耦）</h3><p><strong>项目结构</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">api-server/</span><br><span class="line">├── package.json <span class="comment">#安装express时全局安装自动生成</span></span><br><span class="line">├── db.js       <span class="comment"># 数据库连接</span></span><br><span class="line">├── users.js    <span class="comment"># 路由控制器</span></span><br><span class="line">└── server.js   <span class="comment"># 主入口</span></span><br></pre></td></tr></table></figure>

<p><strong>安装依赖：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express mysql2 cors</span><br><span class="line"><span class="comment">#安装express、mysql、cors(跨域)</span></span><br></pre></td></tr></table></figure>

<p><strong>完整后端代码</strong>：</p>
<p><em><strong>db.js</strong></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// db.js - 数据库连接池</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2/promise&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;testdb&#x27;</span>,</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = pool;</span><br></pre></td></tr></table></figure>

<p><em><strong>users.js</strong></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// users.js - 用户路由控制器</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> pool = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有用户</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> pool.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM users&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">json</span>(rows);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, email &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (!username || !email) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;缺少必要参数&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(</span><br><span class="line">      <span class="string">&#x27;INSERT INTO users (username, email) VALUES (?, ?)&#x27;</span>,</span><br><span class="line">      [username, email]</span><br><span class="line">    );</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">id</span>: result.<span class="property">insertId</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; email &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(</span><br><span class="line">      <span class="string">&#x27;UPDATE users SET email = ? WHERE id = ?&#x27;</span>,</span><br><span class="line">      [email, id]</span><br><span class="line">    );</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">affectedRows</span>: result.<span class="property">affectedRows</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:id&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [result] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(</span><br><span class="line">      <span class="string">&#x27;DELETE FROM users WHERE id = ?&#x27;</span>,</span><br><span class="line">      [id]</span><br><span class="line">    );</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">affectedRows</span>: result.<span class="property">affectedRows</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p><em><strong>server.js</strong></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js - 主服务</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> usersRouter = <span class="built_in">require</span>(<span class="string">&#x27;./users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api/users&#x27;</span>, usersRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3001</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`API 服务运行在 http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3001/api/users/</span><br></pre></td></tr></table></figure>

<p><strong>页面</strong>：</p>
<p><em><strong>index.html</strong></em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user-form</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>, </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;email&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: background <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user-list</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user-item</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f8f9fa</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user-info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.user-actions</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#6c757d</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#dc3545</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 添加用户表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>添加新用户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;addUser()&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;form-error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用户列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;user-list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用户列表将通过JavaScript动态加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 页面加载时获取用户列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = loadUsers;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 加载用户列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadUsers</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3001/api/users&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;获取数据失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> users = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">renderUserList</span>(users);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showError</span>(error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 渲染用户列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">renderUserList</span>(<span class="params">users</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            list.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清空当前列表</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            users.<span class="title function_">forEach</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">className</span> = <span class="string">&#x27;user-item&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">innerHTML</span> = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;div class=&quot;user-info&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;strong&gt;<span class="subst">$&#123;user.username&#125;</span>&lt;/strong&gt; - <span class="subst">$&#123;user.email&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;div class=&quot;user-actions&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;button onclick=&quot;showEditForm(<span class="subst">$&#123;user.id&#125;</span>, &#x27;<span class="subst">$&#123;user.email&#125;</span>&#x27;)&quot;&gt;修改邮箱&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;button onclick=&quot;deleteUser(<span class="subst">$&#123;user.id&#125;</span>)&quot;&gt;删除&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                `</span>;</span></span><br><span class="line"><span class="language-javascript">                list.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加用户</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!username || !email) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showError</span>(<span class="string">&#x27;用户名和邮箱不能为空&#x27;</span>, <span class="string">&#x27;form-error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3001/api/users&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; username, email &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;添加用户失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清空表单并刷新列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showError</span>(error.<span class="property">message</span>, <span class="string">&#x27;form-error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除用户</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteUser</span>(<span class="params">userId</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!<span class="title function_">confirm</span>(<span class="string">&#x27;确定要删除该用户吗？&#x27;</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`http://localhost:3001/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;删除用户失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showError</span>(error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示修改邮箱表单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showEditForm</span>(<span class="params">userId, currentEmail</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> newEmail = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入新的邮箱地址：&#x27;</span>, currentEmail);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (newEmail &amp;&amp; newEmail !== currentEmail) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">updateUserEmail</span>(userId, newEmail);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 更新用户邮箱</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateUserEmail</span>(<span class="params">userId, newEmail</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`http://localhost:3001/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">email</span>: newEmail &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!response.<span class="property">ok</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;更新邮箱失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">loadUsers</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showError</span>(error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 显示错误信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showError</span>(<span class="params">message, elementId = <span class="string">&#x27;form-error&#x27;</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> errorElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementId);</span></span><br><span class="line"><span class="language-javascript">            errorElement.<span class="property">textContent</span> = message;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> errorElement.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span>, <span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用vue cli 的 Vue3 页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;用户管理&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 添加用户表单 --&gt;</span><br><span class="line">    &lt;div class=&quot;add-user-form&quot;&gt;</span><br><span class="line">      &lt;h2&gt;添加新用户&lt;/h2&gt;</span><br><span class="line">      &lt;form @submit.prevent=&quot;createUser&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">          &lt;label&gt;用户名:&lt;/label&gt;</span><br><span class="line">          &lt;input v-model=&quot;newUser.username&quot; type=&quot;text&quot; required /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">          &lt;label&gt;邮箱:&lt;/label&gt;</span><br><span class="line">          &lt;input v-model=&quot;newUser.email&quot; type=&quot;email&quot; required /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;添加用户&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户列表 --&gt;</span><br><span class="line">    &lt;div class=&quot;user-list&quot;&gt;</span><br><span class="line">      &lt;h2&gt;用户列表&lt;/h2&gt;</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;邮箱&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr v-for=&quot;user in users&quot; :key=&quot;user.id&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; user.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; user.username &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">              &lt;span v-if=&quot;!user.editing&quot;&gt;&#123;&#123; user.email &#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;input </span><br><span class="line">                v-else </span><br><span class="line">                v-model=&quot;user.editedEmail&quot; </span><br><span class="line">                type=&quot;email&quot; </span><br><span class="line">                required</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">              &lt;button </span><br><span class="line">                v-if=&quot;!user.editing&quot;</span><br><span class="line">                @click=&quot;startEdit(user)&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                编辑</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">              &lt;div v-else class=&quot;edit-actions&quot;&gt;</span><br><span class="line">                &lt;button @click=&quot;saveEdit(user)&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">                &lt;button @click=&quot;cancelEdit(user)&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;button @click=&quot;deleteUser(user.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">const API_URL = &#x27;http://localhost:3001/api/users&#x27;</span><br><span class="line"></span><br><span class="line">// 用户数据</span><br><span class="line">const users = ref([])</span><br><span class="line">const newUser = ref(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  email: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 初始化获取用户列表</span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">  await fetchUsers()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 获取所有用户</span><br><span class="line">const fetchUsers = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await axios.get(API_URL)</span><br><span class="line">    users.value = response.data.map(user =&gt; (&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      editing: false,</span><br><span class="line">      editedEmail: user.email</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;获取用户列表失败：&#x27; + error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建用户</span><br><span class="line">const createUser = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await axios.post(API_URL, newUser.value)</span><br><span class="line">    await fetchUsers()</span><br><span class="line">    newUser.value = &#123; username: &#x27;&#x27;, email: &#x27;&#x27; &#125;</span><br><span class="line">    alert(&#x27;用户创建成功&#x27;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;创建用户失败：&#x27; + error.response?.data?.error || error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 开始编辑</span><br><span class="line">const startEdit = (user) =&gt; &#123;</span><br><span class="line">  user.editing = true</span><br><span class="line">  user.editedEmail = user.email</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取消编辑</span><br><span class="line">const cancelEdit = (user) =&gt; &#123;</span><br><span class="line">  user.editing = false</span><br><span class="line">  user.editedEmail = user.email</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 保存编辑</span><br><span class="line">const saveEdit = async (user) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await axios.put(`$&#123;API_URL&#125;/$&#123;user.id&#125;`, &#123;</span><br><span class="line">      email: user.editedEmail</span><br><span class="line">    &#125;)</span><br><span class="line">    user.email = user.editedEmail</span><br><span class="line">    user.editing = false</span><br><span class="line">    alert(&#x27;更新成功&#x27;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;更新失败：&#x27; + error.response?.data?.error || error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除用户</span><br><span class="line">const deleteUser = async (id) =&gt; &#123;</span><br><span class="line">  if (!confirm(&#x27;确定要删除这个用户吗？&#x27;)) return</span><br><span class="line">  </span><br><span class="line">  try &#123;</span><br><span class="line">    await axios.delete(`$&#123;API_URL&#125;/$&#123;id&#125;`)</span><br><span class="line">    await fetchUsers()</span><br><span class="line">    alert(&#x27;用户删除成功&#x27;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;删除失败：&#x27; + error.response?.data?.error || error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  max-width: 800px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.add-user-form &#123;</span><br><span class="line">  margin-bottom: 40px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  background: #f5f5f5;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.form-group &#123;</span><br><span class="line">  margin-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.form-group label &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.form-group input &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;</span><br><span class="line">  padding: 8px 15px;</span><br><span class="line">  margin: 0 5px;</span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  background: #007bff;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:hover &#123;</span><br><span class="line">  background: #0056b3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.edit-actions button &#123;</span><br><span class="line">  background: #28a745;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.edit-actions button:last-child &#123;</span><br><span class="line">  background: #dc3545;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.user-list table &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.user-list th,</span><br><span class="line">.user-list td &#123;</span><br><span class="line">  padding: 12px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.user-list th &#123;</span><br><span class="line">  background-color: #f8f9fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.user-list tr:nth-child(even) &#123;</span><br><span class="line">  background-color: #f2f2f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input[type=&quot;email&quot;] &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>解耦合：Vue3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根目录.env.development</span></span><br><span class="line"><span class="variable constant_">VUE_APP_API_BASE_URL</span> = <span class="attr">http</span>:<span class="comment">//localhost:3001/api</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根目录.env.production</span></span><br><span class="line"><span class="variable constant_">VUE_APP_API_BASE_URL</span> = <span class="attr">https</span>:<span class="comment">//your-production-domain.com/api</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//UserView.vue</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_BASE</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_API_BASE_URL</span> || <span class="string">&#x27;/api&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_URL</span> = <span class="string">`<span class="subst">$&#123;API_BASE&#125;</span>/users`</span></span><br><span class="line"><span class="comment">/*取代</span></span><br><span class="line"><span class="comment">const API_URL = &#x27;http://localhost:3001/api/users&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 开发环境代理配置</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        如果 process.env.VUE_APP_API_BASE_URL 存在且为真值（truthy value），则使用该值 </span></span><br><span class="line"><span class="comment">        如果环境变量未定义（undefined）、空字符串（&#x27;&#x27;）、null 或其他假值（falsy），则使用 &#x27;http://localhost:3001&#x27;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">target</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_API_BASE_URL</span> || <span class="string">&#x27;http://localhost:3001&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* pathRewrite: &#123;</span></span><br><span class="line"><span class="comment">          &#x27;^/api&#x27;: &#x27;&#x27; // 移除路径中的 /api 前缀</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体看 <strong>node-mysql-vue3</strong> 的源代码</p>
<hr>
<p>Node.js 支持与多种数据库进行集成，覆盖关系型、非关系型及国产数据库等类型。以下是具体分类及适配场景分析：</p>
<hr>
<h3 id="一、‌-关系型数据库（RDBMS）-‌‌"><a href="#一、‌-关系型数据库（RDBMS）-‌‌" class="headerlink" title="一、‌**关系型数据库（RDBMS）**‌‌"></a>一、‌**关系型数据库（RDBMS）**‌‌</h3><ul>
<li>‌<strong>MySQL</strong>‌<ul>
<li>‌<strong>特点</strong>‌：支持事务（ACID）、复杂查询（JOIN&#x2F;子查询）及成熟生态。</li>
<li>‌<strong>适配场景</strong>‌：用户管理、电商订单系统等需事务一致性的场景。</li>
<li>‌<strong>Node.js 驱动库</strong>‌：<code>mysql2</code>、<code>Sequelize</code>（ORM）。</li>
</ul>
</li>
<li>‌<strong>PostgreSQL</strong>‌<ul>
<li>‌<strong>特点</strong>‌：支持JSON数据类型、高级索引及地理空间数据处理。</li>
<li>‌<strong>适配场景</strong>‌：复杂数据分析、GIS系统等。</li>
<li>‌<strong>库支持</strong>‌：<code>pg</code>、<code>Sequelize</code>。</li>
</ul>
</li>
<li>‌<strong>SQLite</strong>‌<ul>
<li>‌<strong>特点</strong>‌：轻量级、无需独立服务，适合嵌入式场景。</li>
<li>‌<strong>适配场景</strong>‌：本地化应用、小型工具开发。</li>
</ul>
</li>
<li>‌<strong>其他</strong>‌：MariaDB（兼容MySQL）、Oracle、Microsoft SQL Server。</li>
</ul>
<hr>
<h3 id="二、‌-非关系型数据库（NoSQL）-‌"><a href="#二、‌-非关系型数据库（NoSQL）-‌" class="headerlink" title="二、‌**非关系型数据库（NoSQL）**‌"></a>二、‌**非关系型数据库（NoSQL）**‌</h3><p><strong>1‌. 文档数据库</strong>‌</p>
<ul>
<li>‌MongoDB<ul>
<li>‌<strong>特点</strong>‌：灵活JSON结构、水平扩展、高写入性能。</li>
<li>‌<strong>适配场景</strong>‌：实时日志处理、内容管理系统等非结构化数据场景。</li>
<li>‌<strong>库支持</strong>‌：<code>mongoose</code>（ODM）。</li>
</ul>
</li>
</ul>
<p>‌<strong>2. 键值存储</strong>‌</p>
<ul>
<li>‌Redis<ul>
<li>‌<strong>特点</strong>‌：内存存储、支持数据结构（如哈希&#x2F;列表）、高并发缓存。</li>
<li>‌<strong>适配场景</strong>‌：会话管理、热点数据缓存、实时排行榜。</li>
<li>‌<strong>库支持</strong>‌：<code>ioredis</code>、<code>redis</code>。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="三、NoSQL-和-MySQL-区别"><a href="#三、NoSQL-和-MySQL-区别" class="headerlink" title="三、NoSQL 和 MySQL 区别"></a>三、NoSQL 和 MySQL 区别</h3><p>以下是 ‌<strong>NoSQL与MySQL的核心区别</strong>‌及其适用场景的对比分析，基于数据模型、扩展性、事务机制等关键维度：</p>
<hr>
<p><strong>1、‌数据模型与结构</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
<th>‌<strong>NoSQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>存储形式</strong>‌</td>
<td>基于表结构，需预定义模式（Schema）</td>
<td>支持灵活数据格式（文档&#x2F;键值&#x2F;列族&#x2F;图形）</td>
</tr>
<tr>
<td>‌<strong>数据关系</strong>‌</td>
<td>表间通过外键关联，强关系型设计</td>
<td>无固定关系约束，适合非结构化或半结构化数据</td>
</tr>
<tr>
<td>‌<strong>模式变更</strong>‌</td>
<td>修改表结构需执行ALTER操作，成本高</td>
<td>支持动态模式，可运行时增减字段</td>
</tr>
</tbody></table>
<hr>
<p><strong>2、‌扩展性与性能</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
<th>‌<strong>NoSQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>扩展方式</strong>‌</td>
<td>垂直扩展为主（提升单机性能）</td>
<td>水平扩展为主（分布式节点扩容）</td>
</tr>
<tr>
<td>‌<strong>并发处理</strong>‌</td>
<td>多线程处理，适合复杂事务但高并发下易瓶颈</td>
<td>异步I&#x2F;O优化，适合高吞吐量读写（如日志处理）</td>
</tr>
<tr>
<td>‌<strong>大数据支持</strong>‌</td>
<td>需分库分表，管理复杂度高</td>
<td>原生支持海量数据存储（如Cassandra列存储）</td>
</tr>
</tbody></table>
<hr>
<p><strong>3、‌事务与一致性</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
<th>‌<strong>NoSQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>事务机制</strong>‌</td>
<td>支持ACID事务（原子性&#x2F;一致性等）</td>
<td>通常仅支持最终一致性（如MongoDB）</td>
</tr>
<tr>
<td>‌<strong>锁机制</strong>‌</td>
<td>行级锁&#x2F;表级锁保证并发安全</td>
<td>部分数据库无锁设计（如Redis单线程模型）</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>金融交易、ERP等强一致性需求场景</td>
<td>社交网络、实时统计等可用性优先场景</td>
</tr>
</tbody></table>
<hr>
<p><strong>4、‌查询语言与操作</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌<strong>MySQL</strong>‌</th>
<th>‌<strong>NoSQL</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>查询语言</strong>‌</td>
<td>标准SQL，支持复杂JOIN&#x2F;子查询</td>
<td>无统一语言，依赖API或特定语法（如MongoDB的BSON）</td>
</tr>
<tr>
<td>‌<strong>索引支持</strong>‌</td>
<td>支持多级索引（B+树结构）</td>
<td>部分数据库索引功能有限（如Redis仅支持键查询）</td>
</tr>
<tr>
<td>‌<strong>聚合操作</strong>‌</td>
<td>内置聚合函数（如SUM&#x2F;COUNT）</td>
<td>需依赖MapReduce或Pipeline（如MongoDB）</td>
</tr>
</tbody></table>
<hr>
<p><strong>5、‌典型应用场景对比</strong>‌</p>
<table>
<thead>
<tr>
<th>‌<strong>数据库类型</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
<th>‌<strong>典型案例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>MySQL</strong>‌</td>
<td>需事务保障的结构化数据场景</td>
<td>银行系统、订单管理、ERP系统</td>
</tr>
<tr>
<td>‌<strong>NoSQL</strong>‌</td>
<td>高并发读写、灵活数据模型需求</td>
<td>实时日志分析、社交网络推荐、物联网数据存储</td>
</tr>
</tbody></table>
<hr>
<p><strong>6、‌选型建议</strong>‌</p>
<ul>
<li>‌<strong>选择MySQL</strong>‌：需强一致性、复杂事务及固定数据结构的场景，如财务系统或传统企业应用。</li>
<li>‌<strong>选择NoSQL</strong>‌：应对高并发、动态数据结构或海量数据存储，如内容平台、实时监控系统。</li>
<li>‌<strong>混合使用</strong>‌：核心业务用MySQL保障ACID，高频读操作用Redis缓存，非结构化数据存MongoDB。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Data JPA</title>
    <url>/blog2025.github.io/2025/04/02/SpringDataJPA/</url>
    <content><![CDATA[<h3 id="一、Spring-Data-JPA-与-Hibernate-的核心区别"><a href="#一、Spring-Data-JPA-与-Hibernate-的核心区别" class="headerlink" title="一、Spring Data JPA 与 Hibernate 的核心区别"></a>一、Spring Data JPA 与 Hibernate 的核心区别</h3><ol>
<li><p>区别</p>
<ul>
<li><p>‌<strong>Hibernate</strong>‌：</p>
<ul>
<li>是独立的 ‌<strong>ORM 框架</strong>‌，直接实现 JPA 规范，负责将 Java 对象映射到数据库表，并管理 SQL 生成、缓存、事务等底层操作‌。</li>
<li>提供 HQL（面向对象的查询语言）和 Criteria API （动态条件构建）等高级查询工具‌。</li>
<li>需手动编写查询逻辑，灵活性高但开发效率较低‌。</li>
<li>需通过 <code>Transaction</code> 对象显式控制事务边界（如 <code>begin()</code>、<code>commit()</code>）‌。</li>
</ul>
</li>
<li><p>‌<strong>Spring Data JPA</strong>‌：</p>
<ul>
<li>是 ‌<strong>Spring 生态的子模块</strong>‌，基于 JPA 规范构建的 ‌<strong>数据访问层抽象</strong>‌，旨在简化 DAO 层开发‌。</li>
<li>依赖 Hibernate 作为默认的 JPA 实现，但可与其他 JPA 兼容框架（如 EclipseLink）集成‌。</li>
<li>通过 ‌<strong>方法命名规则</strong>‌（如 <code>findByUsernameAndEmail</code>）自动生成查询‌。</li>
<li>支持 <code>@Query</code> 注解自定义 JPQL 或原生 SQL，平衡灵活性与简洁性‌。</li>
<li>与 Spring 事务管理深度集成，支持声明式事务（<code>@Transactional</code> 注解）。</li>
</ul>
<span id="more"></span></li>
</ul>
</li>
<li><p>使用方式</p>
<table>
<thead>
<tr>
<th><strong>对比项</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>Spring Data JPA</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>编程模型</strong>‌</td>
<td>需手动操作 <code>Session</code> 和 <code>Transaction</code> 对象，编写 CRUD 逻辑‌。</td>
<td>通过继承 <code>CrudRepository</code> 或 <code>JpaRepository</code> 接口自动生成基础 CRUD 方法，仅需定义接口‌。</td>
</tr>
<tr>
<td>‌<strong>代码量</strong>‌</td>
<td>需编写较多模板代码（如 <code>save()</code>、<code>update()</code> 方法）‌。</td>
<td>通过方法命名规则或 <code>@Query</code> 注解自动生成 SQL，减少代码量‌。</td>
</tr>
<tr>
<td>‌<strong>依赖管理</strong>‌</td>
<td>独立运行，需单独配置依赖项（如 Hibernate Core）‌。</td>
<td>依赖 Spring 框架，通过 Spring Boot Starter 简化集成‌。</td>
</tr>
</tbody></table>
</li>
<li><p>适用场景</p>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>Hibernate</strong>‌</th>
<th>‌<strong>Spring Data JPA</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>复杂 ORM 需求</strong>‌</td>
<td>适合需要精细控制缓存、懒加载等高级特性的场景‌。</td>
<td>依赖 Hibernate 的底层能力，无额外优化空间‌。</td>
</tr>
<tr>
<td>‌<strong>快速开发</strong>‌</td>
<td>需较多手动编码，效率较低‌。</td>
<td>通过 Repository 接口大幅提升开发速度‌。</td>
</tr>
<tr>
<td>‌<strong>多数据库兼容性</strong>‌</td>
<td>需手动适配不同数据库方言‌。</td>
<td>基于 JPA 规范，天然支持跨数据库兼容‌</td>
</tr>
</tbody></table>
</li>
<li><p>‌<strong>总结</strong>‌</p>
<ul>
<li><strong>定位差异</strong>‌：Hibernate 是 ‌<strong>ORM 实现框架</strong>‌，Spring Data JPA 是 ‌<strong>数据访问层抽象</strong>‌，两者在技术栈中处于不同层次‌。</li>
<li>‌<strong>开发效率</strong>‌：Spring Data JPA 通过 Repository 模式减少模板代码，更适合快速开发；Hibernate 适合需要深度控制 ORM 的场景‌。</li>
<li>‌<strong>生态整合</strong>‌：Spring Data JPA 深度依赖 Spring 生态，而 Hibernate 可作为独立组件灵活集成‌。</li>
</ul>
<p>两者常结合使用：‌<strong>Spring Data JPA 提供高层抽象，Hibernate 作为底层 JPA 实现</strong>‌，兼顾效率与灵活性‌。</p>
</li>
</ol>
<h3 id="二、Spring-Data-JPA"><a href="#二、Spring-Data-JPA" class="headerlink" title="二、Spring Data JPA"></a>二、Spring Data JPA</h3><ol>
<li><p>JPA：用于通过对象关系映射（ORM）将 Java 对象与关系型数据库表进行映射。</p>
</li>
<li><p>Spring Data JPA：简化基于 JPA 的数据访问层开发，减少模板代码。</p>
<p><strong>核心特性</strong>‌：</p>
<ul>
<li><p>自动生成 Repository 实现。</p>
</li>
<li><p>方法名推导查询（如 <code>findByUsername</code>）。</p>
</li>
<li><p>支持分页、排序、动态查询。</p>
</li>
<li><p>与 Spring 生态无缝集成（如事务管理）</p>
</li>
</ul>
<p><strong>优势</strong>：</p>
<ul>
<li><strong>开发效率</strong>‌：减少 70% 以上的模板代码。</li>
<li>‌<strong>灵活性</strong>‌：支持方法名推导、JPQL、原生 SQL 及动态查询。</li>
<li>‌<strong>生态整合</strong>‌：与 Spring 事务、缓存、审计等功能无缝协作。</li>
</ul>
<p><strong>适用场景</strong>：</p>
<ul>
<li>中大型企业应用（如 ERP、CRM）。</li>
<li>需要快速迭代且数据库结构稳定的项目。</li>
</ul>
</li>
</ol>
<h3 id="三、模板"><a href="#三、模板" class="headerlink" title="三、模板"></a>三、模板</h3><ol>
<li><p><strong>项目结构（Maven）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/demo/</span><br><span class="line">│   │       ├── controller/</span><br><span class="line">│   │       │   └── UserController.java</span><br><span class="line">│   │       ├── model/              # 实体类</span><br><span class="line">│   │       │   └── User.java</span><br><span class="line">│   │       ├── repository/         # Repository接口</span><br><span class="line">│   │       │   └── UserRepository.java</span><br><span class="line">│   │       ├── service/            # 服务层</span><br><span class="line">│   │       │   └── UserService.java</span><br><span class="line">│   │       └── DemoApplication.java # Spring Boot启动类</span><br><span class="line">│   └── resources/</span><br><span class="line">│       └── application.yml         # 配置文件</span><br><span class="line">└── test/                           # 测试类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Data JPA --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动（以MySQL为例） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok（可选，简化代码） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test_db?useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update    # 自动创建/更新表结构</span><br><span class="line">    show-sql: true        # 显示生成的SQL</span><br><span class="line">    properties:</span><br><span class="line">      hibernate.format_sql: true  # 格式化SQL</span><br><span class="line">	  hibernate.use_sql_comments: true  # 日志</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实体类（User.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法（JPA要求）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全参构造方法（可选）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Repository接口（UserRepository.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="comment">// 方法名自动生成查询：SELECT * FROM users WHERE username = ?</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义JPQL查询</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT u FROM User u WHERE u.email LIKE %?1%&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByEmailContaining</span><span class="params">(String email)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原生SQL查询</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;SELECT * FROM users WHERE LENGTH(username) &gt; :length&quot;, nativeQuery = true)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLengthGreaterThan</span><span class="params">(<span class="type">int</span> length)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务层示例（UserService.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户（自动开启事务）</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        userRepository.deleteById(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据用户名查询用户</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(Long userId, User userDetails)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查用户是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">existingUser</span> <span class="operator">=</span> userRepository.findById(userId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在，ID: &quot;</span> + userId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 更新可修改字段（避免覆盖敏感字段如ID）</span></span><br><span class="line">        existingUser.setUsername(userDetails.getUsername());</span><br><span class="line">        existingUser.setEmail(userDetails.getEmail());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 保存更新（JPA的save方法会自动检测是否为更新操作）</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(existingUser);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（DemoApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Controller.java（UserController.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">savedUser</span> <span class="operator">=</span> userService.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(savedUser, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAllUsers();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID删除用户</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NO_CONTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户名查询用户（扩展功能）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; <span class="title function_">getUsersByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改功能</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">updateUser</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> User userDetails)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">updatedUser</span> <span class="operator">=</span> userService.updateUser(id, userDetails);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(updatedUser, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/blog2025.github.io/2025/04/01/SpringMVC/</url>
    <content><![CDATA[<h3 id="一、前后端开发历程："><a href="#一、前后端开发历程：" class="headerlink" title="一、前后端开发历程："></a>一、前后端开发历程：</h3><ol>
<li><h4 id="三层架构："><a href="#三层架构：" class="headerlink" title="三层架构："></a>三层架构：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li>‌<strong>职责解耦</strong>‌：表现层、业务层、数据层，通过分层实现职责分离，降低代码耦合度，提升可扩展性‌。</li>
<li>‌<strong>协作效率</strong>‌：开发团队可分工协作，例如后端专注于业务逻辑与数据，前端负责界面交互，减少开发冲突‌。</li>
<li>‌<strong>复用性</strong>‌：业务逻辑层独立于表现层，可复用至不同终端（如 Web、移动端）‌</li>
</ul>
<p>‌<strong>局限性</strong>‌：</p>
<ul>
<li><p>‌<strong>Servlet 耦合</strong>‌：传统三层架构中，Servlet 需处理多个请求逻辑，导致代码臃肿和复用性差‌；</p>
</li>
<li><p>‌<strong>视图与业务未彻底分离</strong>‌：如 JSP 中仍嵌入 Java 代码，难以独立维护‌。</p>
</li>
</ul>
<span id="more"></span>
</li>
<li><h4 id="MVC模式："><a href="#MVC模式：" class="headerlink" title="MVC模式："></a>MVC模式：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li>‌<strong>动态交互需求</strong>‌：随着 Web 应用复杂度提升，需将用户交互（View）、业务逻辑（Model）与流程控制（Controller）分离，MVC 模式通过组件化分工提升开发效率‌。</li>
<li>‌<strong>框架支持</strong>‌：SpringMVC框架标准化了 MVC 实现，简化请求路由、参数绑定等操作，降低开发门槛‌。</li>
<li>‌<strong>视图灵活性</strong>‌：支持多种视图技术（如 JSP、Thymeleaf），便于适配不同展示需求‌。</li>
</ul>
<p>‌<strong>局限性</strong>‌：</p>
<ul>
<li>‌<strong>前后端耦合</strong>‌：传统 MVC 中后端仍需处理视图渲染（如 JSP），导致前端依赖后端环境，难以独立开发‌。</li>
<li>‌<strong>性能瓶颈</strong>‌：动态页面渲染加重服务器负载，影响高并发场景性能‌。</li>
</ul>
</li>
<li><h4 id="前后端分离："><a href="#前后端分离：" class="headerlink" title="前后端分离："></a>前后端分离：</h4><p>‌<strong>发展原因</strong>‌：</p>
<ul>
<li><p>‌<strong>技术专业化</strong>‌：前端技术如Vue复杂度提升，需独立工程化开发，后端专注于 API 与业务逻辑，提升协作效率‌。</p>
</li>
<li><p>‌解耦与性能优化</p>
<ul>
<li>静态资源（HTML&#x2F;CSS&#x2F;JS）由 CDN 或独立服务器托管，减少后端压力‌。</li>
<li>异步请求（AJAX）与单页应用（SPA）提升用户体验，减少整页刷新‌。</li>
</ul>
</li>
<li><p>‌开发流程革新</p>
<ul>
<li><p>前端可本地模拟 API 响应（如 Mock.js+Node.js），不依赖后端环境，加速迭代‌。<a href="https://zhuanlan.zhihu.com/p/44803275">Mock.js+Node.js</a></p>
</li>
<li><p>后端通过 RESTful API 标准化数据交互，支持多终端复用‌。</p>
</li>
</ul>
</li>
</ul>
<p>‌<strong>推动因素</strong>‌：</p>
<ul>
<li>‌<strong>JSP 时代痛点</strong>‌：JSP 混合 Java 与 HTML，维护困难且前后端职责不清‌。</li>
<li>‌<strong>模块化与微服务趋势</strong>‌：前后端分离契合微服务架构，支持独立部署与扩展‌。</li>
</ul>
</li>
</ol>
<h3 id="二、MVC是什么？"><a href="#二、MVC是什么？" class="headerlink" title="二、MVC是什么？"></a>二、MVC是什么？</h3><p>Model-View-Controller，一种软件设计模式。</p>
<ol>
<li><strong>模型（Model）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：管理数据和业务逻辑。</li>
<li>‌<strong>功能</strong><ul>
<li>存储、处理、验证数据（如数据库操作、计算逻辑）。</li>
<li>独立于界面，不关心数据如何展示。</li>
</ul>
</li>
</ul>
</li>
<li><strong>视图（View）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：负责用户界面的展示。</li>
<li><strong>‌功能</strong><ul>
<li>将 Model 中的数据可视化（如网页、App界面）。</li>
<li>不处理业务逻辑，仅接收用户输入并显示结果。</li>
</ul>
</li>
</ul>
</li>
<li><strong>控制器（Controller）</strong>：‌<ul>
<li>‌<strong>职责</strong>‌：协调 Model 和 View，处理用户请求。</li>
<li>‌<strong>功能</strong><ul>
<li>接收用户输入（如点击按钮、提交表单）。</li>
<li>调用 Model 处理数据，根据结果更新 View。</li>
</ul>
</li>
</ul>
</li>
<li><strong>MVC的优势</strong>：<ul>
<li>‌<strong>解耦</strong>‌：各组件职责明确，修改界面不影响业务逻辑。</li>
<li>‌<strong>复用性</strong>‌：同一 Model 可被多个 View 使用（如网页版和移动端共享数据逻辑）。</li>
<li>‌<strong>协作友好</strong>‌：开发者可分工开发不同组件（如前端专注 View，后端专注 Model）。</li>
</ul>
</li>
</ol>
<h3 id="二、Spring-MVC"><a href="#二、Spring-MVC" class="headerlink" title="二、Spring MVC"></a>二、Spring MVC</h3><ol>
<li><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>Spring MVC是Spring用来实现MVC模式的。</p>
</li>
<li><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p><img src="/blog2025.github.io/2025/04/01/SpringMVC/springMVC%E5%A4%84%E7%90%86%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
</li>
<li><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── main/</span><br><span class="line">│   ├── java/                 # 项目Java源码</span><br><span class="line">│   │   └── com.example/      # 包路径（根据项目命名）</span><br><span class="line">│   │       ├── controller/   # 控制器层（处理HTTP请求）</span><br><span class="line">│   │       ├── service/      # 业务逻辑层（接口+实现类）</span><br><span class="line">│   │       ├── dao/          # 数据访问层（或 repository/，如MyBatis Mapper）</span><br><span class="line">│   │       ├── model/        # 数据模型（POJO、DTO、VO等）</span><br><span class="line">│   │       ├── config/       # Spring配置类（替代XML配置）</span><br><span class="line">│   │       └── Application.java  # 启动类（Spring Boot项目特有）</span><br><span class="line">│   │</span><br><span class="line">│   ├── resources/            # 配置文件与静态资源</span><br><span class="line">│   │   ├── static/           # 静态资源（CSS/JS/图片）</span><br><span class="line">│   │   ├── templates/        # 动态HTML模板文件（Thymeleaf等）</span><br><span class="line">│   │   ├── application.properties  # 全局配置文件（数据库、日志等）</span><br><span class="line">│   │   └── mybatis-config.xml       # MyBatis配置文件（如使用）</span><br><span class="line">│   │</span><br><span class="line">│   └── webapp/               # Web应用根目录（传统项目需要）</span><br><span class="line">│       └── WEB-INF/</span><br><span class="line">│           ├── views/        # JSP文件存放目录（传统JSP项目）</span><br><span class="line">│           └── web.xml       # Web部署描述文件（配置DispatcherServlet）</span><br><span class="line">│</span><br><span class="line">├── test/                     # 单元测试代码</span><br><span class="line">│   └── java/com.example/     # 测试类（如Controller测试）</span><br><span class="line"></span><br><span class="line">pom.xml                       # Maven依赖管理文件（或 build.gradle）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="核心组件："><a href="#核心组件：" class="headerlink" title="核心组件："></a>核心组件：</h4><ul>
<li><strong>前端控制器DispatcherServlet</strong>‌：前端控制器，统一处理 HTTP 请求‌；</li>
<li>‌<strong>处理器映射器HandlerMapping</strong>‌：映射请求到对应的 Controller‌（如@RequestMapping）；</li>
<li>‌<strong>处理器适配器HandlerAdapter</strong>‌：执行 Controller 中的处理方法‌；</li>
<li><strong>处理器Handler</strong>：负责调用业务逻辑层并返回结果。</li>
<li>‌<strong>视图解析器ViewResolver</strong>‌：解析视图名称到具体视图（如 JSP、HTML）‌。</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/01/SpringMVC/%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.png"></p>
</li>
<li><h4 id="Model、ModelMap、ModelAndView："><a href="#Model、ModelMap、ModelAndView：" class="headerlink" title="Model、ModelMap、ModelAndView："></a>Model、ModelMap、ModelAndView：</h4><table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>Model</th>
<th>ModelMap</th>
<th>ModelAndView</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>类型</strong>‌</td>
<td>接口（实现类为 <code>ExtendedModelMap</code>）</td>
<td>具体类（继承 <code>LinkedHashMap</code>）</td>
<td>独立类（包含 Model 和 View 属性）</td>
</tr>
<tr>
<td>‌<strong>实例创建</strong>‌</td>
<td>Spring 自动注入</td>
<td>Spring 自动注入</td>
<td>需手动 <code>new</code> 创建</td>
</tr>
<tr>
<td>‌<strong>职责范围</strong>‌</td>
<td>仅传递数据</td>
<td>仅传递数据</td>
<td>传递数据 + 指定视图跳转</td>
</tr>
<tr>
<td>‌<strong>典型方法</strong>‌</td>
<td><code>addAttribute()</code></td>
<td><code>addAttribute()</code></td>
<td><code>addObject()</code> + <code>setViewName()</code></td>
</tr>
</tbody></table>
<p><a href="https://www.cnblogs.com/ethan-37/p/12638427.html">参考1</a></p>
<p><a href="https://blog.csdn.net/ITBigGod/article/details/79685610">参考2</a></p>
</li>
<li><h4 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h4><ul>
<li><strong>@Controller</strong>‌：标注一个类为控制器，用于处理 HTTP 请求‌；</li>
<li>‌**@RestController**‌：相当于<code>@Controller</code> + <code>@ResponseBody</code>，用于返回JSON或者XML数据；</li>
<li><strong>@RestquestMapping(“&#x2F;路径”)</strong>：映射请求路径，用于类或者方法；</li>
<li>**@GetMapping **：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</li>
<li>**@PostMapping **：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</li>
<li><strong>@PutMapping</strong>：整个资源更新，等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</li>
<li><strong>@DeleteMapping</strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</li>
<li><strong>@PatchMapping</strong>：部分资源更新，等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</li>
<li><strong>@RequestParam</strong>：获取请求参数（常见于查询参数）；</li>
<li><strong>@PathVariable</strong>：获取路径中的动态参数；</li>
<li><strong>@RequestBody</strong>：解析请求体中的 JSON 或 XML 数据，并将其绑定到对象；</li>
<li><strong>@RequestHeader</strong>：获取 HTTP 请求头的值；</li>
<li><strong>@CookieValue</strong>：获取 Cookie 值；</li>
<li><strong>@ResponseBody</strong>：将返回结果直接写入 HTTP 响应体（通常用于返回 JSON 或 XML 数据）；</li>
<li><strong>@ModelAttribute</strong>：将方法返回值或请求参数绑定到模型中，在视图渲染时可用；</li>
<li><strong>@Valid</strong>：对方法参数进行校验（需要配合 Java Bean Validation API）；</li>
<li><strong>@SessionAttributes</strong>：将某些模型属性存储到会话中，便于后续访问；</li>
<li><strong>@RequestPart</strong>：处理 <code>multipart/form-data</code> 请求，常用于文件上传；</li>
<li><strong>@ExceptionHandler(异常类型.class)</strong> ：指定要捕获的异常类型；</li>
<li><strong>@ControllerAdvice</strong>：一个全局异常处理器，适用于所有控制器；</li>
<li><strong>@RestControllerAdvice</strong>:<code>@ControllerAdvice</code> 的变体，返回值默认是 JSON 格式；</li>
<li><strong>@ResponseStatus</strong>:异常类上添加该注解，指定 HTTP 状态码和原因。</li>
</ul>
<p><a href="https://developer.aliyun.com/article/1648386">注解详解1</a></p>
<p><a href="https://springdoc.cn/spring-mvc-annotations/">注解详解2</a></p>
</li>
<li><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><ul>
<li><p><strong>@ExceptionHandler(异常类型.class)</strong> ：指定要捕获的异常类型；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;捕获到异常: &quot;</span> + e.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@ControllerAdvice</strong>：一个全局异常处理器，适用于所有控制器；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleGlobalRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全局异常处理器捕获: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实现</strong> <code>HandlerExceptionResolver</code> <strong>接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;error&quot;</span>, ex.getMessage());</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;error&quot;</span>); <span class="comment">// 指向 error.jsp</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用</strong> <code>ResponseStatusExceptionResolver</code>:通过在异常类上添加 <code>@ResponseStatus</code> 注解，指定 HTTP 状态码和原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = &quot;资源未找到&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>基于</strong> <code>@RestControllerAdvice</code>：<code>@ControllerAdvice</code> 的变体，返回值默认是 JSON 格式；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestGlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleRuntimeException</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; response = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        response.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="Rest风格："><a href="#Rest风格：" class="headerlink" title="Rest风格："></a>Rest风格：</h4><ul>
<li><p><strong>@RestquestMapping(“&#x2F;路径”)</strong>：映射请求路径，用于类或者方法；</p>
</li>
<li><p>**@GetMapping **：等价于<code>@RequestMapping(method = RequestMethod.GET)</code>；</p>
</li>
<li><p>**@PostMapping **：等价于<code>@RequestMapping(method = RequestMethod.POST)</code>；</p>
</li>
<li><p><strong>@PutMapping</strong>：整个资源更新，等价于<code>@RequestMapping(method = RequestMethod.PUT)</code>；</p>
</li>
<li><p><strong>@DeleteMapping</strong>：等价于<code>@RequestMapping(method = RequestMethod.DELETE)</code>；</p>
</li>
<li><p><strong>@PatchMapping</strong>：部分资源更新，等价于<code>@RequestMapping(method = RequestMethod.PATCH)</code>；</p>
<table>
<thead>
<tr>
<th><strong>HTTP 方法</strong></th>
<th><strong>操作</strong></th>
<th><strong>示例 URL</strong></th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取资源</td>
<td><code>/users</code> 获取所有用户</td>
</tr>
<tr>
<td>POST</td>
<td>创建资源</td>
<td><code>/users</code> 创建新用户</td>
</tr>
<tr>
<td>PUT</td>
<td>更新资源（全量更新）</td>
<td><code>/users/123</code> 更新用户</td>
</tr>
<tr>
<td>PATCH</td>
<td>更新资源（部分更新）</td>
<td><code>/users/123</code> 更新部分信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
<td><code>/users/123</code> 删除用户</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>状态码</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>成功</td>
<td>请求成功，返回资源数据</td>
</tr>
<tr>
<td>201</td>
<td>已创建</td>
<td>成功创建资源，通常用于 POST</td>
</tr>
<tr>
<td>204</td>
<td>无内容</td>
<td>操作成功，但不返回任何内容（如 DELETE）</td>
</tr>
<tr>
<td>400</td>
<td>客户端错误</td>
<td>请求参数有误</td>
</tr>
<tr>
<td>401</td>
<td>未授权</td>
<td>缺少或无效的认证信息</td>
</tr>
<tr>
<td>403</td>
<td>禁止访问</td>
<td>客户端无权访问资源</td>
</tr>
<tr>
<td>404</td>
<td>资源未找到</td>
<td>请求的资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
<td>服务端处理请求时发生错误</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="拦截器Interceptor："><a href="#拦截器Interceptor：" class="headerlink" title="拦截器Interceptor："></a>拦截器Interceptor：</h4><p>（1）拦截器是一种动态拦截请求并对其进行预处理和后处理的机制，类似于 Servlet 的过滤器（Filter）；拦截器的核心是实现 <code>HandlerInterceptor</code> 接口或继承其实现类 <code>HandlerInterceptorAdapter</code>，并通过配置注册到应用程序中。</p>
<p>（2）用途：</p>
<ul>
<li><strong>日志记录</strong>：记录请求的处理时间或访问记录。</li>
<li><strong>权限校验</strong>：检查用户是否有权限访问某些资源。</li>
<li><strong>参数预处理</strong>：对请求参数进行统一校验或修改。</li>
<li><strong>响应后处理</strong>：在响应数据返回之前进行修改或处理。</li>
<li><strong>全局异常处理</strong>：捕获和处理控制器未捕获的异常。</li>
</ul>
<p>（3）<code>HandlerInterceptor</code> 接口定义了拦截器的三个核心方法：</p>
<ul>
<li><strong>preHandle</strong>：权限校验、日志记录、参数验证或处理、短路机制（按注册顺序执行。）</li>
<li><strong>postHandle</strong>：修改返回数据、日志记录、动态调整视图、扩展功能（按注册顺序的逆序执行。）</li>
<li><strong>afterCompletion</strong>：资源清理、日志记录、性能监控、异常处理或补偿（按注册顺序的逆序执行。）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在处理请求之前调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在处理请求之后，渲染视图之前调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在整个请求完成之后调用</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（4）拦截器的实现：</p>
<p>实现 <code>HandlerInterceptor</code> 接口或继承其默认实现类 <code>HandlerInterceptorAdapter</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle: 请求路径是 &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回 true 表示继续执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）拦截器的注册：</p>
<p>通过实现 <code>WebMvcConfigurer</code> 来完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoggingInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 拦截所有路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/error&quot;</span>); <span class="comment">// 排除路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）拦截器和过滤器的区别：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>拦截器（Interceptor）</th>
<th>过滤器（Filter）</th>
</tr>
</thead>
<tbody><tr>
<td>工作层级</td>
<td>SpringMVC 层</td>
<td>Servlet 容器层</td>
</tr>
<tr>
<td>拦截对象</td>
<td>控制器（Handler）</td>
<td>所有请求（静态资源也可拦截）</td>
</tr>
<tr>
<td>功能扩展</td>
<td>可以访问 Spring 上下文，支持依赖注入</td>
<td>无法直接访问 Spring 上下文</td>
</tr>
<tr>
<td>配置方式</td>
<td>Spring 配置类</td>
<td><code>web.xml</code>或 <code>@WebFilter</code>注解</td>
</tr>
</tbody></table>
</li>
<li><h4 id="开发配置："><a href="#开发配置：" class="headerlink" title="开发配置："></a>开发配置：</h4><p><a href="https://blog.csdn.net/LiuNengJing/article/details/126012143">参考1</a></p>
<p><a href="https://edu.51cto.com/article/note/23475.html">参考2</a></p>
</li>
<li><h4 id="本文参考："><a href="#本文参考：" class="headerlink" title="本文参考："></a>本文参考：</h4><p><a href="https://blog.csdn.net/qq_58168493/article/details/122634493">https://blog.csdn.net/qq_58168493/article/details/122634493</a></p>
<p><a href="https://developer.aliyun.com/article/1648386">https://developer.aliyun.com/article/1648386</a></p>
</li>
</ol>
<h3 id="三、跨域请求处理"><a href="#三、跨域请求处理" class="headerlink" title="三、跨域请求处理"></a>三、跨域请求处理</h3><ol>
<li><p>什么是跨域？</p>
<p><strong>跨域</strong>‌特指前端页面（如浏览器）与后端服务（SpringMVC 应用）因‌<strong>协议、域名或端口不一致</strong>‌触发同源策略限制，导致请求被浏览器拦截的现象：</p>
<ul>
<li>前端运行在 <code>http://localhost:8080</code>，后端接口部署在 <code>http://api.example.com</code>；</li>
<li>前端通过 AJAX 调用后端接口时，浏览器因域名不同拦截请求并报错：<code>CORS policy blocked</code>。</li>
</ul>
<p><strong>表现</strong>：浏览器控制台报错：<code>Access to ... has been blocked by CORS policy</code>，即使服务器返回响应，结果仍被拦截‌</p>
</li>
<li><p>使用<code>@CrossOrigin</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(</span></span><br><span class="line"><span class="meta">    origins = &quot;url&quot;					 // 允许的来源</span></span><br><span class="line"><span class="meta">    allowedHeaders = &quot;*&quot;,          // 允许的请求头</span></span><br><span class="line"><span class="meta">    methods = &#123;RequestMethod.GET, RequestMethod.POST&#125; // 允许的 HTTP 方法</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>WebMvcConfigurer</code>‌实现全局跨域配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)              <span class="comment">// 匹配所有接口路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;url&quot;</span>) <span class="comment">// 允许的来源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)             <span class="comment">// 允许所有 HTTP 方法</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)             <span class="comment">// 允许所有请求头</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);                   <span class="comment">// 预检请求缓存时间（秒）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用过滤器拦截<code>CorsFilter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">    config.addAllowedOrigin(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、异步处理"><a href="#四、异步处理" class="headerlink" title="四、异步处理"></a>四、异步处理</h3><ol>
<li><p>什么是异步处理？</p>
<p>在 ‌<strong>SpringMVC</strong>‌ 中，‌<strong>异步处理</strong>‌ 是一种通过释放请求线程（Tomcat&#x2F;Jetty 等容器的线程）以提升服务器吞吐量的机制。其核心思想是：</p>
<ul>
<li>‌<strong>同步阻塞模型</strong>‌：传统模式下，每个请求占用一个线程直到处理完成，线程资源被阻塞，无法处理新请求。</li>
<li>‌<strong>异步非阻塞模型</strong>‌：将耗时操作（如 I&#x2F;O 等待、外部服务调用）交给后台线程处理，释放容器线程，任务完成后通过回调或事件通知恢复响应。</li>
</ul>
</li>
<li><p>处理方式：</p>
<ul>
<li><p>‌<strong>web.xml</strong>‌：增加<code>&lt;async-supported&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    				......</span><br><span class="line">	<span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span>	<span class="comment">&lt;!-- 默认为false，true开启异步 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>方式一：返回Callable</strong>‌：耗时操作在后台线程执行，完成后返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async/callable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">handleCallable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">        <span class="comment">// 模拟耗时操作（如数据库查询）</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异步处理完成&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌流程<ol>
<li>主线程接收请求并返回 <code>Callable</code>。</li>
<li>Spring 将 <code>Callable</code> 提交到 <code>TaskExecutor</code> 执行。</li>
<li>主线程释放，处理其他请求。</li>
<li>任务完成后，重新分配线程返回结果。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>方式二：返回DeferredResult</strong>：需要跨线程（如消息队列监听、外部事件触发）完成任务的场景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async/deferred&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title function_">handleDeferred</span><span class="params">()</span> &#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> <span class="title class_">DeferredResult</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 模拟外部线程处理（如 MQ 消费者）</span></span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            deferredResult.setResult(<span class="string">&quot;异步处理完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            deferredResult.setErrorResult(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌流程<ol>
<li>主线程创建 <code>DeferredResult</code> 对象并返回。</li>
<li>主线程释放，处理其他请求。</li>
<li>外部线程（如消息监听器）调用 <code>setResult()</code> 设置结果。</li>
<li>Spring 恢复响应，返回结果给客户端。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>异步处理的优势：</p>
<ul>
<li>‌<strong>提升吞吐量</strong>‌：释放容器线程，避免线程池耗尽。</li>
<li>‌<strong>优化资源利用率</strong>‌：适合处理 I&#x2F;O 密集型任务（如网络请求、文件读写）。</li>
<li>‌<strong>支持长任务处理</strong>‌：如实时数据推送、长时间计算任务。</li>
</ul>
</li>
<li><p>适用场景：</p>
<ul>
<li>‌<strong>高并发请求</strong>‌：如电商秒杀场景，避免线程阻塞导致请求堆积。</li>
<li>‌<strong>外部服务调用</strong>‌：如调用第三方 API 或微服务，等待响应期间释放资源。</li>
<li>‌<strong>实时数据推送</strong>‌：如股票行情、聊天室消息的实时更新。</li>
</ul>
</li>
</ol>
<h3 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/blog2025.github.io/2025/04/06/SpringSecurity/</url>
    <content><![CDATA[<h3 id="一、Spring-Security概览"><a href="#一、Spring-Security概览" class="headerlink" title="一、Spring Security概览"></a>一、Spring Security概览</h3><ul>
<li><p><a href="https://springdoc.cn/spring-security/">Spring Security中文文档</a></p>
</li>
<li><p><a href="https://springdoc.cn/spring-boot-spring-security-jwt-mysql/">Spring Security + JWT + MySQL 实现基于 Token 的身份认证</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_46073538/article/details/128641746">教程</a></p>
</li>
<li><p>兼容性：</p>
<ul>
<li><strong>Spring Boot 3</strong>—<strong>Spring Security 6.2.x</strong> </li>
<li><strong>Spring Boot 2</strong>—<strong>Spring Security 5.8.x</strong></li>
</ul>
</li>
<li><p><strong>Spring Security</strong> 是一个提供身份<font color="red"><em><strong>认证、授权</strong></em></font>和防护常见攻击的框架。</p>
<ul>
<li><p><strong>身份认证（Authentication）</strong>：</p>
<ul>
<li><em><strong>验证用户身份（如用户名&#x2F;密码、短信验证等），解决“你是谁”的问题‌；</strong></em></li>
<li><em>通过<code>UserDetailsService</code>接口实现自定义用户数据源查询‌</em>；</li>
<li>支持表单登录、OAuth2、LDAP等多种认证方式，默认提供<strong>基础表单登录页‌</strong>；</li>
<li>密码加密存储需使用<code>PasswordEncoder</code>接口实现类（如BCrypt算法）‌；</li>
</ul>
</li>
<li><p><strong>权限控制（Authorization）</strong></p>
<ul>
<li><em><strong>根据用户权限控制资源访问（如角色分配、URL权限控制），解决“你能做什么”的问题‌</strong></em></li>
<li>基于角色（Role）或权限（Permission）的访问控制‌；</li>
<li>URL级别‌：通过配置<code>HttpSecurity</code>限制访问路径‌；</li>
<li>方法级别‌：使用<code>@PreAuthorize</code>、<code>@Secured</code>等注解实现细粒度控制‌</li>
<li>常用注解：<code>@PreAuthorize</code>、<code>@Secured</code>、<code>@PostAuthorize</code>‘</li>
</ul>
</li>
<li><p><strong>安全防护机制</strong></p>
<ul>
<li><p>‌CSRF防护：默认启用，需配合模板引擎或手动配置令牌‌；</p>
</li>
<li><p>会话管理‌：防止会话固定攻击，支持并发会话控制‌；</p>
</li>
<li><p>HTTP安全头：自动配置X-Content-Type-Options等头部增强防护‌；</p>
<span id="more"></span></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Spring Security</strong>集成与扩展</p>
<ul>
<li><strong>与Spring Boot整合</strong><ul>
<li>通过<code>spring-boot-starter-security</code>快速启用默认安全配置‌</li>
<li>自定义安全配置需继承<code>WebSecurityConfigurerAdapter</code>类‌</li>
</ul>
</li>
<li><strong>第三方认证支持</strong><ul>
<li><strong>OAuth2</strong>‌：实现单点登录（SSO）和第三方授权（如微信、GitHub）‌</li>
<li>‌<strong>JWT</strong>‌：结合Token实现无状态REST API认证‌<ul>
<li><strong>Token&#x2F;JWT令牌</strong>：用于通信双方之间传递安全信息的简洁的、URL安全的字符串，由三部分组成，头部、载荷与签名</li>
</ul>
</li>
</ul>
</li>
<li><strong>数据库集成</strong><ul>
<li>通过MyBatis&#x2F;JPA实现用户角色数据持久化‌</li>
<li>需设计用户表、角色表及关联表，配合<code>UserDetailsService</code>加载权限‌</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Spring Security流程</strong>：</p>
</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/06/SpringSecurity/2.png"></p>
<h3 id="二、Spring-Security身份认证"><a href="#二、Spring-Security身份认证" class="headerlink" title="二、Spring Security身份认证"></a>二、Spring Security身份认证</h3><ol>
<li><p><strong>流程</strong>：</p>
<p><img src="/blog2025.github.io/2025/04/06/SpringSecurity/4.png"></p>
<p>Spring Security 的认证流程由过滤器链驱动，<strong>核心步骤</strong>如下：</p>
<ul>
<li>用户提交登录请求，触发 <code>UsernamePasswordAuthenticationFilter</code> 拦截请求‌</li>
<li>通过 <code>AuthenticationManager</code> 委托 <code>AuthenticationProvider</code> 进行认证（如 <code>DaoAuthenticationProvider</code>）‌</li>
<li><code>UserDetailsService</code> 加载用户信息（用户名、密码、权限）并与输入信息比对‌</li>
<li>认证成功后生成 <code>Authentication</code> 对象，存入安全上下文（<code>SecurityContextHolder</code>）‌</li>
</ul>
<p><strong>核心组件</strong>：</p>
<ul>
<li>‌**<code>UsernamePasswordAuthenticationFilter</code>**‌：处理表单登录请求，默认拦截 <code>/login</code> POST 请求‌</li>
<li>‌**<code>UserDetailsService</code>**‌：定义用户数据加载接口，<strong>需开发者自行实现</strong>（如从数据库读取）‌</li>
<li>‌**<code>PasswordEncoder</code>**‌：密码加密策略（推荐使用 <code>BCryptPasswordEncoder</code>）‌</li>
</ul>
<p><strong>代码：</strong></p>
<ul>
<li><p><strong>内存用户认证（快速配置）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(encodedPwd)</span><br><span class="line">            .roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>通过内存存储用户信息</em></p>
</li>
<li><p><strong>数据库用户认证（自定义<code>UserDetailsService</code>）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.core.userdetails.User(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                AuthorityUtils.createAuthorityList(user.getRoles())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">            .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>实现<code>UserDetailsService</code>接口，从数据库加载用户信息‌</em></p>
</li>
<li><p><strong>JWT Token 认证（前后端分离）</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JWT 过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                                    HttpServletResponse response, </span></span><br><span class="line"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> extractToken(request);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; validateToken(token)) &#123;</span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> buildAuthentication(token);</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(auth);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> header.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法：validateToken、buildAuthentication 需实现具体逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>配置过滤器链</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>结合 JWT 实现无状态认证，适用于前后端分离架构‌</em></p>
</li>
<li><p><code>Authentication</code>接口：它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p>
<ul>
<li><code>SeucirtyContext</code>：上下文对象，用来获取<code>Authentication</code></li>
<li><code>SecurityContextHolder</code>：上下文管理对象，用来在程序任何地方获取<code>SecurityContext</code></li>
<li><code>Principal</code>：用户信息，没有认证时一般是用户名，认证后一般是用户对象</li>
<li><code>Credentials</code>：用户凭证，一般是密码</li>
<li><code>Authorities</code>：用户权限</li>
</ul>
</li>
<li><p><code>AuthenticationManager</code>接口：定义了认证<code>Authentication</code>的方法。</p>
<ul>
<li>逻辑：根据用户名先查询出用户对象(没有查到则抛出异常)将用户对象的密码和传递过来的密码进行校验，密码不匹配则抛出异常。</li>
<li><code>authenticate()</code>：执行身份验证</li>
</ul>
</li>
<li><p><code>UserDetailsService</code>接口：加载用户特定数据的核心接口，内含一个根据用户名查询用户信息的方法。</p>
<ul>
<li><code>loadUserByUsername(String username)</code>：唯一方法，目的通过用户名查询用户对象。</li>
</ul>
</li>
<li><p><code>UserDetails</code>接口：提供核心用户信息（账号、密码）。</p>
<ul>
<li>开发中继承<code>org.springframework.security.core.userdetails.User</code>类满足更多的用户属性。</li>
</ul>
<p>通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p>
<p><strong><code>UserDetailsService—&gt;UserDetails对象—&gt;Authentication对象</code></strong></p>
</li>
<li><p><code>加密器PasswordEncoder</code>：MD5</p>
</li>
</ul>
</li>
<li><p><strong>获取当前登录用户信息</strong>：</p>
<p>通过 <strong><code>SecurityContext</code></strong> 来获取**<code>Authentication</code>**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、Spring-Security权限控制"><a href="#三、Spring-Security权限控制" class="headerlink" title="三、Spring Security权限控制"></a>三、<strong>Spring Security权限控制</strong></h3><h4 id="权限控制核心类型："><a href="#权限控制核心类型：" class="headerlink" title="权限控制核心类型："></a><strong>权限控制核心类型</strong>：</h4><ol>
<li><p><strong>基于角色的访问控制（RBAC）</strong></p>
<p>通过用户角色（如 <code>ADMIN</code>、<code>USER</code>）定义资源访问权限，典型配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)   <span class="comment">// 仅允许ADMIN角色访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>) <span class="comment">// 允许ADMIN或USER角色</span></span><br><span class="line">        .anyRequest().authenticated();               <span class="comment">// 其他请求需认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>说明：角色需以 <code>ROLE_</code> 为前缀存储（如 <code>ROLE_ADMIN</code>），否则需在配置中显式声明前缀</em>‌</p>
</li>
<li><p><strong>基于资源标识符的权限控制</strong></p>
<p>通过权限标识符（如 <code>user:read</code>、<code>product:delete</code>）实现细粒度控制，需结合 <code>UserDetails</code> 实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="comment">// 用户权限集合（存储权限标识符）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;user:read&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类中定义权限规则</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/api/user/**&quot;</span>).hasAuthority(<span class="string">&quot;user:read&quot;</span>)‌:ml-citation&#123;ref=<span class="string">&quot;1,6&quot;</span> data=<span class="string">&quot;citationList&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="权限控制实现方式："><a href="#权限控制实现方式：" class="headerlink" title="权限控制实现方式："></a><strong>权限控制实现方式</strong>：</h4><ol>
<li><p><strong>URL 级权限控制</strong></p>
<p>使用 <code>HttpSecurity</code> 配置 URL 匹配规则，支持多种表达式：</p>
<ul>
<li>‌<strong>IP 限制</strong>‌：<code>.antMatchers(&quot;/**&quot;).hasIpAddress(&quot;192.168.1.0/24&quot;)</code>‌</li>
<li>‌<strong>混合条件</strong>‌：<code>.access(&quot;hasRole(&#39;ADMIN&#39;) and hasIpAddress(&#39;192.168.1.10&#39;)&quot;)</code>‌</li>
<li>‌<strong>动态表达式</strong>‌：结合自定义逻辑实现动态权限判断‌</li>
</ul>
</li>
<li><p><strong>方法级权限控制</strong></p>
<p>通过注解实现精确到方法级别的控制（<strong>需启用 <code>@EnableMethodSecurity</code></strong>）</p>
<ul>
<li><p>‌**<code>@PreAuthorize</code>**‌：方法执行前校验权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user:delete&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">		<span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//支持 SpEL 表达式实现复杂逻辑（需启用 @EnableMethodSecurity(prePostEnabled = true)）</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) or #userId == authentication.principal.id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long userId)</span> &#123; </span><br><span class="line">    <span class="comment">/* ... */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>@PostAuthorize</code>**‌：方法执行后校验返回值权限</p>
</li>
<li><p>**<code>@Secured</code>**‌：简化角色校验（需启用 <code>securedEnabled = true</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Secured(&quot;ROLE_ADMIN&quot;)</span> <span class="comment">// 要求用户拥有ROLE_ADMIN角色</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌<strong>动态权限控制</strong></p>
<p>结合数据库动态加载权限规则，典型实现步骤：</p>
<ul>
<li>实现 <code>FilterInvocationSecurityMetadataSource</code> 接口加载权限-资源映射；</li>
<li>自定义投票器（<code>AccessDecisionVoter</code>）实现动态权限决策‌。</li>
</ul>
</li>
</ol>
<h4 id="异常统一处理"><a href="#异常统一处理" class="headerlink" title="异常统一处理"></a><strong>异常统一处理</strong></h4><p>自定义 <code>AccessDeniedHandler</code> 处理权限不足场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, </span></span><br><span class="line"><span class="params">                       AccessDeniedException ex)</span> &#123;</span><br><span class="line">        response.sendError(<span class="number">403</span>, <span class="string">&quot;无权访问&quot;</span>); <span class="comment">// 返回JSON或跳转错误页</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类中注入</span></span><br><span class="line">http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>

<h3 id="四、Spring-Security安全防护机制"><a href="#四、Spring-Security安全防护机制" class="headerlink" title="四、Spring Security安全防护机制"></a>四、Spring Security安全防护机制</h3><h4 id="核心防护机制"><a href="#核心防护机制" class="headerlink" title="核心防护机制:"></a>核心防护机制:</h4><ol>
<li><p><strong>CSRF（跨站请求伪造）防护</strong></p>
<p>Spring Security 默认启用 CSRF 防护，防止恶意网站利用用户已登录状态发起非法请求‌</p>
<ul>
<li><p><strong>实现原理</strong>‌：为表单请求生成唯一 <code>_csrf</code> 令牌，服务端验证请求是否携带有效令牌‌</p>
</li>
<li><p>‌<strong>配置示例</strong>‌（禁用场景）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.csrf(csrf -&gt; csrf.disable()); <span class="comment">// REST API 等无状态场景可关闭</span></span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>会话管理</strong></p>
<p>提供会话固定攻击防护（<code>sessionFixation().migrateSession()</code>）及并发会话控制‌。</p>
<ul>
<li>‌<strong>基于 Token 的无状态会话</strong>‌：适用于前后端分离架构，如 JWT 方案‌。</li>
<li>‌<strong>会话超时与失效</strong>‌：支持自定义会话失效时间与失效跳转路径‌。</li>
</ul>
</li>
<li><p><strong>密码加密机制</strong></p>
<p>强制使用安全算法（如 <code>BCryptPasswordEncoder</code>）加密用户密码，避免明文存储‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>CORS（跨域资源共享）处理</strong></p>
<p>通过 <code>CorsConfigurationSource</code> 配置允许跨域的域名、请求方法及头部信息‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">    config.addAllowedOrigin(<span class="string">&quot;https://example.com&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="五、模板"><a href="#五、模板" class="headerlink" title="五、模板"></a>五、模板</h3><ol>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot基础 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Spring Security --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- JWT支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 工具类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用户实体与Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>	<span class="comment">// 生成无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String roles; <span class="comment">// 示例：ADMIN,USER</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .subject(userDetails.getUsername())</span><br><span class="line">                .issuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .expiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">extractUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secret)</span><br><span class="line">                .build()</span><br><span class="line">                .parseSignedClaims(token)</span><br><span class="line">                .getPayload()</span><br><span class="line">                .getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(secret).build().parse(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring Security配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(</span></span><br><span class="line"><span class="params">            HttpSecurity http,</span></span><br><span class="line"><span class="params">            JwtAuthenticationFilter jwtAuthFilter,</span></span><br><span class="line"><span class="params">            AuthenticationProvider authenticationProvider)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        http</span><br><span class="line">            .csrf(csrf -&gt; csrf.disable()) <span class="comment">// 根据需求开启/关闭</span></span><br><span class="line">            .cors(Customizer.withDefaults())</span><br><span class="line">            .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/auth/**&quot;</span>, <span class="string">&quot;/error&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .sessionManagement(session -&gt; session</span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">            )</span><br><span class="line">            .authenticationProvider(authenticationProvider)</span><br><span class="line">            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">(</span></span><br><span class="line"><span class="params">            UserDetailsService userDetailsService,</span></span><br><span class="line"><span class="params">            PasswordEncoder passwordEncoder)</span> &#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        provider.setUserDetailsService(userDetailsService);</span><br><span class="line">        provider.setPasswordEncoder(passwordEncoder);</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JWT认证过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> parseToken(request);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; jwtUtils.validateToken(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtils.extractUsername(token);</span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">            <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">            context.setAuthentication(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                    userDetails, <span class="literal">null</span>, userDetails.getAuthorities()));</span><br><span class="line">            SecurityContextHolder.setContext(context);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseToken</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> header.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; login(<span class="meta">@RequestBody</span> AuthRequest request) &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationManager.authenticate(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                        request.username(),</span><br><span class="line">                        request.password()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> (UserDetails) authentication.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtils.generateToken(userDetails);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> <span class="title class_">AuthResponse</span>(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; register(<span class="meta">@RequestBody</span> AuthRequest request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userRepository.existsByUsername(request.username())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Username already exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(request.username());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(request.password()));</span><br><span class="line">        user.setRoles(<span class="string">&quot;USER&quot;</span>); <span class="comment">// 默认角色</span></span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;User registered successfully&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">AuthRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">AuthResponse</span><span class="params">(String token)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键配置项（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">mySecretKey123!@#</span>  <span class="comment"># 生产环境必须使用复杂密钥</span></span><br><span class="line">  <span class="attr">expiration:</span> <span class="number">86400000</span>       <span class="comment"># 24小时</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>调试</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户注册</span></span><br><span class="line">POST http<span class="punctuation">:</span><span class="comment">//localhost:8080/auth/register</span></span><br><span class="line"><span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;user1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;password123&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录</span></span><br><span class="line">POST http<span class="punctuation">:</span><span class="comment">//localhost:8080/auth/login </span></span><br><span class="line"><span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">&#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;user1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;password123&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line"><span class="comment">// 返回示例：&#123;&quot;token&quot;:&quot;xxx.yyy.zzz&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问受保护资源</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost:8080/api/protected </span></span><br><span class="line"><span class="string">&quot;Authorization: Bearer xxx.yyy.zzz&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>增强安全防护</strong></p>
<ul>
<li>开启CSRF防护（非前后端分离场景）</li>
<li>配置HTTPS强制跳转</li>
<li>添加请求速率限制</li>
</ul>
</li>
<li><p><strong>权限控制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) or #username == authentication.name&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>审计日志</strong></p>
<p>实现 <code>ApplicationListener&lt;AuthenticationSuccessEvent&gt;</code> 记录登录成功&#x2F;失败日志</p>
</li>
</ol>
<p>该模板整合了以下核心功能：<br>✅ 基于JWT的无状态认证<br>✅ RBAC权限控制<br>✅ 密码加密存储（BCrypt）<br>✅ CORS&#x2F;CSRF安全配置<br>✅ 统一异常处理<br>✅ 方法级权限注解<br>✅ 可扩展的用户体系</p>
<p>可直接作为项目基础脚手架，根据业务需求进行二次开发。建议结合具体场景调整安全配置策略</p>
<h3 id="六、Shiro和Spring-Security"><a href="#六、Shiro和Spring-Security" class="headerlink" title="六、Shiro和Spring Security"></a>六、Shiro和Spring Security</h3><p><a href="https://cloud.tencent.com/developer/article/1819901">Shiro和Spring Security选择</a></p>
<p><a href="https://developer.aliyun.com/article/1436929">Shiro和Spring Security选择</a></p>
<table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>Spring Security</strong>‌</th>
<th>‌<strong>Shiro</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位</strong>‌</td>
<td>Spring 官方推荐的安全框架，深度集成 Spring 生态</td>
<td>轻量级通用安全框架，支持多种应用场景</td>
</tr>
<tr>
<td>‌<strong>功能复杂度</strong>‌</td>
<td>功能强大，支持 OAuth2、LDAP、方法级权限控制等</td>
<td>功能简洁，核心聚焦认证与基础授权</td>
</tr>
<tr>
<td>‌<strong>配置复杂度</strong>‌</td>
<td>配置复杂，需理解过滤器链、安全上下文等概念</td>
<td>配置简单，API 设计直观</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>企业级应用、微服务架构、需复杂权限控制场景</td>
<td>小型项目、快速开发场景</td>
</tr>
<tr>
<td>‌<strong>Spring Boot 集成</strong>‌</td>
<td>原生支持，通过 Starter 快速集成</td>
<td>需手动配置，或使用第三方 Starter（简化有限）</td>
</tr>
</tbody></table>
<h3 id="七、Spring-Boot-3-Spring-Security-6-x-MyBatis-Vue实现登录验证"><a href="#七、Spring-Boot-3-Spring-Security-6-x-MyBatis-Vue实现登录验证" class="headerlink" title="七、Spring Boot 3+ Spring Security 6.x + MyBatis + Vue实现登录验证"></a>七、Spring Boot 3+ Spring Security 6.x + MyBatis + Vue实现登录验证</h3><h4 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h4><ol>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/auth_demo?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo.entity</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安全配置类（SecurityConfig.java)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .cors(Customizer.withDefaults())</span><br><span class="line">            .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">            .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                .requestMatchers(<span class="string">&quot;/api/auth/login&quot;</span>, <span class="string">&quot;/api/auth/register&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">            )</span><br><span class="line">            .formLogin(form -&gt; form</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/api/auth/login&quot;</span>)</span><br><span class="line">                .successHandler(loginSuccessHandler())</span><br><span class="line">                .failureHandler(loginFailureHandler())</span><br><span class="line">            )</span><br><span class="line">            .logout(logout -&gt; logout</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/api/auth/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler())</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationSuccessHandler <span class="title function_">loginSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, authentication) -&gt; &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:200, \&quot;message\&quot;:\&quot;登录成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationFailureHandler <span class="title function_">loginFailureHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, exception) -&gt; &#123;</span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:401, \&quot;message\&quot;:\&quot;认证失败\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LogoutSuccessHandler <span class="title function_">logoutSuccessHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, authentication) -&gt; &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&#123;\&quot;code\&quot;:200, \&quot;message\&quot;:\&quot;退出成功\&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsConfigurationSource <span class="title function_">corsConfigurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.setAllowedOrigins(List.of(<span class="string">&quot;http://localhost:8080&quot;</span>));</span><br><span class="line">        config.setAllowedMethods(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        config.setAllowedHeaders(List.of(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户认证服务（实现UserDetailsService接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findByUsername(username)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .username(user.getUsername())</span><br><span class="line">                .password(user.getPassword())</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户实体类（User.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO users(username, password) VALUES(#&#123;username&#125;, #&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证控制器（AuthController.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; register(<span class="meta">@RequestBody</span> UserRegisterRequest request) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userMapper.findByUsername(request.username()).isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(request.username());</span><br><span class="line">        user.setPassword(passwordEncoder.encode(request.password()));</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">UserRegisterRequest</span><span class="params">(String username, String password)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><ol>
<li>登录组件（Login.vue）</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;handleLogin&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleRegister&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [&#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        password: [&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          const formData = new URLSearchParams();</span><br><span class="line">          formData.append(&#x27;username&#x27;, this.form.username);</span><br><span class="line">          formData.append(&#x27;password&#x27;, this.form.password);</span><br><span class="line"></span><br><span class="line">          axios.post(&#x27;http://localhost:8080/api/auth/login&#x27;, formData, &#123;</span><br><span class="line">            headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27; &#125;</span><br><span class="line">          &#125;).then(response =&gt; &#123;</span><br><span class="line">            this.$router.push(&#x27;/dashboard&#x27;);</span><br><span class="line">          &#125;).catch(error =&gt; &#123;</span><br><span class="line">            this.$message.error(error.response.data.message);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    handleRegister() &#123;</span><br><span class="line">      this.$router.push(&#x27;/register&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h4><ol>
<li><pre><code class="language-mysql">CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL
);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 测试：</span><br><span class="line"></span><br><span class="line">1. 测试账号：admin/123456</span><br><span class="line"></span><br><span class="line">### 八、Spring Security执行流程（概览）</span><br><span class="line"></span><br><span class="line">Spring Security 与 JWT 的整合执行流程主要分为**认证（Authentication）**和**鉴权（Authorization）**两个阶段，以下是详细流程说明：</span><br><span class="line"></span><br><span class="line">#### **1. 用户登录认证（Authentication）**</span><br><span class="line"></span><br><span class="line">1. **提交登录请求**</span><br><span class="line">   客户端发送包含用户名和密码的 HTTP 请求（如 `POST /login`）。</span><br><span class="line">2. **UsernamePasswordAuthenticationFilter 拦截请求**</span><br><span class="line">   Spring Security 的过滤器链中的 `UsernamePasswordAuthenticationFilter` 会拦截登录请求，提取请求中的用户名和密码，封装为 `UsernamePasswordAuthenticationToken` 对象。</span><br><span class="line">3. **AuthenticationManager 处理认证**</span><br><span class="line">   - `AuthenticationManager` 调用 `AuthenticationProvider`（如 `DaoAuthenticationProvider`）进行认证。</span><br><span class="line">   - `UserDetailsService` 根据用户名从数据库（或其他存储）加载用户信息，返回 `UserDetails` 对象。</span><br><span class="line">   - 验证密码是否正确，若成功则生成认证成功的 `Authentication` 对象。</span><br><span class="line">4. **生成 JWT**</span><br><span class="line">   - 认证成功后，使用工具类（如 `JwtUtils`）生成 JWT。</span><br><span class="line">   - JWT 的 Payload 通常包含用户标识（如用户名）、权限信息（roles）、过期时间等。</span><br><span class="line">   - 将 JWT 返回给客户端（通常通过响应头 `Authorization: Bearer &lt;token&gt;` 或响应体）。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **2. 携带 JWT 访问资源（Authorization）**</span><br><span class="line"></span><br><span class="line">1. **客户端携带 JWT**</span><br><span class="line">   后续请求中，客户端在请求头中携带 JWT（如 `Authorization: Bearer &lt;token&gt;`）。</span><br><span class="line">2. **JWT 过滤器拦截请求**</span><br><span class="line">   - 自定义一个 JWT 过滤器（如 `JwtAuthenticationFilter`），并添加到 Spring Security 过滤器链中（通常位于 `UsernamePasswordAuthenticationFilter` 之前）。</span><br><span class="line">   - 该过滤器检查请求头中的 JWT，若存在则进行验证。</span><br><span class="line">3. **验证并解析 JWT**</span><br><span class="line">   - 校验 JWT 的签名是否有效（防止篡改）。</span><br><span class="line">   - 检查 Token 是否过期。</span><br><span class="line">   - 解析 Payload 中的用户信息（如用户名、权限）。</span><br><span class="line">4. **构建 SecurityContext**</span><br><span class="line">   - 根据解析出的用户信息创建 `Authentication` 对象（如 `UsernamePasswordAuthenticationToken`）。</span><br><span class="line">   - 将 `Authentication` 对象存入 `SecurityContextHolder`，标记用户已认证。</span><br><span class="line">5. **鉴权（Authorization）**</span><br><span class="line">   - 后续过滤器（如 `FilterSecurityInterceptor`）根据 `SecurityContext` 中的权限信息，判断用户是否有权访问目标资源。</span><br><span class="line">   - 若有权限，请求继续；若无权限，抛出 `AccessDeniedException`。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **关键组件与配置**</span><br><span class="line"></span><br><span class="line">- **JWT 工具类（JwtUtils）**</span><br><span class="line">  负责生成、解析、验证 JWT，通常需要密钥（Secret）和签名算法（如 HMAC-SHA256）。</span><br><span class="line"></span><br><span class="line">- **自定义 JWT 过滤器**</span><br><span class="line">  继承 `OncePerRequestFilter`，在 `doFilterInternal` 方法中处理 JWT。</span><br><span class="line"></span><br><span class="line">- **Spring Security 配置**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  @Configuration
  @EnableWebSecurity
  public class SecurityConfig &#123;
   @Bean
   public SecurityFilterChain filterChain(HttpSecurity http) throws Exception &#123;
       http
           .csrf().disable()
           .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 禁用 Session
           .and()
           .authorizeRequests()
           .antMatchers(&quot;/login&quot;).permitAll()
           .anyRequest().authenticated()
           .and()
           .addFilterBefore(new JwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
       return http.build();
   &#125;
  &#125;
</code></pre>
</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **流程图解**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端<br>  │  1. 登录请求（用户名+密码）<br>  ▼<br>服务端<br>  │  2. UsernamePasswordAuthenticationFilter 处理登录<br>  │  3. AuthenticationManager 认证<br>  │  4. 生成 JWT 返回<br>  ▼<br>客户端携带 JWT 访问资源<br>  │  5. JWT 过滤器拦截并验证 Token<br>  │  6. 解析用户信息并设置 SecurityContext<br>  ▼<br>服务端鉴权<br>  │  7. 根据权限放行或拒绝<br>  ▼<br>受保护资源</p>
<pre><code>
------

#### **注意事项**

- **无状态设计**：使用 `SessionCreationPolicy.STATELESS` 禁用 Session，完全依赖 JWT。
- **安全性**：JWT 应通过 HTTPS 传输，密钥需妥善保管。
- **Token 刷新**：可通过 Refresh Token 机制延长用户会话。
- **黑名单**：如需实现即时注销，需结合 Redis 维护 Token 黑名单。

通过上述流程，Spring Security 与 JWT 实现了无状态、可扩展的认证鉴权机制。
</code></pre>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Cloud</title>
    <url>/blog2025.github.io/2025/04/08/SpringCloud/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/cuiqwei/article/details/118329609">参考一-写的好</a></p>
<p><a href="https://c.biancheng.net/springcloud/micro-service.html">参考二-写的最好</a></p>
<p><a href="https://www.cainiaoya.com/spring/spring-cloud-jiaocheng.html">参考三</a></p>
<h3 id="一、微服务"><a href="#一、微服务" class="headerlink" title="一、微服务"></a>一、微服务</h3><ol>
<li>定义：微服务架构是一种应用程序开发风格，一个单一的应用程序被分解为多个小服务，这些小服务在各自独立的进程中运行，且通过轻量级通信机制（HTTP RESTFUL API）进行通讯。</li>
<li>特征：<ul>
<li><strong>易于维护</strong>：微服务规模小，应该只处理单个业务任务。</li>
<li><strong>独立的扩展和部署</strong>：微服务有其各自的部署模式和节奏。因此，每个服务都可以根据该服务应该满足的负载进行扩展。每个服务都可以根据其计划进行部署。<ul>
<li><em>每个服务都可以独立的部署到各种环境中。（开发、测试、生产环境）</em></li>
<li><em>每个服务都能独立启动或销毁而不会对其他服务造成影响。</em></li>
<li><em>当用户量和并发量的增加时，我们还可以将微服务集群化部署，从而增加系统的负载能力。</em></li>
</ul>
</li>
<li><strong>独立技术的使用</strong>：微服务的代码库与部署环境分离，因此可以根据用例决定微服务需要使用的语言和技术。无需在所有微服务中使用通用堆栈。<ul>
<li><em>即不同的服务可以采用不同的技术、编程语言。</em></li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/1.png" alt="image-20250407115822298"></p>
<p><a href="https://www.processon.com/view/67b4259ababf5a32685b6884">图示来源</a></p>
<ol start="3">
<li><p>微服务和传统单体架构</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>微服务架构</th>
<th>单体架构</th>
</tr>
</thead>
<tbody><tr>
<td>团队规模</td>
<td>微服务架构可以将传统模式下的单个应用拆分为多个独立的服务，每个微服务都可以单独开发、部署和维护。每个服务从设计、开发到维护所需的团队规模小，团队管理成本小。</td>
<td>单体架构的应用程序通常需要一个大型团队，围绕一个庞大的应用程序工作，团队管理的成本大。</td>
</tr>
<tr>
<td>数据存储方式</td>
<td>不同的微服务可以使用不同的数据存储方式，例如有的用 Redis，有的使用 MYSQL</td>
<td>单一架构的所有模块共享同一个公共数据库，存储方式相对单一。</td>
</tr>
<tr>
<td>部署方式</td>
<td>微服务架构中每个服务都可以独立部署，也可以独立于其他服务进行扩展。如果部署得当，基于微服务的架构可以帮助企业提高应用程序的部署效率。</td>
<td>采用单体架构的应用程序的每一次功能更改或 bug 修复都必须对整个应用程序重新进行部署。</td>
</tr>
<tr>
<td>开发模式</td>
<td>在采用微服务架构的应用程序中，不同模块可以使用不同的技术或语言进行开发，开发模式更加灵活。</td>
<td>在采用单体架构的应用程序中，所有模块使用的技术和语言必须相同，开发模式受限。</td>
</tr>
<tr>
<td>故障隔离</td>
<td>在微服务架构中，故障被隔离在单个服务中，避免系统的整体崩溃。</td>
<td>在单体架构中，当一个组件出现故障时，故障很可能会在进程中蔓延，导致系统全局不可用。</td>
</tr>
<tr>
<td>项目结构</td>
<td>微服务架构将单个应用程序拆分为多个独立的小型服务，每个服务都可以独立的开发、部署和维护，每个服务都能完成一项特定的业务需求。</td>
<td>单体架构的应用程序，所有的业务逻辑都集中在同一个工程中。</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="二、Spring-Cloud是什么？"><a href="#二、Spring-Cloud是什么？" class="headerlink" title="二、Spring Cloud是什么？"></a>二、Spring Cloud是什么？</h3><ol>
<li><p>出现缘由：</p>
<ul>
<li>对于同一个微服务问题，各个公司提出的解决方案不同。</li>
<li>针对不同场景出现的不同问题的解决方案也不同。</li>
<li>一个微服务框架或解决方案都只能解决微服务中的某一个或某几个问题。</li>
</ul>
</li>
<li><p>定义：</p>
<ul>
<li>Spring Cloud 被称为构建分布式微服务系统的“全家桶”，它并不是某一门技术，而是一系列微服务解决方案或框架的有序集合。它将市面上成熟的、经过验证的微服务框架整合起来，并通过 Spring Boot 的思想进行再封装，屏蔽调其中复杂的配置和实现原理，最终为开发人员提供了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li>
</ul>
<p>即：<em><strong>Spring Cloud就是个容器，只是将第三方提出的微服务解决方案集成，不重复造轮子。</strong></em></p>
<ul>
<li>Spring Cloud 中包含了 spring-cloud-config、spring-cloud-bus 等近 20 个子项目，提供了服务治理、服务网关、智能路由、负载均衡、断路器、监控跟踪、分布式消息队列、配置管理等领域的解决方案。</li>
</ul>
</li>
<li><p>Spring Cloud核心组件</p>
<ul>
<li><strong>服务治理体系</strong>‌<ul>
<li>（1）服务注册与发现：<strong>Eureka</strong>&#x2F;Nacos‌</li>
<li>（6）配置中心：<strong>Spring Cloud Config</strong>&#x2F;Nacos Config</li>
<li>（5）服务网关：<strong>Gateway</strong>&#x2F;Zuul‌</li>
</ul>
</li>
<li><strong>服务通信机制</strong>‌<ul>
<li>（2）负载均衡：<strong>LoadBalancer(新版本自带这个)</strong>||<strong>Ribbon‌</strong>&#x2F;Dubbo‌</li>
<li>（3）服务调用：<strong>OpenFeign</strong>&#x2F;Dubbo‌</li>
<li>消息总线：Spring Cloud Bus‌❌‌</li>
</ul>
</li>
<li>‌<strong>容错处理机制</strong><ul>
<li>（4）熔断降级：<strong>Hystrix</strong>&#x2F;Sentinel‌</li>
<li>服务限流与流量控制‌</li>
</ul>
</li>
</ul>
</li>
<li><p>分布式系统</p>
<ul>
<li><strong>分布式事务</strong>‌<ul>
<li>掌握Seata框架的AT&#x2F;TCC模式‌</li>
<li>理解BASE理论（最终一致性）‌❌‌</li>
</ul>
</li>
<li>‌<strong>链路追踪与监控</strong>❌‌<ul>
<li>Sleuth+Zipkin实现调用链追踪‌❌‌‌</li>
<li>Admin+Prometheus监控系统健康状态‌❌‌‌</li>
</ul>
</li>
<li>‌<strong>安全认证体系</strong>❌‌‌<ul>
<li>OAuth2.0授权协议‌❌‌‌</li>
<li>JWT令牌的集成使用‌❌‌‌</li>
</ul>
</li>
</ul>
</li>
<li><p>云原生技术扩展</p>
<ul>
<li><strong>容器化部署</strong>‌<ul>
<li>Docker容器技术基础‌❓</li>
<li>Kubernetes集群管理‌❓</li>
</ul>
</li>
<li>‌<strong>服务网格</strong>❌‌‌<ul>
<li>了解Service Mesh架构原理‌❌‌‌</li>
<li>学习Istio的服务治理能力‌❌‌‌</li>
</ul>
</li>
</ul>
</li>
<li><p>消息队列：消息的搬运工（中间件）</p>
<ul>
<li><strong>RabbitMQ</strong>（7）</li>
<li><strong>Kafka‌</strong>（7）</li>
</ul>
</li>
</ol>
<h3 id="三、服务注册与发现"><a href="#三、服务注册与发现" class="headerlink" title="三、服务注册与发现"></a>三、服务注册与发现</h3><h4 id="Spring-Cloud-Eureka组件："><a href="#Spring-Cloud-Eureka组件：" class="headerlink" title="Spring Cloud Eureka组件："></a>Spring Cloud Eureka组件：</h4><ul>
<li><strong>Eureka Server</strong>：服务注册中心，当微服务启动时，会将自己的服务注册到 Eureka Server。</li>
<li><strong>Eureka Client</strong>：客户端，通常指的是微服务系统中各个微服务。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳（默认周期为 30 秒）。若 Eureka Server 在多个心跳周期内没有接收到某个 Eureka Client 的心跳，Eureka Server 将它从可用服务列表中移除（默认 90 秒）</li>
</ul>
<h4 id="Eureka原理："><a href="#Eureka原理：" class="headerlink" title="Eureka原理："></a>Eureka原理：</h4><ul>
<li><strong>服务注册中心（Register Service）</strong>：它是一个 <em>Eureka Server</em>，用于提供服务注册和发现功能。</li>
<li><strong>服务提供者（Provider Service）</strong>：它是一个 <em>Eureka Client</em>，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。</li>
<li><strong>服务消费者（Consumer Service）</strong>：它是一个 <em>Eureka Client</em>，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/2" alt="image-20250407125804782"></p>
<h4 id="Eureka流程："><a href="#Eureka流程：" class="headerlink" title="Eureka流程："></a>Eureka流程：</h4><ol>
<li>搭建Eureka Server作为服务注册中心，</li>
<li>服务提供者Eureka Client启动，将当前提供者Client的信息以服务名name的方式注册到Server。</li>
<li>服务消费者Eureka Client启动，将当前消费者Client的信息以消费者name的方式注册到Server。</li>
<li>服务消费者会获得当前可用服务列表（包含所有注册到Server的Client即<strong>Provider</strong>和<strong>Consumer</strong>都有）。</li>
<li>服务消费者获得可用服务列表后，<strong>Consumer</strong>通过HTTP或者消息中间件远程调用<strong>Provider</strong>提供的服务。</li>
</ol>
<h4 id="Eureka注解："><a href="#Eureka注解：" class="headerlink" title="Eureka注解："></a>Eureka注解：</h4><ul>
<li>**<code>@EnableEurekaServer</code>**‌：服务器注解<ul>
<li>用于标记 Spring Boot 主启动类，声明当前应用为 Eureka 服务注册中心‌。</li>
<li>启用后，Eureka Server 会维护服务注册表，接收其他服务的注册信息，并提供服务发现能力。</li>
</ul>
</li>
<li>**<code>@EnableEurekaClient</code>**‌：服务提供者或消费者注解<ul>
<li>标记服务提供者或消费者，使其向 Eureka Server 注册自身信息（如 IP、端口等）并定期发送心跳‌。</li>
<li><strong>注：Spring Cloud 后续版本推荐使用通用注解 <code>@EnableDiscoveryClient</code> 替代，以支持多种注册中心（如 Nacos、Consul）‌</strong></li>
</ul>
</li>
<li><strong><code>@LoadBalanced</code></strong>：负载均衡<ul>
<li>结合 <code>RestTemplate</code> 使用，为 HTTP 请求添加客户端负载均衡能力（默认轮询策略），通过服务名调用其他注册的服务‌</li>
</ul>
</li>
</ul>
<h4 id="Eureka项目："><a href="#Eureka项目：" class="headerlink" title="Eureka项目："></a>Eureka项目：</h4><ul>
<li><p><strong>Eureka Server模板</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父工程依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（EurekaServerApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span>  <span class="comment"># Eureka 默认端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span>  <span class="comment"># 服务端标识</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 不向自身注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>        <span class="comment"># 不拉取注册表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># 单机模式自指向</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>  <span class="comment"># 关闭自我保护（测试环境推荐）</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Eureka Client模板（服务提供者&#x2F;消费者）</strong></p>
<ul>
<li><p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类（ServiceApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>  <span class="comment">// 或 @EnableDiscoveryClient（兼容多注册中心）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment"># 服务端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">demo-service</span>  <span class="comment"># 服务唯一标识</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># 指向Eureka服务端</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment"># 注册IP而非主机名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span>  <span class="comment"># 实例ID格式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>服务调用示例（使用 RestTemplate）</strong></p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 开启客户端负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用其他服务示例（通过服务名访问）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://demo-service/api/data&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动服务器，访问<code>http://localhost:8761</code></p>
</li>
<li><p>启动客户端，确认服务 <code>demo-service</code> 已注册‌</p>
</li>
<li><p>跨服务调用测试，通过 <code>http://localhost:8080/api/call</code> 触发服务间调用，观察日志及响应结果‌</p>
</li>
<li><p><font color="red"><em><strong>若需集群部署，修改 <code>application.yml</code>的<code>defaultZone</code> 指向多个 Eureka 节点即可‌</strong></em></font></p>
<ul>
<li><p><strong>多节点互注册机制</strong></p>
<ul>
<li><p><strong>非分区集群（单Zone）</strong>：适用于单一机房场景，简化配置复杂度‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 节点1配置（端口8761）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://node2:8762/eureka,http://node3:8763/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># 允许向其他节点注册</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>        <span class="comment"># 拉取注册表信息</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>  <span class="comment"># 测试环境可关闭自我保护</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分区集群（Zone-Based）</strong>：客户端配置优先访问同区域节点，降低跨区调用延迟‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端配置示例</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">prefer-same-zone:</span> <span class="literal">true</span>  <span class="comment"># 优先选择同zone节点</span></span><br><span class="line">    <span class="attr">availability-zones:</span></span><br><span class="line">      <span class="attr">yantian:</span> <span class="string">http://node1:8761/eureka</span></span><br><span class="line">      <span class="attr">luohu:</span> <span class="string">http://node2:8762/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>集群</strong>这里又有了<strong>Ribbon 或 Spring Cloud LoadBalancer 实现客户端负载均衡‌</strong></p>
</li>
<li><p>启用 <strong>Actuator</strong> 健康端点，确保 Eureka 准确感知服务状态‌</p>
</li>
<li><p>通过 <strong>Kubernetes Service</strong> 暴露 Eureka 节点，实现动态节点发现‌</p>
</li>
<li><p>配置 <code>livenessProbe</code> 和 <code>readinessProbe</code> 保障容器化部署稳定性‌</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Eureka集群："><a href="#Eureka集群：" class="headerlink" title="Eureka集群："></a>Eureka集群：</h4><ul>
<li><p>缘由：若十几甚至几十个服务全部注册到同一个 Eureka Server 中，就极有可能导致 Eureka Server 因不堪重负而崩溃，最终导致整个系统瘫痪。</p>
</li>
<li><p>所有的Eureka Client、Eureka Server都会往Server中注册自己的信息。可通过配置保证不被注册。</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false 表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原理：</p>
<p> <img src="/blog2025.github.io/2025/04/08/SpringCloud/2.png"></p>
<p> 服务注册中心Server A和B互相注册为集群，服务提供者 A注册到Server A时，也会同步到Server B，当服务消费者 B请求服务时，一旦Server A崩溃，也可以去向Server B获取服务。</p>
<p> 注：服务消费者B也会注册到Server中，这里没画而已。</p>
</li>
</ul>
<h4 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h4><ul>
<li><p>目的：解决Eureka Server长时间未接收到Client的“心跳”，Server自动将该Client从服务列表删除</p>
</li>
<li><p>定义：保证所有Client信息存储到Server服务列表中，不被盲目删除。</p>
</li>
<li><p>applicaiton.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false # false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h3><h4 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h4><ul>
<li>通过Ribbon，我们可以将面向服务的 REST 模板（<code>RestTemplate</code>）请求转换为客户端负载均衡的服务调用。</li>
<li>几乎存在于每一个使用 Spring Cloud 构建的微服务中。</li>
<li>Spring Cloud 微服务之间的调用，API 网关的请求转发等内容都是由Ribbon实现的。</li>
<li>系统处理高并发、缓解网络压力和服务端扩容的重要手段之一。</li>
<li>**<code>@LoadBalanced</code>**开启负载均衡<ul>
<li>结合 <code>RestTemplate</code> 使用，为 HTTP 请求添加客户端负载均衡能力（默认轮询策略），通过服务名调用其他注册的服务‌</li>
</ul>
</li>
</ul>
<h4 id="负载均衡（Load-Balance）原理"><a href="#负载均衡（Load-Balance）原理" class="headerlink" title="负载均衡（Load Balance）原理"></a>负载均衡（Load Balance）原理</h4><ul>
<li>将用户的请求平摊分配到多个服务器上运行，以达到扩展服务器带宽、增强数据处理能力、增加吞吐量、提高网络的可用性和灵活性。</li>
</ul>
<h4 id="负载均衡类型"><a href="#负载均衡类型" class="headerlink" title="负载均衡类型"></a>负载均衡类型</h4><ul>
<li><p><strong>服务端负载均衡SLB</strong>（最常用）—— <strong>算法在中间件</strong></p>
<ul>
<li><p>服务端负载均衡是在客户端和服务端之间建立一个独立的<strong>中间件</strong>即<strong>负载均衡服务器（维护了一份可用服务端清单）</strong>，（该服务器通过<strong>心跳</strong>机制删除故障的服务端节点），该服务器可以是：</p>
<ul>
<li><p><strong>硬件设备F5</strong>（贵）</p>
</li>
<li><p><strong>软件Nginx</strong>（便宜）</p>
<ul>
<li>Nginx是一个高性能的HTTP(网站的发布处理)和反向代理web服务器(负载均衡)</li>
</ul>
</li>
</ul>
</li>
<li><p>当客户端发送请求时，该请求不会直接发送到服务端进行处理，而是全部交给负载均衡服务器，由负载均衡服务器按照某种算法（例如轮询(默认)、随机等），从其维护的可用服务清单中选择一个服务端，然后进行转发。</p>
</li>
</ul>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/3.png"></p>
<ul>
<li>特点：<ul>
<li>需要建立一个独立的负载均衡服务器。</li>
<li>负载均衡是在客户端<strong>发送请求后</strong>进行的，因此客户端并不知道到底是哪个服务端提供的服务。</li>
<li>可用服务端清单存储在负载均衡服务器上。</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/Jiao1225/article/details/122733116">更多</a></p>
</li>
<li><p><strong>客户端负载均衡</strong>：（少见）—— <strong>算法在客户端</strong></p>
<ul>
<li><p>客户端负载均衡是将负载均衡逻辑以<font color="red"><strong>代码</strong></font>的形式封装到客户端上</p>
</li>
<li><p>客户端收到服务端的可用服务清单后，客户端根据负载均衡<strong>算法</strong>来选择一个服务端进行访问。</p>
</li>
<li><p>特点：</p>
<ul>
<li>负载均衡器位于客户端，不需要单独搭建一个负载均衡服务器。</li>
<li>负载均衡是在客户端<strong>发送请求前</strong>进行的，因此客户端清楚地知道是哪个服务端提供的服务。</li>
<li>客户端都维护了一份可用服务清单，而这份清单都是从服务注册中心获取的。</li>
</ul>
</li>
</ul>
</li>
<li><p>对比：</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>服务端负载均衡</th>
<th>客户端负载均衡</th>
</tr>
</thead>
<tbody><tr>
<td>是否需要建立负载均衡服务器</td>
<td>需要在客户端和服务端之间建立一个独立的负载均衡服务器。</td>
<td>将负载均衡的逻辑以代码的形式封装到客户端上，因此不需要单独建立负载均衡服务器。</td>
</tr>
<tr>
<td>是否需要服务注册中心</td>
<td>不需要服务注册中心。</td>
<td>需要服务注册中心。  在客户端负载均衡中，所有的客户端和服务端都需要将其提供的服务注册到服务注册中心上。</td>
</tr>
<tr>
<td>可用服务清单存储的位置</td>
<td>可用服务清单存储在位于客户端与服务器之间的负载均衡服务器上。</td>
<td>所有的客户端都维护了一份可用服务清单，这些清单都是从服务注册中心获取的。</td>
</tr>
<tr>
<td>负载均衡的时机</td>
<td>先将请求发送到负载均衡服务器，然后由负载均衡服务器通过负载均衡算法，在多个服务端之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。  简单点说就是，先发送请求，再进行负载均衡。</td>
<td>在发送请求前，由位于客户端的服务负载均衡器（例如 Ribbon）通过负载均衡算法选择一个服务器，然后进行访问。  简单点说就是，先进行负载均衡，再发送请求。</td>
</tr>
<tr>
<td>客户端是否了解服务提供方信息</td>
<td>由于负载均衡是在客户端发送请求后进行的，因此客户端并不知道到底是哪个服务端提供的服务。</td>
<td>负载均衡是在客户端发送请求前进行的，因此客户端清楚的知道是哪个服务端提供的服务。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="负载均衡Ribbon实现服务Client调用"><a href="#负载均衡Ribbon实现服务Client调用" class="headerlink" title="负载均衡Ribbon实现服务Client调用"></a>负载均衡Ribbon实现服务Client调用</h4><ul>
<li><p>Ribbon 可以与 RestTemplate（Rest 模板）配合使用，以实现微服务之间的调用。</p>
<ul>
<li>RestTemplate：实现了对 HTTP 请求的封装，提供了一套模板化的服务调用方法。<ul>
<li>HEAD &#x3D;&#x3D;&#x3D; restTemplate.headForHeaders()</li>
<li>GET &#x3D;&#x3D;&#x3D; restTemplate.getForObject()</li>
<li>POST &#x3D;&#x3D;&#x3D; restTemplate.postForObject()</li>
<li>PUT &#x3D;&#x3D;&#x3D; restTemplate.put()</li>
<li>DELETE &#x3D;&#x3D;&#x3D; restTemplate.delete()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 开启客户端负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用其他服务示例（通过服务名访问）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/call&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-name/api&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法名</th>
<th>作用描述</th>
<th>示例代码</th>
</tr>
</thead>
<tbody><tr>
<td>‌**<code>getForObject</code>**‌</td>
<td>发送 GET 请求，直接返回响应体对象（自动反序列化）</td>
<td><code>String result = restTemplate.getForObject(&quot;http://service-name/api/data&quot;, String.class);</code></td>
</tr>
<tr>
<td>‌**<code>getForEntity</code>**‌</td>
<td>发送 GET 请求，返回包含响应头、状态码及响应体的 <code>ResponseEntity</code> 对象</td>
<td><code>ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</code></td>
</tr>
<tr>
<td>‌**<code>postForObject</code>**‌</td>
<td>发送 POST 请求，提交数据并返回响应体对象</td>
<td><code>User user = restTemplate.postForObject(url, requestBody, User.class);</code></td>
</tr>
<tr>
<td>‌**<code>postForEntity</code>**‌</td>
<td>发送 POST 请求，返回完整响应实体（包含头信息）</td>
<td><code>ResponseEntity&lt;User&gt; response = restTemplate.postForEntity(url, requestBody, User.class);</code></td>
</tr>
<tr>
<td>‌**<code>put</code>**‌</td>
<td>发送 PUT 请求，更新资源（无返回值）</td>
<td><code>restTemplate.put(&quot;http://service-name/api/update/&#123;id&#125;&quot;, updatedData, &quot;123&quot;);</code></td>
</tr>
<tr>
<td>‌**<code>delete</code>**‌</td>
<td>发送 DELETE 请求，删除资源</td>
<td><code>restTemplate.delete(&quot;http://service-name/api/delete/&#123;id&#125;&quot;, &quot;456&quot;);</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="负载均衡策略-算法"><a href="#负载均衡策略-算法" class="headerlink" title="负载均衡策略(算法)"></a>负载均衡策略(算法)</h4><p>Ribbon根据**<code>IRule</code>**接口实现7种实现类-策略</p>
<ul>
<li>轮询<code>RoundRobinRule</code>（默认）</li>
<li>随机<code>RandomRule</code></li>
<li>重试<code>RetryRule</code>：先轮询，失败后自动重试其他实例‌</li>
<li>加权响应<code>WeightedResponseTimeRule</code>：响应时间越短的实例权重越高，优先被选中‌</li>
<li>最佳可用<code>BestAvailableRule</code></li>
<li>可用性过滤<code>AvailabilityFilteringRule</code></li>
<li>区域避让规则 <code>ZoneAvoidanceRule</code>：综合评估区域（Zone）和实例性能，默认跨区域容错策略‌</li>
</ul>
<p><strong>切换策略</strong>：</p>
<ul>
<li><p>在服务消费者（客户端）的配置类<strong>ConfigBean.java</strong>中，将 <code>IRule</code> 的其他实现类注入到容器中即可。</p>
<ul>
<li><p><strong>全局策略配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonGlobalConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();  <span class="comment">// 切换为随机策略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务级策略配置</strong><code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">SERVICE-NAME:</span>  <span class="comment"># 目标服务名（如 ORDER-SERVICE）</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span>  <span class="comment"># 全类名策略</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义策略扩展</strong></p>
<p>继承 <code>AbstractLoadBalancerRule</code> 类，实现自定义逻辑后注册为 Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义算法（如按IP哈希）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="负载均衡注解"><a href="#负载均衡注解" class="headerlink" title="负载均衡注解"></a>负载均衡注解</h4><ul>
<li><p><strong><code>@LoadBalanced</code></strong></p>
<ul>
<li><p><strong>功能</strong>‌：标记 <code>RestTemplate</code> 或 <code>WebClient</code>，使其支持 Ribbon 的负载均衡能力‌。</p>
</li>
<li><p>‌<strong>使用场景</strong>‌：需在客户端发起服务调用时自动选择目标实例（如通过服务名调用）‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="meta">@LoadBalanced</span>  </span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌**<code>@RibbonClient</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：为指定服务自定义 Ribbon 配置（如负载均衡策略、Ping 检测规则等）‌。</p>
</li>
<li><p><strong>参数说明</strong>‌：</p>
<ul>
<li><code>name</code>：目标服务名称（如 <code>user-service</code>）‌。</li>
<li><code>configuration</code>：自定义配置类（需包含 <code>@Configuration</code> 注解）‌。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name = &quot;order-service&quot;, configuration = OrderRibbonConfig.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@RibbonClients</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：全局配置所有 Ribbon 客户端，或为多个服务批量指定配置类‌。</p>
</li>
<li><p>‌<strong>使用场景</strong>‌：统一多个服务的负载均衡策略（如默认规则、超时时间等）‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RibbonClients(defaultConfiguration = DefaultRibbonConfig.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalRibbonConfig</span> &#123;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="五、服务调用与负载均衡"><a href="#五、服务调用与负载均衡" class="headerlink" title="五、服务调用与负载均衡"></a>五、服务调用与负载均衡</h3><p><strong>Fegin这玩意就是用来代替RestTemplate发送Http请求的</strong></p>
<p>‌**Feign是服务的“通信员”**‌：优化内部服务间调用，提升开发效率‌</p>
<p>各种服务提供者注册到Eureka Server中，服务消费者获取注册到Eureka Server中的服务。（Ribbon负载均衡平衡消费者的获取服务的压力），Fegin负责替换这个过程中的HTTP请求方式（类似于起别名再调用）</p>
<ul>
<li><strong>Feign 就是让你的程序能像调用本地方法一样，轻松调用其他微服务的接口，无需手动处理复杂的 HTTP 请求</strong>‌。</li>
<li>比如：订单服务要查用户信息，不用自己写 HTTP 代码，直接像调用本地方法 <code>userService.getUser()</code> 就能搞定</li>
<li><strong>不用 Feign 的情况</strong>‌（原始方式）：<ul>
<li>你：自己查餐厅电话 → 打电话订餐 → 等送餐 → 拆包装 → 吃饭<br>（对应代码：手动拼接 URL → 发送 HTTP 请求 → 解析响应 → 处理数据）</li>
</ul>
</li>
<li><strong>用 Feign 的情况</strong>‌：<ul>
<li>你：打开外卖 App → 选菜品 → 下单 → 直接开吃<br>（对应代码：定义接口 → 调用方法 → 直接拿结果）</li>
</ul>
</li>
<li><font color="red"><strong>Feign 就是那个外卖 App</strong>‌，帮你隐藏了打电话、等送餐等繁琐步骤！</font></li>
</ul>
<table>
<thead>
<tr>
<th>场景</th>
<th>不用 Feign</th>
<th>用 Feign</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>调用其他服务的接口</strong>‌</td>
<td>手写 <code>RestTemplate</code> 发送 HTTP 请求</td>
<td>像调用本地方法一样写 <code>userClient.getUser()</code></td>
</tr>
<tr>
<td>‌<strong>处理不同服务的地址和端口</strong>‌</td>
<td>手动拼接 URL（容易出错）</td>
<td>自动根据服务名发现地址（如 <code>user-service</code>）</td>
</tr>
<tr>
<td>‌**负载均衡（多实例选择）**‌</td>
<td>自己写代码轮询或随机选实例</td>
<td>自动集成 Ribbon，默认轮询策略</td>
</tr>
<tr>
<td>‌<strong>处理超时、重试等复杂逻辑</strong>‌</td>
<td>每个调用都要重复写代码</td>
<td>统一配置，一次搞定</td>
</tr>
</tbody></table>
<p>例：</p>
<ul>
<li><p><strong>定义 Feign 客户端</strong>‌（告诉 Feign 你要调哪个服务）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明这是一个 Feign 客户端，调用名为 &quot;user-service&quot; 的服务</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">// 定义方法：调用 user-service 的 /user/&#123;id&#125; 接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">getUserName</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在业务中直接使用</strong>‌：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;  <span class="comment">// 注入 Feign 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printUserName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 像调用本地方法一样调用远程接口！</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userClient.getUserName(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户姓名：&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Spring-Cloud-Feign（已停止维护）"><a href="#Spring-Cloud-Feign（已停止维护）" class="headerlink" title="Spring Cloud Feign（已停止维护）"></a>Spring Cloud Feign（已停止维护）</h4><ul>
<li>Feign 对 Ribbon 进行了集成，利用 Ribbon 维护了一份可用服务清单，并通过 Ribbon 实现了客户端的负载均衡。</li>
<li>Feign 在 RestTemplate 的基础上做了进一步的封装，只需要<strong>声明一个接口</strong>并通过<strong>注解</strong>进行简单的配置即可实现对 HTTP 接口的绑定。</li>
<li>Feign 可以像调用本地方法一样来调用远程服务。</li>
<li>Feign 本身并<strong>不支持 Spring MVC 注解</strong></li>
</ul>
<h4 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud OpenFeign"></a>Spring Cloud OpenFeign</h4><ul>
<li>OpenFeign是 Spring Cloud 对 Feign 的二次封装，具有 Feign 的所有功能。</li>
<li><strong>增加了对 Spring MVC 注解的支持</strong>。</li>
</ul>
<h4 id="OpenFeign注解"><a href="#OpenFeign注解" class="headerlink" title="OpenFeign注解"></a>OpenFeign注解</h4><ul>
<li><p><code>@FeignClient</code> ：</p>
<ul>
<li><p>‌<strong>作用</strong>‌：声明一个远程服务调用的客户端接口，用于伪装 RESTful 请求为本地方法调用。</p>
</li>
<li><p><strong>属性</strong>：</p>
<ul>
<li><code>name / value</code>：目标服务名（如 <code>user-service</code>），需与注册中心的服务名一致</li>
<li><code>url</code>：直接指定服务 URL（适用于非注册中心场景，如 <code>http://api.example.com</code>）</li>
<li><code>configuration</code>：自定义配置类（如日志、编解码器等）</li>
<li><code>fallback</code>：定义服务降级类，处理调用失败时的默认逻辑（需在配置中启用 Hystrix熔断支持）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    name = &quot;payment-service&quot;,</span></span><br><span class="line"><span class="meta">    fallback = PaymentFallback.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pay&quot;)</span></span><br><span class="line">    String <span class="title function_">createPayment</span><span class="params">(<span class="meta">@RequestBody</span> PaymentRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>@EnableFeignClients</code></p>
<ul>
<li><p>‌<strong>作用</strong>‌：在 Spring Boot 启动类上激活 Feign 客户端扫描与代理生成。</p>
</li>
<li><p><strong>属性</strong>：</p>
<ul>
<li><code>basePackages</code>：指定扫描 Feign 接口的包路径</li>
<li><code>clients</code>：直接指定要启用的 Feign 客户端类</li>
<li><code>defaultConfiguration</code>：全局默认配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.example.clients&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>@RequestMapping</code></p>
<ul>
<li>‌<strong>作用</strong>‌：Spring MVC 中定义 REST 端点的基础注解，支持灵活配置 HTTP 方法和路径。</li>
</ul>
</li>
<li><p><code>@GetMapping</code></p>
<ul>
<li><code>@RequestMapping(method = RequestMethod.GET)</code></li>
</ul>
</li>
<li><p><code>@PostMapping</code></p>
<ul>
<li><code>@RequestMapping(method = RequestMethod.POST)</code></li>
</ul>
</li>
</ul>
<h4 id="OpenFeign实现远程服务调用"><a href="#OpenFeign实现远程服务调用" class="headerlink" title="OpenFeign实现远程服务调用"></a>OpenFeign实现远程服务调用</h4><h5 id="非集群，不采用负载均衡："><a href="#非集群，不采用负载均衡：" class="headerlink" title="非集群，不采用负载均衡："></a>非集群，不采用负载均衡：</h5><ol>
<li><p><strong>依赖pom.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!-- 与 Spring Boot 版本匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- OpenFeign 核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTTP 客户端优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册中心配置（Eureka Server）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务公共配置（application.yml）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span>  <span class="comment"># 服务名自行替换</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span>  <span class="comment"># Eureka 服务端地址</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># 注册到 Eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>        <span class="comment"># 拉取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span>      <span class="comment"># 日志级别</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>    <span class="comment"># 连接超时(ms)</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">8000</span>       <span class="comment"># 读取超时(ms)</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>               <span class="comment"># 启用 Apache HttpClient</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务提供者（注册到 Eureka）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 模型类（与消费者共享）</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. Controller 暴露接口</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Product</span>(id, <span class="string">&quot;手机&quot;</span>, <span class="number">2999.99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Feign 客户端（消费者调用方）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义 Feign 接口（需与服务提供者路径一致）</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;product-service&quot;)</span>  <span class="comment">// 对应 Eureka 中的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    Product <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long productId)</span>;  <span class="comment">// 必须显式指定路径变量名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 启动类配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>      <span class="comment">// 启用 Eureka 客户端‌:ml-citation&#123;ref=&quot;2,7&quot; data=&quot;citationList&quot;&#125;</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>      <span class="comment">// 启用 Feign 客户端‌:ml-citation&#123;ref=&quot;2,4&quot; data=&quot;citationList&quot;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 业务调用示例</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productFeignClient.getProduct(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程调用结果：&quot;</span> + product);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>流程：</p>
<ul>
<li>启动 ‌<strong>Eureka Server</strong>‌（默认端口 8761）‌</li>
<li>启动 ‌<strong>product-service</strong>‌（服务提供者）</li>
<li>启动 ‌<strong>order-service</strong>‌（服务消费者）</li>
<li>访问 <code>http://localhost:8761</code> 确认服务已注册</li>
<li>调用 <code>OrderService.createOrder()</code> 观察控制台输出</li>
</ul>
</li>
</ol>
<h5 id="集群，搭配负载均衡："><a href="#集群，搭配负载均衡：" class="headerlink" title="集群，搭配负载均衡："></a>集群，搭配负载均衡：</h5><p>旧版本需要显示引入Ribbon，新版本不需要，默认采用Spring Cloud的LoadBalancer</p>
<ol>
<li><p><strong>核心依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud 2023.0.x 依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 服务消费者/提供者公共依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Eureka 客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- OpenFeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- LoadBalancer（必须，替代 Ribbon） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册中心配置（Eureka Server）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">// 启用 Eureka 注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务提供者（Provider）（注册到 Eureka）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">product-service</span>  <span class="comment"># 服务名需唯一</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product-&quot;</span> + id + <span class="string">&quot; (from port:8081)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>OpenFeign 客户端接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;product-service&quot;)</span>  <span class="comment">// 指向 Eureka 中的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span>  <span class="comment">// 与服务提供者接口路径一致</span></span><br><span class="line">    String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long productId)</span>;  <span class="comment">// 必须显式指定参数名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a><strong>消费者配置</strong></h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span>  <span class="comment"># 连接超时（ms）</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">10000</span>    <span class="comment"># 读取超时（ms）</span></span><br><span class="line">  <span class="attr">logging:</span></span><br><span class="line">  	<span class="attr">level:</span></span><br><span class="line">    	<span class="attr">org.springframework.cloud.openfeign:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类与调用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 启用 OpenFeign</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient productFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">product</span> <span class="operator">=</span> productFeignClient.getProduct(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;远程调用结果: &quot;</span> + product); </span><br><span class="line">        <span class="comment">// 输出示例: Product-1 (from port:8081)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>流程：</p>
<ul>
<li><p>‌<strong>启动顺序</strong>‌</p>
<p>Eureka Server（端口 8761）→ Product Service（端口 8081）→ Order Service（端口 8080）</p>
</li>
<li><p>‌<strong>检查服务注册</strong>‌<br>访问 <code>http://localhost:8761</code> 确认 <code>USER-SERVICE</code> 和 <code>ORDER-SERVICE</code> 已注册</p>
</li>
<li><p><strong>测试远程调用</strong>‌：<br>调用 <code>OrderService.createOrder()</code> 方法，观察控制台输出。</p>
</li>
<li><p>‌<strong>负载均衡测试</strong>‌：<br>启动第二个 Product Service 实例（修改端口为 8082），多次调用消费者接口，观察请求分发至不同端口。</p>
</li>
</ul>
</li>
<li><p>原理：</p>
<ul>
<li>‌<strong>服务注册</strong>‌：Provider 和 Consumer 启动时向 Eureka 注册自身信息。</li>
<li>‌<strong>服务发现</strong>‌：Consumer 通过 <code>@FeignClient</code> 调用 Provider 时，从 Eureka 获取服务实例列表。</li>
<li>‌<strong>负载均衡</strong>‌：Spring Cloud LoadBalancer 自动选择实例（默认轮询策略）。</li>
<li>‌<strong>HTTP 调用</strong>‌：OpenFeign 生成动态代理，将接口方法转换为实际 HTTP 请求。</li>
</ul>
</li>
</ol>
<h3 id="六、熔断降级（豪猪）"><a href="#六、熔断降级（豪猪）" class="headerlink" title="六、熔断降级（豪猪）"></a>六、熔断降级（豪猪）</h3><h4 id="缘由："><a href="#缘由：" class="headerlink" title="缘由："></a>缘由：</h4><ul>
<li>用户调用多个服务配合才能完成任务，当服务的其中一个或多个掉线时，用户请求会进入阻塞状态，等待掉线服务的恢复响应，只会导致服务器资源的损耗。</li>
<li>以此类推，当多个服务都要依赖这个掉线的服务，就会导致整个系统的崩溃，造成雪崩效应，最终导致系统瘫痪。</li>
<li>为了防止此类事件发生，微服务引入了熔断器。<ul>
<li>熔断器：<ul>
<li>当线路出现故障时，迅速切断电源以保护电路的安全</li>
<li>服务发生故障—&gt;返回一个符合预期的、可处理的降级响应<strong>FallBack</strong>，不是长时间的等待或者抛出调用方无法处理的异常。</li>
<li>保证了服务调用方的线程不会被长时间、不必要地占用，避免故障在微服务系统中的蔓延，防止系统雪崩效应的发生。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h4><ul>
<li>具有服务降级、服务熔断、线程隔离、请求缓存、请求合并以及实时故障监控等强大功能。</li>
<li>作用：<ul>
<li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li>
<li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li>
<li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个兜底方法，当请求失败后即调用该方法。</li>
<li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li>
<li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-服务降级"><a href="#Hystrix-服务降级" class="headerlink" title="Hystrix 服务降级"></a>Hystrix 服务降级</h4><ul>
<li>保证当前服务不受其他服务故障的影响，提高服务的健壮性。</li>
<li>使用场景：<ul>
<li>服务器压力剧增，对不重要、不紧急的服务进行简单处理，从而释放资源保证核心业务的正常运作。</li>
<li>某些服务不可用，避免长时期等待造成的服务卡顿和雪崩效用，主动执行备用的降级逻辑立刻返回一个友好的提示，以保障主体业务不受影响。</li>
<li>具体场景：<ul>
<li>程序运行异常</li>
<li>服务超时</li>
<li>熔断器处于打开状态</li>
<li>线程池资源耗尽</li>
</ul>
</li>
</ul>
</li>
<li>使用方法：<ul>
<li>重写 <code>HystrixCommand.getFallBack()</code> </li>
<li>或重写<code>HystrixObservableCommand.resumeWithFallback()</code></li>
</ul>
</li>
<li>服务降级 <code>FallBack</code>运行位置：<ul>
<li>服务端</li>
<li>或客户端</li>
</ul>
</li>
</ul>
<h4 id="‌Eureka-Hystrix-服务降级万能模板："><a href="#‌Eureka-Hystrix-服务降级万能模板：" class="headerlink" title="‌Eureka + Hystrix 服务降级万能模板："></a>‌Eureka + Hystrix 服务降级万能模板：</h4><ol>
<li><p><strong>Eureka 注册中心</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml（Eureka Server）</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">// 启用 Eureka 注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端降级（Provider）</strong></p>
<p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务提供者依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>     <span class="comment">// 注册到 Eureka</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">// 启用 Hystrix 熔断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>业务类实现降级</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法级降级（超时或异常触发）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">        fallbackMethod = &quot;getProductFallback&quot;,</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟超时（3秒 &gt; 2秒阈值触发降级）</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product-&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级方法（参数需与原方法一致）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProductFallback</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[服务端降级] 系统繁忙，请稍后重试 (ID:&quot;</span> + id + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>客户端降级（Consumer）</strong></p>
<p><strong>依赖配置（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 服务消费者依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Feign 客户端配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用 Feign+Hystrix 整合</span></span><br></pre></td></tr></table></figure>

<p><strong>Feign 接口与降级类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    name = &quot;product-service&quot;,</span></span><br><span class="line"><span class="meta">    fallback = ProductFeignClientFallback.class  // 指定降级类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductFeignClientFallback</span> <span class="keyword">implements</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[客户端降级] 商品服务不可用，ID:&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">// 启用 Feign</span></span><br><span class="line"><span class="meta">@EnableHystrix</span>       <span class="comment">// 启用 Hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断器全局配置</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span>     <span class="comment"># 触发熔断的最小请求数（默认20）</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">40</span>  <span class="comment"># 错误率阈值（40%）</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">5000</span>  <span class="comment"># 熔断后恢复时间（5秒）</span></span><br><span class="line">  <span class="attr">threadpool:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">coreSize:</span> <span class="number">10</span>  <span class="comment"># 线程池核心线程数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>启动顺序</strong>‌</p>
<ul>
<li>Eureka Server（8761端口）</li>
<li>Product Service（服务端，8081端口）</li>
<li>Order Service（客户端，8080端口）</li>
</ul>
</li>
<li><p>‌<strong>测试服务端降级</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问服务端接口（触发超时）</span></span><br><span class="line">http://localhost:8081/product/1</span><br><span class="line"><span class="comment"># 返回：[服务端降级] 系统繁忙，请稍后重试 (ID:1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>测试客户端降级</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 product-service 服务后调用消费者</span></span><br><span class="line">http://localhost:8080/order/create/1</span><br><span class="line"><span class="comment"># 返回：[客户端降级] 商品服务不可用，ID:1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断状态监控</strong></p>
<p>访问 <code>/actuator/hystrix.stream</code> 端点观察实时熔断数据。</p>
</li>
</ol>
<h4 id="Hystrix-全局降级"><a href="#Hystrix-全局降级" class="headerlink" title="Hystrix 全局降级"></a>Hystrix 全局降级</h4><ul>
<li><p><strong>注解式全局降级模板<code>@DefaultProperties</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 类上声明默认降级方法</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;globalFallback&quot;)</span> <span class="comment">// 核心注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 目标方法启用Hystrix</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">// 不指定fallbackMethod则自动触发全局降级</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">getPaymentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.queryAllPayments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义全局降级方法（需无参且返回类型兼容）</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">globalFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">500</span>, <span class="string">&quot;全局降级：服务暂时不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类需添加 <code>@EnableHystrix</code> 或 <code>@EnableCircuitBreaker</code></li>
<li><strong><code>@DefaultProperties</code> 作用于类级别，统一绑定降级逻辑</strong></li>
<li><strong>所有未指定 <code>fallbackMethod</code> 的 <code>@HystrixCommand</code> 方法均触发全局降级</strong></li>
</ul>
</li>
<li><p><strong>解耦式全局降级模板（推荐）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 实现Feign接口并定义全局降级逻辑</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">queryAllPayments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">503</span>, <span class="string">&quot;服务熔断：全局降级响应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. FeignClient绑定降级类</span></span><br><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    value = &quot;CLOUD-PAYMENT-SERVICE&quot;, </span></span><br><span class="line"><span class="meta">    fallback = OrderServiceFallback.class // 指定全局降级类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/list&quot;)</span></span><br><span class="line">    CommonResult&lt;List&lt;Payment&gt;&gt; <span class="title function_">queryAllPayments</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务代码与降级逻辑解耦</li>
<li>支持微服务间调用的统一降级处理</li>
<li>可通过 <code>FallbackFactory</code> 实现异常类型差异化处理</li>
</ul>
</li>
<li><p>‌<strong>降级方法优先级</strong></p>
<ul>
<li>方法级 <code>@HystrixCommand(fallbackMethod)</code> &gt; 类级 <code>@DefaultProperties</code> &gt; Feign客户端级 <code>fallback</code>‌</li>
<li>无fallback配置时直接抛出异常</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-服务熔断"><a href="#Hystrix-服务熔断" class="headerlink" title="Hystrix 服务熔断"></a>Hystrix 服务熔断</h4><ul>
<li><p>熔断机制是为了应对雪崩效应而出现的一种微服务链路保护机制。</p>
</li>
<li><p>某个微服务不可用或响应时间太长时，熔断器会暂时切断请求对该服务的调用，并快速返回一个友好的错误响应。在经历了一定的时间后，熔断器会再次检测该微服务是否恢复正常，若服务恢复正常则恢复其调用链路。</p>
</li>
<li><p>熔断状态：</p>
<ul>
<li>熔断关闭状态（Closed）：<ul>
<li>当所有服务访问正常时，熔断器处于关闭状态，服务调用方可以正常地对服务进行调用。</li>
</ul>
</li>
<li>熔断开启状态（Open）：<ul>
<li>默认情况下，在固定时间内接口调用出错比率达到一个阈值（例如 50%），熔断器会进入熔断开启状态。进入熔断状态后，后续对该服务的调用都会被切断，熔断器会执行本地的降级（FallBack）方法。</li>
</ul>
</li>
<li>半熔断状态（Half-Open）：<ul>
<li>在熔断开启一段时间之后，熔断器会进入半熔断状态。在半熔断状态下，熔断器会尝试恢复服务调用方对服务的调用，允许部分请求调用该服务，并监控其调用成功率。如果成功率达到预期，则说明服务已恢复正常，熔断器进入关闭状态；如果成功率仍旧很低，则重新进入熔断开启状态。</li>
</ul>
</li>
</ul>
</li>
<li><p>熔断配置实现</p>
<ul>
<li><p><strong>引入依赖</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务熔断实现模板</strong></p>
<p><strong>PaymentService 接口定义（Feign 客户端）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    value = &quot;CLOUD-PAYMENT-SERVICE&quot;, </span></span><br><span class="line"><span class="meta">    fallback = PaymentServiceFallback.class  // 指定全局降级实现类</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">queryPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PaymentService 降级实现类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceFallback</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryPayment</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务熔断：支付服务不可用，已触发全局降级，ID：&quot;</span> + id;  <span class="comment">// 统一熔断响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 声明熔断规则</span></span><br><span class="line">    <span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">        fallbackMethod = &quot;paymentFallback&quot;, // 熔断后执行的方法</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;), // 启用熔断</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;), // 触发熔断的最小请求数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;), // 错误率阈值</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;) // 熔断持续时间</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentInfo</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;非法参数&quot;</span>); <span class="comment">// 模拟异常触发熔断</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paymentService.queryPayment(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义降级方法（参数需与原方法一致）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentFallback</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务熔断：支付系统暂时不可用，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>流程</strong>：</p>
<ul>
<li><strong>正常调用</strong>‌<br>请求 <code>/order/payment/1</code> → 调用 <code>PaymentService.queryPayment(1)</code> → 返回正常支付信息‌</li>
<li>‌<strong>触发熔断</strong>‌<br>连续请求 <code>/order/payment/-1</code> → 服务提供方抛出异常 → 错误率超过阈值后，后续请求直接返回 <code>PaymentServiceFallback</code> 的全局降级响应‌</li>
<li><strong>半开状态恢复</strong>‌<br>熔断10秒后，允许少量请求尝试调用原服务，成功则关闭熔断‌</li>
</ul>
</li>
<li><p><strong>熔断参数说明</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>参数名</strong>‌</th>
<th>‌<strong>默认值</strong>‌</th>
<th>‌<strong>作用</strong>‌</th>
<th>‌<strong>推荐设置</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>circuitBreaker.requestVolumeThreshold</code></td>
<td>20</td>
<td>触发熔断的最小请求数阈值‌</td>
<td>10~20（高并发场景）‌</td>
</tr>
<tr>
<td><code>circuitBreaker.sleepWindowInMilliseconds</code></td>
<td>5000</td>
<td>熔断持续时间（毫秒）后进入半开状态‌</td>
<td>10000（10秒）‌</td>
</tr>
<tr>
<td><code>circuitBreaker.errorThresholdPercentage</code></td>
<td>50%</td>
<td>错误百分比触发阈值‌</td>
<td>60%（敏感业务）‌</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h4 id="Hystrix故障监控"><a href="#Hystrix故障监控" class="headerlink" title="Hystrix故障监控"></a>Hystrix故障监控</h4><h5 id="Hystrix-故障监控"><a href="#Hystrix-故障监控" class="headerlink" title="Hystrix 故障监控"></a>Hystrix 故障监控</h5><ul>
<li><p>准实时的调用监控（Hystrix Dashboard）功能，Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表的形式展示给用户，包括每秒执行请求的数量、成功请求的数量和失败请求的数量等。</p>
</li>
<li><p><strong>指标采集端点</strong></p>
<p>Hystrix 默认通过 <code>/hystrix.stream</code> 端点暴露监控数据流，包含：</p>
<ul>
<li>熔断器开关状态（OPEN&#x2F;HALF-OPEN&#x2F;CLOSED）‌</li>
<li>请求总数（<code>requestCount</code>）与错误请求数（<code>errorCount</code>）‌</li>
<li>错误率（<code>errorPercentage</code>）‌</li>
<li>线程池负载（<code>activeThreads</code>）</li>
</ul>
<p><strong>监控数据聚合</strong>‌</p>
<ul>
<li>使用 ‌<strong>Turbine</strong>‌ 聚合多个服务的 <code>/hystrix.stream</code> 数据，统一展示到 Hystrix Dashboard，解决微服务集群监控分散问题‌</li>
</ul>
</li>
</ul>
<h5 id="Hystrix-故障监控模板"><a href="#Hystrix-故障监控模板" class="headerlink" title="Hystrix 故障监控模板"></a>Hystrix 故障监控模板</h5><p><strong>监控中心配置（monitor-service）</strong></p>
<ul>
<li><p>依赖pom.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--hystrix-dashboard 监控的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加 Spring Boot 的监控模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若需聚合多服务监控，添加 Turbine --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动类配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  <span class="comment">// 启用监控面板</span></span><br><span class="line"><span class="meta">@EnableTurbine</span>           <span class="comment">// 启用聚合监控（可选）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixMonitorApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixMonitorApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置监控端点</strong>‌<strong>application.yml</strong>‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="attr">cluster-config:</span> <span class="string">default</span>  <span class="comment"># 集群名称</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">payment-service,order-service</span>  <span class="comment"># 需要监控的服务列表</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>被监控服务配置（以支付服务为例）</strong></p>
<ul>
<li><p>‌<strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注册监控数据流 Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">// 启用熔断器件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">// 暴露监控端点</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; <span class="title function_">hystrixServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registration = </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>(), <span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>熔断业务逻辑</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义熔断规则</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPayment&quot;,</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;5&quot;),  // 触发熔断的最小请求数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;),  // 熔断持续时间</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;metrics.rollingStats.timeInMilliseconds&quot;, value = &quot;10000&quot;)  // 统计窗口时长</span></span><br><span class="line"><span class="meta">        &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pay/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payment</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;非法参数&quot;</span>);  <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;支付成功，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fallbackPayment</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[Hystrix] 支付服务暂时不可用，ID：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启用 Hystrix</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">hystrix.stream</span>  <span class="comment"># 开放监控端点</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span>  <span class="comment"># 超时时间</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>监控验证步骤</strong></p>
<ul>
<li><p><strong>访问 Dashboard</strong></p>
<p>打开浏览器输入 <code>http://localhost:9001/hystrix</code>，</p>
<p>输入框填写目标服务的监控流地址：<code>http://payment-service:8080/hystrix.stream</code></p>
</li>
<li><p><strong>触发熔断测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续发送错误请求</span></span><br><span class="line">curl http://localhost:8080/pay/-1</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>触发熔断观察指标</strong></p>
<ul>
<li>‌<strong>Circuit Breaker</strong>‌：显示熔断器状态（OPEN&#x2F;CLOSED）‌</li>
<li>‌<strong>Request Volume</strong>‌：实时请求量波动曲线‌</li>
<li>‌<strong>Error Percentage</strong>‌：错误率超过阈值时标红警告‌</li>
</ul>
</li>
<li><p><strong>聚合监控（Turbine）</strong></p>
<ul>
<li>访问 <code>http://localhost:9001/turbine.stream</code> 查看多个服务的聚合监控数据‌</li>
</ul>
</li>
</ul>
<h4 id="Hystrix-注解"><a href="#Hystrix-注解" class="headerlink" title="Hystrix 注解"></a>Hystrix 注解</h4><ul>
<li><p><strong><code>@HystrixCommand</code></strong></p>
<ul>
<li><p>‌<strong>功能</strong>‌：标记需进行熔断保护的方法，定义熔断规则和降级逻辑‌。</p>
</li>
<li><p>‌关键参数</p>
<ul>
<li><code>fallbackMethod</code>：指定降级方法名（需与原方法同参数和返回类型）‌。</li>
<li><code>commandKey</code>：自定义命令名称（用于监控和配置）‌。</li>
<li><code>threadPoolKey</code>：定义隔离线程池（资源隔离）‌。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;getUserFallback&quot;,   </span></span><br><span class="line"><span class="meta">                commandProperties = &#123;  </span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)  </span></span><br><span class="line"><span class="meta">                &#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(String userId)</span> &#123;  </span><br><span class="line">    <span class="comment">// 调用外部服务  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserFallback</span><span class="params">(String userId)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;fallback-user&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>‌**<code>@EnableHystrix</code>**‌</p>
<ul>
<li><p>‌<strong>功能</strong>‌：启用 Hystrix 功能，自动扫描 <code>@HystrixCommand</code> 注解‌。</p>
</li>
<li><p>‌<strong>使用位置</strong>‌：主启动类或配置类‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableHystrix</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(Application.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@EnableHystrixDashboard</code>**‌</p>
<ul>
<li><p><strong>功能</strong>‌：启用 Hystrix 监控仪表盘（实时查看熔断器状态、请求流量等）‌。</p>
</li>
<li><p>‌<strong>访问地址</strong>‌：<code>http://localhost:port/hystrix</code>‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableHystrix</span>  </span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>@EnableCircuitBreaker</code></strong></p>
<ul>
<li><strong>功能</strong>‌：通用熔断器启用注解（Hystrix 是具体实现之一）‌。</li>
<li>‌与 <code>@EnableHystrix</code> 区别<ul>
<li><code>@EnableHystrix</code> 专用于 Hystrix，包含 <code>@EnableCircuitBreaker</code> 的功能。</li>
<li><code>@EnableCircuitBreaker</code> 更通用，支持其他熔断器实现（如 Resilience4j）‌。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>@HystrixProperty</code></strong></p>
<ul>
<li><p><strong>功能</strong>‌：在 <code>@HystrixCommand</code> 中定义熔断策略的具体参数‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(commandProperties = &#123;  </span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),  </span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;)  </span></span><br><span class="line"><span class="meta">&#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">highRiskMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="七、网关"><a href="#七、网关" class="headerlink" title="七、网关"></a>七、网关</h3><h4 id="API网关：中间件"><a href="#API网关：中间件" class="headerlink" title="API网关：中间件"></a>API网关：中间件</h4><ul>
<li><p><strong>缘由</strong>：不同机房的服务器系统（微服务）进行交流，需要知道对方的具体的IP地址、端口号等，<strong>API网关</strong>便用来解决这些问题便是用来解决存在的如下问题：</p>
<ul>
<li><p>当服务数量众多时，客户端需要维护大量的服务地址，这对于客户端来说，是非常繁琐复杂的。</p>
</li>
<li><p>在某些场景下可能会存在跨域请求的问题。</p>
</li>
<li><p>身份认证的难度大，每个微服务需要独立认证。</p>
</li>
</ul>
</li>
<li><p><strong>API网关</strong>：</p>
<ul>
<li><p>搭建在客户端和服务端微服务之间的服务，是微服务架构中的核心中间层。</p>
</li>
<li><p>可以用来解决权限验证、监控、缓存、请求路由等问题。</p>
</li>
<li><p>系统对外的唯一<font color="red"><strong>门卫</strong></font>，<strong>客户端</strong>—<em>请求发送</em>—&gt;<strong>API网关</strong>—<em>请求标识</em>—&gt;<strong>微服务实例</strong>。</p>
<p><img src="/blog2025.github.io/4" alt="image-20250408110352615"></p>
</li>
</ul>
</li>
<li><p><strong>API网关好处：</strong></p>
<ul>
<li>交互时，客户端<strong>只需要知道 API 网关地址</strong>即可，而不需要维护大量的服务地址，简化了客户端的开发。</li>
<li>客户端直接与 API 网关通信，能够减少客户端与各个服务的交互次数。</li>
<li>客户端与后端的服务耦合度降低。</li>
<li>节省流量，提高性能，提升用户体验。</li>
</ul>
</li>
<li><p>API网关方案：</p>
<ul>
<li>Spring Cloud Gateway</li>
<li>Spring Cloud Netflix Zuul‌</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h4><h5 id="Spring-Cloud-Gateway核心概念"><a href="#Spring-Cloud-Gateway核心概念" class="headerlink" title="Spring Cloud Gateway核心概念"></a>Spring Cloud Gateway核心概念</h5><ul>
<li><p><strong>路由转发</strong>：</p>
<ul>
<li><p>路由（Route）：</p>
<ul>
<li>包含：一个 ID、一个目标 URI、一组断言（Predicate）和一组过滤器（Filter）</li>
</ul>
</li>
<li><p><strong>断言（Predicate）</strong>：<strong>匹配器</strong></p>
<ul>
<li>路由转发的判断条件，我们可以通过 Predicate 对 HTTP 请求进行匹配。</li>
<li>匹配内容的包括：请求方式、请求路径、请求头、参数等，如果请求与断言匹配成功，则将请求转发到相应的服务。</li>
</ul>
</li>
<li><p><strong>过滤器（Filter）</strong>：<strong>精细化控制</strong></p>
<ul>
<li>对请求进行拦截和修改，还可以使用它对上文的响应进行再处理。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Route 和 Predicate 必须同时声明。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>过滤器链</strong>：</p>
<ul>
<li>‌<strong>局部过滤器</strong>‌：针对特定路由实现请求&#x2F;响应修改（如添加请求头、路径重写）‌</li>
<li><strong>全局过滤器</strong>‌：作用于所有路由，常用于鉴权、日志记录、限流等全局逻辑‌</li>
<li>支持自定义过滤器，并可通过 <code>Order</code> 注解控制执行顺序‌</li>
</ul>
</li>
<li><p><strong>高并发与异步支持</strong></p>
<ul>
<li>基于 WebFlux 和 Reactor 模型实现非阻塞 I&#x2F;O，性能优于 Zuul 1.x 的同步阻塞模型‌</li>
</ul>
</li>
<li><p>‌<strong>安全与流量治理</strong></p>
<ul>
<li>集成熔断（Hystrix）、限流（如基于 Redis 的令牌桶算法）、跨域处理（CORS 配置）等机制‌。</li>
<li>提供黑白名单控制、请求重试等策略‌。</li>
</ul>
</li>
</ul>
<h5 id="Spring-Cloud-Gateway特征："><a href="#Spring-Cloud-Gateway特征：" class="headerlink" title="Spring Cloud Gateway特征："></a>Spring Cloud Gateway特征：</h5><ul>
<li>能够在任意请求属性上匹配路由。</li>
<li>predicates（断言） 和 filters（过滤器）是特定于路由的。</li>
<li><font color="red"><strong>集成了 Hystrix 熔断器。</strong></font></li>
<li>集成了 Spring Cloud DiscoveryClient（服务发现客户端）。</li>
<li>易于编写断言和过滤器。</li>
<li>能够限制请求频率。</li>
<li><strong><font color="red">能够重写请求路径。</font></strong></li>
</ul>
<h5 id="Spring-Cloud-Gateway工作流程："><a href="#Spring-Cloud-Gateway工作流程：" class="headerlink" title="Spring Cloud Gateway工作流程："></a>Spring Cloud Gateway工作流程：</h5><p><img src="/blog2025.github.io/5" alt="image-20250408111926096"></p>
<ol>
<li>客户端发送请求到Gateway</li>
<li>Gateway通过Gateway Handler Mapping找到与请求匹配的路由，再将其发送给Gateway Web Handler。</li>
<li>Gateway Web Handler 通过指定的过滤器链（Filter Chain），将请求转发到实际的服务节点中，执行业务逻辑返回响应结果。</li>
<li>过滤器会在转发请求之前（pre）和【之后（post）|  在响应返回客户端之前】执行业务逻辑。（虚线）<ul>
<li>转发请求之前（pre）：<ul>
<li>对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。</li>
</ul>
</li>
<li>转发请求之后（post）|  在响应返回客户端之前：<ul>
<li>对响应进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>
</ul>
</li>
</ul>
</li>
<li>响应原路返回给客户端。</li>
</ol>
<h5 id="Spring-Cloud-Gateway—Predicate-断言："><a href="#Spring-Cloud-Gateway—Predicate-断言：" class="headerlink" title="Spring Cloud Gateway—Predicate 断言："></a>Spring Cloud Gateway—Predicate 断言：</h5><ul>
<li><p><strong>匹配器</strong>：</p>
<p>Spring Cloud Gateway 通过 Predicate 断言来实现 Route 路由的匹配规则。请求只有满足了 Predicate 的条件，才会被转发到指定的服务上进行处理。</p>
</li>
<li><p><strong>特点</strong>：</p>
<ul>
<li><p>通过 <strong>YAML 或属性文件</strong>定义路由规则</p>
</li>
<li><p>“一对多”：一个路由（Route）可以包含多个断言（Predicate）</p>
</li>
<li><p>一个请求想要转发到指定的路由上，就必须同时匹配路由上的<strong>所有</strong>断言。</p>
</li>
<li><p>当一个请求同时满足多个路由的断言条件时，请求只会被<strong>首个成功匹配</strong>的路由转发。</p>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/6.png" alt="image-20250408114439777"></p>
</li>
</ul>
</li>
<li><p><strong>通用配置模板</strong>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">          <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br><span class="line">          <span class="attr">predicates:</span>  			<span class="comment"># 断言列表，多个断言默认以 AND 逻辑组合</span></span><br><span class="line">            <span class="bullet">-</span> &#123;<span class="string">断言工厂名称</span>&#125;<span class="string">=参数1[,参数2...]</span>  <span class="comment"># 断言条件  </span></span><br><span class="line">            <span class="comment"># 或者</span></span><br><span class="line">            <span class="comment"># - Path=/api/**  </span></span><br><span class="line">  			<span class="comment"># - Method=GET  </span></span><br><span class="line">  			<span class="comment"># - Header=Content-Type,application/json  # 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类型</strong>：</p>
<ul>
<li><p>Path：请求路径匹配时，请求才能被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/api/orders/**</span>  <span class="comment"># 支持 Ant 风格路径表达式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Before：在特定时间之前的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Before=2025-09-06T16:00:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>After：在特定时间之后的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">After=2025-09-06T16:00:00+08:00[Asia/Shanghai]</span>  <span class="comment"># 时间格式需严格遵循</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Between：在特定时间之间的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Between=2025-09-01T00:00:00+08:00,2025-09-30T23:59:59+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Cookie：携带 Cookie 且 Cookie 的内容匹配上的请求，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cookie=sessionId,</span> [<span class="string">a-zA-Z0-9</span>]&#123;<span class="number">16</span>&#125;  <span class="comment"># 正则校验 Cookie 值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌Query‌：匹配 URL 查询参数</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Query=userId,^\\d&#123;6&#125;$</span>  <span class="comment"># 正则校验参数值（如 6 位数字）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Header：请求头上携带属性的属性匹配上的，才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\\d+</span>  <span class="comment"># 正则匹配（如数字 ID）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Method：只有匹配HTTP方法才会被转发</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  <span class="comment"># 支持多方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Host‌：匹配请求域名</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Host=**.example.com</span>  <span class="comment"># 通配符匹配子域名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>默认 AND 逻辑</strong>‌：多个断言需同时满足</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/api/**</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=GET</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">Header=Content-Type,application/json</span>  <span class="comment"># 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>OR 逻辑实现</strong>‌：需通过 <code>MatchPredicate</code> 自定义组合（需编程扩展）‌</p>
</li>
<li><p><strong>自定义断言扩展</strong>：通过实现 <code>RoutePredicateFactory</code> 接口自定义断言逻辑‌</p>
</li>
</ul>
</li>
<li><p><strong>动态路由</strong>：</p>
<ul>
<li><p>配置模板：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 默认true，默认开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">          <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br><span class="line">          <span class="attr">predicates:</span>  			<span class="comment"># 断言列表，多个断言默认以 AND 逻辑组合</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span>  </span><br><span class="line">  			<span class="bullet">-</span> <span class="string">Method=GET</span>  </span><br><span class="line">  			<span class="bullet">-</span> <span class="string">Header=Content-Type,application/json</span>  <span class="comment"># 需同时满足路径、方法、请求头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>所谓动态路由：</p>
<p>Gateway会根据Eureka Server注册中心的维护列表的<strong>服务名</strong>（spring.application.name）作为路径创建动态路由进行转发。</p>
<p><strong>用注册中的service-name代替URL路径</strong></p>
</li>
<li><p>使用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> &#123;<span class="string">路由唯一标识</span>&#125;  	<span class="comment"># 路由唯一标识符（如 order_route）</span></span><br><span class="line">    <span class="attr">uri:</span> &#123;<span class="string">目标服务地址</span>&#125;  	<span class="comment"># 目标服务地址（支持 lb://service-name 负载均衡格式）</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>lb：uri 的协议，表示开启 Spring Cloud Gateway 的负载均衡功能。</p>
</li>
<li><p>service-name：服务名，Spring Cloud Gateway 会根据它获取到具体的微服务地址。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">lb://service-name</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Spring-Cloud-Gateway—Filter-过滤器："><a href="#Spring-Cloud-Gateway—Filter-过滤器：" class="headerlink" title="Spring Cloud Gateway—Filter 过滤器："></a>Spring Cloud Gateway—Filter 过滤器：</h5><ul>
<li><p><strong>Filter 过滤器用处</strong>：</p>
<p>对服务端提供的服务进行一定的校验逻辑，例如用户登陆状态校验、签名校验等。</p>
</li>
<li><p><strong>分类一</strong>：</p>
<ul>
<li>转发请求之前**（pre）**：<ul>
<li>对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等。</li>
</ul>
</li>
<li>转发请求之后**（post）**|  在响应返回客户端之前：<ul>
<li>对响应后进行拦截和再处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>分类二（按照作用范围划分）</strong>：</p>
<ul>
<li><p><strong>GatewayFilter 网关过滤器</strong>：应用在单个路由或者一组路由上的过滤器。</p>
<ul>
<li><p>对单个路由或者一组路由上传入的请求和传出响应进行拦截</p>
</li>
<li><p>可实现一些与业务无关的功能，比如<strong>登陆状态校验、签名校验、权限校验、日志输出、流量监控</strong>等。</p>
</li>
<li><p>通用模板：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span> </span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">xxxx</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=xxxx</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=X-Request-Id,1024</span> <span class="comment">#过滤器工厂会在匹配的请求头加上一对请求头，名称为 X-Request-Id 值为 1024</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrefixPath=/dept</span> <span class="comment">#在请求路径前面加上 /dept</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>filters常见类型</strong>：</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>请求头操作</strong></p>
<table>
<thead>
<tr>
<th><strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>AddRequestHeader</code></td>
<td>添加请求头</td>
<td><code>- AddRequestHeader=X-Request-Color, Blue</code></td>
<td>透传鉴权 Token、链路追踪 ID 等</td>
</tr>
<tr>
<td><code>RemoveRequestHeader</code></td>
<td>移除请求头</td>
<td><code>- RemoveRequestHeader=Cookie</code></td>
<td>删除敏感头信息（如 Cookie）</td>
</tr>
<tr>
<td><code>SetRequestHeader</code></td>
<td>覆盖请求头值</td>
<td><code>- SetRequestHeader=Content-Type, application/json</code></td>
<td>强制修改请求头内容</td>
</tr>
<tr>
<td><code>AddRequestHeadersIfNotPresent</code></td>
<td>仅当不存在时添加请求头</td>
<td><code>- AddRequestHeadersIfNotPresent=X-Request-ID:123</code></td>
<td>避免重复添加头信息</td>
</tr>
</tbody></table>
<p><strong>路径与参数处理</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>RewritePath</code></td>
<td>正则重写请求路径</td>
<td><code>- RewritePath=/api/(?&lt;segment&gt;.*), /$\&#123;segment&#125;</code></td>
<td>路径版本转换（如 &#x2F;api&#x2F;v1 → &#x2F;v1）</td>
</tr>
<tr>
<td><code>PrefixPath</code></td>
<td>添加路径前缀</td>
<td><code>- PrefixPath=/v1</code></td>
<td>统一 API 版本前缀</td>
</tr>
<tr>
<td><code>StripPrefix</code></td>
<td>移除路径前缀</td>
<td><code>- StripPrefix=2</code></td>
<td>截断网关代理路径（如 &#x2F;gateway&#x2F;service → &#x2F;service）</td>
</tr>
<tr>
<td><code>SetPath</code></td>
<td>直接设置请求路径（支持占位符）</td>
<td><code>- SetPath=/api/&#123;segment&#125;</code></td>
<td>动态路径映射</td>
</tr>
<tr>
<td><code>AddRequestParameter</code></td>
<td>添加请求参数</td>
<td><code>- AddRequestParameter=region, cn</code></td>
<td>透传统一参数（如区域标识）</td>
</tr>
</tbody></table>
<p><strong>响应处理</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>AddResponseHeader</code></td>
<td>添加响应头</td>
<td><code>- AddResponseHeader=Cache-Control, no-cache</code></td>
<td>控制客户端缓存行为</td>
</tr>
<tr>
<td><code>RemoveResponseHeader</code></td>
<td>移除响应头</td>
<td><code>- RemoveResponseHeader=Server</code></td>
<td>隐藏下游服务信息（如 Server 头）</td>
</tr>
<tr>
<td><code>SetResponseHeader</code></td>
<td>覆盖响应头值</td>
<td><code>- SetResponseHeader=Content-Type, text/plain</code></td>
<td>强制修改响应内容类型</td>
</tr>
<tr>
<td><code>SetStatus</code></td>
<td>设置响应状态码</td>
<td><code>- SetStatus=401</code></td>
<td>鉴权失败拦截或自定义响应</td>
</tr>
<tr>
<td><code>DedupeResponseHeader</code></td>
<td>去重响应头（避免跨域重复头）</td>
<td><code>- DedupeResponseHeader=Access-Control-Allow-Origin</code></td>
<td>解决 CORS 头冲突</td>
</tr>
</tbody></table>
<p><strong>流量控制与容错</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>Retry</code></td>
<td>请求重试（支持条件配置）</td>
<td><code>- Retry=3</code> <code>- Retry=methods=GET, statuses=500</code></td>
<td>应对下游服务临时故障</td>
</tr>
<tr>
<td><code>RequestRateLimiter</code></td>
<td>请求速率限制（需配合 Redis 等）</td>
<td><code>- RequestRateLimiter=10, 20, #&#123;@userKeyResolver&#125;</code></td>
<td>API 限流（基于用户&#x2F;IP 等维度）</td>
</tr>
<tr>
<td><code>CircuitBreaker</code></td>
<td>熔断器（需 Resilience4J 或 Spring Cloud CircuitBreaker）</td>
<td><code>- CircuitBreaker=myCircuitBreaker</code></td>
<td>服务熔断降级</td>
</tr>
</tbody></table>
<p><strong>其他常用过滤器</strong></p>
<table>
<thead>
<tr>
<th><strong>过滤器名称</strong>‌</th>
<th>‌<strong>描述</strong>‌</th>
<th>‌<strong>配置示例</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>SecureHeaders</code></td>
<td>自动添加安全头（如 CSP、XSS 防护）</td>
<td><code>- SecureHeaders</code></td>
<td>增强请求安全性</td>
</tr>
<tr>
<td><code>SaveSession</code></td>
<td>保留 WebSession 状态（如 Spring Session）</td>
<td><code>- SaveSession</code></td>
<td>分布式会话管理</td>
</tr>
<tr>
<td><code>RedirectTo</code></td>
<td>重定向到指定 URL（支持状态码）</td>
<td><code>- RedirectTo=302, https://example.com</code></td>
<td>临时或永久重定向</td>
</tr>
<tr>
<td><code>RewriteLocationResponseHeader</code></td>
<td>重写 Location 响应头中的路径</td>
<td><code>- RewriteLocationResponseHeader=AS_IN_REQUEST, Location, ,</code></td>
<td>反向代理路径修正</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>GlobalFilter 全局过滤器</strong> ：应用在所有的路由上的过滤器。</p>
<ul>
<li><p>实现一些统一化的业务功能，例如权限认证、IP 访问限制等。</p>
</li>
<li><p>Spring Cloud Gateway 为我们提供了多种默认的 GlobalFilter，例如：转发、路由、负载均衡等相关的全局过滤器。</p>
</li>
<li><p>通过实现<code>GlobalFilter</code>开启全局过滤器。</p>
</li>
<li><p><strong>全局过滤器模板</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;  </span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">        <span class="comment">// 1. 预处理逻辑（如鉴权、日志记录、修改请求头）  </span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();  </span><br><span class="line">        System.out.println(<span class="string">&quot;Global Filter - 请求路径: &quot;</span> + request.getPath());  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 示例：添加请求头  </span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">modifiedRequest</span> <span class="operator">=</span> request.mutate()  </span><br><span class="line">                .header(<span class="string">&quot;X-Global-Flag&quot;</span>, <span class="string">&quot;activated&quot;</span>)  </span><br><span class="line">                .build();  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 传递修改后的请求到下游过滤器或服务  </span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange.mutate().request(modifiedRequest).build());  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 控制过滤器执行顺序（数值越小优先级越高）  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态拦截请求：</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 拦截请求并返回 401  </span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);  </span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> chain.filter(exchange);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 响应后处理：</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;  </span><br><span class="line">        <span class="comment">// 修改响应头  </span></span><br><span class="line">        exchange.getResponse().getHeaders().add(<span class="string">&quot;X-Processed-By&quot;</span>, <span class="string">&quot;GlobalFilter&quot;</span>);  </span><br><span class="line">    &#125;));  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>GlobalFilter</code> 接口</strong>‌：定义过滤逻辑，作用于所有路由请求‌。</li>
<li>‌**<code>Ordered</code> 接口**‌：通过 <code>getOrder()</code> 方法控制过滤器执行顺序‌。</li>
<li>‌<strong>预处理&#x2F;后处理</strong>‌：可在 <code>filter()</code> 方法中实现请求修改、日志记录、鉴权拦截等逻辑‌。</li>
</ul>
</li>
<li><p><strong>全局过滤器配置（可选）</strong></p>
<p>若需动态配置全局过滤器参数（如开关状态），可结合 <code>@ConfigurationProperties</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;gateway.global-filter&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalFilterConfig</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enableLogging</span> <span class="operator">=</span> <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter/Setter  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> GlobalFilterConfig config;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (config.isEnableLogging()) &#123;  </span><br><span class="line">            <span class="comment">// 记录请求日志  </span></span><br><span class="line">            System.out.println(<span class="string">&quot;请求URI: &quot;</span> + exchange.getRequest().getURI());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>‌**配置示例（application.yml）**‌：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">yamlCopy Codegateway:</span>  </span><br><span class="line">  <span class="attr">global-filter:</span>  </span><br><span class="line">    <span class="attr">enable-logging:</span> <span class="literal">true</span>  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>全局过滤器与局部过滤器区别</strong></p>
<table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌**全局过滤器（GlobalFilter）**‌</th>
<th>‌**局部过滤器（GatewayFilter）**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>作用范围</strong>‌</td>
<td>所有路由自动生效‌</td>
<td>需在路由配置中显式绑定‌</td>
</tr>
<tr>
<td>‌<strong>配置方式</strong>‌</td>
<td>通过代码实现，无需 YAML 配置‌</td>
<td>需在 <code>routes.filters</code> 中声明‌</td>
</tr>
<tr>
<td>‌<strong>典型场景</strong>‌</td>
<td>统一鉴权、全局日志、跨域处理‌</td>
<td>路径重写、特定路由头修改‌</td>
</tr>
<tr>
<td>‌<strong>执行顺序控制</strong>‌</td>
<td>通过 <code>Ordered</code> 接口或 <code>@Order</code> 注解‌</td>
<td>按配置顺序执行‌</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway-整合配置模板（YAML）"><a href="#Spring-Cloud-Gateway-整合配置模板（YAML）" class="headerlink" title="Spring Cloud Gateway 整合配置模板（YAML）"></a>Spring Cloud Gateway 整合配置模板（YAML）</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span>  </span><br><span class="line">    <span class="attr">gateway:</span>  </span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 路由规则定义（可定义多个路由）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">routes:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service_route_1</span>  <span class="comment"># 路由唯一标识（必填）  </span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-name</span>  <span class="comment"># 目标服务地址（支持负载均衡）  </span></span><br><span class="line">          </span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="comment"># 断言（Predicates）配置  </span></span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="comment"># 1. 路径匹配（Ant风格）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/v1/**</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 2. HTTP方法匹配（支持多方法）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 请求头正则匹配（示例：匹配含数字的X-Request-ID头）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-ID,</span> <span class="string">\\d+</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 请求时间窗口（示例：2023年9月期间生效）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2023-09-01T00:00:00+08:00,</span> <span class="number">2023-09-30T23:59:59+08:00</span>[<span class="string">Asia/Shanghai</span>]  </span><br><span class="line">          </span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="comment"># 过滤器（Filters）配置  </span></span><br><span class="line">          <span class="comment"># ---------------  </span></span><br><span class="line">          <span class="attr">filters:</span>  </span><br><span class="line">            <span class="comment"># 1. 路径重写（正则替换）  </span></span><br><span class="line">            <span class="comment"># 示例：将 /api/v1/order/123 转换为 /order/123  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/v1/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 2. 添加请求头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Gateway-Request,</span> <span class="literal">true</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 移除敏感请求头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveRequestHeader=Cookie</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 添加全局参数  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=region,</span> <span class="string">cn</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 5. 截断路径前缀（示例：移除前两级路径）  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=2</span>  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># ======================================  </span></span><br><span class="line">        <span class="comment"># 第二个路由示例（可扩展更多路由）  </span></span><br><span class="line">        <span class="comment"># ======================================  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth_route</span>  </span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://auth-service:8080</span>  </span><br><span class="line">          <span class="attr">predicates:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=token,</span> <span class="string">.+</span>  <span class="comment"># 必须携带token参数  </span></span><br><span class="line">          <span class="attr">filters:</span>  </span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetResponseHeader=X-Auth-Status,</span> <span class="string">verified</span>  <span class="comment"># 强制设置响应头  </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrefixPath=/validate</span>  <span class="comment"># 添加路径前缀（/auth → /validate/auth）  </span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 全局默认过滤器（作用于所有路由）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">default-filters:</span>  <span class="comment"># 跨域处理</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Origin</span>  <span class="comment"># 跨域头去重  </span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Gateway-Response,</span> <span class="string">processed</span>  </span><br><span class="line"></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="comment"># 高级配置（可选）  </span></span><br><span class="line">      <span class="comment"># ======================================  </span></span><br><span class="line">      <span class="attr">discovery:</span>  </span><br><span class="line">        <span class="attr">locator:</span>  </span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 开启服务发现自动路由（需配合注册中心）  </span></span><br></pre></td></tr></table></figure>

<p><strong>配置注释说明</strong></p>
<ol>
<li><strong>路由核心属性‌</strong></li>
</ol>
<ul>
<li><p>‌<strong>id‌</strong>：路由唯一标识符（如 <code>order_route</code>），用于区分不同路由规则。</p>
</li>
<li><p><strong>uri‌</strong>：目标服务地址，支持：</p>
<ul>
<li>直接URL：<code>http://192.168.1.100:8080</code></li>
<li>负载均衡：<code>lb://service-name</code>（需集成服务发现组件如Nacos）</li>
</ul>
</li>
<li><p><strong>predicates‌</strong>：断言列表，‌所有条件需同时满足‌（逻辑AND），常用断言：</p>
<ul>
<li>‌Path‌：Ant风格路径匹配（支持*和**通配符）。</li>
<li>‌Header‌：正则匹配请求头值（如 <code>Header=X-Request-ID, \d+</code>）。</li>
<li>‌Query‌：校验URL查询参数（如 <code>Query=token, .</code>+ 表示必须携带token参数）。</li>
</ul>
</li>
<li><p><strong>‌filters‌</strong>：过滤器链，按定义顺序执行请求&#x2F;响应处理，常用操作：</p>
<ul>
<li>‌AddRequestHeader‌：添加请求头（透传数据到下游服务）。</li>
<li>‌RewritePath‌：正则重写路径（需转义<code>$</code>为<code>$\</code>）。</li>
<li>‌StripPrefix‌：移除路径前缀（如将 <code>/gateway/service/hello</code> 转为 <code>/hello</code>）。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><strong>全局过滤器‌</strong></p>
<ul>
<li><p>‌default-filters‌：应用于所有路由的过滤器（如统一添加安全头）。</p>
<ul>
<li><p>‌DedupeResponseHeader‌：解决跨域头重复问题（如 <code>Access-Control-Allow-Origin</code>）。</p>
</li>
<li><p>‌AddResponseHeader‌：统一添加响应头（如标记网关处理状态）。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>高级特性‌</strong></p>
</li>
</ol>
<ul>
<li><p>‌服务发现集成‌：通过 <code>discovery.locator.enabled=true</code> 开启自动路由（需引入 <code>spring-cloud-starter-gateway</code> 及注册中心）。</p>
</li>
<li><p>‌自定义过滤器‌：通过实现 <code>GatewayFilterFactory</code> 接口扩展（如日志、限流等）</p>
</li>
</ul>
<h4 id="Spring-Cloud-Gateway-开发通用模板"><a href="#Spring-Cloud-Gateway-开发通用模板" class="headerlink" title="Spring Cloud Gateway 开发通用模板"></a>Spring Cloud Gateway 开发通用模板</h4><ol>
<li><p><strong>核心依赖（pom.xml）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Gateway 必须依赖 WebFlux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可选：Redis 用于限流、熔断等场景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>主启动类（GatewayApplication.java）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>路由配置（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api_v1_route</span>  <span class="comment"># 路由唯一标识</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://backend-service:8080</span>  <span class="comment"># 目标服务地址</span></span><br><span class="line">          <span class="attr">predicates:</span>  <span class="comment"># 断言条件（全部满足才路由）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/v1/**</span>  <span class="comment"># 路径匹配</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span>  <span class="comment"># 请求方法限制</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment"># 移除前缀（如 /api/v1/xxx → /xxx）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-Gateway,</span> <span class="string">enabled</span>  <span class="comment"># 添加请求头</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">redirect_route</span>  <span class="comment"># 重定向示例</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://old-service:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/old/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">http://new-service:8080/new</span>  <span class="comment"># 302重定向</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rate_limit_route</span>  <span class="comment"># 限流示例（需配合Redis）</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://limited-service:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/public-api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span>  <span class="comment"># 每秒10个请求</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span>  <span class="comment"># 令牌桶容量</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span>  <span class="comment"># 按IP限流</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 全局默认过滤器（作用于所有路由）</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Global-Filter,</span> <span class="string">processed</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>全局过滤器（GlobalFilter）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局鉴权过滤器（Order数值越小优先级越高）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> exchange.getRequest().getHeaders();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> headers.getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 模拟校验逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 拦截请求并返回401</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 传递请求到下一个过滤器或服务</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 最高优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义过滤器（GatewayFilterFactory）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义请求日志过滤器</span></span><br><span class="line"><span class="comment"> * 配置用法：- Log=pre,post</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;LogGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogGatewayFilterFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 1. 预处理逻辑（在请求转发前执行）</span></span><br><span class="line">            <span class="keyword">if</span> (config.isPreLog()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求进入：&quot;</span> + exchange.getRequest().getURI());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 转发请求并处理响应</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (config.isPostLog()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;响应状态：&quot;</span> + exchange.getResponse().getStatusCode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置类（通过YAML传递参数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> preLog;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> postLog;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Getter &amp; Setter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>限流维度解析器（KeyResolver）示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按客户端IP限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">ipKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">            exchange.getRequest().getRemoteAddress().getAddress().getHostAddress()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按用户ID限流（需从请求头或Token中提取）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">            exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;X-User-Id&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>常用配置项（application.yml）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网关通用配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span>  <span class="comment"># 限流/熔断依赖Redis</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">connect-timeout:</span> <span class="number">1000</span>  <span class="comment"># 连接超时（ms）</span></span><br><span class="line">        <span class="attr">response-timeout:</span> <span class="string">5s</span>   <span class="comment"># 响应超时</span></span><br><span class="line">      <span class="attr">discovery:</span>  <span class="comment"># 集成服务发现（如Nacos）</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用根据服务ID路由</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>扩展：自定义异常处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理（覆盖默认错误页）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-1)</span>  <span class="comment">// 优先级高于默认处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalErrorHandler</span> <span class="keyword">implements</span> <span class="title class_">WebExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange, Throwable ex)</span> &#123;</span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST);</span><br><span class="line">        exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;code\&quot;:400, \&quot;message\&quot;:\&quot;&quot;</span> + ex.getMessage() + <span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().writeWith(</span><br><span class="line">            Mono.just(exchange.getResponse().bufferFactory().wrap(errorMsg.getBytes()))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‌<strong>模板使用说明</strong>‌</p>
<ul>
<li>‌<strong>路由配置</strong>‌：<ul>
<li>在 <code>application.yml</code> 中按需添加路由规则，支持路径重写、限流、重定向等。</li>
<li>通过 <code>predicates</code> 定义匹配条件，<code>filters</code> 定义处理链。</li>
</ul>
</li>
<li>‌<strong>全局过滤器</strong>‌：<ul>
<li>实现 <code>GlobalFilter + Ordered</code> 接口，用于统一鉴权、日志等场景。</li>
<li>通过 <code>@Order</code> 或 <code>getOrder()</code> 控制执行顺序。</li>
</ul>
</li>
<li>‌<strong>自定义过滤器</strong>‌：<ul>
<li>继承 <code>AbstractGatewayFilterFactory</code>，实现特定业务逻辑（如日志、参数校验）。</li>
<li>在YAML中通过过滤器名称（如 <code>Log=pre,post</code>）配置参数。</li>
</ul>
</li>
<li>‌<strong>动态扩展</strong>‌：<ul>
<li>集成服务发现（如Nacos）：在 <code>application.yml</code> 中启用 <code>spring.cloud.gateway.discovery.locator.enabled</code>。</li>
<li>自定义限流策略：实现 <code>KeyResolver</code> 接口，按IP、用户等维度限流。</li>
</ul>
</li>
<li><strong>执行顺序</strong>‌：全局过滤器 &gt; 路由过滤器 &gt; 目标服务。</li>
</ul>
</li>
</ol>
<h3 id="八、配置中心"><a href="#八、配置中心" class="headerlink" title="八、配置中心"></a>八、配置中心</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在分布式微服务系统中，几乎所有服务的运行都离不开配置文件的支持，这些配置文件通常由<strong>各个</strong>服务自行管理，以 <code>properties</code> 、<code>yml </code> 或<code>JSON</code>等格式保存在各个微服务的类路径下。</p>
<p>这种将配置文件散落在各个服务中的管理方式，存在以下问题：</p>
<ul>
<li><strong>管理难度大</strong>：配置文件散落在各个微服务中，难以管理。</li>
<li><strong>安全性低</strong>：配置跟随源代码保存在代码库中，容易造成配置泄漏。</li>
<li><strong>时效性差</strong>：微服务中的配置修改后，必须重启服务，否则无法生效。</li>
<li><strong>局限性明显</strong>：无法支持动态调整，例如日志开关、功能开关。</li>
</ul>
<h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>将各个微服务的配置文件集中存储在一个外部的存储仓库或系统（例如 <strong>Git</strong> 、SVN 或本地文件系统）中，对配置的统一管理。</p>
<ul>
<li><p>Spring Cloud Config 包含：</p>
<ul>
<li><p><strong>Config Server</strong>（分布式配置中心）-  <strong>服务器</strong>：</p>
<p>一个独立运行的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密信息和解密信息的访问接口。</p>
</li>
<li><p><strong>Config Client</strong>（微服务架构中的各个微服务）-  <strong>客户端</strong>：</p>
<p>微服务架构中的各个微服务，它们通过 Config Server 对配置进行管理，并从 Config Sever 中获取和加载配置信息。</p>
</li>
</ul>
</li>
<li><p>Spring Cloud Config默认使用<strong>Git</strong>存储配置信息，可以对配置信息进行版本管理。</p>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/7.png" alt="image-20250408153507163"></p>
</li>
<li><p>Spring Cloud Config 工作流程：</p>
<ol>
<li><p>开发人员提交配置文件到 Git 仓库，</p>
</li>
<li><p>Config 服务端负责连接 Git 仓库，</p>
</li>
<li><p>Config 服务端将<strong>获取配置的接口</strong>暴露给 Config 客户端，</p>
</li>
<li><p>Config 客户端通过 Config 服务端<strong>暴露出来的接口</strong>，拉取配置仓库中的配置，</p>
</li>
<li><p>Config 客户端获取到配置信息，以支持服务的运行。</p>
</li>
</ol>
</li>
<li><p>Spring Cloud Config 特点：</p>
<ul>
<li>微服务的配置文件统一由外部的 Git 管理，</li>
<li>将配置以 REST 接口的形式暴露给各个微服务，以方便各个微服务获取。</li>
<li>微服务可以通过 Spring Cloud Config 向配置中心统一拉取属于它们自己的配置信息。</li>
<li>当配置发生变化时，微服务<strong>不需要重启</strong>即可感知到配置的变化，并自动获取和应用最新配置。</li>
<li>开发人员可以通过 Spring Cloud Config 对同一应用在不同环境的各配置进行管理，且能够确保应用在环境迁移后仍然有完整的配置支持其正常运行。</li>
</ul>
</li>
</ul>
<h4 id="Spring-Cloud-Config-项目模板"><a href="#Spring-Cloud-Config-项目模板" class="headerlink" title="Spring Cloud Config 项目模板"></a>Spring Cloud Config 项目模板</h4><p><strong>配置中心服务端（Config Server）</strong>：</p>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config-server/</span><br><span class="line">├── src/main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/configserver/</span><br><span class="line">│   │       └── ConfigServerApplication.java   # 主启动类</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── application.yml                    # 服务端配置</span><br><span class="line">│       └── config/                            # 本地配置文件存储（可选）</span><br><span class="line">│           └── app-dev.yml                   # 示例配置文件</span><br><span class="line">└── pom.xml                                    # Maven 依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config Server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若使用 Git 存储 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**主启动类 <code>ConfigServerApplication.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">// 启用 Config Server 功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端配置 <code>application.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span>  <span class="comment"># Config Server 默认端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/your-repo/config-repo</span>  <span class="comment"># Git 仓库地址（存储配置文件）</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span>                  <span class="comment"># 按应用名搜索子目录</span></span><br><span class="line">          <span class="attr">clone-on-start:</span> <span class="literal">true</span>                           <span class="comment"># 启动时克隆仓库</span></span><br><span class="line">        <span class="comment"># 本地模式（无需 Git，直接读取本地文件）</span></span><br><span class="line">        <span class="comment"># native:</span></span><br><span class="line">        <span class="comment">#   search-locations: classpath:/config/&#123;application&#125;</span></span><br><span class="line">    <span class="comment">#lable: master	# 分支名 </span></span><br></pre></td></tr></table></figure>

<p>Spring Cloud Config 规定了一套配置文件访问规则，如下表。</p>
<table>
<thead>
<tr>
<th>访问规则</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;{application}&#x2F;{profile}[&#x2F;{label}]</td>
<td>&#x2F;config&#x2F;dev&#x2F;master</td>
</tr>
<tr>
<td>&#x2F;{application}-{profile}.{suffix}</td>
<td>&#x2F;config-dev.yml</td>
</tr>
<tr>
<td>&#x2F;{label}&#x2F;{application}-{profile}.{suffix}</td>
<td>&#x2F;master&#x2F;config-dev.yml</td>
</tr>
</tbody></table>
<ul>
<li>{application}：应用名称，即配置文件的名称，例如 config-dev。</li>
<li>{profile}：环境名，一个项目通常都有开发（dev）版本、测试（test）环境版本、生产（prod）环境版本，配置文件则以 application-{profile}.yml 的形式进行区分，例如 application-dev.yml、application-test.yml、application-prod.yml 等。</li>
<li>{label}：Git 分支名，默认是 master 分支，当访问默认分支下的配置文件时，该参数可以省略，即第二种访问方式。</li>
<li>{suffix}：配置文件的后缀，例如 config-dev.yml 的后缀为 yml。</li>
</ul>
</li>
<li><p>**Git 仓库的配置文件示例（<code>config-repo/app-dev.yml</code>）**测试用</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称需与客户端配置的 `spring.application.name` 一致</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;Hello from Git Config!&quot;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span>  <span class="comment"># 客户端应用端口（可通过配置中心动态覆盖）</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置客户端（Config Client）</strong>：</p>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config-client/</span><br><span class="line">├── src/main/</span><br><span class="line">│   ├── java/</span><br><span class="line">│   │   └── com/example/configclient/</span><br><span class="line">│   │       ├── ConfigClientApplication.java    # 主启动类</span><br><span class="line">│   │       └── controller/ConfigController.java # 测试接口</span><br><span class="line">│   └── resources/</span><br><span class="line">│       ├── bootstrap.yml                       # 客户端启动配置</span><br><span class="line">│       └── application.yml                     # 本地默认配置（可选）</span><br><span class="line">└── pom.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>客户端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Web 支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**主启动类 <code>ConfigClientApplication.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**客户端启动配置 <code>bootstrap.yml</code>**‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：bootstrap.yml 优先级高于 application.yml，用于连接配置中心</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">app</span>      <span class="comment"># 对应 Git 中的 &#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8888</span>  <span class="comment"># Config Server 地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>                <span class="comment"># 激活的环境配置（对应 Git 中的 app-dev.yml）</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>                 <span class="comment"># Git 分支名称</span></span><br><span class="line">    <span class="comment"># name: app   			# 配置文件名称，app-dev.yml 中的 app</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**测试接口 <code>ConfigController.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.configclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.message:Local default message&#125;&quot;)</span>  <span class="comment">// 冒号后为本地默认值（配置中心无此配置时生效）</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/message&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Config Center Message: &quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者读取配置中心指定配置文件的内容，并展示到页面</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configVersion;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getConfig&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;info：&quot;</span> + configInfo + <span class="string">&quot;&lt;br/&gt;version：&quot;</span> + configVersion + <span class="string">&quot;&lt;br/&gt;port：&quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>运行与验证</strong>：</p>
<ol>
<li><p><strong>启动服务端</strong>‌</p>
<ul>
<li>访问 <code>http://localhost:8888/app/dev/main</code> 查看配置信息（返回 JSON 格式数据）。</li>
</ul>
</li>
<li><p>‌<strong>启动客户端</strong>‌</p>
<ul>
<li>访问 <code>http://localhost:8081/message</code>，应返回 <code>Hello from Git Config!</code>。</li>
</ul>
</li>
<li><p><strong>结果</strong>：服务端直接更新，客户端需要重启。</p>
<ul>
<li>配置更新后，Spring Cloud Config 服务端（Server）可以直接从 Git 仓库中获取最新的配置。</li>
<li>除非重启 Spring Cloud Config 客户端（Client），否则无法通过 Spring Cloud Config 服务端获取最新的配置信息。<strong>（需要动态刷新配置）</strong></li>
</ul>
</li>
<li><p><strong>手动动态刷新配置（需额外配置 <code>@RefreshScope</code>）</strong></p>
<ul>
<li><p><strong>更新客户端依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更新 bootstrap.yml</strong> </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 health 节点，本段配置（*）就是为了开启所有的节点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>   <span class="comment"># * 在yaml 文件属于关键字，所以需要加引号</span></span><br><span class="line">        <span class="comment"># include: refresh,health  # 暴露 refresh 端点</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**更新 <code>ConfigController.java</code>**‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 添加此注解以支持配置热更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Git 仓库中的配置后，调用客户端 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:8081/actuator/refresh</span><br></pre></td></tr></table></figure>

<p>使新配置生效。</p>
</li>
<li><p><strong>这种方法需要挨个向每个客户端手动发送POST请求才能重新拉取配置。</strong></p>
</li>
</ul>
</li>
<li><p><strong>自动化刷新（高级）</strong></p>
<p>结合 ‌<strong>Spring Cloud Bus</strong>‌ 和消息队列（如 RabbitMQ&#x2F;Kafka）。</p>
<p>Spring Cloud Bus 通过消息队列（如 RabbitMQ&#x2F;Kafka）广播配置变更事件。</p>
<ul>
<li><p><strong>添加依赖（客户端和服务端）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RabbitMQ 支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置消息队列（服务端和客户端）</strong></p>
<p>在服务端和客户端的 <code>application.yml</code> 中配置 RabbitMQ：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务端暴露 Bus 端点</strong></p>
<p>在服务端的 <code>application.yml</code> 中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向服务端发送刷新广播</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://config-server:8888/actuator/bus-refresh</span><br></pre></td></tr></table></figure>

<p>所有订阅该 Config Server 的客户端会自动刷新配置。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方案</strong>‌</th>
<th>‌<strong>优点</strong>‌</th>
<th>‌<strong>缺点</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>手动刷新</strong>‌</td>
<td>简单、无需额外组件</td>
<td>需人工干预</td>
<td>开发&#x2F;测试环境<br />（小型项目）</td>
</tr>
<tr>
<td>‌<strong>Spring Cloud Bus</strong>‌</td>
<td>全自动、批量刷新</td>
<td>依赖消息队列，架构复杂</td>
<td>生产环境、多实例集群<br />（大型分布式系统）</td>
</tr>
</tbody></table>
<p>‌端点区别</p>
<ul>
<li>服务端暴露 <code>bus-refresh</code> 端点（用于触发广播）。</li>
<li>客户端暴露 <code>refresh</code> 端点（仅手动刷新时使用）。</li>
</ul>
</li>
</ol>
<h4 id="Spring-Cloud-Config-注解"><a href="#Spring-Cloud-Config-注解" class="headerlink" title="Spring Cloud Config 注解"></a>Spring Cloud Config 注解</h4><ul>
<li><p><strong><code>@EnableConfigServer</code></strong></p>
<ul>
<li><p>‌<strong>作用</strong>‌：标注在主启动类上，声明当前应用为 ‌**Config Server（配置中心服务端）。**‌‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">// 启用 Config Server 功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@Value(&quot;$&#123;property.key&#125;&quot;)</code>**‌</p>
<ul>
<li><p><strong>作用</strong>‌：从配置中心或本地配置文件注入 ‌<strong>单个属性值</strong>‌，支持动态刷新‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;app.message&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String message;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>@ConfigurationProperties(prefix = &quot;prefix&quot;)</code></strong></p>
<ul>
<li><p>‌<strong>作用</strong>‌：将配置中心的 ‌<strong>一组属性</strong>‌ 绑定到 Java 对象的字段，支持类型安全配置‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;database&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// Getter/Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@RefreshScope</code>**‌</p>
<ul>
<li><p><strong>作用</strong>‌：标记需要 ‌<strong>动态刷新配置</strong>‌ 的 Bean，修改配置后通过 <code>/actuator/refresh</code> 端点触发更新‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 支持热更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>@Profile(&quot;env&quot;)</code>**‌</p>
<ul>
<li><p>‌<strong>作用</strong>‌：根据环境（如 <code>dev</code>&#x2F;<code>prod</code>）激活特定的配置段，与 Config Server 的 <code>spring.profiles.active</code> 配合使用‌。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span>  <span class="comment">// 仅 dev 环境生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DevConfig</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="九、消息队列"><a href="#九、消息队列" class="headerlink" title="九、消息队列"></a>九、消息队列</h3><h4 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h4><ul>
<li><p>系统解耦：</p>
<ul>
<li><p>当多个服务依赖同一数据源时，直接调用会导致强耦合，而消息队列作为中间件，可以使数据源连接中间件，其他服务连接中间件。</p>
<p><img src="/blog2025.github.io/2025/04/08/SpringCloud/8.png"></p>
</li>
</ul>
</li>
<li><p>异步处理：</p>
<ul>
<li>客户端需等待耗时操作（如支付回调、短信发送）完成才能响应，导致延迟高。</li>
<li>主业务完成后发送消息到 消息件 MQ，从属业务异步处理，客户端无需等待。</li>
</ul>
</li>
<li><p>流量削峰：</p>
<ul>
<li>突发高并发请求（如秒杀活动）直接压垮数据库。</li>
<li>请求先写入 消息件MQ，消费者按处理能力分批拉取，避免数据库瞬时过载。</li>
</ul>
</li>
</ul>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a><strong>RabbitMQ</strong></h4><table>
<thead>
<tr>
<th><strong>模式</strong>‌</th>
<th>‌<strong>交换机类型</strong>‌</th>
<th>‌<strong>路由机制</strong>‌</th>
<th>‌<strong>消费者数量</strong>‌</th>
<th>‌<strong>典型场景</strong>‌</th>
<th>‌<strong>关键差异</strong>‌</th>
<th>适用场景（）</th>
</tr>
</thead>
<tbody><tr>
<td>简单模式(Queue)</td>
<td>无</td>
<td>直连队列</td>
<td>单消费者</td>
<td>简单任务处理</td>
<td>无交换机，点对点通信‌</td>
<td>短信&#x2F;邮件单发‌</td>
</tr>
<tr>
<td>工作队列(Work)</td>
<td>无&#x2F;默认</td>
<td>轮询分发</td>
<td>多消费者</td>
<td>高并发任务分发</td>
<td>多个消费者竞争消费‌</td>
<td>资源抢购&#x2F;负载均衡‌</td>
</tr>
<tr>
<td>发布订阅（Fanout）</td>
<td>Fanout</td>
<td>广播到所有队列</td>
<td>多消费者</td>
<td>系统间广播通知</td>
<td>无视 routing key‌</td>
<td>系统级通知‌‌（库存变更通知）</td>
</tr>
<tr>
<td>路由模式（Direct）</td>
<td>Direct</td>
<td>精确匹配 routing key</td>
<td>多消费者</td>
<td>条件过滤分发</td>
<td>需精确路由键匹配‌</td>
<td>精准消息分发‌</td>
</tr>
<tr>
<td>主题模式（Topic）</td>
<td>Topic</td>
<td>通配符匹配 routing key</td>
<td>多消费者</td>
<td>复杂条件过滤</td>
<td>支持 <code>*</code> 和 <code>#</code> 通配符‌</td>
<td>多维度消息分类‌，地理位置消息</td>
</tr>
<tr>
<td>RPC 模式</td>
<td>Direct</td>
<td>请求-响应（临时队列）</td>
<td>单消费者</td>
<td>需要同步响应的远程调用</td>
<td>同步通信机制‌</td>
<td>实时支付状态查询、库存锁定确认‌</td>
</tr>
</tbody></table>
<ol>
<li><p><strong>项目结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├── config</span><br><span class="line">│   └── RabbitMQConfig.java  # 队列与交换机配置</span><br><span class="line">├── producer</span><br><span class="line">│   └── OrderProducer.java   # 消息生产者</span><br><span class="line">└── consumer</span><br><span class="line">    └── OrderConsumer.java   # 消息消费者</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>依赖</strong>‌（pom.xml）‌</p>
</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><strong>连接配置</strong>‌（application.yml）‌</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 工作队列模式每次只取1条消息</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ACK（生产环境建议手动）</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启生产者重试</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>队列与交换机声明</strong>‌（RabbitMQConfig.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 简单队列模式 -------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化简单队列声明</span></span><br><span class="line"><span class="comment">     * durable = true 表示队列持久化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">simpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;simple.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 工作队列模式 -------------------</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">workQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;work.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 发布订阅模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明fanout类型的交换机（发布订阅模式） */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>); <span class="comment">// 持久化，不自动删除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueueA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queueA&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueueB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queueB&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBindingA</span><span class="params">(FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueueA()).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBindingB</span><span class="params">(FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueueB()).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 路由模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明direct类型的交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">routeQueueRed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;route.queue.red&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">routeQueueBlue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;route.queue.blue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">routeBindingRed</span><span class="params">(DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(routeQueueRed()).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">routeBindingBlue</span><span class="params">(DirectExchange directExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(routeQueueBlue()).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 主题模式 -------------------</span></span><br><span class="line">    <span class="comment">/** 声明topic类型的交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topic.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueueChina</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue.china&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBindingChina</span><span class="params">(TopicExchange topicExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueueChina()).to(topicExchange).with(<span class="string">&quot;china.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- RPC模式 -------------------</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">rpcExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;rpc.exchange&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">rpcQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;rpc.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">rpcBinding</span><span class="params">(DirectExchange rpcExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(rpcQueue()).to(rpcExchange).with(<span class="string">&quot;rpc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生产者代码</strong>‌（OrderProducer.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 通用持久化消息发送方法 -------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机名称（直接模式传空字符串）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey 路由键（或队列名称）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendPersistentMessage</span><span class="params">(String exchange, String routingKey, String message)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message, msg -&gt; &#123;</span><br><span class="line">            msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================== 各模式具体实现 ===================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 简单队列模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToSimpleQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;&quot;</span>, <span class="string">&quot;simple.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 工作队列模式（与简单队列共用生产者）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToWorkQueue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;&quot;</span>, <span class="string">&quot;work.queue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 发布订阅模式（Fanout）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToFanout</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;fanout.exchange&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 路由模式（Direct）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToDirectRed</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;direct.exchange&quot;</span>, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToDirectBlue</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;direct.exchange&quot;</span>, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 主题模式（Topic）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToTopicChinaNews</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToTopicWeather</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        sendPersistentMessage(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;global.weather&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. RPC模式</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sendRpcRequest</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置响应队列（自动创建临时队列）</span></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate.convertSendAndReceive(</span><br><span class="line">            <span class="string">&quot;rpc.exchange&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rpc&quot;</span>,</span><br><span class="line">            message,</span><br><span class="line">            msg -&gt; &#123;</span><br><span class="line">                msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="keyword">return</span> msg;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消费者代码</strong>‌（OrderConsumer.java）‌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================== 各模式监听实现 ===================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 简单队列监听</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleSimpleMessage</span><span class="params">(<span class="meta">@Payload</span> String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[简单队列] 收到消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 工作队列监听（启动两个实例测试负载均衡）</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">worker1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[工作队列] Worker1 收到: &quot;</span> + message);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">worker2</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[工作队列] Worker2 收到: &quot;</span> + message);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 发布订阅模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queueA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutReceiverA</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[发布订阅] 订阅者A收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queueB&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutReceiverB</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[发布订阅] 订阅者B收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 路由模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;route.queue.red&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeRedReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[路由模式] Red队列收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;route.queue.blue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeBlueReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[路由模式] Blue队列收到: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 主题模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue.china&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicChinaReceiver</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[主题模式] 中国相关消息: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. RPC模式处理</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;rpc.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRpcRequest</span><span class="params">(String request)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[RPC模式] 收到请求: &quot;</span> + request);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Processed: &quot;</span> + request.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerService producer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 测试简单队列</span></span><br><span class="line">        producer.sendToSimpleQueue(<span class="string">&quot;简单模式测试消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 测试工作队列（发送10条消息观察负载均衡）</span></span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">11</span>).forEach(i -&gt; </span><br><span class="line">            producer.sendToWorkQueue(<span class="string">&quot;工作消息#&quot;</span> + i)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 测试发布订阅</span></span><br><span class="line">        producer.sendToFanout(<span class="string">&quot;广播消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 测试路由模式</span></span><br><span class="line">        producer.sendToDirectRed(<span class="string">&quot;红色警报&quot;</span>);</span><br><span class="line">        producer.sendToDirectBlue(<span class="string">&quot;蓝色通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 测试主题模式</span></span><br><span class="line">        producer.sendToTopicChinaNews(<span class="string">&quot;中国要闻&quot;</span>);</span><br><span class="line">        producer.sendToTopicWeather(<span class="string">&quot;全球天气报告&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 测试RPC模式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">response</span> <span class="operator">=</span> producer.sendRpcRequest(<span class="string">&quot;hello rpc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[RPC响应] 收到回复: &quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有消息均满足：</p>
<ul>
<li>队列重启后仍然存在（队列持久化）</li>
<li>消息在服务器重启后不会丢失（消息持久化）</li>
<li>交换机声明为持久化（重启后自动重建）</li>
</ul>
</li>
</ol>
<h4 id="Kafka‌"><a href="#Kafka‌" class="headerlink" title="Kafka‌"></a><strong>Kafka‌</strong></h4><ol>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springcloud-kafka-demo</span><br><span class="line">├── src/main/java</span><br><span class="line">│   ├── com/example/demo</span><br><span class="line">│   │   ├── config/CustomBindings.java  # 自定义消息通道绑定</span><br><span class="line">│   │   ├── handler/MessageProducer.java  # 消息生产者</span><br><span class="line">│   │   ├── handler/MessageConsumer.java  # 消息消费者</span><br><span class="line">│   │   ├── exception/ErrorHandler.java  # 异常处理</span><br><span class="line">│   │   └── DemoApplication.java  # 启动类</span><br><span class="line">├── src/main/resources</span><br><span class="line">│   ├── application.yml  # 全模式配置</span><br><span class="line">└── pom.xml  # Maven 依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖配置（pom.xml）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Stream + Kafka Binder --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息序列化支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-schema-registry-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全模式配置（application.yml）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 定义消息通道绑定（支持多模式）</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 模式1: 发布-订阅（默认行为）</span></span><br><span class="line">        <span class="attr">pubsub-output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">pubsub-topic</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">        <span class="attr">pubsub-input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">pubsub-topic</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span>  <span class="comment"># 消费者组负载均衡</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment"># 模式2: 消息分区（生产者指定分区键）</span></span><br><span class="line">        <span class="attr">partition-output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">partition-topic</span></span><br><span class="line">          <span class="attr">producer:</span></span><br><span class="line">            <span class="attr">partition-key-expression:</span> <span class="string">headers[&#x27;partitionKey&#x27;]</span>  <span class="comment"># 按头信息分区</span></span><br><span class="line">            <span class="attr">partition-count:</span> <span class="number">3</span>  <span class="comment"># 分区总数</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment"># 模式3: 死信队列（DLQ）</span></span><br><span class="line">        <span class="attr">error-input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error-topic</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="attr">max-attempts:</span> <span class="number">3</span>  <span class="comment"># 最大重试次数</span></span><br><span class="line">            <span class="attr">back-off-initial-interval:</span> <span class="number">2000</span>  <span class="comment"># 重试间隔</span></span><br><span class="line">            <span class="attr">dlq-name:</span> <span class="string">error-dlq</span>  <span class="comment"># 死信队列名</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="string">localhost:9092</span></span><br><span class="line">          <span class="attr">auto-create-topics:</span> <span class="literal">true</span>  <span class="comment"># 自动创建Topic</span></span><br><span class="line">          <span class="attr">configuration:</span></span><br><span class="line">            <span class="comment"># 消息持久化配置（默认已开启，此处调整保留策略）</span></span><br><span class="line">            <span class="attr">log.retention.hours:</span> <span class="number">168</span>  <span class="comment"># 保留7天</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义通道绑定（CustomBindings.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomBindings</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">PUBSUB_OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;pubsub-output&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">PARTITION_OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;partition-output&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ERROR_INPUT</span> <span class="operator">=</span> <span class="string">&quot;error-input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(PUBSUB_OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">pubsubOutput</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(PARTITION_OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">partitionOutput</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(ERROR_INPUT)</span></span><br><span class="line">    SubscribableChannel <span class="title function_">errorInput</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者示例（MessageProducer.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomBindings bindings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式1: 发布订阅消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPubSub</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        bindings.pubsubOutput().send(MessageBuilder</span><br><span class="line">                .withPayload(message)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式2: 分区消息（按Key分发到不同分区）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPartition</span><span class="params">(String message, String partitionKey)</span> &#123;</span><br><span class="line">        bindings.partitionOutput().send(MessageBuilder</span><br><span class="line">                .withPayload(message)</span><br><span class="line">                .setHeader(<span class="string">&quot;partitionKey&quot;</span>, partitionKey)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者示例（MessageConsumer.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConsumer</span> &#123;</span><br><span class="line">    <span class="comment">// 模式1: 订阅同一Topic的多个消费者组</span></span><br><span class="line">    <span class="meta">@StreamListener(target = CustomBindings.PUBSUB_INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePubSub</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PubSub Received: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模式3: 错误处理（自动路由到DLQ）</span></span><br><span class="line">    <span class="meta">@StreamListener(target = CustomBindings.ERROR_INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟消费失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常处理器（ErrorHandler.java）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 全局异常捕获（发送到DLQ）</span></span><br><span class="line">    <span class="meta">@ServiceActivator(inputChannel = &quot;errorChannel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleError</span><span class="params">(ErrorMessage errorMessage)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;进入死信队列: &quot;</span> + errorMessage.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>运行验证</strong>：</p>
<ol>
<li><p><strong>启动 Kafka 服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kafka -p 9092:9092 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 bitnami/kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发送测试消息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试发布-订阅</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pubsub&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pubsub</span><span class="params">(<span class="meta">@RequestParam</span> String msg)</span> &#123;</span><br><span class="line">        producer.sendPubSub(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PubSub Sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试分区消息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/partition&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">partition</span><span class="params">(<span class="meta">@RequestParam</span> String msg, String key)</span> &#123;</span><br><span class="line">        producer.sendPartition(msg, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Partition Sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>观察消息行为</strong>‌</p>
<ul>
<li>‌<strong>发布-订阅</strong>‌：启动多个实例，观察同一消息被所有实例消费</li>
<li>‌<strong>分区消费</strong>‌：同一消费者组的实例分摊不同分区消息</li>
<li>‌<strong>死信队列</strong>‌：访问 <code>/error</code> 接口触发异常，消息进入 <code>error-dlq</code></li>
</ul>
</li>
</ol>
<p><strong>模式对照表</strong>:</p>
<table>
<thead>
<tr>
<th><strong>模式</strong>‌</th>
<th>‌<strong>实现方式</strong>‌</th>
<th>‌<strong>配置关键点</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>发布-订阅</td>
<td>多个消费者组订阅同一Topic</td>
<td>不设置<code>group</code>或使用不同<code>group</code>名</td>
</tr>
<tr>
<td>消费者组负载均衡</td>
<td>同一<code>group</code>的多个实例共享消费</td>
<td><code>spring.cloud.stream.bindings.input.group</code></td>
</tr>
<tr>
<td>消息分区</td>
<td>生产者指定分区键，消费者设置实例数</td>
<td><code>partition-key-expression</code> + <code>partition-count</code></td>
</tr>
<tr>
<td>死信队列（DLQ）</td>
<td>消费失败时自动转发到指定队列</td>
<td><code>max-attempts</code> + <code>dlq-name</code></td>
</tr>
<tr>
<td>消息持久化</td>
<td>Kafka默认持久化，保留策略通过<code>log.retention.hours</code>控制</td>
<td>配置文件中的<code>log.retention.hours</code></td>
</tr>
</tbody></table>
<blockquote>
<p>Spring Cloud Stream 默认实现消息持久化，Kafka 的副本机制（replication）需额外配置。</p>
</blockquote>
<h3 id="十、Spring-Cloud中组件的执行"><a href="#十、Spring-Cloud中组件的执行" class="headerlink" title="十、Spring Cloud中组件的执行"></a>十、Spring Cloud中组件的执行</h3><h4 id="1-‌Spring-Cloud-Config（配置中心）"><a href="#1-‌Spring-Cloud-Config（配置中心）" class="headerlink" title="1. ‌Spring Cloud Config（配置中心）"></a>1. ‌Spring Cloud Config（配置中心）</h4><p>‌<strong>作用阶段</strong>‌：项目初始化<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>提供集中化的外部配置管理，支持从Git&#x2F;SVN等仓库动态加载配置文件‌</li>
<li>通过<code>@RefreshScope</code>实现配置热更新，避免服务重启‌<br>‌<strong>典型场景</strong>‌：微服务启动时从Config Server拉取数据库连接、日志级别等配置‌</li>
</ul>
<h4 id="2-‌Eureka（服务注册与发现）"><a href="#2-‌Eureka（服务注册与发现）" class="headerlink" title="2. ‌Eureka（服务注册与发现）"></a>2. ‌Eureka（服务注册与发现）</h4><p>‌<strong>作用阶段</strong>‌：服务启动<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>‌<strong>服务端</strong>‌：维护服务注册表，记录所有可用服务实例的元数据（如IP、端口）‌</li>
<li>‌<strong>客户端</strong>‌：服务启动后向Eureka注册自身信息，并定期发送心跳（默认30秒）保持活性‌</li>
<li>支持集群部署，通过自我保护机制防止因网络波动误判服务失效‌</li>
</ul>
<h4 id="3-‌Ribbon（客户端负载均衡）"><a href="#3-‌Ribbon（客户端负载均衡）" class="headerlink" title="3. ‌Ribbon（客户端负载均衡）"></a>3. ‌Ribbon（客户端负载均衡）</h4><p>‌<strong>作用阶段</strong>‌：服务间调用<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>集成于服务消费者，根据配置的策略（如轮询、随机、加权）选择目标服务实例‌</li>
<li>与Eureka配合，动态感知服务实例列表变化‌<br>‌<strong>示例</strong>‌：消费者通过<code>RestTemplate</code>调用服务时，Ribbon自动实现负载均衡‌</li>
</ul>
<h4 id="4-‌OpenFeign（声明式HTTP调用）"><a href="#4-‌OpenFeign（声明式HTTP调用）" class="headerlink" title="4. ‌OpenFeign（声明式HTTP调用）"></a>4. ‌OpenFeign（声明式HTTP调用）</h4><p>‌<strong>作用阶段</strong>‌：服务间调用<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>基于接口和注解简化HTTP调用，自动整合Ribbon实现负载均衡‌</li>
<li>支持与Hystrix熔断器无缝集成，通过<code>fallback</code>定义降级逻辑‌<br>‌<strong>优势</strong>‌：相比原生Ribbon+RestTemplate，减少模板代码，提升可读性‌</li>
</ul>
<h4 id="5-‌Hystrix（熔断与降级）"><a href="#5-‌Hystrix（熔断与降级）" class="headerlink" title="5. ‌Hystrix（熔断与降级）"></a>5. ‌Hystrix（熔断与降级）</h4><p>‌<strong>作用阶段</strong>‌：服务调用异常时<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>‌<strong>熔断</strong>‌：当服务调用失败率超过阈值时，自动切断链路，防止雪崩效应‌</li>
<li>‌<strong>降级</strong>‌：定义备用逻辑（如缓存数据），在服务不可用时快速响应‌</li>
<li>‌<strong>监控</strong>‌：通过Hystrix Dashboard实时查看熔断状态和指标‌</li>
</ul>
<h4 id="6-‌Spring-Cloud-Gateway（API网关）"><a href="#6-‌Spring-Cloud-Gateway（API网关）" class="headerlink" title="6. ‌Spring Cloud Gateway（API网关）"></a>6. ‌Spring Cloud Gateway（API网关）</h4><p>‌<strong>作用阶段</strong>‌：外部请求入口<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>‌<strong>路由</strong>‌：根据路径、Header等规则将请求转发至具体服务‌</li>
<li>‌<strong>过滤</strong>‌：实现鉴权、限流、日志记录等统一处理‌</li>
<li>‌<strong>整合</strong>‌：与Eureka协作动态发现服务，支持熔断和重试机制‌</li>
</ul>
<h4 id="7-‌消息队列MQ（异步通信与解耦）"><a href="#7-‌消息队列MQ（异步通信与解耦）" class="headerlink" title="7. ‌消息队列MQ（异步通信与解耦）"></a>7. ‌消息队列MQ（异步通信与解耦）</h4><p>‌<strong>作用阶段</strong>‌：异步处理与事件驱动<br>‌<strong>角色</strong>‌：</p>
<ul>
<li>‌<strong>解耦</strong>‌：生产者与消费者通过消息队列通信，降低服务间直接依赖</li>
<li>‌<strong>削峰填谷</strong>‌：缓冲突发流量，避免系统过载</li>
<li>‌<strong>可靠性</strong>‌：通过ACK机制、重试策略保证消息不丢失</li>
</ul>
<h4 id="总结顺序"><a href="#总结顺序" class="headerlink" title="总结顺序"></a>总结顺序</h4><p>‌<strong>配置管理</strong>‌（Spring Cloud Config） → 2. ‌<strong>服务注册</strong>‌（Eureka） → 3. ‌<strong>负载均衡</strong>‌（Ribbon&#x2F;OpenFeign） → 4. ‌<strong>熔断降级</strong>‌（Hystrix） → 5. ‌<strong>网关路由</strong>‌（Gateway） → 6. ‌<strong>异步通信</strong>‌（MQ）</p>
<p><strong>容器化部署</strong>Docker、Kubernetes</p>
<p><strong>‌‌‌安全认证体系</strong>OAuth2.0、JWT</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Vue3 实际开发模板</title>
    <url>/blog2025.github.io/2025/05/28/Vue3%20%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="Vue3-开发模板"><a href="#Vue3-开发模板" class="headerlink" title="Vue3 开发模板"></a>Vue3 开发模板</h2><p>以下是一个完整的、可直接运行的 Vue3 项目配置示例，实现了开发&#x2F;生产环境分离和 axios 封装：</p>
<hr>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">my-vue-project/</span><br><span class="line">├── public/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── utils/</span><br><span class="line">│   │   └── request.js    # axios 封装核心</span><br><span class="line">│   ├── views/</span><br><span class="line">│   │   └── HelloWorld.vue  # 示例页面</span><br><span class="line">│   └── main.js</span><br><span class="line">├── .env.development      # 开发环境配置</span><br><span class="line">├── .env.production       # 生产环境配置</span><br><span class="line">└── vue.config.js         # 代理配置</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-环境配置文件"><a href="#1-环境配置文件" class="headerlink" title="1. 环境配置文件"></a>1. 环境配置文件</h3><p><strong><code>.env.development</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NODE_ENV=development</span><br><span class="line">VUE_APP_API_BASE=/api</span><br><span class="line">VUE_APP_BASE_URL=http://localhost:3000</span><br></pre></td></tr></table></figure>

<p><strong><code>.env.production</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line">VUE_APP_API_BASE=https://api.your-domain.com</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-vue-config-js-开发环境代理"><a href="#2-vue-config-js-开发环境代理" class="headerlink" title="2. vue.config.js 开发环境代理"></a>2. <code>vue.config.js</code> 开发环境代理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">	<span class="attr">port</span>: <span class="number">9090</span>,  <span class="comment">// 前端本地服务端口（仅开发环境生效）</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_URL</span>,<span class="comment">//后端服务地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-axios-封装-src-utils-request-js"><a href="#3-axios-封装-src-utils-request-js" class="headerlink" title="3.  (axios 封装)src/utils/request.js"></a>3.  (axios 封装)<code>src/utils/request.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span> <span class="comment">// 如果使用 Element Plus</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_API_BASE</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 携带 token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理业务逻辑错误</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(response.<span class="property">data</span>.<span class="property">message</span> || <span class="string">&#x27;未知错误&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">data</span>.<span class="property">message</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理 HTTP 状态码错误</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(error.<span class="property">message</span> || <span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装常用方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> service.<span class="title function_">get</span>(url, &#123; params &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> service.<span class="title function_">post</span>(url, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-示例页面-src-views-HelloWorld-vue"><a href="#4-示例页面-src-views-HelloWorld-vue" class="headerlink" title="4. 示例页面 src/views/HelloWorld.vue"></a>4. 示例页面 <code>src/views/HelloWorld.vue</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;fetchData&quot; :disabled=&quot;loading&quot;&gt;</span><br><span class="line">      &#123;&#123; loading ? &#x27;加载中...&#x27; : &#x27;获取数据&#x27; &#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div v-if=&quot;data&quot;&gt;</span><br><span class="line">      &lt;pre&gt;&#123;&#123; JSON.stringify(data, null, 2) &#125;&#125;&lt;/pre&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div v-if=&quot;error&quot; class=&quot;error&quot;&gt;</span><br><span class="line">      &#123;&#123; error &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; get &#125; from &#x27;@/utils/request&#x27;</span><br><span class="line"></span><br><span class="line">const data = ref(null)</span><br><span class="line">const loading = ref(false)</span><br><span class="line">const error = ref(null)</span><br><span class="line"></span><br><span class="line">const fetchData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    loading.value = true</span><br><span class="line">    const res = await get(&#x27;/data&#x27;)</span><br><span class="line">    data.value = res</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    error.value = err.message</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-运行与部署"><a href="#5-运行与部署" class="headerlink" title="5. 运行与部署"></a>5. 运行与部署</h3><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<ul>
<li>自动使用 <code>.env.development</code> 配置</li>
<li>请求 <code>/api/data</code> → 代理到 <code>http://localhost:3000/data</code></li>
</ul>
<h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<ul>
<li>自动使用 <code>.env.production</code> 配置</li>
<li>请求直接发送到 <code>https://api.your-domain.com/data</code></li>
</ul>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><table>
<thead>
<tr>
<th>文件&#x2F;配置项</th>
<th>作用说明</th>
<th>修改场景</th>
</tr>
</thead>
<tbody><tr>
<td>.env.development</td>
<td>开发环境配置</td>
<td>修改本地开发后端地址</td>
</tr>
<tr>
<td>.env.production</td>
<td>生产环境配置</td>
<td>部署时修改线上地址</td>
</tr>
<tr>
<td>vue.config.js 中的 proxy</td>
<td>开发环境代理配置</td>
<td>需要更改代理规则时修改</td>
</tr>
<tr>
<td>request.js 中的拦截器</td>
<td>统一处理认证&#x2F;错误&#x2F;响应</td>
<td>需要调整全局逻辑时修改</td>
</tr>
</tbody></table>
<hr>
<h3 id="优势说明"><a href="#优势说明" class="headerlink" title="优势说明"></a>优势说明</h3><ol>
<li><p>‌<strong>环境隔离</strong>‌</p>
<ul>
<li>开发环境使用代理解决跨域</li>
<li>生产环境直连正式 API 地址</li>
</ul>
</li>
<li><p>‌<strong>零代码修改部署</strong>‌<br>只需修改 <code>.env.production</code> 文件中的 <code>VUE_APP_API_BASE</code> 值即可切换生产环境地址</p>
</li>
<li><p>‌<strong>统一请求管理</strong>‌</p>
<ul>
<li>自动携带 Token</li>
<li>全局错误处理</li>
<li>统一响应格式处理</li>
</ul>
</li>
<li><p>‌<strong>开箱即用</strong>‌<br>开发者只需在页面中引用封装好的请求方法即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="title function_">post</span>(<span class="string">&#x27;/submit&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h2><p>上线部署后，浏览器的访问的 url （包括端口）是部署工具自动分配的，不需要也不能后续去改（因为存在审核的问题），后端的 api 可以通过 .env.production 去修改。</p>
<h3 id="‌一、前端-URL-的确定性‌"><a href="#‌一、前端-URL-的确定性‌" class="headerlink" title="‌一、前端 URL 的确定性‌"></a>‌<strong>一、前端 URL 的确定性</strong>‌</h3><ol>
<li><p>‌<strong>自动分配机制</strong>‌<br>前端上线后的访问 URL（含端口）由部署服务器配置决定，例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;  <span class="comment"># 此处定义实际访问端口（如 80/443）</span></span><br><span class="line">  <span class="attribute">server_name</span> your-domain.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>若需修改访问端口或域名，需调整服务器配置而非前端代码</li>
<li>前端代码中无需、也无法硬编码端口信息</li>
</ul>
</li>
<li><p>‌<strong>审核相关限制</strong>‌<br>若部署流程涉及运维审核（如企业发布流程），修改服务器配置可能需要审批，但本质上仍属于技术可调整范畴</p>
</li>
</ol>
<h3 id="‌二、后端-API-的可控性‌"><a href="#‌二、后端-API-的可控性‌" class="headerlink" title="‌二、后端 API 的可控性‌"></a>‌<strong>二、后端 API 的可控性</strong>‌</h3><ol>
<li><p>‌<strong>环境变量动态管理</strong>‌<br>后端接口地址通过 <code>.env.production</code> 中的 <code>VUE_APP_API_BASE</code> 配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .env.production</span></span><br><span class="line">VUE_APP_API_BASE = <span class="string">&#x27;https://api.new-domain.com&#x27;</span>  <span class="comment"># 直接修改此处即可</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改后需重新构建部署前端项目以生效</li>
</ul>
</li>
<li><p>‌<strong>无需后端服务调整</strong>‌<br>后端服务本身只需保持接口路径不变，前端通过环境变量指向新地址即可实现切换</p>
</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>✅ 前端 URL 由部署工具分配，修改需调整服务器配置<br>✅ 后端 API 地址通过环境变量灵活管理</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/blog2025.github.io/2025/05/28/TypeScript/</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/typescript/ts-tutorial.html">TypeScript 教程 1</a></p>
<p><a href="https://typescript.p6p.net/about/experience.html">TypeScript 教程 2</a></p>
<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>TypeScript 是基于 JavaScript 语言的编程语言。目的是增强 JavaScript 的功能。</p>
<p>TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，</p>
<p>TypeScript 在 JavaScript 的基础上添加了一个独立的<strong>类型</strong>（type）系统。</p>
<p>TypeScript 设计目标是开发<strong>大型应用</strong>。</p>
<p>TypeScript 支持 ES6 标准。</p>
<p>TypeScript 是一种面向对象的编程语言。</p>
<p>运行逻辑：TypeScript -&gt; Javascript（编译）</p>
<p>TypeScript 脚本文件使用<code>.ts</code>后缀名，JavaScript 脚本文件使用<code>.js</code>后缀名。</p>
<p>tsc 编译器的作用就是把<code>.ts</code>脚本转变成<code>.js</code>脚本。（<a href="https://typescript.p6p.net/typescript-tutorial/tsc.html">tsc命令</a>）</p>
<p><code>tsconfig.json</code>是 TypeScript 项目的<a href="https://typescript.p6p.net/typescript-tutorial/tsconfig.json.html">配置文件</a>，放在项目的根目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line">//检查版本</span><br><span class="line">tsc -v</span><br><span class="line"></span><br><span class="line">//编译（编译结束后就会生成一个同名.js脚本文件）</span><br><span class="line">tsc app.ts(文件名)</span><br><span class="line"></span><br><span class="line">//编译多个脚本</span><br><span class="line">tsc file1.ts file2.ts file3.ts</span><br><span class="line"></span><br><span class="line">//将多个 TypeScript 脚本编译成一个 JavaScript 文件，使用--outFile参数。</span><br><span class="line">tsc file1.ts file2.ts --outFile app.js</span><br><span class="line"></span><br><span class="line">//--outDir参数可以指定保存到其他目录。</span><br><span class="line">tsc app.ts --outDir dist</span><br><span class="line"></span><br><span class="line">//使用--target参数，指定编译后的 JavaScript 版本。建议使用es2015</span><br><span class="line">tsc --target es2015 app.ts</span><br><span class="line"></span><br><span class="line">//编译报错，依旧会生成同名.js文件，</span><br><span class="line">//可以使用--noEmitOnError参数达到一旦报错就停止编译，不生成编译产物</span><br><span class="line">tsc --noEmitOnError app.ts</span><br><span class="line"></span><br><span class="line">//--noEmit参数，只检查类型是否正确，不生成 JavaScript 文件。</span><br><span class="line">tsc --noEmit app.ts</span><br><span class="line"></span><br><span class="line">//tsconfig.json</span><br><span class="line">//TypeScript 允许将tsc的编译参数，写在配置文件tsconfig.json。只要当前目录有这个文件，tsc就会自动读取，所以运行时可以不写参数。</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;file1.ts&quot;</span>, <span class="string">&quot;file2.ts&quot;</span>],</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h2><h3 id="类型：（严格）"><a href="#类型：（严格）" class="headerlink" title="类型：（严格）"></a>类型：（严格）</h3><p>类型（type）指的是一组具有相同特征的值。如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。</p>
<p>TypeScript 的类型其实更像是 Java 里的变量类型（int、String等），严格限制定义的变量必须是对应类型的值。如：（静态性）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">x = <span class="string">&quot;hellow&quot;</span></span><br><span class="line"><span class="comment">//报错：x 已经被定义为 number 类型，无法再赋值为 String 类型</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 的类型则没有这个限制，如：（动态性）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">x = <span class="string">&quot;hellow&quot;</span></span><br><span class="line"><span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure>

<p>TypeScript 引入静态类型这个东西，目的为：</p>
<ul>
<li><p>就是为了在编码阶段去提前发现和解决问题。（节省程序员时间）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">message</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">messege</span>); <span class="comment">// 在 TypeScript 中报错（前后的字段不一致）</span></span><br><span class="line"><span class="comment">//在 JavaScript 中则不会报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> result = a + b; <span class="comment">// 在 TypeScript 中报错（不同类型相加）</span></span><br><span class="line"><span class="comment">//在 JavaScript 中则不会报错</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">find</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 在 TypeScript 中报错（未发现对应方法）</span></span><br><span class="line"><span class="comment">//在 JavaScript 中则会在运行阶段才会报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有利于代码的静态分析。（不必运行代码就可确定变量类型，这点在大型项目尤为重要）</p>
</li>
<li><p>方便 集成开发环境 IDE 做到自动补全和语法提示。</p>
</li>
<li><p>方便程序员直接观看代码确定代码作用。</p>
</li>
<li><p>方便代码重构</p>
</li>
</ul>
<p>TypeScript 引入静态类型的缺点：</p>
<ul>
<li>丧失 JavaScript 的灵活性（类型定义）</li>
<li>增加编程工作量</li>
<li>学习成本更高</li>
<li>引入了“单独校验类型正确”的编译步骤，而 JavaScript 直接就可在引擎上运行</li>
<li>兼容性问题（过去的 JavaScript 代码）</li>
</ul>
<h3 id="接口：Interface"><a href="#接口：Interface" class="headerlink" title="接口：Interface"></a>接口：Interface</h3><p>接口可以定义属性和方法，还可以通过 <code>implements</code> 关键字实现接口，或者通过 <code>extends</code> 进行扩展，便于定义复杂的数据类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举：Enum"><a href="#枚举：Enum" class="headerlink" title="枚举：Enum"></a>枚举：Enum</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure>

<h3 id="元组：Tuple"><a href="#元组：Tuple" class="headerlink" title="元组：Tuple"></a>元组：Tuple</h3><p>元组允许定义具有固定数量和类型的数组。它适用于需要固定数据结构的场景，比如坐标或 RGB 颜色值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">point</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">10</span>, <span class="number">20</span>];</span><br></pre></td></tr></table></figure>

<h3 id="访问控制修饰符-Access-Modifiers"><a href="#访问控制修饰符-Access-Modifiers" class="headerlink" title="访问控制修饰符 (Access Modifiers)"></a>访问控制修饰符 (Access Modifiers)</h3><p>TypeScript 在类中提供了 <code>public</code>、<code>private</code> 和 <code>protected</code> 修饰符，允许控制属性或方法的可见性，支持更好的封装。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类-Abstract-Classes"><a href="#抽象类-Abstract-Classes" class="headerlink" title="抽象类 (Abstract Classes)"></a>抽象类 (Abstract Classes)</h3><p>TypeScript 支持抽象类，抽象类<strong>不能直接实例化</strong>，需要由子类实现。抽象类适用于定义通用行为和抽象方法的类层次结构。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 (Generics)"></a>泛型 (Generics)</h3><p>TypeScript 支持泛型，允许在类、接口和函数中使用参数化类型，使得代码可以适应不同的类型需求，同时保持类型安全。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>

<h3 id="模块和命名空间：import-和-export"><a href="#模块和命名空间：import-和-export" class="headerlink" title="模块和命名空间：import 和 export"></a>模块和命名空间：import 和 export</h3><p>TypeScript 提供了基于 <strong>ES6</strong> 的模块系统，使用 <code>import</code> 和 <code>export</code> 导入和导出模块。此外，TypeScript 还支持命名空间（Namespace），用于组织代码和避免命名冲突。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;&#125; <span class="keyword">from</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="类型守卫-Type-Guards"><a href="#类型守卫-Type-Guards" class="headerlink" title="类型守卫 (Type Guards)"></a>类型守卫 (Type Guards)</h3><p>TypeScript 提供了类型守卫，可以在代码中检查变量类型，帮助编译器推断更加具体的类型。这对于联合类型尤为重要。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="title function_">toFixed</span>(<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可选链和空值合并运算符"><a href="#可选链和空值合并运算符" class="headerlink" title="可选链和空值合并运算符"></a>可选链和空值合并运算符</h3><p>TypeScript 增加了 JavaScript 的可选链 (<code>?.</code>) 和空值合并运算符 (<code>??</code>)，简化了代码中对可能为 <code>null</code> 或 <code>undefined</code> 值的处理。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">address</span>: &#123; <span class="attr">city</span>: <span class="string">&quot;Wonderland&quot;</span> &#125; &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">city</span>); <span class="comment">// 如果 address 存在则输出 city，否则返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value ?? <span class="string">&quot;default&quot;</span>); <span class="comment">// 如果 value 为 null 或 undefined，则返回 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="基本结构："><a href="#基本结构：" class="headerlink" title="基本结构："></a>基本结构：</h2><h3 id="声明部分："><a href="#声明部分：" class="headerlink" title="声明部分："></a>声明部分：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式：let/const/var 变量名: 变量类型 = &quot;值&quot;;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<h3 id="函数声明："><a href="#函数声明：" class="headerlink" title="函数声明："></a>函数声明：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类声明："><a href="#类声明：" class="headerlink" title="类声明："></a>类声明：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口与类型别名："><a href="#接口与类型别名：" class="headerlink" title="接口与类型别名："></a>接口与类型别名：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">sound</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">makeSound</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型别名（Type Alias）：允许为对象类型、联合类型、交叉类型等定义别名。</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>

<h3 id="模块化："><a href="#模块化：" class="headerlink" title="模块化："></a>模块化：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Person</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="类型断言："><a href="#类型断言：" class="headerlink" title="类型断言："></a>类型断言：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (value <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<h3 id="泛型："><a href="#泛型：" class="headerlink" title="泛型："></a>泛型：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个单行注释</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="类型推断："><a href="#类型推断：" class="headerlink" title="类型推断："></a>类型推断：</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;  <span class="comment">// TypeScript 推断 num 为 number 类型</span></span><br></pre></td></tr></table></figure>

<h3 id="类型守卫："><a href="#类型守卫：" class="headerlink" title="类型守卫："></a>类型守卫：</h3><p>TypeScript 提供了类型守卫（如 typeof 和 instanceof），用于在运行时缩小变量的类型范围。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">any</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步编程："><a href="#异步编程：" class="headerlink" title="异步编程："></a>异步编程：</h3><p>使用 async&#x2F;await 语法来处理异步操作。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://example.com&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="错误处理："><a href="#错误处理：" class="headerlink" title="错误处理："></a>错误处理：</h3><p> try&#x2F;catch 块</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Something went wrong&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h2><h3 id="基础类型："><a href="#基础类型：" class="headerlink" title="基础类型："></a>基础类型：</h3><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>string</code></td>
<td align="left">表示文本数据</td>
<td align="left"><code>let name: string = &quot;Alice&quot;;</code></td>
</tr>
<tr>
<td align="left"><code>number</code></td>
<td align="left">表示数字，包括整数和浮点数</td>
<td align="left"><code>let age: number = 30;</code></td>
</tr>
<tr>
<td align="left"><code>boolean</code></td>
<td align="left">表示布尔值 <code>true</code> 或 <code>false</code></td>
<td align="left"><code>let isDone: boolean = true;</code></td>
</tr>
<tr>
<td align="left"><code>array</code></td>
<td align="left">表示相同类型的元素数组</td>
<td align="left"><code>let list: number[] = [1, 2, 3];</code></td>
</tr>
<tr>
<td align="left"><code>tuple</code></td>
<td align="left">表示已知类型和长度的数组</td>
<td align="left"><code>let person: [string, number] = [&quot;Alice&quot;, 30];</code></td>
</tr>
<tr>
<td align="left"><code>enum</code></td>
<td align="left">定义一组命名常量</td>
<td align="left"><code>enum Color &#123; Red, Green, Blue &#125;;</code></td>
</tr>
<tr>
<td align="left"><strong><code>any</code></strong></td>
<td align="left"><strong>任意类型，不进行类型检查</strong></td>
<td align="left"><code>let value: any = 42;</code></td>
</tr>
<tr>
<td align="left"><code>void</code></td>
<td align="left">无返回值（常用于函数）</td>
<td align="left"><code>function log(): void &#123;&#125;</code></td>
</tr>
<tr>
<td align="left"><code>null</code></td>
<td align="left">表示空值</td>
<td align="left"><code>let empty: null = null;</code></td>
</tr>
<tr>
<td align="left"><code>undefined</code></td>
<td align="left">表示未定义</td>
<td align="left"><code>let undef: undefined = undefined;</code></td>
</tr>
<tr>
<td align="left"><strong><code>never</code></strong></td>
<td align="left"><strong>表示不会有返回值</strong></td>
<td align="left"><code>function error(): never &#123; throw new Error(&quot;error&quot;); &#125;</code></td>
</tr>
<tr>
<td align="left"><code>object</code></td>
<td align="left">表示非原始类型</td>
<td align="left"><code>let obj: object = &#123; name: &quot;Alice&quot; &#125;;</code></td>
</tr>
<tr>
<td align="left"><code>union</code></td>
<td align="left">联合类型，表示一个变量可以是多种类型之一，通过&#96;</td>
<td align="left">&#96;符号实现。</td>
</tr>
<tr>
<td align="left"><code>intersection</code></td>
<td align="left">交叉类型，多个类型组成的一个新类型，使用符号<code>&amp;</code>表示，主要用途是表示对象的合成。</td>
<td align="left"><code>let x: number &amp; string;</code></td>
</tr>
<tr>
<td align="left"><strong><code>unknown</code></strong></td>
<td align="left"><strong>（严格版的any）不确定类型，需类型检查后再使用，不能直接调用<code>unknown</code>类型变量的方法和属性。</strong></td>
<td align="left"><code>let value: unknown = &quot;Hello&quot;;</code><br /><code>if (typeof value === &quot;string&quot;) &#123;   let message: string = value; &#125;</code></td>
</tr>
<tr>
<td align="left"><code>bight</code></td>
<td align="left">包含所有的大整数，与 number 类型不兼容。ES2020 标准</td>
<td align="left"><code>const x: bigint = 123n;</code><br/><code>const y: bigint = 0xffffn;</code></td>
</tr>
<tr>
<td align="left"><code>symbol</code></td>
<td align="left">包含所有的 Symbol 值。</td>
<td align="left"><code>const x: symbol = Symbol();</code></td>
</tr>
</tbody></table>
<ul>
<li><p>any：<strong>“顶层类型”（top type）</strong></p>
<p>表示没有任何限制，该类型的变量可以赋予任意类型的值。</p>
<p>应用场景：</p>
<ul>
<li>出于特殊原因，需要关闭某些变量的类型检查，就可以把该变量的类型设为<code>any</code>。</li>
<li>为了适配以前老的 JavaScript 项目，让代码快速迁移到 TypeScript，可以把变量类型设为<code>any</code>。</li>
</ul>
<p>问题：</p>
<ul>
<li><p>建议使用<code>let</code>和<code>var</code>声明变量时，如果不赋值，就一定要显式声明类型，否则可能存在安全隐患。</p>
</li>
<li><p><code>any</code>类型除了关闭类型检查，还有一个很大的问题，就是它会“污染”其他变量。它可以赋值给其他任何类型的变量（因为没有类型检查），导致其他变量出错。</p>
</li>
</ul>
</li>
<li><p>unknow：<strong>“顶层类型”（top type）”</strong></p>
<p>为了解决<code>any</code>类型“污染”其他变量的问题，TypeScript 3.0 引入了<code>unknown</code>类型，不像<code>any</code>那样自由，可以视为严格版的<code>any</code>。</p>
<p><code>unknown</code>类型跟<code>any</code>类型的不同之处在于，它不能直接使用，有以下几个限制：</p>
<ul>
<li><p><code>unknown</code>类型的变量，不能直接赋值给（除了<code>any</code>类型和<code>unknown</code>类型之外的）其他类型的变量。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="built_in">unknown</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">boolean</span> = v; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v2</span>: <span class="built_in">number</span> = v; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能直接调用<code>unknown</code>类型变量的方法和属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line">v1.<span class="property">foo</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>只有经过“类型缩小”，<code>unknown</code>类型变量才可以使用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//使用typeof a === &quot;number&quot;缩小范围到number</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r = a + <span class="number">10</span>; <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>unknown</code>类型变量能够进行的运算是有限的，只能进行比较运算（运算符<code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code>、<code>||</code>、<code>&amp;&amp;</code>、<code>?</code>）、取反运算（运算符<code>!</code>）、<code>typeof</code>运算符和<code>instanceof</code>运算符这几种，其他运算都会报错。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a + <span class="number">1</span>; <span class="comment">// 报错</span></span><br><span class="line">a === <span class="number">1</span>; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>凡是需要设为<code>any</code>类型的地方，通常都应该优先考虑设为<code>unknown</code>类型。</p>
</li>
</ul>
</li>
<li><p>never：<strong>“底层类型（bottom type）”</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">never</span>;</span><br><span class="line"><span class="comment">//变量x的类型是never，就不可能赋给它任何值，否则都会报错。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<p>可以赋值给任意其他类型。（空集是任何集合的子集。）</p>
<p><code>never</code>类型是任何其他类型所共有的</p>
</li>
</ul>
</li>
<li><p>Object 和 object</p>
<ul>
<li><p>Object：代表 JavaScript 语言里面的广义对象。所有可以转成对象的值，都是<code>Object</code>类型，这囊括了几乎所有的值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Object</span>;</span><br><span class="line"></span><br><span class="line">obj = <span class="literal">true</span>;</span><br><span class="line">obj = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">obj = <span class="number">1</span>;</span><br><span class="line">obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line">obj = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">obj = <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span></span>) =&gt;</span> a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>object：代表 JavaScript 里面的狭义对象，即可以用字面量表示的对象，只包含对象、数组和函数，不包括原始类型的值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span>;</span><br><span class="line"></span><br><span class="line">obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line">obj = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">obj = <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span></span>) =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line">obj = <span class="literal">true</span>; <span class="comment">// 报错</span></span><br><span class="line">obj = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 报错</span></span><br><span class="line">obj = <span class="number">1</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Number 和 number</p>
<ul>
<li><p>Number <strong>对象</strong>：引用类型，是一个包装对象，用于包装基本数值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numObject</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> numObject);  <span class="comment">// 输出：&quot;object&quot;</span></span><br></pre></td></tr></table></figure>

<p>属性：Number.MAX_VALUE</p>
<p><strong>MAX_VALUE</strong>（最大）、<strong>MIN_VALUE</strong>（最小）、<strong>NaN</strong>（非数字）、<strong>NEGATIVE_INFINITY</strong>（负无穷大）、<strong>POSITIVE_INFINITY</strong>（正无穷大）、<strong>prototype</strong>（静态属性）、<strong>constructor</strong></p>
<p>方法：</p>
<p>toExponential()：把对象的值转换为指数计数法。</p>
<p> toFixed()：把数字转换为字符串，并对小数点指定位数。</p>
<p>toLocaleString()：把数字转换为字符串，使用本地数字格式顺序。</p>
<p>toPrecision()：把数字格式化为指定的长度。</p>
<p>toString()：把数字转换为字符串，使用指定的基数。数字的基数是 2 ~ 36 之间的整数。若省略该参数，则使用基数 10。</p>
<p>valueOf()：返回一个 Number 对象的原始数字值。</p>
</li>
<li><p><strong>基本类型</strong> number：原始数据类型，用于存储数值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numLiteral</span>: <span class="built_in">number</span> = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> numLiteral); <span class="comment">// 输出：&quot;number&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><a href="https://www.runoob.com/typescript/ts-string.html">String 对象：</a></p>
</li>
<li><p>type 命令</p>
<p><code>type</code>命令用来定义一个类型的别名。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//type命令为number类型定义了一个别名Age。这样就能像使用number一样，使用Age作为类型。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="title class_">Age</span> = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//别名不允许重名。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Color</span> = <span class="string">&quot;blue&quot;</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>别名的作用域是<strong>块级作用域</strong>。这意味着，代码块内部定义的别名，影响不到外部。</p>
</li>
<li><p>typeof</p>
<ul>
<li><p>JavaScript 语言中，typeof 运算符是一个一元运算符，返回一个字符串，代表操作数的类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1337</span>; <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;foo&quot;</span>; <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">parseInt</span>; <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(); <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">127n</span>; <span class="comment">// &quot;bigint&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>TypeScript 将<code>typeof</code>运算符移植到了类型运算，它的操作数依然是一个值，但是返回的不是字符串，而是该值的 TypeScript 类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="keyword">typeof</span> a; <span class="comment">// &#123; x: number &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="keyword">typeof</span> a.<span class="property">x</span>; <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>&amp;&amp;</code>与、<code>||</code>或、<code>！</code>非</p>
</li>
<li><p>三元运算符 (?)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Test</span> ? expr1 : expr2</span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span> − 指定的条件语句</span><br><span class="line">expr1 − 如果条件语句 <span class="title class_">Test</span> 返回 <span class="literal">true</span> 则返回该值</span><br><span class="line">expr2 − 如果条件语句 <span class="title class_">Test</span> 返回 <span class="literal">false</span> 则返回该值</span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol 类型：（ES 6）</p>
<p>类似于字符串，但是每一个 Symbol 值都是独一无二的，与其他任何值都不相等。</p>
<p>Symbol 值通过<code>Symbol()</code>函数生成。在 TypeScript 里面，Symbol 的类型使用<code>symbol</code>表示。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">x === y; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>命令声明的变量，推断类型为 <span class="built_in">symbol</span>。</span><br><span class="line"><span class="comment">// 类型为 symbol</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span>命令声明的变量，推断类型为 unique <span class="built_in">symbol</span>。</span><br><span class="line"><span class="comment">// 类型为 unique symbol</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="title class_">Symbol</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>unique symbol</code>，它表示单个的、某个具体的 Symbol 值。(只能用const声明，不能修改值)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每个声明为unique symbol类型的变量，它们的值都是不一样的，其实属于两个值类型。</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="变量作用域："><a href="#变量作用域：" class="headerlink" title="变量作用域："></a>变量作用域：</h3><ul>
<li><strong>全局作用域</strong> − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。</li>
<li><strong>类作用域</strong> − 这个变量也可以称为 <strong>字段</strong>。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</li>
<li><strong>局部作用域</strong> − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。</li>
</ul>
<h3 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h3><ul>
<li><p><strong>for…in ：</strong></p>
<p>for…in 语句用于一组值的集合或列表进行迭代输出。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">in</span> list) &#123; </span><br><span class="line">    <span class="comment">//语句 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">j</span>:<span class="built_in">any</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="attr">n</span>:<span class="built_in">any</span> = <span class="string">&quot;a b c&quot;</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(j <span class="keyword">in</span> n) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n[j])  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a b c</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>for…of</strong> </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someArray = [<span class="number">1</span>, <span class="string">&quot;string&quot;</span>, <span class="literal">false</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> someArray) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entry); <span class="comment">// 1, &quot;string&quot;, false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>forEach</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, idx, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// val: 当前值</span></span><br><span class="line">    <span class="comment">// idx：当前index</span></span><br><span class="line">    <span class="comment">// array: Array</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>every</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">list.<span class="title function_">every</span>(<span class="function">(<span class="params">val, idx, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// val: 当前值</span></span><br><span class="line">    <span class="comment">// idx：当前index</span></span><br><span class="line">    <span class="comment">// array: Array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Continues</span></span><br><span class="line">    <span class="comment">// Return false will quit the iteration</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>some</strong></p>
</li>
</ul>
<h3 id="数组类型："><a href="#数组类型：" class="headerlink" title="数组类型："></a>数组类型：</h3><h4 id="数组（array）："><a href="#数组（array）：" class="headerlink" title="数组（array）："></a>数组（array）：</h4><p>TypeScript 数组有一个根本特征：</p>
<p><strong>所有成员的类型必须相同</strong>，但是成员数量是不确定的，可以是无限数量的成员，也可以是零成员。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法1：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[];</span><br><span class="line"><span class="comment">//写法2：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>只读数组，const 断言</p>
<p>JavaScript 规定，<code>const</code>命令声明的数组变量是可以改变成员的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>TypeScript 允许声明只读数组，方法是在数组类型前面加上<code>readonly</code>关键字。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">// 报错</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>]; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多维数组</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="attr">multi</span>: <span class="built_in">number</span>[][] = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="元组（tuple）："><a href="#元组（tuple）：" class="headerlink" title="元组（tuple）："></a>元组（tuple）：</h4><p>它表示成员类型可以自由设置的数组，即<strong>数组的各个成员的类型可以不同</strong>。</p>
<p>元组<strong>必须明确声明每个成员的类型</strong>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">s</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>

<p>TypeScript 的区分方法是，成员类型写在<strong>方括号</strong>里面的就是元组，写在外面的就是数组。</p>
<ul>
<li><p>元组成员的类型可以添加问号后缀（<code>?</code>），表示该成员是可选的。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>?] = [<span class="number">1</span>];</span><br><span class="line"><span class="comment">//问号只能用于元组的尾部成员</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于需要声明每个成员的类型，所以大多数情况下，元组的成员数量是有限的。</p>
<p>使用<strong>扩展运算符（<code>...</code>）</strong>，可以表示不限成员数量的元组。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NamedNums</span> = [<span class="built_in">string</span>, ...<span class="built_in">number</span>[]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">NamedNums</span> = [<span class="string">&quot;A&quot;</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">NamedNums</span> = [<span class="string">&quot;B&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//扩展运算符用在元组的任意位置都可以</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>只读元组</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">type</span> t = <span class="keyword">readonly</span> [<span class="built_in">number</span>, <span class="built_in">string</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">type</span> t = <span class="title class_">Readonly</span>&lt;[<span class="built_in">number</span>, <span class="built_in">string</span>]&gt;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><p>无参函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;   <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用函数&quot;</span>) </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">test</span>()              <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>

<p>带参函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>可选参数函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params"><span class="attr">firstName</span>: <span class="built_in">string</span>, <span class="attr">lastName</span>?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>);  <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// 错误，参数太多了</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);  <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<p>rest 剩余参数函数：（…）</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params"><span class="attr">firstName</span>: <span class="built_in">string</span>, ...<span class="attr">restOfName</span>: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> employeeName = <span class="title function_">buildName</span>(<span class="string">&quot;Joseph&quot;</span>, <span class="string">&quot;Samuel&quot;</span>, <span class="string">&quot;Lucas&quot;</span>, <span class="string">&quot;MacKinzie&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>匿名函数：一个没有函数名的函数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带参数匿名函数：</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">msg</span>())</span><br><span class="line"><span class="comment">//带参数匿名函数：</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">function</span>(<span class="params"><span class="attr">a</span>:<span class="built_in">number</span>,<span class="attr">b</span>:<span class="built_in">number</span></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> a*b;  </span><br><span class="line">&#125;; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">res</span>(<span class="number">12</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">//匿名函数自调用：在函数后使用 () 即可：</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;Hello!!&quot;</span>;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)     </span><br><span class="line"> &#125;)()</span><br></pre></td></tr></table></figure>

<p>构造函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;return a * b&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> x = <span class="title function_">myFunction</span>(<span class="number">4</span>, <span class="number">3</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure>

<p>递归函数：在函数内调用函数本身。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params"><span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">number</span> &lt;= <span class="number">0</span>) &#123;         <span class="comment">// 停止执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;     </span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">number</span> * <span class="title function_">factorial</span>(<span class="built_in">number</span> - <span class="number">1</span>));     <span class="comment">// 调用自身</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">6</span>));      <span class="comment">// 输出 720</span></span><br></pre></td></tr></table></figure>

<p>Lambda 函数：<strong>箭头函数</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params"><span class="attr">x</span>:<span class="built_in">number</span></span>)=&gt;<span class="number">10</span> + x </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>(<span class="number">100</span>))      <span class="comment">//输出结果为 110</span></span><br><span class="line"><span class="comment">//实际</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> + x; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>(<span class="number">100</span>)); <span class="comment">//输出结果为 110</span></span><br></pre></td></tr></table></figure>

<p>函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params"><span class="attr">str</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params"><span class="attr">arr</span>: <span class="built_in">any</span>[]</span>): <span class="built_in">any</span>[];</span><br></pre></td></tr></table></figure>

<p>void 类型：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>never 类型：表示肯定不会出现的值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抛出错误的函数。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params"><span class="attr">msg</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无限执行的函数</span></span><br><span class="line"><span class="keyword">const</span> sing = <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sing&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="接口："><a href="#接口：" class="headerlink" title="接口："></a><a href="https://typescript.p6p.net/typescript-tutorial/interface.html">接口：</a></h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123; </span><br><span class="line">    <span class="attr">firstName</span>:<span class="built_in">string</span>, </span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">lastName</span>:<span class="built_in">string</span>, <span class="comment">//只读</span></span><br><span class="line">    <span class="attr">hah</span>?:<span class="built_in">string</span>,<span class="comment">//可选</span></span><br><span class="line">    <span class="attr">sayHi</span>: <span class="function">()=&gt;</span><span class="built_in">string</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="attr">customer</span>:<span class="title class_">IPerson</span> = &#123; </span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&quot;Hanks&quot;</span>, </span><br><span class="line">    <span class="attr">sayHi</span>: ():<span class="function"><span class="params">string</span> =&gt;</span>&#123;<span class="keyword">return</span> <span class="string">&quot;Hi there&quot;</span>&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Customer 对象 &quot;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customer.<span class="property">firstName</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customer.<span class="property">lastName</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customer.<span class="title function_">sayHi</span>())  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="attr">employee</span>:<span class="title class_">IPerson</span> = &#123; </span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&quot;Jim&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&quot;Blakes&quot;</span>, </span><br><span class="line">    <span class="attr">sayHi</span>: ():<span class="function"><span class="params">string</span> =&gt;</span>&#123;<span class="keyword">return</span> <span class="string">&quot;Hello!!!&quot;</span>&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Employee  对象 &quot;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="property">firstName</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="property">lastName</span>)</span><br></pre></td></tr></table></figure>

<p>接口单继承：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123; </span><br><span class="line">   <span class="attr">age</span>:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Musician</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123; </span><br><span class="line">   <span class="attr">instrument</span>:<span class="built_in">string</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> drummer = &lt;<span class="title class_">Musician</span>&gt;&#123;&#125;; </span><br><span class="line">drummer.<span class="property">age</span> = <span class="number">27</span> </span><br><span class="line">drummer.<span class="property">instrument</span> = <span class="string">&quot;Drums&quot;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年龄:  &quot;</span>+drummer.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喜欢的乐器:  &quot;</span>+drummer.<span class="property">instrument</span>)</span><br></pre></td></tr></table></figure>

<p>接口多继承：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IParent1</span> &#123; </span><br><span class="line">    <span class="attr">v1</span>:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IParent2</span> &#123; </span><br><span class="line">    <span class="attr">v2</span>:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">IParent1</span>, <span class="title class_">IParent2</span> &#123; &#125; </span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Iobj</span>:<span class="title class_">Child</span> = &#123; <span class="attr">v1</span>:<span class="number">12</span>, <span class="attr">v2</span>:<span class="number">23</span>&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value 1: &quot;</span>+<span class="title class_">Iobj</span>.<span class="property">v1</span>+<span class="string">&quot; value 2: &quot;</span>+<span class="title class_">Iobj</span>.<span class="property">v2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="类：class"><a href="#类：class" class="headerlink" title="类：class"></a>类：class</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">class_name</span> &#123; </span><br><span class="line">    <span class="comment">// 类作用域</span></span><br><span class="line">    <span class="comment">//字段</span></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123; </span><br><span class="line">    <span class="comment">// 字段 </span></span><br><span class="line">    <span class="attr">engine</span>:<span class="built_in">string</span>; </span><br><span class="line"> 	<span class="comment">//readonly id = &#x27;hello&#x27;;只读</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数 </span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">engine</span>:<span class="built_in">string</span></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">engine</span> = engine </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 方法 </span></span><br><span class="line">    <span class="title function_">disp</span>():<span class="built_in">void</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发动机为 :   &quot;</span>+<span class="variable language_">this</span>.<span class="property">engine</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化：new 出来</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123; </span><br><span class="line">   <span class="comment">// 字段</span></span><br><span class="line">   <span class="attr">engine</span>:<span class="built_in">string</span>; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 构造函数</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="attr">engine</span>:<span class="built_in">string</span></span>) &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">engine</span> = engine </span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 方法</span></span><br><span class="line">   <span class="title function_">disp</span>():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数中显示发动机型号  :   &quot;</span>+<span class="variable language_">this</span>.<span class="property">engine</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;XXSY1&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 访问字段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取发动机型号 :  &quot;</span>+obj.<span class="property">engine</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 访问方法</span></span><br><span class="line">obj.<span class="title function_">disp</span>()</span><br></pre></td></tr></table></figure>

<p>继承：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123; </span><br><span class="line">   <span class="title class_">Area</span>:<span class="built_in">number</span> </span><br><span class="line">   </span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="attr">a</span>:<span class="built_in">number</span></span>) &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">Area</span> = a </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123; </span><br><span class="line">   <span class="title function_">disp</span>():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;圆的面积:  &quot;</span>+<span class="variable language_">this</span>.<span class="property">Area</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">223</span>); </span><br><span class="line">obj.<span class="title function_">disp</span>()</span><br></pre></td></tr></table></figure>

<p>一个子类只能继承一个父类，但支持多重继承</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Root</span> &#123; </span><br><span class="line">   <span class="attr">str</span>:<span class="built_in">string</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Root</span> &#123;&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Child</span> &#123;&#125; <span class="comment">// 多重继承，继承了 Child 和 Root 类</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Leaf</span>(); </span><br><span class="line">obj.<span class="property">str</span> =<span class="string">&quot;hello&quot;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">str</span>)</span><br></pre></td></tr></table></figure>

<h4 id="方法重写：super（引用）"><a href="#方法重写：super（引用）" class="headerlink" title="方法重写：super（引用）"></a>方法重写：super（引用）</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrinterClass</span> &#123; </span><br><span class="line">   <span class="title function_">doPrint</span>():<span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父类的 doPrint() 方法。&quot;</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringPrinter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PrinterClass</span> &#123; </span><br><span class="line">   <span class="title function_">doPrint</span>():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">doPrint</span>() <span class="comment">// 调用父类的函数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子类的 doPrint()方法。&quot;</span>)</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态调用：static-关键字"><a href="#静态调用：static-关键字" class="headerlink" title="静态调用：static 关键字"></a>静态调用：static 关键字</h4><p>静态成员可以直接通过类名调用。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StaticMem</span> &#123;  </span><br><span class="line">   <span class="keyword">static</span> <span class="attr">num</span>:<span class="built_in">number</span>; </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span> <span class="title function_">disp</span>():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num 值为 &quot;</span>+ <span class="title class_">StaticMem</span>.<span class="property">num</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="title class_">StaticMem</span>.<span class="property">num</span> = <span class="number">12</span>     <span class="comment">// 初始化静态变量</span></span><br><span class="line"><span class="title class_">StaticMem</span>.<span class="title function_">disp</span>()       <span class="comment">// 调用静态方法</span></span><br></pre></td></tr></table></figure>

<h4 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h4><p>判断对象是否是指定的类型，如果是返回 true，否则返回 false。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; &#125; </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>() </span><br><span class="line"><span class="keyword">var</span> isPerson = obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj 对象是 Person 类实例化来的吗？ &quot;</span> + isPerson);</span><br></pre></td></tr></table></figure>

<h4 id="控制修饰符"><a href="#控制修饰符" class="headerlink" title="控制修饰符"></a>控制修饰符</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>（默认） : 公有，可以在任何地方被访问。</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> : 受保护，可以被其自身以及其子类访问。</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> : 私有，只能被其定义所在的类访问。</span><br></pre></td></tr></table></figure>

<h4 id="关键字-implements"><a href="#关键字-implements" class="headerlink" title="关键字 implements"></a>关键字 implements</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILoan</span> &#123; </span><br><span class="line">   <span class="attr">interest</span>:<span class="built_in">number</span> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgriLoan</span> <span class="keyword">implements</span> <span class="title class_">ILoan</span> &#123; </span><br><span class="line">   <span class="attr">interest</span>:<span class="built_in">number</span> </span><br><span class="line">   <span class="attr">rebate</span>:<span class="built_in">number</span> </span><br><span class="line">   </span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="attr">interest</span>:<span class="built_in">number</span>,<span class="attr">rebate</span>:<span class="built_in">number</span></span>) &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interest</span> = interest </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rebate</span> = rebate </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">AgriLoan</span>(<span class="number">10</span>,<span class="number">1</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;利润为 : &quot;</span>+obj.<span class="property">interest</span>+<span class="string">&quot;，抽成为 : &quot;</span>+obj.<span class="property">rebate</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现多接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> implement B,C&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getter-取和setter-存"><a href="#getter-取和setter-存" class="headerlink" title="getter 取和setter 存"></a>getter 取和setter 存</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  _name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承：extends"><a href="#继承：extends" class="headerlink" title="继承：extends"></a>继承：extends</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line">b.<span class="title function_">greet</span>(); <span class="comment">// &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="泛型类："><a href="#泛型类：" class="headerlink" title="泛型类："></a>泛型类：</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">  <span class="comment">//static defaultContents: Type; // 报错</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">value</span>: <span class="title class_">Type</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">contents</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="title class_">Box</span>(<span class="string">&quot;hello!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>静态成员不能使用泛型的类型参数。</p>
<h4 id="抽象类，抽象成员-abstract"><a href="#抽象类，抽象成员-abstract" class="headerlink" title="抽象类，抽象成员 abstract"></a>抽象类，抽象成员 abstract</h4><p>不能被实例化，只能当作其他类的模板。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>(); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确用法：</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">  amount = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"></span><br><span class="line">b.<span class="property">id</span>; <span class="comment">// 1</span></span><br><span class="line">b.<span class="property">amount</span>; <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<p>抽象类的子类也可以是抽象类，也就是说，抽象类可以继承其他抽象类。</p>
<h4 id="this-问题"><a href="#this-问题" class="headerlink" title="this 问题"></a>this 问题</h4><p>它表示该方法当前所在的对象。存在实例化后的不同对象a，b指向相同的方法，但返回的是不同的值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">a.<span class="title function_">getName</span>(); <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: a.<span class="property">getName</span>,</span><br><span class="line">&#125;;</span><br><span class="line">b.<span class="title function_">getName</span>(); <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object_name = &#123; </span><br><span class="line">    <span class="attr">key1</span>: <span class="string">&quot;value1&quot;</span>, <span class="comment">// 标量</span></span><br><span class="line">    <span class="attr">key2</span>?: <span class="string">&quot;value&quot;</span>,  <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">keyr</span>: <span class="string">&quot;va&quot;</span>,<span class="comment">//只读</span></span><br><span class="line">    <span class="attr">key3</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 函数</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">key4</span>:[<span class="string">&quot;content1&quot;</span>, <span class="string">&quot;content2&quot;</span>] <span class="comment">//集合</span></span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="attr">saygoodBye</span>: <span class="title function_">functiong</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object_name.<span class="property">key1</span>) </span><br><span class="line">object_name.<span class="title function_">sayHello</span>();</span><br><span class="line">object_name.<span class="property">saygoodBye</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;goodbye&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦声明了类型，对象赋值时，就不能缺少指定的属性，也不能有多余的属性。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">o1</span>: <span class="title class_">MyObj</span> = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">o2</span>: <span class="title class_">MyObj</span> = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span>, <span class="attr">z</span>: <span class="number">1</span> &#125;; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型：-1"><a href="#泛型：-1" class="headerlink" title="泛型："></a>泛型：</h3><p>允许在定义函数、类、接口等时使用占位符来表示类型，而不是具体的类型。</p>
<p>泛型是一种在编写可重用、灵活且类型安全的代码时非常有用的功能。</p>
<p>使用泛型的主要目的是为了处理不特定类型的数据，使得代码可以适用于<strong>多种</strong>数据类型而不失去类型检查。</p>
<p>泛型标识符：</p>
<ul>
<li><p><strong>T</strong>: 代表 “Type”，是最常见的泛型类型参数名。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>K, V</strong>: 用于表示键（Key）和值（Value）的泛型类型参数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">KeyValuePair</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="attr">key</span>: K;</span><br><span class="line">    <span class="attr">value</span>: V;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>E</strong>: 用于表示数组元素的泛型类型参数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> printArray&lt;E&gt;(<span class="attr">arr</span>: E[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>R</strong>: 用于表示函数返回值的泛型类型参数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> getResult&lt;R&gt;(<span class="attr">value</span>: R): R &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>U, V</strong>: 通常用于表示第二、第三个泛型类型参数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> combine&lt;U, V&gt;(<span class="attr">first</span>: U, <span class="attr">second</span>: V): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>泛型函数（Generic Functions）：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型函数</span></span><br><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: Hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberResult = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberResult); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure>

<p>泛型接口（Generic Interfaces）：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Pair</span>&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="attr">first</span>: T;</span><br><span class="line">    <span class="attr">second</span>: U;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">pair</span>: <span class="title class_">Pair</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = &#123; <span class="attr">first</span>: <span class="string">&quot;hello&quot;</span>, <span class="attr">second</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pair); <span class="comment">// 输出: &#123; first: &#x27;hello&#x27;, second: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<p> 泛型类（Generic Classes）：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">value</span>: T</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;TypeScript&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: TypeScript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承泛型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Box</span>&lt;<span class="built_in">unknown</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>泛型约束（Generic Constraints）：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> logLength&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的使用</span></span><br><span class="line"><span class="title function_">logLength</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的使用，因为数字没有 length 属性</span></span><br><span class="line"><span class="title function_">logLength</span>(<span class="number">42</span>); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>

<p>泛型与默认值：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">function</span> defaultValue&lt;T = <span class="built_in">string</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用带默认值的泛型函数</span></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">defaultValue</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 推断为 string 类型</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">defaultValue</span>(<span class="number">42</span>);      <span class="comment">// 推断为 number 类型</span></span><br></pre></td></tr></table></figure>

<p>数组的泛型表示：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>使用注意点：</p>
<ul>
<li><p><strong>尽量少用泛型。</strong></p>
<p>泛型会加大代码的复杂性，使其变得难读难写。</p>
</li>
<li><p><strong>类型参数越少越好。</strong></p>
</li>
<li><p><strong>类型参数需要使用至少两次，否则还不如不设置泛型</strong></p>
</li>
<li><p><strong>泛型可以嵌套。类型参数可以是另一个泛型。</strong></p>
</li>
</ul>
<h3 id="命名空间："><a href="#命名空间：" class="headerlink" title="命名空间："></a>命名空间：</h3><p>解决重名问题</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">SomeNameSpaceName</span> &#123; </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ISomeInterfaceName</span> &#123;      &#125;  </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SomeClassName</span> &#123;      &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个命名空间 SomeNameSpaceName，如果我们需要在外部可以调用 SomeNameSpaceName 中的类和接口，则需要在类和接口添加 export 关键字。</span></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title class_">SomeNameSpaceName</span>.<span class="property">SomeClassName</span>;</span><br></pre></td></tr></table></figure>

<p>多个同名的 namespace 会自动合并，这一点跟 interface 一样。</p>
<h3 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h3><p>导出：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名 : SomeInterface.ts </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SomeInterface</span> &#123; </span><br><span class="line">   <span class="comment">// 代码部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> someInterfaceRef = <span class="built_in">require</span>(<span class="string">&quot;./SomeInterface&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Enum："><a href="#Enum：" class="headerlink" title="Enum："></a>Enum：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>, <span class="comment">// 0</span></span><br><span class="line">  <span class="title class_">Green</span>, <span class="comment">// 1</span></span><br><span class="line">  <span class="title class_">Blue</span>, <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Color</span>.<span class="property">Red</span>;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Color</span>[<span class="string">&quot;Red&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Red</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">number</span> = <span class="title class_">Color</span>.<span class="property">Red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//keyof 运算符取出 Enum 结构的所有成员名，作为联合类型返回。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = keyof <span class="keyword">typeof</span> <span class="title class_">Color</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">Red</span>); <span class="comment">// 输出: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>[<span class="number">0</span>]);  <span class="comment">// 输出: &quot;Red&quot;（反向映射）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;Red&#x27;|&#x27;Green&#x27;|&#x27;Blue&#x27;</span></span><br><span class="line"><span class="comment">// in 返回Enum所有的成员值</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123; [key <span class="keyword">in</span> <span class="title class_">Color</span>]: <span class="built_in">any</span> &#125;;</span><br><span class="line"><span class="comment">// &#123; Red：any, Green: any, Blue: any &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="装饰器（Decorator）"><a href="#装饰器（Decorator）" class="headerlink" title="装饰器（Decorator）"></a><a href="https://typescript.p6p.net/typescript-tutorial/decorator.html">装饰器（Decorator）</a></h3><p>装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。</p>
<p>装饰器一般只用来为类添加某种特定行为。</p>
<p>（1）第一个字符（或者说前缀）是<code>@</code>，后面是一个表达式。</p>
<p>（2）<code>@</code>后面的表达式，必须是一个<strong>函数</strong>（或者执行后可以得到一个函数）。</p>
<p>（3）这个函数接受所修饰对象的一些相关值作为参数。</p>
<p>（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simpleDecorator</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">any</span>, <span class="attr">context</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi, this is &quot;</span> + target);</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@simpleDecorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// &quot;hi, this is class A &#123;&#125;&quot;</span></span><br><span class="line"><span class="comment">//类A在执行前会先执行装饰器simpleDecorator()，并且会向装饰器自动传入参数。</span></span><br></pre></td></tr></table></figure>

<h3 id="declare-关键字："><a href="#declare-关键字：" class="headerlink" title="declare 关键字："></a><a href="https://typescript.p6p.net/typescript-tutorial/declare.html">declare 关键字：</a></h3><p>declare 关键字用来告诉编译器，某个类型是存在的，可以在当前文件中使用。</p>
<p>一般用于当前文件引入外部库定义的函数时，不知道外部库函数的类型，就可以在当前文件使用declare 关键字告知编译器外部库函数的类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><ul>
<li><p>keyof：接受一个对象类型作为参数，返回该对象的所有键名组成的联合类型。</p>
<p>往往用于精确表达对象的属性类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj</span> = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = keyof <span class="title class_">MyObj</span>; <span class="comment">// &#x27;foo&#x27;|&#x27;bar&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>in 运算符：用来确定对象是否包含某个属性名。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">123</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> obj) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found a&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方括号运算符（<code>[]</code>）：用于取出对象的键值类型，如<code>T[K]</code>会返回对象<code>T</code>的属性<code>K</code>的类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">alive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Age 的类型是 number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>extends…?: 条件运算符</p>
<p>（可以根据当前类型是否符合某种条件，返回不同的类型。）</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">T <span class="keyword">extends</span> U ? X : Y</span><br><span class="line">类型T是否可以赋值给类型U，即T是否为U的子类型，这里的T和U可以是任意类型。</span><br><span class="line"></span><br><span class="line">如果T能够赋值给类型U，表达式的结果为类型X，否则结果为类型Y。</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> T = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>infer 关键字：用来定义泛型里面推断出来的类型参数，而不是外部传入的类型参数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer <span class="title class_">Item</span>&gt; ? <span class="title class_">Item</span> : <span class="title class_">Type</span>;</span><br><span class="line"><span class="comment">//infer Item表示Item这个参数是 TypeScript 自己推断出来的，不用显式传入，而Flatten&lt;Type&gt;则表示Type这个类型参数是外部传入的。Type extends Array&lt;infer Item&gt;则表示，如果参数Type是一个数组，那么就将该数组的成员类型推断为Item，即Item是从Type推断出来的。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>is 运算符：<code>is</code>运算符用来描述返回值属于<code>true</code>还是<code>false</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params"><span class="attr">pet</span>: <span class="title class_">Fish</span> | <span class="title class_">Bird</span></span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串&#96;&#96;</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">World</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">`hello <span class="subst">$&#123;World&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="类型映射："><a href="#类型映射：" class="headerlink" title="类型映射："></a><a href="https://typescript.p6p.net/typescript-tutorial/mapping.html">类型映射</a>：</h3><p>映射（mapping）指的是，将一种类型按照映射规则，转换成另一种类型，通常用于对象类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//两个类型的属性结构是一样的，但是属性的类型不一样。如果属性数量多的话，逐个写起来就很麻烦。</span></span><br><span class="line"><span class="comment">//映射：</span></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  [prop <span class="keyword">in</span> keyof A]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//[prop in keyof A]表示依次得到类型A的所有属性名，然后将每个属性的类型改成string。</span></span><br><span class="line">prop：属性名变量，名字可以随便起。</span><br><span class="line"><span class="keyword">in</span>：运算符，用来取出右侧的联合类型的每一个成员。</span><br><span class="line"><span class="title class_">Keyof</span> A：返回类型A的每一个属性名，组成一个联合类型。</span><br></pre></td></tr></table></figure>

<h3 id="TypeScript-类型工具"><a href="#TypeScript-类型工具" class="headerlink" title="TypeScript 类型工具"></a><a href="https://typescript.p6p.net/typescript-tutorial/utility.html">TypeScript 类型工具</a></h3><h3 id="TypeScript-的注释指令"><a href="#TypeScript-的注释指令" class="headerlink" title="TypeScript 的注释指令"></a><a href="https://typescript.p6p.net/typescript-tutorial/comment.html">TypeScript 的注释指令</a></h3>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/blog2025.github.io/2025/05/16/k8s/</url>
    <content><![CDATA[<p>‌<strong>k8s 和 Eureka&#x2F;Nacos 的关系就像快递公司和菜鸟驿站</strong>‌</p>
<ol>
<li>‌**k8s（快递公司）**‌：负责把你的应用包裹（容器）运到服务器仓库（集群），并保证包裹不丢（自动重启）、不够时加车（扩缩容）。</li>
<li>‌**Eureka&#x2F;Nacos（菜鸟驿站）**‌：包裹送到后，帮你登记包裹位置（服务注册），告诉其他包裹去哪儿取货（服务发现），还能代收快递通知（动态配置）。</li>
</ol>
<p>‌**怎么用？**‌</p>
<ul>
<li>如果只用 k8s：相当于快递直接送货上门（Service DNS），简单但功能少。</li>
<li>如果加上 Eureka&#x2F;Nacos：相当于用菜鸟驿站，能存包裹、发取件码（复杂治理），适合大社区（复杂微服务）。</li>
</ul>
<p>‌<strong>一句话总结</strong>‌：k8s 管运输，Eureka&#x2F;Nacos 管售后，按需选配！</p>
<p><strong>k8s 与Docker 搭配使用</strong></p>
<ol>
<li>‌**Docker 是“打包工具”**‌<ul>
<li>把应用和它的依赖（比如代码、环境配置）‌<strong>装进集装箱</strong>‌（容器镜像）。</li>
<li>保证集装箱在任意码头（服务器）都能‌<strong>直接运行</strong>‌，不用重新组装。</li>
</ul>
</li>
<li>‌**k8s 是“智能物流管家”**‌<ul>
<li>指挥集装箱该‌<strong>放哪艘船</strong>‌（集群节点）、‌<strong>开几条船</strong>‌（副本数量）、‌<strong>坏了换新船</strong>‌（自动重启）。</li>
<li>还能根据货物量（流量）‌<strong>自动增减船只</strong>‌（扩缩容），并规划最优航线（负载均衡）。</li>
</ul>
</li>
</ol>
<p>‌<strong>一句话总结</strong>‌：<br>Docker 是造砖，k8s 是盖楼——你负责烧砖（容器镜像），k8s 帮你盖成摩天大厦（分布式系统）</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo使用、博客编写教程：</title>
    <url>/blog2025.github.io/2025/03/10/hello-world/</url>
    <content><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="一、流程"><a href="#一、流程" class="headerlink" title="一、流程"></a>一、流程</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">cmd进入hexo-blog目录本地库，</span><br><span class="line">使用命令进行操作，</span><br><span class="line">操作完成后使用 <span class="attribute">hexo</span> g -d 生成静态页面并上传到GitHub。</span><br></pre></td></tr></table></figure>

<h3 id="二、创建新帖子"><a href="#二、创建新帖子" class="headerlink" title="二、创建新帖子"></a>二、创建新帖子</h3><p>方法一：直接生成文章：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p>方法二：生成文章和对应同名目录(用于存储图片资源等)：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new post <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313130306915.png"></p>
<p>注：文章存储路径为：hexo-blog&#x2F;source&#x2F;_posts</p>
<h3 id="三、Hexo命令："><a href="#三、Hexo命令：" class="headerlink" title="三、Hexo命令："></a>三、Hexo命令：</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init <span class="comment"># 初始化 </span></span><br><span class="line">npm install <span class="comment"># (一般来讲，这个只会在第一次安装hexo时使用)</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo d <span class="comment"># 上传到GitHub</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br><span class="line">hexo g -d <span class="comment"># 生成静态页面并上传到github</span></span><br><span class="line">ssh -T git<span class="variable">@github</span>.com <span class="comment"># 测试连通性</span></span><br></pre></td></tr></table></figure>

<p>更多命令: <a href="https://hexo.io/zh-cn/docs/commands">链接</a></p>
<h3 id="四、注意事项："><a href="#四、注意事项：" class="headerlink" title="四、注意事项："></a>四、注意事项：</h3><p>问题一:   “You’ve successfully authenticated, but GitHub does not provide shell access.”	</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">·需要生成本地<span class="attribute">SSH</span> ，再配置到GitHub中。</span><br><span class="line">·因为本次采用SSH进行远程连接，所以对于本地hexo-blog中的_config.xml进行配置为SSH格式。</span><br><span class="line">deploy:</span><br><span class="line">   type: git	</span><br><span class="line">   repo: git<span class="variable">@github</span>.com:lsdyun/blog2025.github.io.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure>

<p>问题二：采用Http和SSH区别:(!!!推荐使用SSH)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">采用Http每次都需要输入账号和密码，使用SSH则不需要。</span><br><span class="line">此外，GitHub已经禁止密码验证，强制要求使用个人访问令牌(PAT),所以此处才使用SSH。</span><br></pre></td></tr></table></figure>

<p>注：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">认证机制：</span><br><span class="line">  SSH：</span><br><span class="line">     ·基于非对称加密，通过本机生成的密钥对（公钥+私钥）进行身份验证，无需每次输入密码。</span><br><span class="line">     ·密钥需手动生成并添加至GitHub账户的SSH Keys配置页，实现一次性配置长期生效。</span><br><span class="line">  HTTP(S)：</span><br><span class="line">     ·依赖用户名+密码或令牌(PAT)认证。GitHub已禁用密码验证，强制要求使用个人访问令牌(PAT)。</span><br><span class="line">     ·令牌需在GitHub账户中生成并赋予权限(如repo权限)，操作时需手动输入或依赖凭证缓存。</span><br></pre></td></tr></table></figure>

<p>生成SSH和配置到GitHub参考: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<h3 id="五：补充："><a href="#五：补充：" class="headerlink" title="五：补充："></a>五：补充：</h3><p>·Hexo默认主题存放在node_modules&#x2F;hexo-theme-landscape目录下，可对_config.yml进行处理。</p>
<p><font color="red">·当使用steam++加速GitHub时，会导致本地host被污染，导致无法上传项目到GitHub，最好先关闭加速在上传。</font></p>
<h3 id="六、Hexo渲染和Typora图片问题"><a href="#六、Hexo渲染和Typora图片问题" class="headerlink" title="六、Hexo渲染和Typora图片问题"></a>六、Hexo渲染和Typora图片问题</h3><p>1.修改 Hexo 根目录的 <code>_config.yml</code>，确保以下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="attribute">true</span>  <span class="comment"># 自动生成文章同名资源夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>     <span class="comment"># 禁止生成相对路径</span></span><br><span class="line"></span><br><span class="line">同时增加：(没这个也会导致渲染出问题)</span><br><span class="line"><span class="comment"># 解决typera和hexo图片加载问题  </span></span><br><span class="line">marked:</span><br><span class="line">  prependRoot: <span class="literal">true</span></span><br><span class="line">  postAsset: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.安装官方推荐的渲染插件：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall hexo-renderer-marked --save  <span class="comment"># 先卸载旧版本（如有）</span></span><br><span class="line">npm install hexo-renderer-marked<span class="variable">@latest</span> --save</span><br></pre></td></tr></table></figure>

<p>3.Typora 设置路径：</p>
<p>偏好设置 → 图像 → 插入图片时选择 “复制到指定路径”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存路径填：./$&#123;filename&#125;.assets/  </span><br><span class="line">勾选：优先使用相对路径</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313225230399.png" alt="image-20250313225230399"></p>
<p>4.格式→图像→设置图片根目录 “选择对应文件的存储位置”</p>
<p>5‌.插入图片后检查格式：</p>
<p>在 Markdown 中必须显示为 <code>![描述](图片名.jpg)</code>，而不是 <code>![描述](文章名/图片名.jpg)</code><br>（若出现多余路径，手动删除前缀）</p>
<p>6.<font color="red">添加图片步骤</font></p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具,不保存；</span><br><span class="line">第二步、直接将图片复制到Typora中；</span><br><span class="line">第三步、从Typora将图片保存到对应文件夹中；</span><br><span class="line">第四步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<p>方法二：（图片最后格式一定没有”&#x2F;“）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步、使用截图工具，保存到对应目录；</span><br><span class="line">第二步、在Typora中，右击插入图像；</span><br><span class="line">第三步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure>

<h3 id="七、Hexo高亮问题："><a href="#七、Hexo高亮问题：" class="headerlink" title="七、Hexo高亮问题："></a>七、Hexo高亮问题：</h3><p>1.Hexo 7.x的配置文件(_config.xml)中:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>syntax_highlighter: 可选Hexo默认的highlight.js,也可选prismjs</p>
<p>2.Next 8.22.0主题的配置文件(_config.xml)中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default  ##这里决定了最后展示的效果</span><br><span class="line">    dark: stackoverflow-dark ##这里决定了最后展示的效果</span><br><span class="line">  prism:</span><br><span class="line">    light: prism-tomorrow  ##这里决定了最后展示的效果</span><br><span class="line">    dark: prism-tomorrow-dark ##这里决定了最后展示的效果</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: </span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false</span><br><span class="line">    height: 500</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/10/hello-world/BB1msOOV.jpg"></p>
<h3 id="八、个性化Next主题："><a href="#八、个性化Next主题：" class="headerlink" title="八、个性化Next主题："></a>八、个性化Next主题：</h3><p>1.开启themes&#x2F;next_config.xml中的选项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">	style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<p>2.在hexo-blog&#x2F;source&#x2F;_data中新建styles.styl</p>
<p>3.开始在styles.styl中自定义CSS</p>
<h3 id="九、开启动态背景："><a href="#九、开启动态背景：" class="headerlink" title="九、开启动态背景："></a>九、开启动态背景：</h3><p>在themes&#x2F;next_config.xml中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>

<h3 id="十、参考资料："><a href="#十、参考资料：" class="headerlink" title="十、参考资料："></a>十、参考资料：</h3><p>安装教程一: <a href="https://blog.csdn.net/yaorongke/article/details/119089190">链接</a></p>
<p>安装教程二: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p>
<p>Next主题使用方法：<a href="https://zhuanlan.zhihu.com/p/618864711">链接</a></p>
<p>Next 8 版本使用方法：<a href="https://www.cnblogs.com/jinwei26/articles/18460312">链接</a>（代码块，动态人物|本项目采用该版本）</p>
<p>Next新旧版本对比：<a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#%E9%BB%98%E8%AE%A4%E9%A1%B5%E5%A4%84%E7%90%86">链接</a></p>
<p>图标icon：<a href="https://fontawesome.dashgame.com/">链接</a></p>
<p>分类和标签功能：<a href="https://juejin.cn/post/6921750181297782798">链接</a></p>
<p>阅读全文功能：<a href="https://blog.csdn.net/codejoker_7/article/details/123235687">链接</a>要搭配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Typora中编写文档时配合&lt;!--more--&gt;使用，可以将文章内容截断，解决网页首页展示过多内容。</span><br></pre></td></tr></table></figure>

<p>暗黑模式：<a href="https://blog.csdn.net/rqh656418510/article/details/123676457">链接</a></p>
<p>Hexo 7.x 语法高亮：<a href="https://hexo.io/zh-cn/docs/syntax-highlight">链接</a></p>
<p>Hexo-Next:<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Typora中打实心圆、空心圆、方块：</p>
<p>使用Ctrl+Shift+]打出实心圆，再使用Tab键则可打出空心圆，再使用一次便可打出方块。</p>
<ul>
<li>哈哈	<ul>
<li>哈哈<ul>
<li>哈哈</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>自建网站</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li>常用数据类型</li>
</ol>
<p>&emsp;&emsp;层次、网状、关系（表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>数据库系统的结构</p>
<p>三层模式结构：外模式+模式+内模式</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;用户+公共数据+物理结构和存储方式</p>
<table>
<thead>
<tr>
<th>外模式</th>
<th>模式</th>
<th>内模式</th>
</tr>
</thead>
<tbody><tr>
<td>用户</td>
<td>公共数据</td>
<td>物理结构和存储方式</td>
</tr>
</tbody></table>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%BB%93%E6%9E%84.png"></p>
<h3 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h3><ol>
<li><h4 id="表："><a href="#表：" class="headerlink" title="表："></a>表：</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert table 表名 add 新列名 数据类型</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。"><a href="#视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。" class="headerlink" title="视图View：(数据较大时用（虚拟表）)本身不包含任何数据，只包含映射到实际表的一个查询语句。"></a>视图View：(数据较大时用（<strong>虚拟表</strong>）)本身不包含任何数据，只包含映射到实际表的一个查询语句。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view 视图名称 as （增删改查SQL语句）[with check option]</span><br><span class="line">with check option:同步更新到实际表</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view 视图名称 [cascade]</span><br><span class="line">cascade：级联删除（该视图链接多个视图）</span><br></pre></td></tr></table></figure>

<p>查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 属性 from 视图名称 where 条件</span><br></pre></td></tr></table></figure>

<p>更新：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视图是不存在的，对视图操作，实际就是更新对应的实际表</span><br></pre></td></tr></table></figure></li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/liangzai215/article/details/142438705">链接</a></p>
<ol start="3">
<li><h4 id="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。"><a href="#模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。" class="headerlink" title="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。"></a>模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create schema &lt;模式名&gt; authorization &lt;用户名&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop schema &lt;模式名&gt; &lt;cascade|restrict&gt;</span><br><span class="line">cascade:级联删除</span><br><span class="line">restrict：限制（如果存在下属数据如表，则不可删除）</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="索引：数据量较大时使用，可以建立在一列或者多列上。"><a href="#索引：数据量较大时使用，可以建立在一列或者多列上。" class="headerlink" title="索引：数据量较大时使用，可以建立在一列或者多列上。"></a>索引：数据量较大时使用，可以建立在一列或者多列上。</h4><p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [unique][cluster] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;)</span><br><span class="line">unique：唯一索引</span><br><span class="line">cluster:聚簇索引，即物理顺序和逻辑顺序相同</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert index &lt;旧索引名&gt; rename to &lt;新索引名&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop index &lt;索引名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"><a href="#审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。" class="headerlink" title="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"></a>审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">audit 操作 on 数据</span><br><span class="line">操作：insert/update/delete等</span><br><span class="line">数据：表/数据库</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="断言：（限制数据大小）"><a href="#断言：（限制数据大小）" class="headerlink" title="断言：（限制数据大小）"></a>断言：（限制数据大小）</h4><p>触发器：</p>
<p>创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create trigger &lt;触发器名称&gt; before|after &lt;触发事件&gt; on &lt;表名&gt;</span><br><span class="line">beforencting new|old row as &lt;变量&gt;</span><br><span class="line">for each row|statement			//定义触发器的类型，指明动作体执行的频率</span><br><span class="line">when &lt;触发条件&gt; &lt;触发动作体&gt;</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop trigger &lt;触发器名称&gt; on &lt;表名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="权限："><a href="#权限：" class="headerlink" title="权限："></a>权限：</h4><p>授权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant &lt;权限&gt; on table &lt;表名&gt; to &lt;用户名称&gt;</span><br><span class="line">with grant option子句：普通用户获得权限后，可以将权限授予其他用户。</span><br></pre></td></tr></table></figure>

<p>回收权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke &lt;权限&gt; on table &lt;表名&gt; from &lt;用户名称&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="常用SQL语句："><a href="#常用SQL语句：" class="headerlink" title="常用SQL语句："></a>常用SQL语句：</h4><p>（1）查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user</span><br><span class="line"></span><br><span class="line">select name from user</span><br><span class="line"></span><br><span class="line">select distinct title from 表名</span><br><span class="line">distinct：去重</span><br><span class="line"></span><br><span class="line">select name from user where address like &#x27;%西&#x27;</span><br><span class="line">like “%”可代替多个字符，“_”仅能替换一个字符</span><br><span class="line"></span><br><span class="line">select 别名 as （查出来是展示为别名属性）</span><br><span class="line">例子：</span><br><span class="line">select username as name from user：查username，展示为name</span><br></pre></td></tr></table></figure>

<p><strong>聚合函数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count()/count(distinct去重 title)</span><br><span class="line">avg()</span><br><span class="line">max()</span><br><span class="line">min()</span><br></pre></td></tr></table></figure>

<p>分组查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group by</span><br><span class="line">select title from book group by title</span><br><span class="line"></span><br><span class="line">筛选Having</span><br><span class="line">select title from book group by title having title=&quot;西游记&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Having和Where区别</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">having是在分组后对数据进行过滤，</span><br><span class="line">where是在分组前对数据进行过滤，</span><br><span class="line">having后可以使用聚合函数</span><br><span class="line">where后则不可以使用聚合函数</span><br><span class="line">查询顺序：from&gt;where&gt;group&gt;having&gt;order&gt;select</span><br></pre></td></tr></table></figure>

<p>排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">order by </span><br><span class="line">desc：降序</span><br><span class="line">asc：升序</span><br></pre></td></tr></table></figure>

<p>多表查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sn.id cn.id from student_name sn,class_name cn where sn.id=cn.id</span><br></pre></td></tr></table></figure>

<p>嵌套查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book in (select author from book where price&lt;100)</span><br></pre></td></tr></table></figure>

<p>Exists：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exists：子查询存在则返回1，否则为0</span><br><span class="line">not exists：</span><br></pre></td></tr></table></figure>

<p>UNION并：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book UNION select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p>INTERSECT交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book INTERSECT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p>EXCEPT差：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from book EXCEPT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>内连接</strong>Where：结果仅包含符合条件的值。</p>
<p>**外连接：**不仅包含符合条件的，也包含不符合条件的。</p>
<p>Left_join：左连接</p>
<p>Left_outer_join：左外连接：左边表全部保留、右边表只保留符合条件的。</p>
<p>Right_join：右连接</p>
<p>Right_outer_join：右外连接：右边表全部保留、左边表只保留符合条件的。</p>
<p>Full_join：全连接</p>
<p>Full_outer_join：全外连接：左边表UNION右边表（全都保留）</p>
<p>参考: <a href="https://blog.csdn.net/mazhenzhu1272/article/details/79696097">链接</a></p>
<p>（2）插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(属性) values (值)</span><br></pre></td></tr></table></figure>

<p>（3）修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段1=值1，字段2=值2</span><br></pre></td></tr></table></figure>

<p>（4）删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、范式"><a href="#三、范式" class="headerlink" title="三、范式"></a>三、范式</h3><p>&emsp;&emsp;范式越高，冗余度越低，一般开发采用3NF即可，最高5NF。</p>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_45737068/article/details/106185907">链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>系统</title>
    <url>/blog2025.github.io/2025/05/28/%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="国产化操作系统"><a href="#国产化操作系统" class="headerlink" title="国产化操作系统"></a>国产化操作系统</h2><h3 id="一、OpenEuler版本推荐"><a href="#一、OpenEuler版本推荐" class="headerlink" title="一、OpenEuler版本推荐"></a>一、OpenEuler版本推荐</h3><ol>
<li>‌<strong>OpenEuler 24.03 LTS（长期支持版）</strong><ul>
<li>‌<strong>安全性强化</strong>‌：集成安全启动、数据加密等机制，通过内核级防护满足军工领域高安全需求。</li>
<li>‌<strong>硬件适配</strong>‌：支持鲲鹏、飞腾等国产芯片及ARM&#x2F;x86架构，适配军工场景的多样化硬件部署。</li>
<li>‌<strong>技术特性</strong>‌：首个AI原生操作系统版本，支持AI框架优化和边缘计算节点管理，便于智能化军事应用开发。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、麒麟操作系统版本推荐"><a href="#二、麒麟操作系统版本推荐" class="headerlink" title="二、麒麟操作系统版本推荐"></a>二、麒麟操作系统版本推荐</h3><ol>
<li>‌<strong>中标麒麟（NeoKylin）政府专用版</strong>‌<ul>
<li>‌<strong>政策合规性</strong>‌：符合政府和军工行业安全标准，强制访问控制、数据加密等功能通过国家认证。</li>
<li>‌<strong>场景适配</strong>‌：专为政府、军事领域设计，支持大规模集群部署和高性能计算，满足关键业务需求。</li>
</ul>
</li>
<li>‌<strong>银河麒麟V10服务器版</strong>‌<ul>
<li>‌<strong>技术优势</strong>‌：基于OpenEuler内核二次开发，优化内核调度和硬件兼容性，提供稳定的服务器运行环境。</li>
<li>‌<strong>生态兼容</strong>‌：支持国产数据库（如达梦）和中间件，适配军事信息系统全栈国产化需求。</li>
</ul>
</li>
</ol>
<h3 id="三、UOS和Deepin"><a href="#三、UOS和Deepin" class="headerlink" title="三、UOS和Deepin"></a>三、UOS和Deepin</h3><ol>
<li><p><strong>‌统信UOS</strong></p>
<ul>
<li><p>‌<strong>适用场景</strong>‌：若需兼容Windows应用过渡（如模拟器支持），可考虑其政务或行业定制版。</p>
</li>
<li><p>‌<strong>局限性</strong>‌：生态依赖商业支持，开源社区活跃度低于OpenEuler，技术自主性受限。</p>
</li>
</ul>
</li>
<li><p><strong>Deepin</strong></p>
</li>
</ol>
<table>
<thead>
<tr>
<th>‌<strong>对比维度</strong>‌</th>
<th>‌<strong>统信UOS</strong>‌</th>
<th>‌<strong>Deepin</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位与开发模式</strong>‌</td>
<td>商业发行版，由统信软件主导开发，聚焦国产化替代需求</td>
<td>开源社区版，由国际开发者协作维护，专注技术创新与用户体验</td>
</tr>
<tr>
<td>‌<strong>核心用户群体</strong>‌</td>
<td>政府机关、金融机构、国有企业等政企客户</td>
<td>个人用户、开发者及国际开源社区用户</td>
</tr>
<tr>
<td>‌<strong>安全机制</strong>‌</td>
<td>五层防护体系（安全启动+应用审核等），通过公安部三级等保认证</td>
<td>基础安全防护，依赖社区维护</td>
</tr>
<tr>
<td>‌<strong>硬件兼容性</strong>‌</td>
<td>优先适配龙芯、鲲鹏等国产芯片，覆盖六大国产CPU平台</td>
<td>支持国际通用硬件（如Intel&#x2F;AMD芯片），适配消费级设备</td>
</tr>
<tr>
<td>‌<strong>软件生态</strong>‌</td>
<td>侧重国产化应用（政务&#x2F;金融软件）和商用办公套件</td>
<td>兼容全球开源软件及部分Windows应用</td>
</tr>
<tr>
<td>‌<strong>界面设计</strong>‌</td>
<td>基于Deepin优化，采用类Windows风格，符合政企用户操作习惯</td>
<td>现代化DDE桌面环境，提供个性化主题与动态壁纸</td>
</tr>
<tr>
<td>‌<strong>更新策略</strong>‌</td>
<td>更新周期长（需企业级测试），系统稳定性优先</td>
<td>新功能快速迭代（如内核&#x2F;桌面环境更新），适合尝鲜用户</td>
</tr>
<tr>
<td>‌<strong>特色功能</strong>‌</td>
<td>集成一键清理、智能助手、国产密码模块等企业效率工具</td>
<td>内置天气、音乐播放器、系统修复工具等生活化应用</td>
</tr>
<tr>
<td>‌<strong>应用商店内容</strong>‌</td>
<td>重点预装WPS、微信等国产软件，适配行业专用解决方案</td>
<td>提供Steam、Spotify等国际流行软件，支持跨平台应用兼容</td>
</tr>
<tr>
<td>‌<strong>系统授权模式</strong>‌</td>
<td>需商业授权（家庭版免费试用1年，专业版需采购激活码）</td>
<td>完全免费开源，无使用限制</td>
</tr>
<tr>
<td>‌<strong>典型应用场景</strong>‌</td>
<td>政府办公、金融交易系统、能源调度等合规化场景</td>
<td>个人开发、多媒体创作、国际开源协作等场景</td>
</tr>
</tbody></table>
<hr>
<h3 id="四、综合学习路径建议"><a href="#四、综合学习路径建议" class="headerlink" title="四、综合学习路径建议"></a>四、综合学习路径建议</h3><ol>
<li>‌<strong>优先学习OpenEuler 24.03 LTS</strong>‌<ul>
<li>‌<strong>技术前瞻性</strong>‌：掌握云原生、AI开发等前沿技术，契合军事智能化转型趋势5。</li>
<li>‌<strong>社区资源</strong>‌：活跃的开源社区提供丰富的文档和工具，便于快速上手和问题解决。</li>
</ul>
</li>
<li>‌<strong>同步掌握麒麟中标麒麟&#x2F;银河麒麟V10</strong>‌<ul>
<li>‌<strong>政策导向</strong>‌：军工项目多要求使用政府认证版本，熟悉其安全机制和部署规范为就业加分项。</li>
</ul>
</li>
<li>‌<strong>实践方向</strong>‌<ul>
<li>‌<strong>安全加固</strong>‌：重点学习强制访问控制、日志审计等安全功能配置。</li>
<li>‌<strong>国产芯片适配</strong>‌：结合鲲鹏&#x2F;飞腾硬件平台，实践软硬件协同优化技术。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>军工领域需优先选择‌<strong>OpenEuler 24.03 LTS</strong>‌和‌<strong>麒麟中标麒麟&#x2F;银河麒麟V10</strong>‌，前者满足技术迭代与开源可控需求，后者符合行业准入要求。其他系统可作为扩展知识补充，但非核心学习目标。</p>
<h2 id="四个系统对比"><a href="#四个系统对比" class="headerlink" title="四个系统对比"></a>四个系统对比</h2><table>
<thead>
<tr>
<th>‌<strong>对比维度</strong>‌</th>
<th>‌<strong>OpenEuler</strong>‌</th>
<th>‌<strong>银河麒麟V10</strong>‌</th>
<th>‌<strong>统信UOS</strong>‌</th>
<th>‌<strong>Deepin</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>定位与开发主体</strong>‌</td>
<td>华为推出的开源服务器操作系统，聚焦云计算与基础软件生态</td>
<td>麒麟软件研发，专用于国防、党政等高安全场景的商业发行版</td>
<td>统信软件主导，面向政企办公及行业应用的商业发行版</td>
<td>武汉深之度开发，专注个人用户与开发者的开源社区版</td>
</tr>
<tr>
<td>‌<strong>技术基础</strong>‌</td>
<td>基于Linux内核独立演进，支持ARM&#x2F;x86&#x2F;鲲鹏等架构</td>
<td>基于OpenEuler开发，搭载自主UKUI 3.0桌面环境</td>
<td>基于Deepin优化，兼容Linux内核与国产芯片</td>
<td>基于Debian二次开发，采用深度DDE桌面环境</td>
</tr>
<tr>
<td>‌<strong>典型应用场景</strong>‌</td>
<td>云计算、数据中心、工业互联网等企业级服务器场景</td>
<td>军工、政务、能源等涉密领域的高安全服务器&#x2F;桌面端</td>
<td>政府&#x2F;金融&#x2F;教育等行业的桌面办公及通用服务器环境</td>
<td>个人开发、多媒体创作及国际开源社区协作场景</td>
</tr>
<tr>
<td>‌<strong>安全机制</strong>‌</td>
<td>提供SELinux等基础安全模块，依赖开源社区维护</td>
<td>集成军用级安全沙箱与自主管控内核，通过公安部结构化保护级认证</td>
<td>五层防护体系（安全启动+应用审核等），通过三级等保认证</td>
<td>基础权限管理，依赖社区漏洞修复</td>
</tr>
<tr>
<td>‌<strong>硬件兼容性</strong>‌</td>
<td>适配鲲鹏&#x2F;昇腾等华为系芯片及x86服务器</td>
<td>优先支持飞腾&#x2F;龙芯等军用芯片，x86兼容性有限</td>
<td>覆盖龙芯&#x2F;兆芯&#x2F;鲲鹏等六大国产CPU平台，兼容消费级设备</td>
<td>支持Intel&#x2F;AMD等国际通用硬件，适配主流笔记本&#x2F;台式机</td>
</tr>
<tr>
<td>‌<strong>软件生态</strong>‌</td>
<td>侧重云计算框架（Kubernetes&#x2F;OpenStack）及数据库中间件</td>
<td>预装军用办公套件，适配国产密码模块及行业专用软件</td>
<td>集成WPS&#x2F;微信等国产办公软件，提供行业解决方案</td>
<td>兼容Steam&#x2F;Spotify等国际应用，支持跨平台软件移植</td>
</tr>
<tr>
<td>‌<strong>更新策略</strong>‌</td>
<td>每6个月发布新版本，提供4年技术支持周期</td>
<td>更新周期较长（需专项安全测试），长期支持版本为主</td>
<td>企业级稳定性优先，更新需通过商用验证</td>
<td>每月推送功能更新，快速迭代桌面环境及内核</td>
</tr>
<tr>
<td>‌<strong>授权模式</strong>‌</td>
<td>完全开源免费（社区版）</td>
<td>需商业授权（分桌面&#x2F;服务器版本）</td>
<td>家庭版免费试用1年，专业版需采购授权</td>
<td>完全开源免费，无使用限制</td>
</tr>
</tbody></table>
<h2 id="Deepin和OpenEuler"><a href="#Deepin和OpenEuler" class="headerlink" title="Deepin和OpenEuler"></a>Deepin和OpenEuler</h2><h3 id="一、版本选择建议"><a href="#一、版本选择建议" class="headerlink" title="一、版本选择建议"></a>一、版本选择建议</h3><h4 id="1-‌OpenEuler版本推荐‌"><a href="#1-‌OpenEuler版本推荐‌" class="headerlink" title="1. ‌OpenEuler版本推荐‌"></a>1. ‌<strong>OpenEuler版本推荐</strong>‌</h4><ul>
<li>‌<strong>企业生产环境</strong>‌：选择 ‌<strong>LTS长期支持版</strong>‌（如openEuler LTS 2023），提供4年维护周期，适配服务器硬件及云原生组件</li>
<li>‌<strong>技术尝鲜需求</strong>‌：可尝试 ‌<strong>创新版</strong>‌（如openEuler 2025.03），集成最新内核与容器技术，但稳定性风险较高</li>
</ul>
<h4 id="2-‌Deepin版本推荐‌"><a href="#2-‌Deepin版本推荐‌" class="headerlink" title="2. ‌Deepin版本推荐‌"></a>2. ‌<strong>Deepin版本推荐</strong>‌</h4><ul>
<li>‌<strong>个人用户</strong>‌：优先安装 ‌<strong>V23正式版</strong>‌，其桌面环境（DDE）已优化硬件兼容性，支持主流消费级设备与跨平台应用</li>
<li>‌<strong>特殊需求</strong>‌：若需绝对稳定（如老旧硬件），可降级至 ‌<strong>Deepin 20.9维护版</strong>‌，但功能更新已停止</li>
</ul>
<hr>
<h3 id="二、关键决策因素"><a href="#二、关键决策因素" class="headerlink" title="二、关键决策因素"></a>二、关键决策因素</h3><ol>
<li>‌<strong>硬件兼容性</strong>‌<ul>
<li>OpenEuler：优先适配国产服务器芯片（鲲鹏&#x2F;飞腾）及企业级硬件</li>
<li>Deepin：支持Intel&#x2F;AMD消费级设备（如笔记本&#x2F;台式机）</li>
</ul>
</li>
<li>‌<strong>软件生态</strong>‌<ul>
<li>OpenEuler：聚焦云原生工具链（Kubernetes&#x2F;OpenStack）及数据库中间件</li>
<li>Deepin：覆盖Steam、WPS、微信等个人常用软件，支持Linux&#x2F;Windows应用混合运行</li>
</ul>
</li>
<li>‌<strong>更新策略</strong>‌<ul>
<li>OpenEuler LTS版更新周期长（1-2年&#x2F;次），适合规避频繁变更风险</li>
<li>Deepin V23每月推送功能更新，适合追求新技术体验的用户</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、最终建议"><a href="#三、最终建议" class="headerlink" title="三、最终建议"></a>三、最终建议</h3><ul>
<li>‌<strong>服务器&#x2F;云计算开发者</strong>‌：选择 ‌<strong>OpenEuler LTS 2023</strong>‌，其企业级生态与华为技术背书更可靠</li>
<li>‌<strong>个人用户&#x2F;桌面开发者</strong>‌：安装 ‌<strong>Deepin V23</strong>‌，其现代化界面与应用生态更适合日常场景</li>
<li>‌<strong>混合场景需求</strong>‌：若需同时使用两者，可通过虚拟机或双系统方案实现互补</li>
</ul>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/blog2025.github.io/2025/05/28/Vue3/</url>
    <content><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a><a href="https://www.runoob.com/vue3/vue3-project-intro.html">Vue3</a></h1><p>一个渐进式框架</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install vue@next</span><br></pre></td></tr></table></figure>

<p>创建脚手架 CLI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<h2 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h2><h3 id="创建一个应用实例（createApp）"><a href="#创建一个应用实例（createApp）" class="headerlink" title="创建一个应用实例（createApp）"></a>创建一个应用实例（<code>createApp</code>）</h3><ul>
<li>一般：（单个文件中）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123; <span class="comment">/* 内容 */</span> &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;SearchInput&#x27;</span>, <span class="title class_">SearchInputComponent</span>)</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="title class_">FocusDirective</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">LocalePlugin</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>脚手架 <code>main.js</code>：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="根组件：App-vue"><a href="#根组件：App-vue" class="headerlink" title="根组件：App.vue"></a><strong>根组件</strong>：App.vue</h3><p>根组件与其他组件没什么不同，配置选项是一样的。</p>
<ul>
<li><p>一般：（单个文件中）</p>
<p>把一个 Vue 应用挂载到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，应该传递 <code>#app</code>：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">ceateApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>脚手架 <code>src/App.vue</code>（主要布局和路由视图。）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>入口文件<code>main.js</code>中传递进根组件<code>App.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="组件实例："><a href="#组件实例：" class="headerlink" title="组件实例："></a>组件实例：</h3><ul>
<li>一般（单个文件中）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; count: 4 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">console.log(vm.count) // =&gt; 4</span><br></pre></td></tr></table></figure>

<ul>
<li>脚手架中不存在这种写法。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 4</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">      console.log(&#x27;created:&#x27;, this.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue3-生命周期钩子函数："><a href="#Vue3-生命周期钩子函数：" class="headerlink" title="Vue3 生命周期钩子函数："></a>Vue3 生命周期钩子函数：</h3><table>
<thead>
<tr>
<th><strong>阶段分类</strong>‌</th>
<th>‌<strong>选项式 API</strong>‌</th>
<th>‌<strong>组合式 API</strong>‌</th>
<th>‌<strong>触发时机</strong>‌</th>
<th>‌<strong>典型应用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>创建阶段</strong>‌</td>
<td><code>beforeCreate</code></td>
<td>由 <code>setup</code> 替代</td>
<td>组件实例初始化后，数据观测&#x2F;事件配置前</td>
<td>非响应式变量初始化</td>
</tr>
<tr>
<td></td>
<td><code>created</code></td>
<td>由 <code>setup</code> 替代</td>
<td>数据观测&#x2F;事件配置完成，DOM 未生成</td>
<td>发起异步请求、非 DOM 初始化</td>
</tr>
<tr>
<td>‌<strong>挂载阶段</strong>‌</td>
<td><code>beforeMount</code></td>
<td><code>onBeforeMount</code></td>
<td>模板编译完成，DOM 挂载前</td>
<td>极少数场景使用</td>
</tr>
<tr>
<td></td>
<td><code>mounted</code></td>
<td><code>onMounted</code></td>
<td>DOM 挂载完成，<code>$el</code> 可访问</td>
<td>操作 DOM、集成第三方库</td>
</tr>
<tr>
<td>‌<strong>更新阶段</strong>‌</td>
<td><code>beforeUpdate</code></td>
<td><code>onBeforeUpdate</code></td>
<td>数据变化导致虚拟 DOM 重新渲染前</td>
<td>获取更新前 DOM 状态（如滚动位置）</td>
</tr>
<tr>
<td></td>
<td><code>updated</code></td>
<td><code>onUpdated</code></td>
<td>虚拟 DOM 重新渲染并应用更新后</td>
<td>操作更新后的 DOM（需结合 <code>nextTick</code>）</td>
</tr>
<tr>
<td>‌<strong>卸载阶段</strong>‌</td>
<td><code>beforeUnmount</code></td>
<td><code>onBeforeUnmount</code></td>
<td>组件实例销毁前</td>
<td>清理定时器、移除事件监听</td>
</tr>
<tr>
<td></td>
<td><code>unmounted</code></td>
<td><code>onUnmounted</code></td>
<td>组件实例销毁后</td>
<td>释放全局资源、取消订阅</td>
</tr>
<tr>
<td>‌<strong>缓存组件阶段</strong>‌</td>
<td><code>activated</code></td>
<td><code>onActivated</code></td>
<td>被 <code>&lt;keep-alive&gt;</code> 缓存的组件激活时</td>
<td>恢复组件状态（如滚动位置）</td>
</tr>
<tr>
<td></td>
<td><code>deactivated</code></td>
<td><code>onDeactivated</code></td>
<td>被 <code>&lt;keep-alive&gt;</code> 缓存的组件切换离开时</td>
<td>保存临时数据</td>
</tr>
<tr>
<td>‌<strong>错误处理阶段</strong>‌</td>
<td><code>errorCaptured</code></td>
<td><code>onErrorCaptured</code></td>
<td>捕获子孙组件错误时</td>
<td>上报错误信息、阻止错误传播</td>
</tr>
</tbody></table>
<p><strong>补充说明：</strong></p>
<ul>
<li>‌<strong>组合式 API 特性</strong>‌<ul>
<li><code>setup</code> 函数替代了 <code>beforeCreate</code> 和 <code>created</code> 钩子；</li>
<li>组合式 API 钩子名称以 <code>on</code> 开头（如 <code>onMounted</code>）。</li>
</ul>
</li>
<li>‌<strong>特殊场景处理</strong>‌<ul>
<li><code>&lt;keep-alive&gt;</code> 组件的 <code>activated</code>&#x2F;<code>deactivated</code> 需配合缓存机制使用；</li>
<li><code>errorCaptured</code> 需返回 <code>false</code> 阻止错误继续传播。</li>
</ul>
</li>
<li>‌<strong>执行顺序</strong>‌<br>组合式 API 钩子优先于选项式 API 执行（如 <code>onMounted</code> 早于 <code>mounted</code>）</li>
</ul>
<h2 id="二、模板语法"><a href="#二、模板语法" class="headerlink" title="二、模板语法"></a>二、模板语法</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="属性Attribute：v-bind"><a href="#属性Attribute：v-bind" class="headerlink" title="属性Attribute：v-bind"></a>属性Attribute：v-bind</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!--缩写--&gt;</span><br><span class="line">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原始HTML：v-html"><a href="#原始HTML：v-html" class="headerlink" title="原始HTML：v-html"></a>原始HTML：v-html</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Using mustaches: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参数：v-on-监听-DOM-事件"><a href="#参数：v-on-监听-DOM-事件" class="headerlink" title="参数：v-on 监听 DOM 事件"></a>参数：v-on 监听 DOM 事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class="line">&lt;!--缩写--&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="动态参数："><a href="#动态参数：" class="headerlink" title="动态参数：[]"></a>动态参数：<code>[]</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">当 eventName 的值为 &quot;focus&quot; 时，v-on:[eventName] 将等价于 v-on:focus</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、数据属性和方法"><a href="#三、数据属性和方法" class="headerlink" title="三、数据属性和方法"></a>三、数据属性和方法</h2><h3 id="数据属性：data-property"><a href="#数据属性：data-property" class="headerlink" title="数据属性：data property"></a>数据属性：data property</h3><p><code>date-&gt;$data</code></p>
<p>Vue 使用 <code>$</code> 前缀通过组件实例暴露自己的内置 API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; count: 4 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = app.mount(&#x27;#app&#x27;)</span><br><span class="line">console.log(vm.$data.count) // =&gt; 4</span><br><span class="line">console.log(vm.count)       // =&gt; 4</span><br></pre></td></tr></table></figure>

<h3 id="方法：method"><a href="#方法：method" class="headerlink" title="方法：method"></a>方法：method</h3><p>用 <code>methods</code> 选项向组件实例添加方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; count: 4 &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      // `this` 指向该组件实例</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const vm = app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">console.log(vm.count) // =&gt; 4</span><br><span class="line">vm.increment()</span><br><span class="line">console.log(vm.count) // =&gt; 5</span><br></pre></td></tr></table></figure>

<h2 id="四、计算属性和侦听器："><a href="#四、计算属性和侦听器：" class="headerlink" title="四、计算属性和侦听器："></a>四、计算属性和侦听器：</h2><h3 id="计算属性：computed"><a href="#计算属性：computed" class="headerlink" title="计算属性：computed"></a>计算属性：computed</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;Has published books:&lt;/p&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123; publishedBooksMessage &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: &#x27;John Doe&#x27;,</span><br><span class="line">        books: [</span><br><span class="line">          &#x27;Vue 2 - Advanced Guide&#x27;,</span><br><span class="line">          &#x27;Vue 3 - Basic Guide&#x27;,</span><br><span class="line">          &#x27;Vue 4 - The Mystery&#x27;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    publishedBooksMessage() &#123;</span><br><span class="line">      // `this` points to the vm instance</span><br><span class="line">      return this.author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>‌<strong>维度</strong>‌</th>
<th>‌**<code>computed</code>**‌</th>
<th>‌**<code>methods</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>缓存机制</strong>‌</td>
<td>根据依赖缓存计算结果，依赖不变时直接复用</td>
<td>无缓存，每次调用都重新执行函数</td>
</tr>
<tr>
<td>‌<strong>触发条件</strong>‌</td>
<td>依赖的响应式数据变化时自动触发计算</td>
<td>需手动调用（如事件触发、模板表达式调用）</td>
</tr>
<tr>
<td>‌<strong>性能优化</strong>‌</td>
<td>适合高频访问的计算逻辑，<strong>避免重复运算</strong></td>
<td>频繁调用可能引发性能问题</td>
</tr>
<tr>
<td>‌<strong>参数支持</strong>‌</td>
<td>不可直接传参（需通过返回函数实现）</td>
<td>支持传参</td>
</tr>
<tr>
<td>‌<strong>代码用途</strong>‌</td>
<td>数据转换&#x2F;复杂计算（如价格格式化、条件筛选）</td>
<td>事件处理&#x2F;主动操作（如提交表单、发起请求）</td>
</tr>
</tbody></table>
<h3 id="侦听器：watch"><a href="#侦听器：watch" class="headerlink" title="侦听器：watch"></a>侦听器：watch</h3><p>Vue 通过<code>watch</code>来响应数据的变化，尤其需要在数据变化时执行异步或开销较大的操作时。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;sum++&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      sum: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // New: 新值 | Old: 老值</span><br><span class="line">    sum(New, Old) &#123;</span><br><span class="line">      console.log(`新值:$&#123;New&#125; ——— 老值:$&#123;Old&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>数据变化出发异步操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  searchKey(newVal) &#123;</span><br><span class="line">    axios.get(`/api/search?q=$&#123;newVal&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌**<code>computed</code>**‌</th>
<th>‌**<code>watch</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>缓存机制</strong>‌</td>
<td>依赖值未变化时直接返回缓存结果</td>
<td>无缓存，每次数据变化都会触发回调</td>
</tr>
<tr>
<td>‌<strong>触发方式</strong>‌</td>
<td>自动计算（依赖的响应式数据变化时触发）</td>
<td>需显式声明监听目标，数据变化时触发回调</td>
</tr>
<tr>
<td>‌<strong>异步支持</strong>‌</td>
<td>不支持异步操作</td>
<td>支持异步操作（如网络请求、定时任务）</td>
</tr>
<tr>
<td>‌<strong>返回值要求</strong>‌</td>
<td>必须通过 <code>return</code> 返回值</td>
<td>无需返回值，可执行任意逻辑</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>依赖多属性计算新值，模板简化复杂逻辑</td>
<td>数据变化触发异步操作，监听数据变化影响多模块</td>
</tr>
</tbody></table>
<h2 id="五、class与style绑定："><a href="#五、class与style绑定：" class="headerlink" title="五、class与style绑定："></a>五、class与style绑定：</h2><p>说白了就是根据 class 中的值是否为 true 来动态渲染，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  id=&quot;app&quot;</span><br><span class="line">  class=&quot;static&quot;</span><br><span class="line">  :class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">   data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isActive: true,</span><br><span class="line">        hasError: false</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .static&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .static active&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .static active text-danger&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!--结果--&gt;</span><br><span class="line">&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">当 isActive 或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError 的值为 true，class 列表将变为 &quot;static active text-danger&quot;。</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="六、条件渲染：v-if-和-v-show"><a href="#六、条件渲染：v-if-和-v-show" class="headerlink" title="六、条件渲染：v-if 和 v-show"></a>六、条件渲染：v-if 和 v-show</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt;</span><br><span class="line">haha</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;user.role === &#x27;USER&#x27;&quot;&gt;</span><br><span class="line">    null</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">    undefined</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>v-show</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;TRUE&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>v-show</code>不支持<code>&lt;template&gt;</code></p>
<h3 id="核心差异"><a href="#核心差异" class="headerlink" title="核心差异"></a>核心差异</h3><table>
<thead>
<tr>
<th>‌<strong>对比维度</strong>‌</th>
<th>‌**<code>v-if</code>**‌</th>
<th>‌**<code>v-show</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>实现原理</strong>‌</td>
<td>动态增删 DOM 元素（条件为 <code>false</code> 时完全移除）</td>
<td>仅切换 CSS 的 <code>display</code> 属性（元素始终在 DOM 中）</td>
</tr>
<tr>
<td>‌<strong>初始渲染开销</strong>‌</td>
<td>条件为 <code>false</code> 时无渲染开销</td>
<td>无论条件如何，元素都会被渲染到 DOM 中</td>
</tr>
<tr>
<td>‌<strong>切换性能</strong>‌</td>
<td>每次切换需重建&#x2F;销毁 DOM，开销较大</td>
<td>仅修改 CSS 属性，适合<strong>高频切换</strong>场景</td>
</tr>
<tr>
<td>‌<strong>组件生命周期影响</strong>‌</td>
<td>触发组件的 <code>created</code>&#x2F;<code>destroyed</code> 钩子</td>
<td>不影响组件生命周期（元素始终存在）</td>
</tr>
</tbody></table>
<h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><ol>
<li>‌**<code>v-if</code> 适用场景**‌<ul>
<li>‌**初始条件为 <code>false</code>**‌：避免无意义渲染，节省内存</li>
<li>‌<strong>低频切换操作</strong>‌：如页面初始化后仅需一次渲染的弹窗</li>
</ul>
</li>
<li>‌**<code>v-show</code> 优势场景**‌<ul>
<li>‌<strong>高频显示切换</strong>‌：如表单校验提示、Tab 栏切换</li>
<li>‌<strong>保留组件状态</strong>‌：如需要缓存输入框内容的隐藏&#x2F;显示</li>
</ul>
</li>
</ol>
<p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p><code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p><code>v-if</code> 有<strong>更高的切换开销</strong>，而 <code>v-show</code> 有更高的<strong>初始</strong>渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h2 id="七、列表渲染：v-for"><a href="#七、列表渲染：v-for" class="headerlink" title="七、列表渲染：v-for"></a>七、列表渲染：v-for</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul &gt;</span><br><span class="line">      &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">         &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [</span><br><span class="line">          &#123; message: &#x27;Foo&#x27; &#125;, </span><br><span class="line">          &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p>
<p><font color="red">还有<code>key</code>值最好标出，否则会导致一系列问题。<code>key</code>可以取<code>id</code>、<code>name</code>等<strong>字符串</strong>或<strong>数值</strong>为值。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul &gt;</span><br><span class="line">      &lt;li v-for=&quot;(value,key,index) in user&quot; :key=&quot;key&quot;&gt;</span><br><span class="line">       	&#123;&#123;index&#125;&#125;. &#123;&#123;key&#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        name: &#x27;张三&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        classNum: 1</span><br><span class="line">      &#125;</span><br><span class="line">      /*</span><br><span class="line">      userInfo: [</span><br><span class="line">      	&#123; key: &#x27;name&#x27;, value: &#x27;张三&#x27;&#125;,</span><br><span class="line">      	&#123; key: &#x27;age&#x27;, value: 18 &#125;,</span><br><span class="line">      	&#123; key: &#x27;classNum&#x27;, value: 1 &#125;</span><br><span class="line">      ]</span><br><span class="line">      */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数组更新："><a href="#数组更新：" class="headerlink" title="数组更新："></a><a href="https://www.cnblogs.com/LEPENGYANG/p/15793690.html">数组更新</a>：</h3><h4 id="搭配v-if："><a href="#搭配v-if：" class="headerlink" title="搭配v-if："></a>搭配v-if：</h4><p><code>v-if</code>的优先级大于<code>v-for</code>，使用标准：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template v-for=&quot;items in userInfo&quot; :key=&quot;items.id&quot;&gt;</span><br><span class="line">  &lt;li v-if=&quot;user.role === &#x27;ADMIN&#x27;&quot;&gt;</span><br><span class="line">    &#123;&#123; items &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="组件中使用："><a href="#组件中使用：" class="headerlink" title="组件中使用："></a>组件中使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-for=&quot;(item, index) in items&quot;</span><br><span class="line">  :item=&quot;item&quot;</span><br><span class="line">  :index=&quot;index&quot;</span><br><span class="line">  :key=&quot;item.id&quot;</span><br><span class="line">&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure>

<p>显式传递 <code>:item=&quot;item&quot;</code> 和 <code>:index=&quot;index&quot;</code> 的原因：</p>
<ul>
<li>‌<strong>组件作用域隔离</strong>‌：Vue 组件具有独立作用域，<code>v-for</code> 不会自动将迭代数据注入组件，必须通过 props 显式传递。（解耦组件逻辑与数据来源	避免依赖隐式注入，提升可维护性）</li>
<li>‌<strong>数据绑定</strong>：<ul>
<li><code>:item=&quot;item&quot;</code>：将当前数组元素传递给子组件的 <code>item</code> prop，确保子组件能访问具体数据。</li>
<li><code>:index=&quot;index&quot;</code>：传递索引值，常用于动态操作（如删除特定项）或展示列表序号。</li>
</ul>
</li>
</ul>
<h2 id="八、事件处理：v-on"><a href="#八、事件处理：v-on" class="headerlink" title="八、事件处理：v-on &#x2F; @"></a>八、事件处理：v-on &#x2F; @</h2><p>使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;counter += 1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">  &lt;p&gt; &#123;&#123; counter &#125;&#125; &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          counter: 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;sumAdd&quot;&gt;加 1&lt;/button&gt;</span><br><span class="line">  &lt;p&gt; &#123;&#123; counter &#125;&#125; &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          counter: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">          sumAdd()&#123;</span><br><span class="line">              this.counter+1</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a><a href="https://blog.csdn.net/jingjing217/article/details/108235961">事件修饰符</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>……</p>
<h3 id="按键（键盘）修饰符"><a href="#按键（键盘）修饰符" class="headerlink" title="按键（键盘）修饰符"></a><a href="https://www.cnblogs.com/unlockth/p/13485325.html">按键（键盘）修饰符</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>……</p>
<h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a><a href="https://blog.csdn.net/leibaowen/article/details/121283937">系统修饰键</a></h3><h3 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a><a href="https://blog.csdn.net/leibaowen/article/details/121283937">鼠标修饰符</a></h3><h2 id="九、表单：v-model"><a href="#九、表单：v-model" class="headerlink" title="九、表单：v-model"></a>九、表单：v-model</h2><p><strong>v-model 与 v-bind 核心区别对比表</strong></p>
<table>
<thead>
<tr>
<th><strong>特性</strong>‌</th>
<th>‌**<code>v-model</code>**‌</th>
<th>‌**<code>v-bind</code>**‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>核心用途</strong>‌</td>
<td>‌<strong>双向数据绑定</strong>‌（表单输入或自定义组件）</td>
<td>‌<strong>单向数据绑定</strong>‌（将数据绑定到 HTML 属性或组件 props）</td>
</tr>
<tr>
<td>‌<strong>数据流向</strong>‌</td>
<td>数据与视图双向同步：数据变化更新视图，视图变化（如用户输入）更新数据</td>
<td>单向数据流：数据变化更新视图，视图变化‌<strong>不会</strong>‌反向影响数据</td>
</tr>
<tr>
<td>‌<strong>底层实现</strong>‌</td>
<td>语法糖，等价于 <code>:value</code> + <code>@input</code>（默认行为，可自定义）</td>
<td>直接绑定属性，无事件监听机制</td>
</tr>
<tr>
<td>‌<strong>适用场景</strong>‌</td>
<td>- 表单控件（<code>input</code>、<code>textarea</code>、<code>select</code>） - 需要双向绑定的自定义组件</td>
<td>- 绑定 HTML 属性（如 <code>id</code>、<code>class</code>、<code>style</code>） - 向子组件传递 props</td>
</tr>
<tr>
<td>‌<strong>修饰符</strong>‌</td>
<td>支持 <code>.lazy</code>（延迟同步）、<code>.number</code>（转数值）、<code>.trim</code>（去空格）</td>
<td>支持 <code>.prop</code>（绑定 DOM 属性而非特性）、<code>.camel</code>（转驼峰命名）</td>
</tr>
<tr>
<td>‌<strong>典型代码</strong>‌</td>
<td><code>html &lt;input v-model=&quot;message&quot;&gt;</code></td>
<td><code>html &lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td>‌<strong>自定义组件用法</strong>‌</td>
<td><code>html &lt;my-component v-model=&quot;value&quot;&gt;&lt;/my-component&gt;</code> 需组件内部实现 <code>modelValue</code> prop 和 <code>update:modelValue</code> 事件</td>
<td><code>html &lt;my-component :title=&quot;pageTitle&quot;&gt;&lt;/my-component&gt;</code> 直接传递 props</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>‌<strong>场景</strong>‌</th>
<th>‌<strong>选择指令</strong>‌</th>
<th>‌<strong>原因</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>表单输入实时同步</td>
<td><code>v-model</code></td>
<td>自动处理双向数据流，简化代码</td>
</tr>
<tr>
<td>动态设置元素属性（如样式、ID）</td>
<td><code>v-bind</code></td>
<td>单向绑定足够且高效</td>
</tr>
<tr>
<td>向子组件传递只读数据</td>
<td><code>v-bind</code></td>
<td>明确数据所有权在父组件</td>
</tr>
<tr>
<td>子组件需要修改父组件数据</td>
<td><code>v-model</code></td>
<td>通过事件机制安全更新数据，符合单向数据流原则</td>
</tr>
<tr>
<td>需要格式化输入（如转数字、去空格）</td>
<td><code>v-model</code> + 修饰符</td>
<td>直接利用内置修饰符简化处理</td>
</tr>
</tbody></table>
<h3 id="文本："><a href="#文本：" class="headerlink" title="文本："></a>文本：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;请编辑&quot; /&gt;</span><br><span class="line">&lt;p&gt;文本 : &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="多行文本："><a href="#多行文本：" class="headerlink" title="多行文本："></a>多行文本：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;span&gt;多行文本 :&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;textarea v-model=&quot;message&quot; placeholder=&quot;请编辑&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">          data() &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                message: null // 确保 placeholder 生效</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="单选框："><a href="#单选框：" class="headerlink" title="单选框："></a>单选框：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;选择性别&lt;/h3&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      	&lt;input type=&quot;radio&quot; v-model=&quot;selected&quot; value=&quot;male&quot;/&gt; 男</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">     	&lt;input type=&quot;radio&quot; v-model=&quot;selected&quot; value=&quot;female&quot;/&gt; 女</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;p&gt;已选：&#123;&#123; selected &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">//const selected = ref(&#x27;male&#x27;) // 默认选中&quot;男&quot;</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          gender: &#x27;male&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="复选框："><a href="#复选框：" class="headerlink" title="复选框："></a>复选框：</h3><ul>
<li><strong>单个复选框 (Checkbox)</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;isAgreed&quot; /&gt; 我已阅读协议</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;p&gt;状态：&#123;&#123; isAgreed ? &#x27;已同意&#x27; : &#x27;未同意&#x27; &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const isAgreed = ref(false) // 默认空选</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>多个复选框 (Checkbox Group)</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;选择爱好&lt;/h3&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;selectedHobbies&quot; value=&quot;music&quot; /&gt; 音乐</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;selectedHobbies&quot; value=&quot;sports&quot; /&gt; 运动</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;selectedHobbies&quot; value=&quot;reading&quot; /&gt; 阅读</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;p&gt;已选：&#123;&#123; selectedHobbies &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">//import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">//const selectedHobbies = ref([&#x27;music&#x27;]) // 默认选中音乐</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          hobbies: [&#x27;coding&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>‌<strong>单选框组</strong>‌：<ul>
<li>使用相同的 <code>v-model</code> 绑定</li>
<li>通过不同 <code>value</code> 值区分选项</li>
<li>绑定值为字符串类型</li>
</ul>
</li>
<li>‌<strong>复选框</strong>‌：<ul>
<li>单个复选框绑定‌<strong>布尔值</strong>‌</li>
<li>多个复选框绑定‌<strong>数组</strong>‌</li>
<li>每个复选框的 <code>value</code> 会被自动加入&#x2F;移出数组</li>
</ul>
</li>
<li>‌<strong>响应式表现</strong>‌：<ul>
<li>修改 <code>selected</code> 会更新单选状态</li>
<li>修改 <code>selectedHobbies</code> 会同步多选状态</li>
<li>用户点击操作会自动更新绑定值</li>
</ul>
</li>
</ol>
<h3 id="下拉框："><a href="#下拉框：" class="headerlink" title="下拉框："></a>下拉框：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;选择城市&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 下拉框绑定 selectedCity --&gt;</span><br><span class="line">    &lt;select v-model=&quot;selectedCity&quot;&gt;</span><br><span class="line">      &lt;option </span><br><span class="line">        v-for=&quot;city in cities&quot; </span><br><span class="line">        :key=&quot;city.value&quot; </span><br><span class="line">        :value=&quot;city.value&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; city.label &#125;&#125;</span><br><span class="line">      &lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;p&gt;当前选择：&#123;&#123; selectedCity &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/**</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 下拉选项数据（value 为提交值，label 为显示文本）</span><br><span class="line">const cities = [</span><br><span class="line">  &#123; value: &#x27;bj&#x27;, label: &#x27;北京&#x27; &#125;,</span><br><span class="line">  &#123; value: &#x27;sh&#x27;, label: &#x27;上海&#x27; &#125;,</span><br><span class="line">  &#123; value: &#x27;gz&#x27;, label: &#x27;广州&#x27; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 默认选中第一个选项</span><br><span class="line">const selectedCity = ref(cities[0].value)</span><br><span class="line">*/</span><br><span class="line">    Vue.createApp(&#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          cities: [</span><br><span class="line">            &#123; value: &#x27;bj&#x27;, label: &#x27;北京&#x27; &#125;,</span><br><span class="line">            &#123; value: &#x27;sh&#x27;, label: &#x27;上海&#x27; &#125;,</span><br><span class="line">            &#123; value: &#x27;gz&#x27;, label: &#x27;广州&#x27; &#125;</span><br><span class="line">          ],</span><br><span class="line">          selectedCity: &#x27;sh&#x27; // 默认选中上海</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h3><ul>
<li><code>.lazy</code>：延迟同步</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.number</code>：将用户的输入值转为数值类型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>.trim</code>：自动过滤用户输入的首尾空白字符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="十、组件-Components："><a href="#十、组件-Components：" class="headerlink" title="十、组件 Components："></a>十、组件 Components：</h2><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul>
<li>一般（单个文件中）：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建一个Vue 应用</span><br><span class="line">const app = Vue.createApp(&#123;&#125;)</span><br><span class="line">// 定义一个名为 button-counter 的新全局组件</span><br><span class="line">app.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">      You clicked me &#123;&#123; count &#125;&#125; times.</span><br><span class="line">    &lt;/button&gt;`</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.createApp(&#123;&#125;).mount(&quot;#app&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>脚手架 CLI：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- src/components/LocalButton.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button class=&quot;warning-btn&quot;&gt;局部按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LocalButton /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import LocalButton from &#x27;./components/LocalButton.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件交互-Props："><a href="#组件交互-Props：" class="headerlink" title="组件交互 Props："></a>组件交互 Props：</h3><ul>
<li>父子组件交互（Props + 事件）：</li>
</ul>
<p>子组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;接收父组件数据：&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;sendToParent&quot;&gt;向父组件传值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&#x27;msg&#x27;])  // 接收父组件数据</span><br><span class="line">const emit = defineEmits([&#x27;child-event&#x27;])  // 定义自定义事件</span><br><span class="line"></span><br><span class="line">const sendToParent = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;child-event&#x27;, &#x27;来自子组件的数据&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent </span><br><span class="line">    :msg=&quot;parentMsg&quot; </span><br><span class="line">    @child-event=&quot;handleChildEvent&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const parentMsg = ref(&#x27;父组件初始数据&#x27;)</span><br><span class="line">const handleChildEvent = (data) =&gt; &#123;</span><br><span class="line">  parentMsg.value = data  // 接收子组件数据</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>兄弟组件交互（通过父组件中介）</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ParentComponent</span><br><span class="line">├─ BrotherComponentA（发送数据）</span><br><span class="line">└─ BrotherComponentB（接收数据）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- BrotherComponentA.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emitData&quot;&gt;发送数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([&#x27;transfer&#x27;])</span><br><span class="line">const emitData = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;transfer&#x27;, &#x27;兄弟A的数据&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;BrotherComponentA @transfer=&quot;handleTransfer&quot; /&gt;</span><br><span class="line">  &lt;BrotherComponentB :received=&quot;transferData&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const transferData = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">const handleTransfer = (data) =&gt; &#123;</span><br><span class="line">  transferData.value = data  // 通过父组件中转</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>全局状态共享（简易版）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ComponentA.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;store.increment&quot;&gt;全局计数+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; store &#125; from &#x27;./store&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ComponentB.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;当前计数：&#123;&#123; store.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; store &#125; from &#x27;./store&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>‌<strong>交互类型</strong>‌</th>
<th>‌<strong>实现方式</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>父子组件交互</td>
<td>Props + 自定义事件</td>
<td>直接关联的组件层级</td>
</tr>
<tr>
<td>兄弟组件交互</td>
<td>父组件作为中介</td>
<td>同层级无直接关联组件</td>
</tr>
<tr>
<td>全局状态共享</td>
<td>响应式对象</td>
<td>跨多层级组件通信</td>
</tr>
</tbody></table>
<h3 id="监听子组件事件："><a href="#监听子组件事件：" class="headerlink" title="监听子组件事件："></a>监听子组件事件：</h3><ul>
<li>基础事件监听（子组件主动触发）：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emitData&quot;&gt;触发事件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([&#x27;child-event&#x27;])  // 定义事件</span><br><span class="line"></span><br><span class="line">const emitData = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;child-event&#x27;, &#x27;子组件数据&#x27;)  // 触发事件并传值</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent @child-event=&quot;handleEvent&quot; /&gt;</span><br><span class="line">  &lt;p&gt;接收数据：&#123;&#123; receivedData &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const receivedData = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">const handleEvent = (data) =&gt; &#123;</span><br><span class="line">  receivedData.value = data  // 监听子组件事件</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>监听子组件数据变化（props驱动）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;internalValue&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; watch &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&#x27;value&#x27;])</span><br><span class="line">const emit = defineEmits([&#x27;update:value&#x27;])</span><br><span class="line"></span><br><span class="line">// 监听内部数据变化</span><br><span class="line">watch(() =&gt; props.value, (newVal) =&gt; &#123;</span><br><span class="line">  emit(&#x27;update:value&#x27;, newVal)  // 同步数据到父组件</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent </span><br><span class="line">    :value=&quot;parentValue&quot; </span><br><span class="line">    @update:value=&quot;val =&gt; parentValue = val&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const parentValue = ref(&#x27;&#x27;)  // 自动双向绑定</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>组合式监听（v-model语法糖）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input </span><br><span class="line">    :value=&quot;modelValue&quot;</span><br><span class="line">    @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&#x27;modelValue&#x27;])  // 默认prop名</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent v-model=&quot;inputValue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const inputValue = ref(&#x27;&#x27;)  // 自动建立双向绑定</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>监听类型</strong>‌</th>
<th>‌<strong>实现方式</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>自定义事件监听</td>
<td><code>@event</code> + <code>defineEmits</code></td>
<td>子组件主动触发事件</td>
</tr>
<tr>
<td>Props数据变化监听</td>
<td><code>watch</code> + <code>v-model</code></td>
<td>表单类组件双向绑定</td>
</tr>
<tr>
<td>语法糖绑定</td>
<td><code>v-model</code>默认协议</td>
<td>快速实现双向数据流</td>
</tr>
</tbody></table>
<h3 id="插槽分发内容："><a href="#插槽分发内容：" class="headerlink" title="插槽分发内容："></a>插槽分发内容：</h3><ul>
<li><strong>默认插槽</strong></li>
</ul>
<p>子组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- SlotComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h3&gt;默认内容容器&lt;/h3&gt;</span><br><span class="line">    &lt;slot&gt;备用内容（父组件未传内容时显示）&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;SlotComponent&gt;</span><br><span class="line">    &lt;p&gt;父组件传入的插槽内容&lt;/p&gt;  &lt;!-- 覆盖默认插槽--&gt;</span><br><span class="line">  &lt;/SlotComponent&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>具名插槽</strong></li>
</ul>
<p>子组件定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- LayoutComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;layout&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;  &lt;!-- 具名插槽--&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;  &lt;!-- 默认插槽 --&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LayoutComponent&gt;</span><br><span class="line">    &lt;template #header&gt;  &lt;!-- v-slot 简写--&gt;</span><br><span class="line">      &lt;h1&gt;自定义标题内容&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;p&gt;主体内容区&lt;/p&gt;  &lt;!-- 自动填充默认插槽--&gt;</span><br><span class="line">  &lt;/LayoutComponent&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>作用域插槽</strong></li>
</ul>
<p>‌子组件定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ListComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;slot :item=&quot;item&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/slot&gt;  &lt;!-- 传递作用域数据--&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const items = [</span><br><span class="line">  &#123; id: 1, name: &#x27;Apple&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, name: &#x27;Banana&#x27; &#125;</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ListComponent&gt;</span><br><span class="line">    &lt;template #default=&quot;&#123; item &#125;&quot;&gt;  &lt;!-- 接收作用域数据--&gt;</span><br><span class="line">      &lt;span class=&quot;highlight&quot;&gt;&#123;&#123; item.name &#125;&#125;（ID:&#123;&#123; item.id &#125;&#125;）&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/ListComponent&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>‌<strong>类型</strong>‌</th>
<th>‌<strong>功能特性</strong>‌</th>
<th>‌<strong>适用场景</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>默认插槽</td>
<td>基础内容分发，支持备用内容</td>
<td>简单内容替换场景</td>
</tr>
<tr>
<td>具名插槽</td>
<td>多区域内容分发，<code>name</code>标识插槽位置</td>
<td>复杂布局组件</td>
</tr>
<tr>
<td>作用域插槽</td>
<td>子组件向父组件传递数据，实现动态内容渲染</td>
<td>数据驱动型组件交互</td>
</tr>
</tbody></table>
<h3 id="动态组件："><a href="#动态组件：" class="headerlink" title="动态组件："></a>动态组件：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;component :is=&quot;currentComponent&quot; /&gt; </span><br><span class="line">&lt;!--使用内置 &lt;component&gt; 元素配合 :is 属性--&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;currentComponent = &#x27;ComponentA&#x27;&quot;&gt;显示A&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;currentComponent = &#x27;ComponentB&#x27;&quot;&gt;显示B&lt;/button&gt;</span><br><span class="line">  &lt;component :is=&quot;currentComponent&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import ComponentA from &#x27;./ComponentA.vue&#x27;</span><br><span class="line">import ComponentB from &#x27;./ComponentB.vue&#x27;</span><br><span class="line">const currentComponent = ref(&#x27;ComponentA&#x27;)  // 默认显示组件A</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>补充：</p>
<ul>
<li><p>‌<strong>状态保持</strong></p>
<p>比如说：在 A 组件写了一半的文章，然后切换到 B 组件，再切换回 A 组件时，A 组件编辑的内容丢失，想要保持内容，就可以通过<code>&lt;keep-alive/&gt;</code></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component :is=&quot;currentComponent&quot; /&gt;  // 保持组件实例避免重复渲染</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌<strong>动态传参</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;component </span><br><span class="line">  :is=&quot;currentComponent&quot; </span><br><span class="line">  :data=&quot;dynamicData&quot;  // 传递动态参数</span><br><span class="line">  @custom-event=&quot;handleEvent&quot;  // 监听子组件事件</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>‌<strong>调用子组件方法</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;component :is=&quot;currentComponent&quot; ref=&quot;dynamicComp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 父组件中调用</span><br><span class="line">const dynamicComp = ref()</span><br><span class="line">dynamicComp.value.childMethod()  // 需注意可能返回数组</span><br></pre></td></tr></table></figure>

<h3 id="异步组件："><a href="#异步组件：" class="headerlink" title="异步组件："></a>异步组件：</h3><ul>
<li><p>‌<strong>基础定义</strong>‌</p>
<p>使用 <code>defineAsyncComponent()</code> 实现组件按需加载，需配合动态 <code>import()</code> 语法实现代码分割。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./AsyncComponent.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>加载状态控制</strong>‌<br>配置加载中&#x2F;失败状态组件，提升用户体验。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./HeavyComponent.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingSpinner</span>, <span class="comment">// 加载中显示</span></span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorDisplay</span>,      <span class="comment">// 加载失败显示</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,                       <span class="comment">// 延迟展示 loading (ms)</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>                     <span class="comment">// 超时时间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>应用场景：</strong></p>
<ul>
<li><p>‌<strong>首屏性能优化</strong>‌<br>延迟加载非关键组件，降低初始包体积</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首屏不加载的模态框</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LoginModal</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;@/components/LoginModal.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>条件渲染组件</strong>‌<br>用户交互后加载特定模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const showChart = ref(false)</span><br><span class="line">const ChartComponent = defineAsyncComponent(() =&gt; </span><br><span class="line">  import(&#x27;./ChartComponent.vue&#x27;)</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click=&quot;showChart = true&quot;&gt;加载图表&lt;/button&gt;</span><br><span class="line">&lt;ChartComponent v-if=&quot;showChart&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>组合式 API 集成</strong>‌<br>在 setup 语法中动态创建异步组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineAsyncComponent, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const tabs = ref([&#x27;Profile&#x27;, &#x27;Settings&#x27;])</span><br><span class="line">const currentTab = ref(&#x27;Profile&#x27;)</span><br><span class="line"></span><br><span class="line">const AsyncTabComponent = defineAsyncComponent(() =&gt;</span><br><span class="line">  import(`./tabs/$&#123;currentTab.value&#125;.vue`)</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>Suspense 集成</strong>‌<br>实现嵌套异步组件统一加载状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">    &lt;template #default&gt;</span><br><span class="line">      &lt;AsyncComponent/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #fallback&gt;</span><br><span class="line">      &lt;div&gt;Loading...&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>完整示例（用户管理系统）</strong></p>
<p>该示例实现：</p>
<ol>
<li>点击触发异步加载</li>
<li>Suspense 统一管理加载状态</li>
<li>5秒超时控制</li>
<li>TypeScript 类型校验</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 UserManagement.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;showDetail = true&quot;&gt;查看详情&lt;/button&gt;</span><br><span class="line">  &lt;Suspense v-if=&quot;showDetail&quot;&gt;</span><br><span class="line">    &lt;template #default&gt;</span><br><span class="line">      &lt;UserDetail :userId=&quot;selectedId&quot;/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #fallback&gt;</span><br><span class="line">      &lt;div class=&quot;loading&quot;&gt;加载用户信息中...&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineAsyncComponent, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const showDetail = ref(false)</span><br><span class="line">const selectedId = ref(123)</span><br><span class="line"></span><br><span class="line">const UserDetail = defineAsyncComponent(&#123;</span><br><span class="line">  loader: () =&gt; import(&#x27;./UserDetail.vue&#x27;),</span><br><span class="line">  loadingComponent: LoadingSpinner,</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件进阶："><a href="#组件进阶：" class="headerlink" title="组件进阶："></a>组件进阶：</h3><h4 id="1-组件注册"><a href="#1-组件注册" class="headerlink" title="1. 组件注册"></a>1. 组件注册</h4><ul>
<li><p>组件名称：全部小写、包含连字符，如：<code>component-name</code></p>
<p>或者首字母大写，如：<code>ComponentName</code></p>
</li>
<li><p>全局注册：</p>
<p><strong>一般</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;...&#125;).component(&#x27;my-component-name&#x27;, &#123;</span><br><span class="line">  // ... 选项 ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">const app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.component(&#x27;component-a&#x27;, &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;)</span><br><span class="line">app.component(&#x27;component-b&#x27;, &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;component-a&gt;&lt;/component-a&gt;</span><br><span class="line">  &lt;component-b&gt;&lt;/component-b&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>脚手架</strong>：</p>
<p><code>src/components/GlobalButton.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button class=&quot;global-button&quot; @click=&quot;$emit(&#x27;click&#x27;)&quot;&gt;</span><br><span class="line">    &lt;slot&gt;默认按钮&lt;/slot&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在 <code>src/main.js</code> 中全局注册这个组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GlobalButton</span> <span class="keyword">from</span> <span class="string">&#x27;./components/GlobalButton.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;GlobalButton&#x27;</span>, <span class="title class_">GlobalButton</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在应用的任何地方直接使用 <code>&lt;GlobalButton&gt;</code> 而无需单独导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;全局组件示例&lt;/h1&gt;</span><br><span class="line">    &lt;GlobalButton @click=&quot;handleClick&quot;&gt;点击我&lt;/GlobalButton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;按钮被点击了&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部注册：</p>
<p><strong>一般</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ComponentA = &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line">const ComponentB = &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const app = Vue.createApp(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x27;component-a&#x27;: ComponentA,</span><br><span class="line">    &#x27;component-b&#x27;: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>脚手架</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 局部导入组件</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    这是局部子组件内容</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>带<strong>Props</strong>的局部组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :style=&quot;&#123; color: textColor &#125;&quot;&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  message: String,</span><br><span class="line">  textColor: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;#333&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent </span><br><span class="line">    message=&quot;来自父组件的消息&quot; </span><br><span class="line">    text-color=&quot;blue&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合式API局部组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- CounterComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;</span><br><span class="line">    点击次数: &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">const increment = () =&gt; count.value++</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部组件注册的替代写法（非<code>&lt;script setup&gt;</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;OldStyleComponent /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import OldStyleComponent from &#x27;./OldStyleComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    OldStyleComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="2-组件Props"><a href="#2-组件Props" class="headerlink" title="2. 组件Props"></a>2. 组件Props</h4><p><strong>子组件<code>ChildComponent.vue</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 基础类型 --&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;数字类型: &#123;&#123; numberValue &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;布尔类型: &#123;&#123; showInfo ? &#x27;显示&#x27; : &#x27;隐藏&#x27; &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数组类型 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 对象类型 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;userConfig&quot;&gt;</span><br><span class="line">      用户: &#123;&#123; userConfig.name &#125;&#125; (&#123;&#123; userConfig.age &#125;&#125;岁)</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 函数类型 --&gt;</span><br><span class="line">    &lt;button @click=&quot;handleAction&quot;&gt;执行函数&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 自定义验证 --&gt;</span><br><span class="line">    &lt;div :class=&quot;[&#x27;status&#x27;, status]&quot;&gt;</span><br><span class="line">      状态: &#123;&#123; status &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// ========== JavaScript 写法 ==========</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  // 必填字符串 (kebab-case 转换示例)</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 数字验证 (0-100)</span><br><span class="line">  numberValue: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    default: 0,</span><br><span class="line">    validator: value =&gt; value &gt;= 0 &amp;&amp; value &lt;= 100 //:ml-citation&#123;ref=&quot;5,7&quot; data=&quot;citationList&quot;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 布尔类型简写</span><br><span class="line">  showInfo: Boolean,</span><br><span class="line"></span><br><span class="line">  // 数组类型 (带元素类型验证)</span><br><span class="line">  items: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    default: () =&gt; [],</span><br><span class="line">    validator: arr =&gt; arr.every(item =&gt; typeof item === &#x27;string&#x27;) //:ml-citation&#123;ref=&quot;4,7&quot; data=&quot;citationList&quot;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 对象类型 (结构化验证)</span><br><span class="line">  userConfig: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    default: () =&gt; (&#123;</span><br><span class="line">      name: &#x27;匿名用户&#x27;,</span><br><span class="line">      age: 18</span><br><span class="line">    &#125;),</span><br><span class="line">    validator: obj =&gt; &#x27;name&#x27; in obj &amp;&amp; &#x27;age&#x27; in obj //:ml-citation&#123;ref=&quot;4,7&quot; data=&quot;citationList&quot;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 函数类型</span><br><span class="line">  handleAction: &#123;</span><br><span class="line">    type: Function,</span><br><span class="line">    default: () =&gt; console.log(&#x27;默认操作&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 自定义枚举验证</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    validator: value =&gt; [&#x27;success&#x27;, &#x27;warning&#x27;, &#x27;error&#x27;].includes(value) //:ml-citation&#123;ref=&quot;5,7&quot; data=&quot;citationList&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// ========== TypeScript 写法 ==========</span><br><span class="line">/*</span><br><span class="line">interface Props &#123;</span><br><span class="line">  title: string</span><br><span class="line">  numberValue?: number</span><br><span class="line">  showInfo?: boolean</span><br><span class="line">  items?: string[]</span><br><span class="line">  userConfig?: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">  &#125;</span><br><span class="line">  handleAction?: () =&gt; void</span><br><span class="line">  status?: &#x27;success&#x27; | &#x27;warning&#x27; | &#x27;error&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  numberValue: 0,</span><br><span class="line">  items: () =&gt; [],</span><br><span class="line">  userConfig: () =&gt; (&#123; name: &#x27;匿名用户&#x27;, age: 18 &#125;),</span><br><span class="line">  handleAction: () =&gt; console.log(&#x27;默认操作&#x27;)</span><br><span class="line">&#125;) //:ml-citation&#123;ref=&quot;2,6&quot; data=&quot;citationList&quot;&#125;</span><br><span class="line">*/</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.status &#123;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  color: white;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.success &#123; background-color: #67C23A; &#125;</span><br><span class="line">.warning &#123; background-color: #E6A23C; &#125;</span><br><span class="line">.error &#123; background-color: #F56C6C; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>父组件使用 <code>ParentComponent.vue</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent</span><br><span class="line">    title=&quot;组件演示&quot;</span><br><span class="line">    :number-value=&quot;75&quot;</span><br><span class="line">    :show-info=&quot;true&quot;</span><br><span class="line">    :items=&quot;[&#x27;苹果&#x27;, &#x27;香蕉&#x27;, &#x27;橙子&#x27;]&quot;</span><br><span class="line">    :user-config=&quot;&#123; name: &#x27;张三&#x27;, age: 25 &#125;&quot;</span><br><span class="line">    status=&quot;warning&quot;</span><br><span class="line">    :handle-action=&quot;customAction&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 注意使用 kebab-case 属性命名 (短横线分隔)</span><br><span class="line">const customAction = () =&gt; alert(&#x27;自定义操作触发&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-非Prop的属性"><a href="#3-非Prop的属性" class="headerlink" title="3. 非Prop的属性"></a>3. 非Prop的属性</h4><p>在 Vue 3 中，‌<strong>非 Prop 的 属性</strong>‌ 是指传递给组件但未被组件显式声明为 <code>props</code> 的属性。这些属性默认会被自动应用到组件的根元素上，适用于处理原生 HTML 属性或自定义属性的传递场景。</p>
<p>通过合理利用非 Prop Attribute 机制，可以显著提升组件的灵活性和可复用性，特别是在构建基础组件库时，该特性尤为重要。</p>
<p><strong>使用示例</strong>:</p>
<ul>
<li><p><strong>示例 1：基础用法（自动继承）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;custom-wrapper&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件内容&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;ChildComponent </span><br><span class="line">  class=&quot;custom-class&quot; </span><br><span class="line">  style=&quot;color: red&quot;</span><br><span class="line">  data-info=&quot;示例数据&quot;</span><br><span class="line">  @click=&quot;handleClick&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>‌<strong>渲染结果</strong>‌：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;custom-wrapper custom-class&quot; </span><br><span class="line">     style=&quot;color: red&quot; </span><br><span class="line">     data-info=&quot;示例数据&quot;&gt;</span><br><span class="line">  &lt;h3&gt;子组件内容&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>示例 2：禁用继承 + 手动绑定</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;!-- 将属性绑定到内部元素 --&gt;</span><br><span class="line">    &lt;button v-bind=&quot;$attrs&quot;&gt;操作按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inheritAttrs: false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;ChildComponent </span><br><span class="line">  class=&quot;btn-primary&quot;</span><br><span class="line">  title=&quot;操作提示&quot;</span><br><span class="line">  @click=&quot;handleClick&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>渲染结果</strong>‌：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">  &lt;button class=&quot;btn-primary&quot; title=&quot;操作提示&quot;&gt;操作按钮&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>示例 3：多根组件处理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MultiRootComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header v-bind=&quot;$attrs&quot;&gt;头部&lt;/header&gt;</span><br><span class="line">  &lt;main&gt;主要内容&lt;/main&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inheritAttrs: false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;MultiRootComponent class=&quot;header-class&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>渲染结果</strong>‌：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;header class=&quot;header-class&quot;&gt;头部&lt;/header&gt;</span><br><span class="line">&lt;main&gt;主要内容&lt;/main&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>关键 API 说明</strong>:</p>
<table>
<thead>
<tr>
<th>API&#x2F;对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$attrs</code></td>
<td>包含所有非 prop 属性（包括 <code>class</code>, <code>style</code>, 事件监听器）的对象</td>
</tr>
<tr>
<td><code>inheritAttrs</code></td>
<td>布尔值，控制是否自动绑定到根元素（默认 <code>true</code>）</td>
</tr>
<tr>
<td><code>v-bind=&quot;$attrs&quot;</code></td>
<td>手动绑定指令，用于精确控制属性位置</td>
</tr>
</tbody></table>
<h4 id="4-组件-自定义事件："><a href="#4-组件-自定义事件：" class="headerlink" title="4. 组件-自定义事件："></a>4. 组件-自定义事件：</h4><ul>
<li><p>‌组件通信机制‌</p>
<p>通过自定义事件实现‌子组件 → 父组件‌的单向数据流，与 props 形成互补的通信方式。</p>
</li>
<li><p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。推荐使用短横线命名（如 <code>update-data</code>）以避免 DOM 模板的大小写转换问题，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$emit(&#x27;my-event&#x27;)</span><br><span class="line">&lt;!--这个myEvent必须匹配事件名为my-event--&gt;</span><br><span class="line">&lt;my-component @my-event=&quot;doSomething&quot;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>核心 API</strong>‌</p>
<ul>
<li><p><code>defineEmits()</code>: 声明组件可触发的事件类型</p>
</li>
<li><p><code>emit()</code>: 触发事件并传递数据</p>
<p>使用 <code>$emit</code> 重写原生事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;$emit(&#x27;custom-click&#x27;, $event)&quot;&gt;</span><br><span class="line">  自定义点击事件</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 ChildComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;handleClick&quot;&gt;发送消息&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([&#x27;message-sent&#x27;])  // 声明事件类型</span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;message-sent&#x27;, &#123;  // 触发事件并传递对象参数</span><br><span class="line">    text: &#x27;来自子组件的消息&#x27;,</span><br><span class="line">    timestamp: Date.now()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent @message-sent=&quot;handleMessage&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const handleMessage = (payload) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;收到子组件消息:&#x27;, payload.text)</span><br><span class="line">  // 输出结果: &quot;收到子组件消息: 来自子组件的消息&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-插槽slot"><a href="#5-插槽slot" class="headerlink" title="5.插槽slot"></a>5.插槽<code>slot</code></h4><ul>
<li><p>‌<strong>默认插槽</strong></p>
<p>接收父组件未指定名称的内容，使用 <code>&lt;slot&gt;</code> 标签作为内容占位符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 BaseCard.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt; &lt;!-- 默认插槽位置 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;BaseCard&gt;</span><br><span class="line">  &lt;p&gt;默认插槽内容&lt;/p&gt;</span><br><span class="line">&lt;/BaseCard&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>具名插槽</strong></p>
<p>通过 <code>name</code> 属性定义多内容分发点位，父组件使用 <code>v-slot:name</code> 或 <code>#name</code> 指定内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 Layout.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;Layout&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h1&gt;标题区域&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;template #content&gt;</span><br><span class="line">    &lt;p&gt;正文内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/Layout&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>作用域插槽</strong></p>
<p>子组件通过插槽向父组件传递数据，父组件通过 <code>v-slot=&quot;scope&quot;</code> 接收。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 DataTable.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">      &lt;slot :item=&quot;item&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;DataTable :items=&quot;list&quot;&gt;</span><br><span class="line">  &lt;template #default=&quot;&#123; item &#125;&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; item.name &#125;&#125; (&#123;&#123; item.id &#125;&#125;)&lt;/span&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/DataTable&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>多数据传递</strong>‌<br>子组件可传递多个参数，父组件按需解构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;slot :data=&quot;data&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template #item=&quot;&#123; data, index &#125;&quot;&gt;</span><br><span class="line">  &#123;&#123; index + 1 &#125;&#125;. &#123;&#123; data.title &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方法传递</strong>‌<br>支持传递子组件方法实现跨组件交互</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 FormField.vue --&gt;</span><br><span class="line">&lt;slot :updateValue=&quot;handleUpdate&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;template #field=&quot;&#123; updateValue &#125;&quot;&gt;</span><br><span class="line">  &lt;input @input=&quot;updateValue($event.target.value)&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用示例：（数据表格组件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 DataGrid.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr v-for=&quot;(row, index) in data&quot;&gt;</span><br><span class="line">        &lt;slot name=&quot;row&quot; :row=&quot;row&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件使用 --&gt;</span><br><span class="line">&lt;DataGrid :data=&quot;users&quot;&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #row=&quot;&#123; row, index &#125;&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123; row.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/DataGrid&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-提供-provide-与注入-inject"><a href="#6-提供-provide-与注入-inject" class="headerlink" title="6. 提供 provide 与注入 inject"></a>6. 提供 provide 与注入 inject</h4><ul>
<li><p>‌<strong>设计目标</strong>‌<br>解决深层嵌套组件间的‌<strong>跨层级数据传递</strong>‌问题，避免逐级透传 props 的繁琐性。</p>
</li>
<li><p>‌<strong>核心 API</strong>‌</p>
<ul>
<li><code>provide(key, value)</code>：在父&#x2F;祖先组件中声明可注入数据</li>
<li><code>inject(key, defaultValue)</code>：在后代组件中获取注入数据</li>
</ul>
</li>
<li><p>‌<strong>响应式机制</strong>‌<br>默认传递静态数据，需配合 <code>ref()</code> 或 <code>reactive()</code> 实现响应式数据传递</p>
</li>
<li><p><strong>用法</strong></p>
<ul>
<li><p><strong>静态数据传递</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 祖先组件 Provider.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide &#125; from &#x27;vue&#x27;</span><br><span class="line">provide(&#x27;appTheme&#x27;, &#x27;dark&#x27;) // 提供静态值</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 后代组件 Consumer.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">const theme = inject(&#x27;appTheme&#x27;) // 注入值</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>响应式数据传递</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 祖先组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const counter = ref(0)</span><br><span class="line">provide(&#x27;globalCounter&#x27;, counter) // 提供响应式对象</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 后代组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const counter = inject(&#x27;globalCounter&#x27;)</span><br><span class="line">const increment = () =&gt; counter.value++</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>方法传递</strong>‌<br>实现跨组件方法调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 祖先组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const refreshData = () =&gt; &#123; /* 数据刷新逻辑 */ &#125;</span><br><span class="line">provide(&#x27;refresh&#x27;, refreshData)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 后代组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const refresh = inject(&#x27;refresh&#x27;)</span><br><span class="line">&lt;button @click=&quot;refresh&quot;&gt;刷新&lt;/button&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Symbol 键名</strong>‌<br>避免命名冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// symbols.js</span><br><span class="line">export const APP_THEME = Symbol()</span><br><span class="line"></span><br><span class="line">// 提供端</span><br><span class="line">provide(APP_THEME, &#x27;dark&#x27;)</span><br><span class="line"></span><br><span class="line">// 注入端</span><br><span class="line">inject(APP_THEME)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>默认值设置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const theme = inject(&#x27;appTheme&#x27;, &#x27;light&#x27;) // 默认浅色主题</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>示例：（用户管理系统）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 祖先组件 App.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">const userState = reactive(&#123;</span><br><span class="line">  list: [],</span><br><span class="line">  addUser: (user) =&gt; &#123;</span><br><span class="line">    userState.list.push(user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">provide(&#x27;userSystem&#x27;, userState) // 提供状态管理系统</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComponent /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 后代组件 ChildComponent.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; list, addUser &#125; = inject(&#x27;userSystem&#x27;)</span><br><span class="line"></span><br><span class="line">const handleSubmit = () =&gt; &#123;</span><br><span class="line">  addUser(&#123; name: &#x27;新用户&#x27;, id: Date.now() &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;user in list&quot; :key=&quot;user.id&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;handleSubmit&quot;&gt;添加用户&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-模板引用："><a href="#7-模板引用：" class="headerlink" title="7. 模板引用："></a>7. 模板引用：</h4><ul>
<li><p><strong>基本定义</strong>‌</p>
<p>模板引用通过<code>ref</code>属性直接获取DOM元素或子组件实例，需在<code>setup()</code>中声明同名引用变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input ref=&quot;inputRef&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">const inputRef = ref(null)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  inputRef.value?.focus() // DOM加载后自动聚焦</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>组件实例引用</strong>‌<br>引用子组件时需使用<code>defineExpose</code>暴露方法或属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ChildComponent.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const sayHello = () =&gt; console.log(&#x27;Hello!&#x27;)</span><br><span class="line">defineExpose(&#123; sayHello &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child ref=&quot;childRef&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const childRef = ref(null)</span><br><span class="line">childRef.value?.sayHello() // 调用子组件方法</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>动态模板引用</strong>‌<br>结合<code>v-for</code>循环动态绑定引用时，需使用函数形式接收元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;item in 5&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">    &lt;div :ref=&quot;(el) =&gt; setItemRef(el, item)&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const itemRefs = []</span><br><span class="line">const setItemRef = (el, index) =&gt; &#123;</span><br><span class="line">  if (el) itemRefs[index] = el</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>复合类型引用</strong>‌<br>引用多个元素时通过对象结构管理不同实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button ref=&quot;submitBtn&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;button ref=&quot;cancelBtn&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const &#123; container, submitBtn, cancelBtn &#125; = &#123;</span><br><span class="line">  container: ref(null),</span><br><span class="line">  submitBtn: ref(null),</span><br><span class="line">  cancelBtn: ref(null)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>组件卸载处理</strong>‌<br>通过<code>watchEffect</code>自动清理引用避免内存泄漏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vueCopy Code&lt;script setup&gt;</span><br><span class="line">import &#123; watchEffect &#125; from &#x27;vue&#x27;</span><br><span class="line">const dynamicRef = ref(null)</span><br><span class="line"></span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  const node = dynamicRef.value</span><br><span class="line">  if (node) &#123;</span><br><span class="line">    node.addEventListener(&#x27;click&#x27;, handleClick)</span><br><span class="line">    return () =&gt; node.removeEventListener(&#x27;click&#x27;, handleClick)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>TypeScript 类型声明</strong>‌<br>为组件引用声明精确类型保障代码安全</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typescriptCopy Codeimport type &#123; Ref &#125; from &#x27;vue&#x27;</span><br><span class="line">interface ChildComponentExpose &#123;</span><br><span class="line">  validate: () =&gt; boolean</span><br><span class="line">&#125;</span><br><span class="line">const childRef = ref&lt;Ref&lt;ChildComponentExpose&gt;&gt;(null)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意事项:</strong></p>
<ul>
<li><p>‌<strong>引用时机限制</strong>‌<br>只能在<code>onMounted</code>及之后的生命周期钩子访问引用对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascriptCopy CodeonMounted(() =&gt; &#123;</span><br><span class="line">  console.log(inputRef.value) // 正常访问</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>响应式更新机制</strong>‌<br>模板引用不会触发组件重新渲染，与响应式数据解耦</p>
</li>
<li><p>‌<strong>性能优化建议</strong>‌<br>避免高频操作DOM，优先使用数据驱动方案</p>
</li>
</ul>
<p><strong>完整示例（表单验证）：</strong></p>
<p>该示例实现：</p>
<ol>
<li>表单元素直接操作验证</li>
<li>原生DOM方法调用</li>
<li>提交状态控制</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;handleSubmit&quot;&gt;</span><br><span class="line">    &lt;input ref=&quot;emailInput&quot; type=&quot;email&quot; required&gt;</span><br><span class="line">    &lt;button ref=&quot;submitBtn&quot; type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const emailInput = ref(null)</span><br><span class="line">const submitBtn = ref(null)</span><br><span class="line"></span><br><span class="line">const handleSubmit = () =&gt; &#123;</span><br><span class="line">  if (!emailInput.value.checkValidity()) &#123;</span><br><span class="line">    emailInput.value.setCustomValidity(&#x27;请输入有效邮箱&#x27;)</span><br><span class="line">    emailInput.value.reportValidity()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    submitBtn.value.disabled = true // 禁用提交按钮</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="十一、过渡与动画"><a href="#十一、过渡与动画" class="headerlink" title="十一、过渡与动画"></a>十一、过渡与动画</h2><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><ul>
<li><p>‌<strong>组件分类</strong>‌</p>
<ul>
<li><code>&lt;transition&gt;</code>：用于单个元素的进入&#x2F;离开过渡</li>
<li><code>&lt;transition-group&gt;</code>：处理列表元素的动态变化（增删&#x2F;顺序调整）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 单个元素 --&gt;</span><br><span class="line">&lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot;&gt;内容&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 列表元素 --&gt;</span><br><span class="line">&lt;transition-group name=&quot;list&quot; tag=&quot;ul&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.text &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>过渡生命周期</strong>‌<br>自动应用 6 个 CSS 类名控制过渡效果：</p>
<ul>
<li><code>v-enter-from</code>：进入动画起始状态</li>
<li><code>v-enter-active</code>：进入动画生效阶段（定义过渡时长&#x2F;曲线）</li>
<li><code>v-enter-to</code>：进入动画结束状态</li>
<li><code>v-leave-from</code>：离开动画起始状态</li>
<li><code>v-leave-active</code>：离开动画生效阶段</li>
<li><code>v-leave-to</code>：离开动画结束状态</li>
</ul>
</li>
</ul>
<h3 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h3><ul>
<li><p>‌<strong>CSS 过渡</strong>‌<br>通过 CSS 属性实现平滑状态切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter-from, .fade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>CSS 动画</strong>‌<br>使用 <code>@keyframes</code> 定义复杂动画效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bounce-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bounce-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>) &#125;</span><br><span class="line">  <span class="number">50%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.25</span>) &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ul>
<li><p>‌<strong>JavaScript 钩子</strong>‌<br>通过生命周期钩子实现脚本控制动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  @before-enter=&quot;onBeforeEnter&quot;</span><br><span class="line">  @enter=&quot;onEnter&quot;</span><br><span class="line">  @after-enter=&quot;onAfterEnter&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const onEnter = (el, done) =&gt; &#123;</span><br><span class="line">  el.style.opacity = 0</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    el.style.opacity = 1</span><br><span class="line">    done() // 必须调用以结束过渡</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>第三方动画库集成</strong>‌<br>结合 <code>animate.css</code> 快速实现预置动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  enter-active-class=&quot;animate__animated animate__fadeInDown&quot;</span><br><span class="line">  leave-active-class=&quot;animate__animated animate__fadeOutUp&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h3><ul>
<li><p>‌<strong>列表动画</strong>‌<br>使用 <code>&lt;transition-group&gt;</code> 时需为每个元素设置唯一 <code>key</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vueCopy Code&lt;transition-group name=&quot;list&quot;&gt;</span><br><span class="line">  &lt;div </span><br><span class="line">    v-for=&quot;item in items&quot; </span><br><span class="line">    :key=&quot;item.id&quot;</span><br><span class="line">    class=&quot;list-item&quot;</span><br><span class="line">  &gt;&#123;&#123; item.text &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.list-move &#123; /* 列表顺序变化动画 */</span><br><span class="line">  transition: transform 0.8s ease;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>动态过渡</strong>‌<br>根据状态切换不同动画效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vueCopy Code&lt;transition :name=&quot;isError ? &#x27;shake&#x27; : &#x27;fade&#x27;&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><p>‌<strong>性能优化</strong>‌</p>
<ul>
<li>优先使用 CSS 动画（浏览器硬件加速优化）</li>
<li>避免在过渡中操作大量 DOM 元素</li>
</ul>
</li>
<li><p>‌<strong>初始渲染过渡</strong>‌<br>通过 <code>appear</code> 属性启用页面加载时的初始动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vueCopy Code&lt;transition appear&gt;</span><br><span class="line">  &lt;div&gt;首次加载动画&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>组件根元素过渡</strong>‌<br>直接为组件根元素添加过渡效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vueCopy Code&lt;transition name=&quot;slide&quot;&gt;</span><br><span class="line">  &lt;MyComponent v-if=&quot;show&quot; /&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="综合示例（购物车动画）"><a href="#综合示例（购物车动画）" class="headerlink" title="综合示例（购物车动画）"></a>综合示例（购物车动画）</h3><p>该示例实现：</p>
<ol>
<li>商品添加时的右滑进入动画</li>
<li>删除时的上滑消失动画</li>
<li>自动处理列表位置调整过渡</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;addItem&quot;&gt;添加商品&lt;/button&gt;</span><br><span class="line">  &lt;transition-group name=&quot;cart&quot; tag=&quot;ul&quot;&gt;</span><br><span class="line">    &lt;li </span><br><span class="line">      v-for=&quot;item in cartItems&quot; </span><br><span class="line">      :key=&quot;item.id&quot;</span><br><span class="line">      class=&quot;cart-item&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;removeItem(item.id)&quot;&gt;×&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.cart-item &#123;</span><br><span class="line">  transition: all 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line">.cart-enter-from &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateX(30px);</span><br><span class="line">&#125;</span><br><span class="line">.cart-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateY(-20px);</span><br><span class="line">&#125;</span><br><span class="line">.cart-leave-active &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="十二、Vue3-响应性（及时变化）"><a href="#十二、Vue3-响应性（及时变化）" class="headerlink" title="十二、Vue3 响应性（及时变化）"></a>十二、Vue3 响应性（及时变化）</h2><p><font color="red">这玩意图的就是动态更新，比如说 a+b&#x3D;c，当 a 变化，c 自动跟随变化，不需要手动干预</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> a.<span class="property">value</span> + b.<span class="property">value</span>) <span class="comment">// c=3</span></span><br><span class="line"><span class="comment">//当修改 a.value = 5 时，c 自动变为 7，无需手动干预</span></span><br></pre></td></tr></table></figure>

<p>应用场景：购物车总价计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;number&quot; v-model.number=&quot;price&quot;&gt; 单价</span><br><span class="line">  &lt;input type=&quot;number&quot; v-model.number=&quot;quantity&quot;&gt; 数量</span><br><span class="line">  &lt;p&gt;总价: &#123;&#123; total &#125;&#125;&lt;/p&gt; &lt;!-- 当 price 或 quantity 变化时，total 自动更新 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const price = ref(10)    // 单价</span><br><span class="line">const quantity = ref(2) // 数量</span><br><span class="line">const total = computed(() =&gt; price.value * quantity.value) // 总价自动计算</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Vue3 使用 ES6 的<code>Proxy</code> 和 <code>Reflect</code> API 实现响应式系统</p>
<p><strong>优势</strong>：支持动态新增&#x2F;删除属性自动触发更新，直接通过下标修改数组元素可触发响应。</p>
<p><strong>原理</strong>‌：通过<code>Proxy</code> 对象拦截 <code>get</code>、<code>set</code>、<code>deleteProperty</code> 等操作，实现细粒度依赖追踪</p>
<p><strong>响应式流程</strong>‌</p>
<ul>
<li>数据变化 → 触发 <code>Proxy</code> 的 <code>set</code> 拦截 → 通知依赖更新 → 重新渲染视图。</li>
<li>深度响应式：<code>reactive</code> 会递归代理对象的所有嵌套属性。</li>
</ul>
<p>‌<strong>依赖收集与触发更新</strong>‌</p>
<ul>
<li>‌<strong>依赖收集</strong>‌：在数据读取时，通过 <code>track()</code> 函数记录当前正在执行的副作用函数（如模板渲染、计算属性等）；</li>
<li>‌<strong>触发更新</strong>‌：在数据修改时，通过 <code>trigger()</code> 函数通知所有关联的副作用函数重新执行，驱动视图更新。</li>
</ul>
<p><strong>核心 API 解析：</strong></p>
<table>
<thead>
<tr>
<th>‌<strong>API</strong>‌</th>
<th>‌<strong>设计目的</strong>‌</th>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>示例</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>reactive</code></td>
<td>创建深度响应式<strong>对象&#x2F;数组</strong></td>
<td>递归代理所有嵌套属性，自动追踪深层变化</td>
<td><code>const obj = reactive(&#123; a: 1 &#125;)</code></td>
</tr>
<tr>
<td><code>ref</code></td>
<td>包装**基本类型（数字、字符串）**或复杂对象引用</td>
<td>通过 <code>.value</code> 访问值，自动解包（模板中无需 <code>.value</code>）</td>
<td><code>const count = ref(0)</code></td>
</tr>
<tr>
<td><code>shallowRef</code></td>
<td>仅包装顶层引用</td>
<td>不追踪内部属性变化，适用于大对象性能优化</td>
<td><code>const data = shallowRef(&#123; list: [...] &#125;)</code></td>
</tr>
<tr>
<td><code>markRaw</code></td>
<td>标记对象为非响应式</td>
<td>跳过代理转换，避免不必要的性能消耗</td>
<td><code>markRaw(largeStaticData)</code></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>特性</strong>‌</td>
<td>‌<strong>Vue 2.x</strong>‌</td>
<td>‌<strong>Vue 3.0</strong>‌</td>
</tr>
<tr>
<td>‌<strong>响应式实现</strong>‌</td>
<td><code>Object.defineProperty</code></td>
<td><code>Proxy</code>（全量拦截）</td>
</tr>
<tr>
<td>‌<strong>动态属性支持</strong>‌</td>
<td>需手动调用 API</td>
<td>自动触发更新</td>
</tr>
<tr>
<td>‌<strong>数组操作支持</strong>‌</td>
<td>仅拦截部分方法（如 <code>push</code>）</td>
<td>支持所有操作（包括下标修改）</td>
</tr>
<tr>
<td>‌<strong>性能优化</strong>‌</td>
<td>全量递归监听</td>
<td>按需追踪依赖，减少内存占用</td>
</tr>
</tbody></table>
<h3 id="响应式系统工作流程："><a href="#响应式系统工作流程：" class="headerlink" title="响应式系统工作流程："></a>响应式系统工作流程：</h3><ol>
<li><p>‌<strong>初始化阶段</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;); <span class="comment">// 代理对象生成</span></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) &#125;); <span class="comment">// 副作用注册</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>reactive()</code> 将对象转换为 <code>Proxy</code> 代理；</li>
<li><code>effect()</code> 执行时触发 <code>get</code> 拦截，完成依赖收集。</li>
</ul>
</li>
<li><p>‌<strong>更新阶段</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state.<span class="property">count</span>++; <span class="comment">// 触发 set 拦截</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Proxy</code> 拦截 <code>set</code> 操作，调用 <code>trigger()</code> 触发所有关联副作用；</li>
<li>视图或计算属性基于最新数据重新渲染。</li>
</ul>
</li>
</ol>
<h3 id="性能优化实践："><a href="#性能优化实践：" class="headerlink" title="性能优化实践："></a>性能优化实践：</h3><ol>
<li><p>避免过度深度监听‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowObj = <span class="title function_">shallowReactive</span>(&#123; <span class="attr">nested</span>: &#123; <span class="attr">data</span>: [...] &#125; &#125;); <span class="comment">// 仅顶层响应</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>shallowReactive</code> 或 <code>shallowRef</code> 减少递归监听开销；</li>
</ul>
</li>
<li><p>‌<strong>静态数据标记</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="title function_">markRaw</span>(&#123; <span class="attr">size</span>: <span class="number">100</span> &#125;); <span class="comment">// 跳过代理转换</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对高频访问但无需响应的数据标记为 <code>markRaw</code>，提升访问速度；</li>
</ul>
</li>
<li><p>‌<strong>响应式与非响应式数据分离</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> staticData = &#123; <span class="comment">/* 非响应数据 */</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> reactiveData = <span class="title function_">reactive</span>(&#123; <span class="comment">/* 响应数据 */</span> &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>减少不必要的依赖追踪。</li>
</ul>
</li>
</ol>
<h3 id="典型场景示例："><a href="#典型场景示例：" class="headerlink" title="典型场景示例："></a>典型场景示例：</h3><p>‌<strong>动态添加响应式属性</strong>‌</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;&#125;);</span><br><span class="line">state.<span class="property">newProp</span> = <span class="string">&quot;value&quot;</span>; <span class="comment">// 自动触发更新</span></span><br></pre></td></tr></table></figure>

<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 基础数据绑定 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[&#x27;container&#x27;, `theme-$&#123;user.preferences.theme&#125;`]&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; props.initialTitle &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 事件处理 --&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;点击计数: &#123;&#123; counter &#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeTheme&quot;&gt;切换主题&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 条件渲染 --&gt;</span><br><span class="line">    &lt;p v-if=&quot;isAdult&quot;&gt;成年用户&lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt;未成年用户&lt;/p&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 表单双向绑定 --&gt;</span><br><span class="line">    &lt;input v-model=&quot;user.name&quot; placeholder=&quot;输入用户名&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;number&quot; v-model.number=&quot;user.age&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 自定义组件通信 --&gt;</span><br><span class="line">    &lt;button @click=&quot;updateTitle&quot;&gt;更新标题&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 列表渲染 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;n in 5&quot; :key=&quot;n&quot;&gt;项目 &#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 样式绑定 --&gt;</span><br><span class="line">    &lt;p :style=&quot;&#123; fontSize: user.preferences.fontSize + &#x27;px&#x27; &#125;&quot;&gt;可调节字号&lt;/p&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 自定义Hook使用 --&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;resetForm&quot;&gt;</span><br><span class="line">      &lt;input v-model=&quot;formData.username&quot; placeholder=&quot;用户名&quot;&gt;</span><br><span class="line">      &lt;input v-model=&quot;formData.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/* ✅ 响应式核心 API 导入 */</span><br><span class="line">import &#123; ref, reactive, computed, watch, watchEffect, onMounted, provide &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景1：基础响应式数据 */</span><br><span class="line">// 用 ref 处理基本类型</span><br><span class="line">const counter = ref(0)</span><br><span class="line">// 用 reactive 处理对象类型</span><br><span class="line">const user = reactive(&#123;</span><br><span class="line">  name: &#x27;张三&#x27;,</span><br><span class="line">  age: 25,</span><br><span class="line">  preferences: &#123;</span><br><span class="line">    theme: &#x27;dark&#x27;,</span><br><span class="line">    fontSize: 14</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景2：计算属性 */</span><br><span class="line">const isAdult = computed(() =&gt; user.age &gt;= 18)</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景3：方法 */</span><br><span class="line">// 修改 ref 需要 .value</span><br><span class="line">const increment = () =&gt; counter.value++  </span><br><span class="line">// 修改 reactive 对象直接赋值</span><br><span class="line">const changeTheme = () =&gt; &#123;</span><br><span class="line">  user.preferences.theme = user.preferences.theme === &#x27;dark&#x27; ? &#x27;light&#x27; : &#x27;dark&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景4：监听器 */</span><br><span class="line">// 监听单个 ref 的变化</span><br><span class="line">watch(counter, (newVal, oldVal) =&gt; &#123;</span><br><span class="line">  console.log(`计数器从 $&#123;oldVal&#125; 变为 $&#123;newVal&#125;`)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 深度监听对象</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; user.preferences,</span><br><span class="line">  (newPref) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;主题变化:&#x27;, newPref.theme)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; deep: true &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 立即执行的 watchEffect</span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  document.title = `计数器: $&#123;counter.value&#125;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景5：生命周期 */</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;组件已挂载&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景6：组件通信 */</span><br><span class="line">// 接收 props</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  initialTitle: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;默认标题&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 定义 emits</span><br><span class="line">const emit = defineEmits([&#x27;titleChange&#x27;])</span><br><span class="line">const updateTitle = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;titleChange&#x27;, &#x27;新标题-&#x27; + Date.now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景7：依赖注入 */</span><br><span class="line">// 提供全局配置</span><br><span class="line">provide(&#x27;appConfig&#x27;, &#123;</span><br><span class="line">  apiBaseUrl: &#x27;https://api.example.com&#x27;,</span><br><span class="line">  maxItems: 100</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 🛠️ 场景8：自定义Hook示例 */</span><br><span class="line">// 自动重置的表单逻辑复用</span><br><span class="line">function useAutoResetForm(initialValue) &#123;</span><br><span class="line">  const formData = reactive(&#123; ...initialValue &#125;)</span><br><span class="line">  const resetForm = () =&gt; Object.assign(formData, initialValue)</span><br><span class="line">  </span><br><span class="line">  return &#123;</span><br><span class="line">    formData,</span><br><span class="line">    resetForm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用Hook</span><br><span class="line">const &#123; formData, resetForm &#125; = useAutoResetForm(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  password: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.theme-dark &#123;</span><br><span class="line">  background: #333;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line">.theme-light &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="主要功能说明："><a href="#主要功能说明：" class="headerlink" title="主要功能说明："></a>主要功能说明：</h4><ol>
<li>‌<strong>响应式数据管理</strong>‌<ul>
<li><code>ref</code> 处理基本类型数据</li>
<li><code>reactive</code> 处理对象类型数据</li>
<li>嵌套对象修改的正确姿势</li>
</ul>
</li>
<li>‌<strong>计算属性</strong>‌<ul>
<li>根据用户年龄判断是否成年</li>
</ul>
</li>
<li>‌<strong>方法交互</strong>‌<ul>
<li>计数器增减</li>
<li>主题切换</li>
</ul>
</li>
<li>‌<strong>监听系统</strong>‌<ul>
<li><code>watch</code> 监听特定值变化</li>
<li><code>watchEffect</code> 自动追踪依赖</li>
<li>深度监听对象属性</li>
</ul>
</li>
<li>‌<strong>生命周期</strong>‌<ul>
<li>使用 <code>onMounted</code> 执行初始化操作</li>
</ul>
</li>
<li>‌<strong>组件通信</strong>‌<ul>
<li><code>defineProps</code> 接收父组件参数</li>
<li><code>defineEmits</code> 触发父组件事件</li>
</ul>
</li>
<li>‌<strong>依赖注入</strong>‌<ul>
<li>使用 <code>provide</code> 实现跨组件数据传递</li>
</ul>
</li>
<li>‌<strong>逻辑复用</strong>‌<ul>
<li>封装 <code>useAutoResetForm</code> 自定义 Hook</li>
</ul>
</li>
<li>‌<strong>模板特性</strong>‌<ul>
<li>条件渲染 (<code>v-if</code>&#x2F;<code>v-else</code>)</li>
<li>列表渲染 (<code>v-for</code>)</li>
<li>事件修饰符 (<code>.prevent</code>)</li>
<li>样式绑定 (<code>:class</code>, <code>:style</code>)</li>
</ul>
</li>
<li>‌<strong>样式作用域</strong>‌<ul>
<li>使用 <code>scoped</code> 实现组件样式隔离</li>
</ul>
</li>
</ol>
<h2 id="十三、Vue3-组合式API（Composition-API）"><a href="#十三、Vue3-组合式API（Composition-API）" class="headerlink" title="十三、Vue3 组合式API（Composition API）"></a>十三、Vue3 组合式API（Composition API）</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念 &lt;script setup&gt;"></a>核心概念 <code>&lt;script setup&gt;</code></h3><ol>
<li><p>‌**<code>setup</code> 函数**‌<br>组合式 API 的入口函数，用于定义组件逻辑，替代 Vue 2 的 <code>data</code>、<code>methods</code> 等选项。</p>
<ul>
<li><p>‌特性：</p>
<ul>
<li>在组件实例创建前执行，无 <code>this</code> 上下文；</li>
<li>返回对象中的属性和方法可直接在模板中使用。</li>
</ul>
</li>
<li><p>‌示例‌：</p>
<p><strong>传统 <code>setup()</code> 函数</strong>‌<br>需 <code>return</code> 响应式变量（如 <code>ref</code>&#x2F;<code>reactive</code>）才能让模板访问并实现数据绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);<span class="comment">// 使用 ref 创建响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, increment &#125;; <span class="comment">// 必须返回变量才能在模板中使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>简化后：</strong></font></p>
<p><code>&lt;script setup&gt;</code><strong>语法</strong>‌<br>自动暴露顶层变量（包括 <code>ref</code>&#x2F;<code>reactive</code> 数据），但仍需显式声明响应式数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// ✅ 使用 ref 创建响应式变量（自动暴露到模板）</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const count = ref(0);</span><br><span class="line">const increment = () =&gt; count.value++; // JS 中需用 .value</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;script setup&gt;</code>通过以下优化大幅提升开发效率：</p>
<ul>
<li>‌<strong>自动变量暴露</strong>‌：顶层变量自动暴露到模板，无需 <code>return</code> 语句；</li>
<li>‌<strong>语法简洁性</strong>‌：减少样板代码，专注核心逻辑；</li>
<li>‌<strong>更好的 TypeScript 支持</strong>‌：类型推导更精准。</li>
</ul>
</li>
</ul>
</li>
<li><p>‌<strong>响应式数据</strong>‌</p>
<ul>
<li><p>‌<code>ref</code>：适用于基本类型或对象引用，通过 <code>.value</code> 访问&#x2F;修改值（模板中可省略）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">0</span>);  <span class="comment">// JS 中通过 num.value 操作</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<code>reactive</code>：深度代理对象&#x2F;数组，直接操作属性触发更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line">state.<span class="property">age</span>++;  <span class="comment">// 直接修改属性</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="逻辑复用与模块化"><a href="#逻辑复用与模块化" class="headerlink" title="逻辑复用与模块化"></a>逻辑复用与模块化</h3><ol>
<li><p>‌<strong>自定义组合函数</strong>‌<br>将逻辑封装为函数，实现跨组件复用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useCounter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params">initialValue = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(initialValue);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++;</span><br><span class="line">  <span class="keyword">return</span> &#123; count, increment &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;./useCounter&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, increment &#125; = <span class="title function_">useCounter</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; count, increment &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>生命周期钩子</strong>‌<br>使用 <code>onMounted</code>、<code>onUpdated</code> 等函数管理生命周期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> data.<span class="property">value</span> = res);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; data &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="与选项式-API-对比"><a href="#与选项式-API-对比" class="headerlink" title="与选项式 API 对比"></a>与选项式 API 对比</h3><table>
<thead>
<tr>
<th>‌<strong>特性</strong>‌</th>
<th>‌<strong>选项式 API</strong>‌</th>
<th>‌<strong>组合式 API</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>代码组织</strong>‌</td>
<td>按选项（data、methods）分割</td>
<td>按逻辑功能聚合</td>
</tr>
<tr>
<td>‌<strong>逻辑复用</strong>‌</td>
<td>依赖 Mixins（易命名冲突）</td>
<td>自定义组合函数（高灵活性）</td>
</tr>
<tr>
<td>‌<strong>TypeScript 支持</strong>‌</td>
<td>类型推导受限</td>
<td>完整类型推断</td>
</tr>
</tbody></table>
<h3 id="组合式-API-钩子函数："><a href="#组合式-API-钩子函数：" class="headerlink" title="组合式 API 钩子函数："></a>组合式 API 钩子函数：</h3><table>
<thead>
<tr>
<th><strong>组合式 API 钩子</strong>‌</th>
<th>‌<strong>对应选项式 API</strong>‌</th>
<th>‌<strong>触发时机</strong>‌</th>
<th>‌<strong>常见用途</strong>‌</th>
</tr>
</thead>
<tbody><tr>
<td><code>onBeforeMount()</code></td>
<td><code>beforeMount</code></td>
<td>组件挂载到 DOM 前调用</td>
<td>执行与 DOM 无关的初始化操作（此时无法访问 DOM 元素）</td>
</tr>
<tr>
<td><code>onMounted()</code></td>
<td><code>mounted</code></td>
<td>组件首次完成 DOM 渲染后调用</td>
<td>DOM 操作、数据请求、定时器启动等副作用操作</td>
</tr>
<tr>
<td><code>onBeforeUpdate()</code></td>
<td><code>beforeUpdate</code></td>
<td>响应式数据变化导致 DOM 更新前调用</td>
<td>获取更新前的 DOM 状态（如滚动位置记录）</td>
</tr>
<tr>
<td><code>onUpdated()</code></td>
<td><code>updated</code></td>
<td>组件 DOM 完成更新后调用</td>
<td>执行依赖更新后 DOM 的操作（需注意避免无限循环）</td>
</tr>
<tr>
<td><code>onBeforeUnmount()</code></td>
<td><code>beforeUnmount</code></td>
<td>组件实例卸载前调用</td>
<td>清理定时器、取消事件监听、释放内存等收尾工作</td>
</tr>
<tr>
<td><code>onUnmounted()</code></td>
<td><code>unmounted</code></td>
<td>组件实例完全卸载后调用</td>
<td>执行最终资源释放（如断开 WebSocket 连接）</td>
</tr>
<tr>
<td><code>onErrorCaptured()</code></td>
<td><code>errorCaptured</code></td>
<td>捕获后代组件传递的错误时调用</td>
<td>全局错误处理（如错误日志上报）</td>
</tr>
<tr>
<td><code>onActivated()</code></td>
<td><code>activated</code></td>
<td>被 <code>&lt;keep-alive&gt;</code> 缓存的组件激活时调用</td>
<td>恢复组件状态（如重新加载数据）</td>
</tr>
<tr>
<td><code>onDeactivated()</code></td>
<td><code>deactivated</code></td>
<td>被 <code>&lt;keep-alive&gt;</code> 缓存的组件失活时调用</td>
<td>保存组件状态（如暂停视频播放）</td>
</tr>
<tr>
<td><code>onServerPrefetch()</code></td>
<td>无</td>
<td>服务端渲染时在组件实例创建后调用</td>
<td>预取服务端数据（SSR 专用）</td>
</tr>
</tbody></table>
<h4 id="使用特点说明："><a href="#使用特点说明：" class="headerlink" title="使用特点说明："></a>使用特点说明：</h4><ol>
<li><p>‌<strong>执行顺序</strong>‌</p>
<ul>
<li>组合式 API 钩子按代码编写顺序同步执行（多个同类型钩子按顺序触发）</li>
<li>组合式钩子先于选项式钩子执行（如 <code>onMounted()</code> 早于 <code>mounted</code>）</li>
</ul>
</li>
<li><p><strong>特殊场景</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 示例：同时使用多个同类型钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;钩子1&#x27;</span>) &#125;)  </span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;钩子2&#x27;</span>) &#125;) <span class="comment">// 按顺序输出 1 → 2</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌<strong>注意事项</strong>‌</p>
<ul>
<li>避免在 <code>onUpdated</code> 中修改响应式数据，可能导致无限更新循环</li>
<li>服务端渲染时 <code>onMounted</code> 等客户端钩子不会执行，需使用 <code>onServerPrefetch</code></li>
</ul>
</li>
<li><p><strong>生命周期图示简化版</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">创建实例 → onBeforeMount → 渲染DOM → onMounted → 数据更新 → onBeforeUpdate → 重新渲染 → onUpdated → 组件销毁 → onBeforeUnmount → 卸载DOM → onUnmounted</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; user.name &#125;&#125; - &#123;&#123; user.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;计数: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;updateUser&quot;&gt;更新用户&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 响应式数据</span><br><span class="line">const count = ref(0);</span><br><span class="line">const user = reactive(&#123; name: &#x27;Alice&#x27;, age: 25 &#125;);</span><br><span class="line"></span><br><span class="line">// 方法</span><br><span class="line">const increment = () =&gt; count.value++;</span><br><span class="line">const updateUser = () =&gt; &#123;</span><br><span class="line">  user.age += 1;</span><br><span class="line">  user.name = &#x27;Bob&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 生命周期钩子</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;组件已挂载&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>‌<strong>大型项目</strong>‌：逻辑复杂需模块化拆分时；</li>
<li>‌<strong>逻辑复用</strong>‌：跨组件共享功能（如表单验证、数据请求）；</li>
<li>‌<strong>TypeScript 项目</strong>‌：类型安全与推导需求高时。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>组合式 API 通过 <code>setup</code> 函数和响应式 API（<code>ref</code>&#x2F;<code>reactive</code>）实现逻辑的灵活组织与复用，尤其适合中大型项目及 TypeScript 开发场景。通过自定义组合函数，可显著提升代码的可维护性和复用性。</p>
<h2 id="十四、Vue3-搭配-TypeScript"><a href="#十四、Vue3-搭配-TypeScript" class="headerlink" title="十四、Vue3 搭配 TypeScript"></a>十四、Vue3 搭配 TypeScript</h2><h3 id="Vue-config-js"><a href="#Vue-config-js" class="headerlink" title="Vue.config.js"></a><code>Vue.config.js</code></h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">my-vue3-ts-project/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   │   └── UserList.vue</span><br><span class="line">│   ├── types/</span><br><span class="line">│   │   └── user.d.ts</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── main.ts</span><br><span class="line">│   └── shims-vue.d.ts</span><br><span class="line">├── vue.config.js</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<h4 id="1-关键配置文件-vue-config-js"><a href="#1-关键配置文件-vue-config-js" class="headerlink" title="1. 关键配置文件 (vue.config.js)"></a>1. 关键配置文件 (vue.config.js)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// TypeScript 相关配置</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>) <span class="comment">// 路径别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TypeScript loader 配置</span></span><br><span class="line">    config.<span class="property">module</span></span><br><span class="line">      .<span class="title function_">rule</span>(<span class="string">&#x27;ts&#x27;</span>)</span><br><span class="line">      .<span class="title function_">test</span>(<span class="regexp">/\.tsx?$/</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="string">&#x27;ts-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">loader</span>(<span class="string">&#x27;ts-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">options</span>(&#123;</span><br><span class="line">        <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">        <span class="attr">transpileOnly</span>: <span class="literal">true</span> <span class="comment">// 提升编译速度</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-TypeScript-配置-tsconfig-json"><a href="#2-TypeScript-配置-tsconfig-json" class="headerlink" title="2. TypeScript 配置 (tsconfig.json)"></a>2. TypeScript 配置 (tsconfig.json)</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>	<span class="comment">// 编译目标版本</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span>	<span class="comment">// 模块系统</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>		<span class="comment">// 启用严格类型检查</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span>	<span class="comment">// 保留 JSX 语法</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span>	<span class="comment">// 模块解析方式</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许默认导入</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>		<span class="comment">// 基础路径</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>			<span class="comment">// 路径别名（需与 vue.config.js 中的别名一致）</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vite/client&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>	<span class="comment">// 包含的类型声明</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>	<span class="comment">// 跳过第三方库类型检查</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>	<span class="comment">// 兼容 CommonJS 和 ES Module</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/&amp;zwnj;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**&amp;zwnj;/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-类型声明文件-src-types-user-d-ts"><a href="#3-类型声明文件-src-types-user-d-ts" class="headerlink" title="3. 类型声明文件 (src&#x2F;types&#x2F;user.d.ts)"></a>3. 类型声明文件 (src&#x2F;types&#x2F;user.d.ts)</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户类型定义</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>?: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局状态类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">interface</span> <span class="title class_">GlobalState</span> &#123;</span><br><span class="line">  <span class="attr">version</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">darkMode</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-组合式组件示例-src-components-UserList-vue"><a href="#4-组合式组件示例-src-components-UserList-vue" class="headerlink" title="4. 组合式组件示例 (src&#x2F;components&#x2F;UserList.vue)"></a>4. 组合式组件示例 (src&#x2F;components&#x2F;UserList.vue)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-list&quot;&gt;</span><br><span class="line">    &lt;!-- 双向绑定示例 --&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">      v-model=&quot;localSearch&quot; </span><br><span class="line">      @input=&quot;emit(&#x27;update:searchText&#x27;, localSearch)&quot;</span><br><span class="line">      placeholder=&quot;Search users...&quot;</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 列表渲染 --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li </span><br><span class="line">        v-for=&quot;user in filteredUsers&quot; </span><br><span class="line">        :key=&quot;user.id&quot;</span><br><span class="line">        @click=&quot;emit(&#x27;select&#x27;, user)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; user.name &#125;&#125; - &#123;&#123; user.email &#125;&#125;</span><br><span class="line">        &lt;span v-if=&quot;user.age&quot;&gt;(&#123;&#123; user.age &#125;&#125;岁)&lt;/span&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 计数器示例 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;increment&quot;&gt;点击次数: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed, type PropType &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 定义 Props 类型（两种方式）</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // 运行时声明 + TypeScript 类型</span><br><span class="line">  users: &#123;</span><br><span class="line">    type: Array as PropType&lt;IUser[]&gt;,</span><br><span class="line">    required: true,</span><br><span class="line">    validator: (value: IUser[]) =&gt; value.length &gt; 0</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  // 纯 TypeScript 类型声明</span><br><span class="line">  searchText: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 定义 Emits 类型</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;select&#x27;, user: IUser): void</span><br><span class="line">  (e: &#x27;update:searchText&#x27;, value: string): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// 响应式数据</span><br><span class="line">const localSearch = ref&lt;string&gt;(props.searchText)</span><br><span class="line"></span><br><span class="line">// 计算属性（自动类型推断）</span><br><span class="line">const filteredUsers = computed(() =&gt; &#123;</span><br><span class="line">  return props.users.filter(user =&gt; </span><br><span class="line">    user.name.toLowerCase().includes(localSearch.value.toLowerCase())</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组合式函数（带类型）</span><br><span class="line">const useUserActions = (initialCount: number) =&gt; &#123;</span><br><span class="line">  const count = ref&lt;number&gt;(initialCount)</span><br><span class="line">  </span><br><span class="line">  const increment = () =&gt; &#123;</span><br><span class="line">    count.value++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123; count, increment &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用组合式函数</span><br><span class="line">const &#123; count, increment &#125; = useUserActions(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.user-list &#123;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 1px solid #eee;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-主组件示例-src-App-vue"><a href="#5-主组件示例-src-App-vue" class="headerlink" title="5. 主组件示例 (src&#x2F;App.vue)"></a>5. 主组件示例 (src&#x2F;App.vue)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;用户列表 (&#123;&#123; users.length &#125;&#125;人)&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;UserList</span><br><span class="line">      :users=&quot;users&quot;</span><br><span class="line">      :search-text=&quot;searchText&quot;</span><br><span class="line">      @select=&quot;handleSelect&quot;</span><br><span class="line">      @update:search-text=&quot;val =&gt; searchText = val&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import UserList, &#123; type IUser &#125; from &#x27;@/components/UserList.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 用户数据</span><br><span class="line">const users = ref&lt;IUser[]&gt;([</span><br><span class="line">  &#123; id: 1, name: &#x27;张三&#x27;, age: 25, email: &#x27;zhangsan@example.com&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, name: &#x27;李四&#x27;, email: &#x27;lisi@example.com&#x27; &#125;,</span><br><span class="line">  &#123; id: 3, name: &#x27;王五&#x27;, age: 30, email: &#x27;wangwu@example.com&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 搜索文本</span><br><span class="line">const searchText = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">// 处理用户选择</span><br><span class="line">const handleSelect = (user: IUser) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;选中用户:&#x27;, user)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-全局类型扩展-src-shims-vue-d-ts"><a href="#6-全局类型扩展-src-shims-vue-d-ts" class="headerlink" title="6. 全局类型扩展 (src&#x2F;shims-vue.d.ts)"></a>6. 全局类型扩展 (src&#x2F;shims-vue.d.ts)</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentCustomProperties</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="comment">// 扩展全局属性</span></span><br><span class="line">    <span class="attr">$formatDate</span>: <span class="function">(<span class="params"><span class="attr">date</span>: <span class="title class_">Date</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展第三方库类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    <span class="attr">showLoading</span>?: <span class="built_in">boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关键知识点说明"><a href="#关键知识点说明" class="headerlink" title="关键知识点说明"></a>关键知识点说明</h4><ol>
<li>‌<strong>Props 类型声明</strong>‌：<ul>
<li>使用 <code>PropType</code> 进行复杂类型标注</li>
<li>支持运行时验证和 TypeScript 类型检查</li>
<li>两种声明方式：选项式声明和纯类型声明</li>
</ul>
</li>
<li>‌<strong>组合式 API</strong>‌：<ul>
<li>使用 <code>&lt;script setup&gt;</code> 语法糖</li>
<li>通过 <code>ref&lt;T&gt;</code> 和 <code>computed&lt;T&gt;</code> 进行类型标注</li>
<li>封装带类型的自定义 Hook</li>
</ul>
</li>
<li>‌<strong>类型系统</strong>‌：<ul>
<li>使用 <code>.d.ts</code> 文件进行全局类型声明</li>
<li>类型扩展（组件实例、第三方库）</li>
<li>接口(interface)和类型别名(type)的使用</li>
</ul>
</li>
<li>‌<strong>Emit 类型安全</strong>‌：<ul>
<li>使用 <code>defineEmits</code> 定义带类型的事件</li>
<li>支持 overload 函数类型声明</li>
</ul>
</li>
<li>‌<strong>双向绑定</strong>‌：<ul>
<li>实现 <code>v-model</code> 的类型安全更新</li>
<li>使用 <code>update:xxx</code> 事件命名规范</li>
</ul>
</li>
</ol>
<h4 id="运行准备"><a href="#运行准备" class="headerlink" title="运行准备"></a>运行准备</h4><ol>
<li>安装依赖：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue@next @vue/cli-service typescript ts-loader @types/node</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动项目：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h4 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h4><ol>
<li>类型文件组织：<ul>
<li>将全局类型放在 <code>types</code> 目录</li>
<li>组件类型就近声明</li>
<li>使用 <code>import type</code> 导入纯类型</li>
</ul>
</li>
<li>组件开发规范：<ul>
<li>优先使用 <code>&lt;script setup&gt;</code> 语法</li>
<li>复杂 Props 使用接口单独定义</li>
<li>为自定义事件提供类型声明</li>
</ul>
</li>
<li>类型安全技巧：<ul>
<li>开启 <code>strict: true</code> 配置</li>
<li>使用 <code>volar</code> 插件获得更好的类型支持</li>
<li>定期运行 <code>tsc --noEmit</code> 进行类型检查</li>
</ul>
</li>
<li>性能优化：<ul>
<li>使用 <code>transpileOnly: true</code> 加速开发构建</li>
<li>对第三方库类型使用 <code>skipLibCheck</code></li>
<li>避免过度使用 <code>any</code> 类型</li>
</ul>
</li>
</ol>
<p>此示例完整覆盖 Vue3 + TypeScript 的核心开发模式，可直接复制到项目中运行，并根据实际需求进行扩展调整。</p>
<h3 id="vite-config-js"><a href="#vite-config-js" class="headerlink" title="vite.config.js"></a><code>vite.config.js</code></h3><h4 id="创建-Vue3-TypeScript-项目"><a href="#创建-Vue3-TypeScript-项目" class="headerlink" title="创建 Vue3 + TypeScript 项目"></a>创建 Vue3 + TypeScript 项目</h4><p>使用 Vite 快速创建项目（推荐）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create vite@latest my-vue-app -- --template vue-ts</span><br></pre></td></tr></table></figure>

<h4 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textCopy Code├── src/</span><br><span class="line">│   ├── components/      # 组件目录</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   └── App.vue          # 根组件</span><br><span class="line">├── tsconfig.json        # TypeScript 配置文件（自动生成）</span><br><span class="line">└── vite.config.ts       # Vite 配置文件</span><br></pre></td></tr></table></figure>

<h4 id="核心知识点示例代码"><a href="#核心知识点示例代码" class="headerlink" title="核心知识点示例代码"></a>核心知识点示例代码</h4><h5 id="1-组件-Props-类型声明-HelloWorld-vue"><a href="#1-组件-Props-类型声明-HelloWorld-vue" class="headerlink" title="1. 组件 Props 类型声明 (HelloWorld.vue)"></a>1. 组件 Props 类型声明 (HelloWorld.vue)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;User: &#123;&#123; userInfo.name &#125;&#125; (ID: &#123;&#123; userInfo.id &#125;&#125;)&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 使用 defineProps + 类型字面量声明 Props</span><br><span class="line">interface Props &#123;</span><br><span class="line">  // 必传属性</span><br><span class="line">  title: String,</span><br><span class="line">  // 可选属性，默认值通过 withDefaults 处理</span><br><span class="line">  count?: number,</span><br><span class="line">  // 复杂对象类型</span><br><span class="line">  userInfo?: &#123;</span><br><span class="line">    id: number,</span><br><span class="line">    name: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 带默认值的 props 声明（推荐方式）</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  count: 0,</span><br><span class="line">  userInfo: () =&gt; (&#123; id: -1, name: &#x27;Guest&#x27; &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 类型检查示例（TS 会自动推断类型）</span><br><span class="line">console.log(props.title.toLowerCase()) // 正确：string 类型有该方法</span><br><span class="line">// console.log(props.count.toLowerCase()) // 错误：TS 会报类型错误</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-组合式-API-类型声明-App-vue"><a href="#2-组合式-API-类型声明-App-vue" class="headerlink" title="2. 组合式 API + 类型声明 (App.vue)"></a>2. 组合式 API + 类型声明 (App.vue)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 传递 props --&gt;</span><br><span class="line">  &lt;HelloWorld </span><br><span class="line">    title=&quot;Vue3 + TS 演示&quot; </span><br><span class="line">    :count=&quot;count&quot;</span><br><span class="line">    :user-info=&quot;&#123; id: 1, name: &#x27;John&#x27; &#125;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;增加计数&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;newHobby&quot; @keyup.enter=&quot;addHobby&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;addHobby&quot;&gt;添加爱好&lt;/button&gt;</span><br><span class="line">    &lt;ul v-if=&quot;user.hobbies&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;hobby in user.hobbies&quot; :key=&quot;hobby&quot;&gt;&#123;&#123; hobby &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&#123;&#123; userInfo &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button @click=&quot;showAlert&quot;&gt;触发事件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 类型声明示例 -------------------------------------------------</span><br><span class="line"></span><br><span class="line">// 1. 基本类型推断</span><br><span class="line">const count = ref(0) // 自动推断为 Ref&lt;number&gt;</span><br><span class="line"></span><br><span class="line">// 2. 显式声明复杂类型</span><br><span class="line">interface User &#123;</span><br><span class="line">  name: string</span><br><span class="line">  age: number</span><br><span class="line">  hobbies?: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3. reactive 对象类型</span><br><span class="line">const user = reactive&lt;User&gt;(&#123;</span><br><span class="line">  name: &#x27;Alice&#x27;,</span><br><span class="line">  age: 25</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4. 带类型的 ref</span><br><span class="line">const newHobby = ref&lt;string&gt;(&#x27;&#x27;) // 显式声明为字符串类型</span><br><span class="line"></span><br><span class="line">// 5. 计算属性类型</span><br><span class="line">const userInfo = computed((): string =&gt; &#123;</span><br><span class="line">  return `Name: $&#123;user.name&#125;, Age: $&#123;user.age&#125;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 方法示例 ----------------------------------------------------</span><br><span class="line">const increment = (): void =&gt; &#123; // 明确声明返回值类型</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const addHobby = (): void =&gt; &#123;</span><br><span class="line">  if (newHobby.value.trim()) &#123;</span><br><span class="line">    user.hobbies = [...(user.hobbies || []), newHobby.value]</span><br><span class="line">    newHobby.value = &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 事件处理示例 ------------------------------------------------</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;showMessage&#x27;, message: string): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const showAlert = (): void =&gt; &#123;</span><br><span class="line">  emit(&#x27;showMessage&#x27;, &#x27;Hello from App component!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="关键知识点说明-1"><a href="#关键知识点说明-1" class="headerlink" title="关键知识点说明"></a>关键知识点说明</h4><ol>
<li><p>‌<strong>Props 类型声明</strong>‌</p>
<ul>
<li>使用 <code>defineProps</code> + TypeScript 接口</li>
<li>可选属性使用 <code>?</code> 修饰符</li>
<li>默认值通过 <code>withDefaults</code> 编译器宏处理</li>
</ul>
</li>
<li><p>‌<strong>组合式 API 类型</strong>‌</p>
<ul>
<li><code>ref()</code> 自动类型推断：<code>const num = ref(0)</code> → <code>Ref&lt;number&gt;</code></li>
<li>复杂类型显式声明：<code>ref&lt;string&gt;(&#39;&#39;)</code></li>
<li><code>reactive()</code> 推荐使用接口约束对象类型</li>
</ul>
</li>
<li><p>‌<strong>计算属性类型</strong>‌</p>
<ul>
<li>使用返回类型注解：<code>computed((): string =&gt; &#123; ... &#125;)</code></li>
</ul>
</li>
<li><p>‌<strong>事件类型校验</strong>‌</p>
<ul>
<li>使用 <code>defineEmits</code> 定义带类型的事件</li>
<li>语法：<code>(e: &#39;eventName&#39;, payload: Type): void</code></li>
</ul>
</li>
<li><p>‌<strong>类型复用</strong>‌</p>
<ul>
<li><p>推荐将接口定义在单独文件（如<code>types.ts</code>）：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">hobbies</span>?: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><ol>
<li>‌<strong>严格的类型检查</strong>‌：在 <code>tsconfig.json</code> 中启用严格模式</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">jsonCopy Code<span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>组件事件类型</strong>‌：始终使用 <code>defineEmits</code> 声明事件</p>
</li>
<li><p><strong>类型导入</strong>‌：大型项目推荐使用类型导入语法：</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../types&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="十五、路由-Router"><a href="#十五、路由-Router" class="headerlink" title="十五、路由 Router"></a>十五、路由 Router</h2><h3 id="路由基础配置"><a href="#路由基础配置" class="headerlink" title="路由基础配置"></a>路由基础配置</h3><ol>
<li>‌<strong>安装依赖</strong>‌</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>路由配置文件</strong>‌（<code>src/router/index.js</code>）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>挂载到Vue实例</strong>‌（<code>main.js</code>）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="路由组件示例"><a href="#路由组件示例" class="headerlink" title="路由组件示例"></a>路由组件示例</h3><ol>
<li>‌<strong>Home组件</strong>‌（<code>src/views/Home.vue</code>）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Home Page&lt;/h1&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;Go to About&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>About组件</strong>‌（<code>src/views/About.vue</code>）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;About Page&lt;/h1&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;Back Home&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="核心功能示例"><a href="#核心功能示例" class="headerlink" title="核心功能示例"></a>核心功能示例</h3><h4 id="1-动态路由匹配"><a href="#1-动态路由匹配" class="headerlink" title="1. 动态路由匹配"></a>1. 动态路由匹配</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/User.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- User组件内获取参数 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;User ID: &#123;&#123; userId &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const route = useRoute()</span><br><span class="line">const userId = route.params.id</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-嵌套路由"><a href="#2-嵌套路由" class="headerlink" title="2. 嵌套路由"></a>2. 嵌套路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/parent&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Parent.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;child&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/Child.vue&#x27;</span>) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Parent组件模板 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Parent Component&lt;/h2&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-编程式导航"><a href="#3-编程式导航" class="headerlink" title="3. 编程式导航"></a>3. 编程式导航</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">// 跳转示例</span><br><span class="line">const navigate = () =&gt; &#123;</span><br><span class="line">  // 路径跳转</span><br><span class="line">  router.push(&#x27;/about&#x27;)</span><br><span class="line">  </span><br><span class="line">  // 命名路由带参数</span><br><span class="line">  router.push(&#123;</span><br><span class="line">    name: &#x27;user&#x27;,</span><br><span class="line">    params: &#123; id: 123 &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 带查询参数</span><br><span class="line">  router.push(&#123; path: &#x27;/search&#x27;, query: &#123; q: &#x27;vue3&#x27; &#125; &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由模式选择"><a href="#路由模式选择" class="headerlink" title="路由模式选择"></a>路由模式选择</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Hash模式（默认）</span></span><br><span class="line"><span class="title function_">createWebHashHistory</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// History模式（需服务器配置）</span></span><br><span class="line"><span class="title function_">createWebHistory</span>()</span><br></pre></td></tr></table></figure>

<h3 id="完整项目结构示例"><a href="#完整项目结构示例" class="headerlink" title="完整项目结构示例"></a>完整项目结构示例</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── router/</span><br><span class="line">│   └── index.js</span><br><span class="line">├── views/</span><br><span class="line">│   ├── Home.vue</span><br><span class="line">│   ├── About.vue</span><br><span class="line">│   └── User.vue</span><br><span class="line">└── App.vue</span><br></pre></td></tr></table></figure>

<h3 id="路由守卫："><a href="#路由守卫：" class="headerlink" title="路由守卫："></a>路由守卫：</h3><h4 id="路由守卫类型与执行顺序"><a href="#路由守卫类型与执行顺序" class="headerlink" title="路由守卫类型与执行顺序"></a>路由守卫类型与执行顺序</h4><h5 id="全局守卫（优先级从高到低）"><a href="#全局守卫（优先级从高到低）" class="headerlink" title="全局守卫（优先级从高到低）"></a>全局守卫（优先级从高到低）</h5><ol>
<li>‌<strong>全局前置守卫</strong>‌ <code>router.beforeEach</code></li>
<li>‌<strong>全局解析守卫</strong>‌ <code>router.beforeResolve</code></li>
<li>‌<strong>全局后置钩子</strong>‌ <code>router.afterEach</code></li>
</ol>
<h5 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h5><ul>
<li>‌<strong>beforeEnter</strong>‌</li>
</ul>
<h5 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h5><ol>
<li><code>beforeRouteEnter</code></li>
<li><code>beforeRouteUpdate</code></li>
<li><code>beforeRouteLeave</code></li>
</ol>
<h5 id="完整执行顺序："><a href="#完整执行顺序：" class="headerlink" title="完整执行顺序："></a>完整执行顺序：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textCopy Code导航触发 → 组件内beforeRouteLeave → </span><br><span class="line">全局beforeEach → </span><br><span class="line">路由配置beforeEnter → </span><br><span class="line">组件内beforeRouteUpdate（复用组件时）→ </span><br><span class="line">解析异步组件 → </span><br><span class="line">全局beforeResolve → </span><br><span class="line">导航确认 → </span><br><span class="line">全局afterEach → </span><br><span class="line">组件内beforeRouteEnter的next回调</span><br></pre></td></tr></table></figure>

<h4 id="全局守卫示例"><a href="#全局守卫示例" class="headerlink" title="全局守卫示例"></a>全局守卫示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; <span class="comment">/*...*/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置守卫（用户认证）</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isAuthenticated = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 需要登录且未登录的情况</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class="line">    <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">fullPath</span> &#125; &#125;)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 已登录访问登录页的情况</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span> &amp;&amp; isAuthenticated) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() <span class="comment">// 正常放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局解析守卫（最后机会处理）</span></span><br><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresFetch</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetchInitialData</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局后置钩子（页面统计/动画）</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="路由独享守卫-1"><a href="#路由独享守卫-1" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">AdminPanel</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">requiresAdmin</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isAdmin = <span class="title function_">checkAdminRole</span>()</span><br><span class="line">    isAdmin ? <span class="title function_">next</span>() : <span class="title function_">next</span>(<span class="string">&#x27;/403&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件内守卫（组合式API）"><a href="#组件内守卫（组合式API）" class="headerlink" title="组件内守卫（组合式API）"></a>组件内守卫（组合式API）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onBeforeRouteLeave, onBeforeRouteUpdate &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">// 离开守卫（阻止未保存修改）</span><br><span class="line">onBeforeRouteLeave((to, from, next) =&gt; &#123;</span><br><span class="line">  if (formData.value.isDirty) &#123;</span><br><span class="line">    const confirmLeave = window.confirm(&#x27;有未保存的修改，确定离开吗？&#x27;)</span><br><span class="line">    confirmLeave ? next() : next(false)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新守卫（复用组件时）</span><br><span class="line">onBeforeRouteUpdate(async (to, from) =&gt; &#123;</span><br><span class="line">  productId.value = to.params.id</span><br><span class="line">  await loadProductData()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 选项式API示例 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">    next(vm =&gt; &#123;</span><br><span class="line">      // 访问组件实例</span><br><span class="line">      vm.initData(to.params.id)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="完整示例场景"><a href="#完整示例场景" class="headerlink" title="完整示例场景"></a>完整示例场景</h4><h5 id="用户登录认证流程"><a href="#用户登录认证流程" class="headerlink" title="用户登录认证流程"></a>用户登录认证流程</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录页组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> api.<span class="title function_">login</span>(username, password)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">    router.<span class="title function_">push</span>(route.<span class="property">query</span>.<span class="property">redirect</span> || <span class="string">&#x27;/dashboard&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="敏感操作二次验证"><a href="#敏感操作二次验证" class="headerlink" title="敏感操作二次验证"></a>敏感操作二次验证</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支付页面组件</span></span><br><span class="line"><span class="title function_">onBeforeRouteLeave</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/payment/confirm&#x27;</span> &amp;&amp; !isVerified.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="title function_">showVerificationModal</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li><p>‌<strong>next()必须调用</strong>‌：每个守卫必须调用一次<code>next()</code></p>
</li>
<li><p>‌异步处理规范：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">checkAuth</span>()</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>‌meta字段使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123; </span><br><span class="line">    <span class="attr">requiresAuth</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">transition</span>: <span class="string">&#x27;fade&#x27;</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="完整项目结构增强版"><a href="#完整项目结构增强版" class="headerlink" title="完整项目结构增强版"></a>完整项目结构增强版</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── router/</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── guards/          // 路由守卫模块化</span><br><span class="line">│       ├── auth.js</span><br><span class="line">│       └── analytics.js</span><br><span class="line">├── views/</span><br><span class="line">│   ├── Login.vue</span><br><span class="line">│   ├── Dashboard.vue</span><br><span class="line">│   └── Admin/</span><br><span class="line">│       ├── index.vue</span><br><span class="line">│       └── Audit.vue</span><br><span class="line">└── App.vue</span><br></pre></td></tr></table></figure>

<h2 id="十六、Vuex"><a href="#十六、Vuex" class="headerlink" title="十六、Vuex"></a>十六、Vuex</h2><h3 id="Vuex定义与作用"><a href="#Vuex定义与作用" class="headerlink" title="Vuex定义与作用"></a>Vuex定义与作用</h3><p>Vuex是专为Vue.js设计的状态管理库，采用‌<strong>集中式存储</strong>‌管理应用所有组件的共享状态，解决多层级组件通信难题。核心价值体现在：</p>
<ul>
<li>‌<strong>数据归一化</strong>‌：跨组件共享数据（如用户信息、全局配置）</li>
<li>‌<strong>响应式同步</strong>‌：数据变更实时触发视图更新</li>
<li>‌<strong>操作规范化</strong>‌：强制采用mutation机制修改状态</li>
</ul>
<h3 id="核心概念详解"><a href="#核心概念详解" class="headerlink" title="核心概念详解"></a>核心概念详解</h3><h4 id="1-State（数据源）"><a href="#1-State（数据源）" class="headerlink" title="1. State（数据源）"></a>1. State（数据源）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">userToken</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">cartItems</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件内访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line">console.log(store.state.userToken)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-Mutations（同步修改）"><a href="#2-Mutations（同步修改）" class="headerlink" title="2. Mutations（同步修改）"></a>2. Mutations（同步修改）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">SET_TOKEN</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">userToken</span> = payload</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">ADD_CART_ITEM</span>(<span class="params">state, item</span>) &#123;</span><br><span class="line">    state.<span class="property">cartItems</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>触发方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-Actions（异步操作）"><a href="#3-Actions（异步操作）" class="headerlink" title="3. Actions（异步操作）"></a>3. Actions（异步操作）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, credentials</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> api.<span class="title function_">login</span>(credentials)</span><br><span class="line">    <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>触发方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&#x27;login&#x27;</span>, &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="4-Getters（计算属性）"><a href="#4-Getters（计算属性）" class="headerlink" title="4. Getters（计算属性）"></a>4. Getters（计算属性）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="attr">cartTotal</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">cartItems</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">price</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件内使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;总价：&#123;&#123; $store.getters.cartTotal &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-Modules（模块化）"><a href="#5-Modules（模块化）" class="headerlink" title="5. Modules（模块化）"></a>5. Modules（模块化）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123; <span class="attr">profile</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; <span class="title function_">SET_PROFILE</span>(<span class="params">state, data</span>) &#123; ... &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主store</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123; user &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件访问：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">profile</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;user/SET_PROFILE&#x27;</span>, data)</span><br></pre></td></tr></table></figure>

<h3 id="完整示例场景-1"><a href="#完整示例场景-1" class="headerlink" title="完整示例场景"></a>完整示例场景</h3><h4 id="用户登录流程"><a href="#用户登录流程" class="headerlink" title="用户登录流程"></a>用户登录流程</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_USER</span>(<span class="params">state, user</span>) &#123;</span><br><span class="line">      state.<span class="property">user</span> = user</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, &#123; email, password &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> authService.<span class="title function_">login</span>(email, password)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_USER&#x27;</span>, user)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件调用</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">handleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;login&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">email</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">password</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li><p>‌<strong>数据操作规范</strong>‌：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示例（直接修改state）</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">userToken</span> = <span class="string">&#x27;newToken&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式（通过mutation）</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;newToken&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>模块化开发结构</strong>‌：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── store/</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── modules/</span><br><span class="line">│   │   ├── cart.js</span><br><span class="line">│   │   └── user.js</span><br><span class="line">│   └── types.js  # Mutation类型常量</span><br></pre></td></tr></table></figure>

<h3 id="搭配-LocalStorage-使用"><a href="#搭配-LocalStorage-使用" class="headerlink" title="搭配 LocalStorage 使用"></a>搭配 LocalStorage 使用</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><h5 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@4 vue@3</span><br></pre></td></tr></table></figure>

<h5 id="2-存储工具封装"><a href="#2-存储工具封装" class="headerlink" title="2. 存储工具封装"></a>2. 存储工具封装</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/storage.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Vuex-Store配置"><a href="#Vuex-Store配置" class="headerlink" title="Vuex Store配置"></a>Vuex Store配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userModule = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: storage.<span class="title function_">get</span>(<span class="string">&#x27;user_token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">profile</span>: storage.<span class="title function_">get</span>(<span class="string">&#x27;user_profile&#x27;</span>) || <span class="literal">null</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_TOKEN</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">      state.<span class="property">token</span> = token</span><br><span class="line">      storage.<span class="title function_">set</span>(<span class="string">&#x27;user_token&#x27;</span>, token)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SET_PROFILE</span>(<span class="params">state, profile</span>) &#123;</span><br><span class="line">      state.<span class="property">profile</span> = profile</span><br><span class="line">      storage.<span class="title function_">set</span>(<span class="string">&#x27;user_profile&#x27;</span>, profile)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, credentials</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> api.<span class="title function_">login</span>(credentials)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_PROFILE&#x27;</span>, res.<span class="property">user</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">logout</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_PROFILE&#x27;</span>, <span class="literal">null</span>)</span><br><span class="line">      storage.<span class="title function_">remove</span>(<span class="string">&#x27;user_token&#x27;</span>)</span><br><span class="line">      storage.<span class="title function_">remove</span>(<span class="string">&#x27;user_profile&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: userModule</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="自动持久化插件"><a href="#自动持久化插件" class="headerlink" title="自动持久化插件"></a>自动持久化插件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/plugins/persist.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(mutation.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;user/SET_TOKEN&#x27;</span>:</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;vuex_token&#x27;</span>, state.<span class="property">user</span>.<span class="property">token</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;user/SET_PROFILE&#x27;</span>:</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;vuex_profile&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">user</span>.<span class="property">profile</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store/index.js中启用</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;./plugins/persist&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123; <span class="comment">/*...*/</span> &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [persist]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="组件使用示例"><a href="#组件使用示例" class="headerlink" title="组件使用示例"></a>组件使用示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;当前Token: &#123;&#123; token &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;handleLogin&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line"></span><br><span class="line">// 获取状态</span><br><span class="line">const token = computed(() =&gt; store.state.user.token)</span><br><span class="line"></span><br><span class="line">// 修改状态</span><br><span class="line">const handleLogin = async () =&gt; &#123;</span><br><span class="line">  await store.dispatch(&#x27;user/login&#x27;, &#123;</span><br><span class="line">    username: &#x27;test&#x27;,</span><br><span class="line">    password: &#x27;123456&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="最佳实践建议-1"><a href="#最佳实践建议-1" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h4><ol>
<li>‌<strong>数据规范</strong>‌：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示例（直接修改state）</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">token</span> = <span class="string">&#x27;new_token&#x27;</span> <span class="comment">// 不会触发持久化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式（通过mutation）</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;user/SET_TOKEN&#x27;</span>, <span class="string">&#x27;new_token&#x27;</span>) <span class="comment">// 触发自动存储</span></span><br></pre></td></tr></table></figure>

<ol>
<li>‌<strong>项目结构</strong>‌：</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── store/</span><br><span class="line">│   ├── modules/</span><br><span class="line">│   │   ├── user.js</span><br><span class="line">│   │   └── cart.js</span><br><span class="line">│   ├── plugins/</span><br><span class="line">│   └── index.js</span><br><span class="line">└── utils/</span><br><span class="line">    └── storage.js</span><br></pre></td></tr></table></figure>

<h4 id="购物车模块示例"><a href="#购物车模块示例" class="headerlink" title="购物车模块示例"></a>购物车模块示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/cart.js</span></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">items</span>: storage.<span class="title function_">get</span>(<span class="string">&#x27;cart_items&#x27;</span>) || []</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">ADD_ITEM</span>(<span class="params">state, product</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> existing = state.<span class="property">items</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === product.<span class="property">id</span>)</span><br><span class="line">      existing ? existing.<span class="property">quantity</span>++ : state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; ...product, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">      storage.<span class="title function_">set</span>(<span class="string">&#x27;cart_items&#x27;</span>, state.<span class="property">items</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">totalPrice</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">items</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> </span><br><span class="line">      sum + item.<span class="property">price</span> * item.<span class="property">quantity</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码实现了Vuex状态与localStorage的自动同步，遵循Vuex规范通过mutation修改状态并触发持久化存储，适用于需要长期保存的用户认证状态、购物车数据等场景</p>
<h2 id="十七、Pinia"><a href="#十七、Pinia" class="headerlink" title="十七、Pinia"></a>十七、Pinia</h2><h3 id="基础配置-1"><a href="#基础配置-1" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="1-安装依赖-1"><a href="#1-安装依赖-1" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pinia @vue/composition-api</span><br></pre></td></tr></table></figure>

<h4 id="2-初始化Pinia"><a href="#2-初始化Pinia" class="headerlink" title="2. 初始化Pinia"></a>2. 初始化Pinia</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="核心Store定义"><a href="#核心Store定义" class="headerlink" title="核心Store定义"></a>核心Store定义</h3><h4 id="1-用户认证Store"><a href="#1-用户认证Store" class="headerlink" title="1. 用户认证Store"></a>1. 用户认证Store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/user.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// State</span></span><br><span class="line">  <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user_token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> profile = <span class="title function_">ref</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user_profile&#x27;</span>) || <span class="string">&#x27;null&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Getters</span></span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> !!token.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Actions</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">credentials</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(credentials)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">    token.<span class="property">value</span> = data.<span class="property">token</span></span><br><span class="line">    profile.<span class="property">value</span> = data.<span class="property">user</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 持久化存储</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user_token&#x27;</span>, data.<span class="property">token</span>)</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user_profile&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data.<span class="property">user</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    profile.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user_token&#x27;</span>)</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user_profile&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; token, profile, isLoggedIn, login, logout &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组件中使用"><a href="#组件中使用" class="headerlink" title="组件中使用"></a>组件中使用</h3><h4 id="1-登录组件"><a href="#1-登录组件" class="headerlink" title="1. 登录组件"></a>1. 登录组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- LoginForm.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores/user&#x27;</span><br><span class="line"></span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const form = ref(&#123; email: &#x27;&#x27;, password: &#x27;&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">const handleSubmit = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await userStore.login(form.value)</span><br><span class="line">    window.location.href = &#x27;/dashboard&#x27;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    alert(&#x27;登录失败: &#x27; + error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;handleSubmit&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;form.email&quot; type=&quot;email&quot; placeholder=&quot;邮箱&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;form.password&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">    &lt;p v-if=&quot;userStore.isLoggedIn&quot;&gt;已登录用户: &#123;&#123; userStore.profile?.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="进阶功能实现"><a href="#进阶功能实现" class="headerlink" title="进阶功能实现"></a>进阶功能实现</h3><h4 id="1-自动持久化插件"><a href="#1-自动持久化插件" class="headerlink" title="1. 自动持久化插件"></a>1. 自动持久化插件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plugins/persist.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">persistPlugin</span> = (<span class="params">&#123; store &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 从localStorage加载初始状态</span></span><br><span class="line">  <span class="keyword">const</span> savedState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(store.<span class="property">$id</span>) || <span class="string">&#x27;&#123;&#125;&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(savedState).<span class="property">length</span>) &#123;</span><br><span class="line">    store.$patch(savedState)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅状态变化</span></span><br><span class="line">  store.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(store.<span class="property">$id</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main.js中注册</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(persistPlugin)</span><br></pre></td></tr></table></figure>

<h4 id="2-购物车Store示例"><a href="#2-购物车Store示例" class="headerlink" title="2. 购物车Store示例"></a>2. 购物车Store示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/cart.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCartStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;cart&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">items</span>: [],</span><br><span class="line">    <span class="attr">lastUpdated</span>: <span class="literal">null</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">totalPrice</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> </span><br><span class="line">      state.<span class="property">items</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">price</span> * item.<span class="property">quantity</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">addItem</span>(<span class="params">product</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> existing = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === product.<span class="property">id</span>)</span><br><span class="line">      <span class="keyword">if</span> (existing) &#123;</span><br><span class="line">        existing.<span class="property">quantity</span>++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(&#123; ...product, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastUpdated</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">removeItem</span>(<span class="params">productId</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span> = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== productId)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组合式API最佳实践"><a href="#组合式API最佳实践" class="headerlink" title="组合式API最佳实践"></a>组合式API最佳实践</h3><h4 id="1-复杂状态管理"><a href="#1-复杂状态管理" class="headerlink" title="1. 复杂状态管理"></a>1. 复杂状态管理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/theme.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useThemeStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">ref</span>(<span class="string">&#x27;light&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> isDark = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> theme.<span class="property">value</span> === <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">    theme.<span class="property">value</span> = theme.<span class="property">value</span> === <span class="string">&#x27;light&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>, theme.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; theme, isDark, toggleTheme &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-跨Store调用"><a href="#2-跨Store调用" class="headerlink" title="2. 跨Store调用"></a>2. 跨Store调用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/checkout.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCheckoutStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;checkout&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">processOrder</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="title function_">useUserStore</span>()</span><br><span class="line">      <span class="keyword">const</span> cart = <span class="title function_">useCartStore</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!user.<span class="property">isLoggedIn</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;需要登录&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/orders&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;user.token&#125;</span>`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(cart.<span class="property">items</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      cart.<span class="title function_">clear</span>()</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="项目结构建议"><a href="#项目结构建议" class="headerlink" title="项目结构建议"></a>项目结构建议</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── stores/</span><br><span class="line">│   ├── user.js        # 用户认证</span><br><span class="line">│   ├── cart.js        # 购物车</span><br><span class="line">│   ├── theme.js       # 主题管理</span><br><span class="line">│   └── index.js       # Store聚合导出</span><br><span class="line">├── plugins/</span><br><span class="line">│   └── persist.js     # 持久化插件</span><br><span class="line">└── components/</span><br><span class="line">    └── User/</span><br><span class="line">        └── LoginForm.vue</span><br></pre></td></tr></table></figure>

<h3 id="TypeScript支持"><a href="#TypeScript支持" class="headerlink" title="TypeScript支持"></a>TypeScript支持</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/types.ts</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserProfile</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CartItem</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">quantity</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stores/user.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">profile</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="title class_">UserProfile</span> | <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// stores/cart.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCartStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;cart&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">items</span>: [] <span class="keyword">as</span> <span class="title class_">CartItem</span>[]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="运行验证"><a href="#运行验证" class="headerlink" title="运行验证"></a>运行验证</h3><ol>
<li>在组件中测试状态响应性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;购物车总价：&#123;&#123; cart.totalPrice &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in cart.items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125; × &#123;&#123; item.quantity &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCartStore &#125; from &#x27;@/stores/cart&#x27;</span><br><span class="line"></span><br><span class="line">const cart = useCartStore()</span><br><span class="line"></span><br><span class="line">// 添加测试商品</span><br><span class="line">cart.addItem(&#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  name: &#x27;Vue3实战指南&#x27;,</span><br><span class="line">  price: 99.9</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Pinia提供了更简洁的API和更好的TypeScript支持，通过组合式API可以轻松管理复杂状态逻辑。配合本地存储可实现状态持久化，建议通过插件机制统一处理存储逻辑，保持业务代码的纯净性</p>
<h3 id="搭配-LocalStorage-使用："><a href="#搭配-LocalStorage-使用：" class="headerlink" title="搭配 LocalStorage 使用："></a>搭配 LocalStorage 使用：</h3><h4 id="基础配置-2"><a href="#基础配置-2" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="用户认证Store"><a href="#用户认证Store" class="headerlink" title="用户认证Store"></a>用户认证Store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/user.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user_token&#x27;</span>) || <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">profile</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user_profile&#x27;</span>) || <span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">credentials</span>) &#123;</span><br><span class="line">      <span class="comment">// 模拟API请求</span></span><br><span class="line">      <span class="keyword">const</span> mockResponse = &#123;</span><br><span class="line">        <span class="attr">token</span>: <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&#x27;</span>,</span><br><span class="line">        <span class="attr">user</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;示例用户&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">token</span> = mockResponse.<span class="property">token</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">profile</span> = mockResponse.<span class="property">user</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 持久化存储</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user_token&#x27;</span>, mockResponse.<span class="property">token</span>)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user_profile&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(mockResponse.<span class="property">user</span>))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">token</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">profile</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user_token&#x27;</span>)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user_profile&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">isLoggedIn</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> !!state.<span class="property">token</span>,</span><br><span class="line">    <span class="attr">userName</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">profile</span>?.<span class="property">name</span> || <span class="string">&#x27;游客&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- LoginForm.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/stores/user&#x27;</span><br><span class="line"></span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">const form = ref(&#123; email: &#x27;test@example.com&#x27;, password: &#x27;123456&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">const handleLogin = async () =&gt; &#123;</span><br><span class="line">  if (!form.value.email || !form.value.password) return</span><br><span class="line">  await userStore.login(form.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;!userStore.isLoggedIn&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;form.email&quot; type=&quot;email&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;form.password&quot; type=&quot;password&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;handleLogin&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div v-else&gt;</span><br><span class="line">    &lt;p&gt;欢迎回来，&#123;&#123; userStore.userName &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;userStore.logout&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自动持久化方案"><a href="#自动持久化方案" class="headerlink" title="自动持久化方案"></a>自动持久化方案</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plugins/persist.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">piniaPersist</span> = (<span class="params">&#123; store &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 初始化时加载存储</span></span><br><span class="line">  <span class="keyword">const</span> savedState = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(store.<span class="property">$id</span>)</span><br><span class="line">  <span class="keyword">if</span> (savedState) &#123;</span><br><span class="line">    store.$patch(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(savedState))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅状态变化</span></span><br><span class="line">  store.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(store.<span class="property">$id</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js中注册</span></span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPersist)</span><br></pre></td></tr></table></figure>

<h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><p>1.<strong>安全存储</strong>‌<br>敏感数据建议加密后存储：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/crypto.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_STORAGE_KEY</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">encrypt</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">btoa</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">decrypt</span> = (<span class="params">ciphertext</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">atob</span>(ciphertext))</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2‌.<strong>模块化结构</strong>‌<br>推荐按业务功能划分store模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── stores/</span><br><span class="line">│   ├── user.js     # 用户认证</span><br><span class="line">│   ├── cart.js     # 购物车数据</span><br><span class="line">│   └── theme.js    # 主题配置</span><br></pre></td></tr></table></figure>

<p>3.<strong>状态更新规范</strong>‌<br>必须通过actions修改状态保证追踪性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line">userStore.<span class="property">token</span> = <span class="string">&#x27;new_token&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line">userStore.$patch(&#123; <span class="attr">token</span>: <span class="string">&#x27;new_token&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 或定义专用action</span></span><br></pre></td></tr></table></figure>

<h4 id="购物车示例"><a href="#购物车示例" class="headerlink" title="购物车示例"></a>购物车示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/cart.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCartStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;cart&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">items</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;cart&#x27;</span>) || <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">addItem</span>(<span class="params">product</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> existing = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === product.<span class="property">id</span>)</span><br><span class="line">      existing ? existing.<span class="property">quantity</span>++ : <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(&#123; ...product, <span class="attr">quantity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cart&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">items</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">total</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">items</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> </span><br><span class="line">      sum + item.<span class="property">price</span> * item.<span class="property">quantity</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/blog2025.github.io/2025/05/28/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a><a href="https://nginx.mosong.cc/guide/">Nginx</a></h1><p><strong><a href="https://www.w3ccoo.com/nginx/default.html">https://www.w3ccoo.com/nginx/default.html</a></strong></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>Nignx：Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器</p>
<p>特点：占用内存少，并发能力强。</p>
<p>版本：Nginx 开源版、Nginx Plus 商业版</p>
<ul>
<li>国内流行版本：<ul>
<li>Tengine项目（淘宝网）</li>
<li>OpenResty项目</li>
</ul>
</li>
</ul>
<p>功能：访问代理、负载均衡、内容缓冲、访问安全及带宽控制等。</p>
<p>实现目标：将访问入口和 Web 服务器分离，将 Web 服务器和动态脚本解析器分开，将 Web 功能不断拆分、微服务等。</p>
<p>应用特性：</p>
<ul>
<li><p>开源版：</p>
<ul>
<li><p>访问路由</p>
<p>Nginx 可以通过访问路径、URL 关键字、客户端 IP、灰度分流等多种手段实现访问路由分配。</p>
</li>
<li><p><strong>反向代理</strong></p>
<p>Nginx 本身并不产生响应数据，只是应用自身的异步非阻塞<strong>事件驱动</strong>架构，高效、稳定地将请求反向代理给后端的目标应用服务器，并把响应数据返回给客户端。支持大部分协议的反向代理。</p>
</li>
<li><p>负载均衡</p>
<p>Nginx 在反向代理的基础上集合自身的上游（<strong>upstream</strong>）模块支持多种负载均衡算法，使后端服务器可以非常方便地进行横向扩展，从而有效提升应用的处理能力，使整体应用架构可轻松应对高并发的应用场景。</p>
</li>
<li><p>内容缓存</p>
<p>动态处理与<strong>静态内容</strong>分离是应用架构优化的主要手段之一，Nginx 的内容缓存技术不仅可以实现预置静态文件的高速缓存，还可以对应用响应的动态结果实现缓存，为响应结果变化不大的应用提供更高速的响应能力。</p>
</li>
<li><p>可编程</p>
</li>
</ul>
</li>
<li><p>商业版本：</p>
<ul>
<li>负载均衡：<ul>
<li>基于 cookies 的会话保持功能。</li>
<li>基于响应状态码和响应体的主动健康监测。</li>
<li>支持 DNS 动态更新。</li>
</ul>
</li>
<li>动态管理：<ul>
<li>支持通过 API 清除内容缓存。</li>
<li>可通过 API 动态管理上游的后端服务器列表。</li>
</ul>
</li>
<li>安全控制：<ul>
<li>基于 API 和 OpenID 连接协议单点登录（SSO）的 JWT（JSON Web Token）认证支持。</li>
<li>Nginx WAF 动态模块。</li>
</ul>
</li>
<li>状态监控：<ul>
<li>超过 90 个状态指标的扩展状态监控。</li>
<li>内置实时图形监控面板。</li>
<li>集成可用于自定义监控工具的 JSON 和 HTML 输出功能支持。</li>
</ul>
</li>
<li>Kubernetes Ingress Controller：<ul>
<li>支持 Kubernetes 集群 Pod 的会话保持和主动健康监测。</li>
<li>支持 JWT 身份认证。</li>
</ul>
</li>
<li>流媒体：<ul>
<li>支持自适性串流（Adaptive Bitrate Streaming，ABS）媒体技术 HLS（Apple HTTP Live Streaming）和 HDS（Adobe HTTP Dynamic Streaming）。</li>
<li>支持对 MP4 媒体流进行带宽控制。</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://nginx.mosong.cc/guide/nginx_intro.html#_1-%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1">分支版本 Tengine</a>：双十一</p>
</li>
</ul>
<hr>
<h2 id="架构："><a href="#架构：" class="headerlink" title="架构："></a>架构：</h2><p>以<strong>事件驱动</strong>的<strong>异步非阻塞多进程</strong>请求处理模型，使 Nginx 的工作进程通过异步非阻塞的事件处理机制，实现了高性能的并发处理能力，让每个连接的请求均可在 Nginx 进程中以<strong>工作流</strong>的方式得到快速处理。</p>
<h3 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h3><p>Nginx 采用的是固定数量的多进程模型：</p>
<ul>
<li><strong>主管理进程</strong>负责工作进程的<strong>配置加载、启停</strong>等操作，</li>
<li><strong>工作进程</strong>负责<strong>处理具体请求</strong>。</li>
</ul>
<p><img src="https://nginx.mosong.cc/assets/8-200S111013OS.61HVKf9R.gif" alt="img"></p>
<p>进程间的资源都是独立的，每个工作进程处理多个连接，每个连接由一个工作进程全权处理，不需要进行进程切换，也就不会产生由进程切换引起的资源消耗问题。</p>
<hr>
<h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a><strong>主进程</strong></h4><p>负责监听外部控制信号，通过频道机制将相关信号操作传递给工作进程，多个工作进程间通过共享内存来共享数据和信息。</p>
<h4 id="工作进程"><a href="#工作进程" class="headerlink" title="工作进程"></a><strong>工作进程</strong></h4><p>默认配置下，工作进程的数量与主机 CPU 核数相同，充分利用 CPU 和进程的亲缘性（affinity）将工作进程与 CPU 绑定，从而最大限度地发挥多核 CPU 的处理能力。</p>
<ul>
<li>每个工作进程具备<strong>完整</strong>的请求处理能力，包括网络通信、请求解析、响应生成等全流程任务。工作进程基于异步非阻塞<strong>事件驱动</strong>模型，独立处理分配的客户端连接，‌<strong>无需依赖其他进程即可完成常规HTTP请求处理</strong></li>
<li>工作进程内部包含完整的运行时条件：<ul>
<li><strong>事件驱动机制</strong>‌：通过Epoll&#x2F;Kqueue等系统调用实现高并发处理；</li>
<li>‌<strong>内存管理池</strong>‌：独立维护请求处理所需的内存资源；</li>
<li>‌<strong>模块处理链</strong>‌：加载HTTP模块、SSL模块等核心处理单元，支持完整的协议解析与业务逻辑。</li>
</ul>
</li>
</ul>
<h4 id="信号（软中断信号）"><a href="#信号（软中断信号）" class="headerlink" title="信号（软中断信号）"></a><strong>信号</strong>（软中断信号）</h4><p>可通过调用系统命令<code>kill</code>来发送信号实现进程通信。</p>
<p><strong>核心信号类型及作用：</strong></p>
<table>
<thead>
<tr>
<th>信号类型</th>
<th>执行主体</th>
<th>功能特性</th>
<th>典型应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>‌<strong>HUP</strong>‌</td>
<td>主进程</td>
<td>重新加载配置文件，保留现有TCP连接，旧Worker处理完请求后退出</td>
<td>配置热更新</td>
</tr>
<tr>
<td>‌<strong>USR1</strong>‌</td>
<td>主进程</td>
<td>重新打开所有日志文件，支持日志切割而不中断服务</td>
<td>日志文件滚动管理</td>
</tr>
<tr>
<td>‌<strong>USR2</strong>‌</td>
<td>主进程</td>
<td>启动新版本Nginx实例，保留旧进程处理存量请求</td>
<td>二进制文件平滑升级</td>
</tr>
<tr>
<td>‌<strong>WINCH</strong>‌</td>
<td>主进程</td>
<td>优雅关闭旧版本Worker进程，需配合USR2信号使用</td>
<td>版本回滚或服务降级</td>
</tr>
<tr>
<td>‌<strong>QUIT</strong>‌</td>
<td>主进程</td>
<td>优雅关闭服务，等待所有Worker完成当前请求后终止进程</td>
<td>服务维护停机</td>
</tr>
<tr>
<td>‌<strong>TERM&#x2F;INT</strong>‌</td>
<td>主进程</td>
<td>强制立即终止所有进程，中断正在处理的请求</td>
<td>紧急故障处理</td>
</tr>
</tbody></table>
<p><strong>信号处理实现机制：</strong></p>
<ol>
<li>‌<strong>信号注册体系</strong>‌<br>Master进程启动时通过<code>ngx_init_signals()</code>函数注册信号处理器，使用<code>sigaction()</code>系统调用绑定信号与处理函数。信号处理结构体<code>ngx_signal_t</code>定义了信号编号、处理函数指针等关键参数。</li>
<li>‌<strong>进程间通信</strong>‌<br>Master进程通过信号向Worker进程发送指令，例如：<ul>
<li>发送<code>SIGQUIT</code>通知Worker优雅退出</li>
<li>发送<code>SIGTERM</code>强制终止异常Worker</li>
</ul>
</li>
<li>‌<strong>平滑升级流程</strong>‌<ul>
<li>发送<code>USR2</code>信号启动新Master和Worker进程</li>
<li>新进程PID写入<code>nginx.pid.oldbin</code></li>
<li>发送<code>WINCH</code>逐步关闭旧Worker</li>
<li>通过<code>kill -QUIT</code>终止旧Master</li>
</ul>
</li>
</ol>
<p><strong>操作实践示例：</strong></p>
<ol>
<li><p>‌<strong>配置热更新</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -HUP `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>

<p>该操作触发配置校验和新Worker进程生成，旧Worker处理完请求后退出。</p>
</li>
<li><p>‌<strong>日志切割</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> access.log access.log.bak</span><br><span class="line"><span class="built_in">kill</span> -USR1 `<span class="built_in">cat</span> nginx.pid`  <span class="comment"># 自动创建新日志文件</span></span><br></pre></td></tr></table></figure>

<p>适用于日志归档场景，避免进程重启。</p>
</li>
<li><p>‌<strong>版本回滚</strong>‌</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -HUP `<span class="built_in">cat</span> nginx.pid.oldbin`  <span class="comment"># 恢复旧Master</span></span><br><span class="line"><span class="built_in">kill</span> -WINCH `<span class="built_in">cat</span> nginx.pid`       <span class="comment"># 关闭新Worker</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> nginx.pid`        <span class="comment"># 终止新Master</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="频道"><a href="#频道" class="headerlink" title="频道"></a>频道</h4><p>频道（channel）是 Nginx 主进程向工作进程传递信号操作的通信方式，用于将控制工作进程的信号操作传递给工作进程。</p>
<p>创建工作进程时会将接收频道消息的套接字（socket）注册到对应的事件引擎（如 <strong>epoll</strong>）中，当事件引擎监听到主进程发送的频道消息时，就会触发回调函数通知工作进程执行响应操作。</p>
<p><strong>主进程发送频道消息，工作进程接收频道消息并执行相应操作</strong></p>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>多个进程访问同一个内存地址，一个进程改变了内存中的内容后，其他进程都可以使用变更后的内容。</p>
<p>主进程启动时创建共享内存，工作进程创建（<code>fork</code> 方式）完成后，所有的进程都开始使用共享内存。</p>
<p>用户可以在配置文件中配置共享内存名称和大小，定义不同的共享内存块供 Nginx 不同的功能使用，Nginx 解析完配置文件后，会将定义的共享内存通过 slab 机制进行内部统一划分和管理。</p>
<h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><p>当工作进程被创建时，每个工作进程都继承了主进程的监听套接字（socket），所以所有工作进程的事件监听列表中会<strong>共享相同的监听套接字</strong>。这就导致了：</p>
<p><font color="red">（<strong>共享资源的互斥访问机制</strong>）</font><strong>多个工作进程间同一时间内只能由一个工作进程接收网络连接</strong>。为使多个工作进程间能够协调工作，Nginx 的工作进程有如下几种调度方式。</p>
<ul>
<li><p>无调度模式</p>
<p>所有工作进程都会在连接事件被触发时争相与客户端建立连接，建立连接成功则开始处理客户端请求。</p>
<p>无调度模式下所有进程都会争抢资源，但最终<strong>只有一个进程</strong>可以与客户端建立连接，对于系统而言这将在瞬间产生大量的资源消耗，这就是所谓的<font color="red"><strong>惊群现象</strong></font>。</p>
<p><strong>但该模式因为少了争抢互斥锁的处理，在高并发场景下可提高系统的响应能力。</strong></p>
</li>
<li><p>互斥锁模式（accept_mutex）（默认是关闭的）</p>
<p>互斥锁是一种声明机制，每个工作进程都会<strong>周期性</strong>地争抢互斥锁，一旦某个工作进程抢到互斥锁，就表示其拥有接收 HTTP 建立连接事件的处理权，并将当前进程的 socket 监听注入事件引擎（如 <strong>epoll</strong>）中，接收外部的连接事件。</p>
<p>其他工作进程只能继续处理已经建立连接的读写事件，并<strong>周期性地轮询</strong>查看互斥锁的状态，只有互斥锁被释放后工作进程才可以抢占互斥锁，获取 HTTP 建立连接事件的处理权。</p>
<p>互斥锁模式有效地避免了<strong>惊群现象</strong>，对于大量 HTTP 的短连接，该机制有效避免了因工作进程争抢事件处理权而产生的资源消耗。但对于大量启用长连接方式的 HTTP 连接，互斥锁模式会将压力集中在少数工作进程上，进而因工作进程负载不均而导致**每秒查询数（QPS 表示服务器每秒能处理的请求数量，是衡量服务端性能的核心指标）**下降。</p>
<p><strong>性能调优参数</strong>‌<br>修改<code>nginx.conf</code>中的<code>accept_mutex</code>参数可调整互斥策略：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;  <span class="comment"># 默认启用互斥锁</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;  <span class="comment"># 单次事件循环接收多个连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>套接字分片（Socket Sharding）</p>
<p>套接字分片是由<strong>内核</strong>提供的一种分配机制，该机制允许每个工作进程都有<strong>一组相同的</strong>监听套接字。当有外部连接请求时，由内核决定哪个工作进程的套接字监听可以接收连接。这有效避免了<strong>惊群现象</strong>的发生，相比互斥锁机制提高了多核系统的性能。该功能需要在配置 listen 指令时启用 reuseport 参数。</p>
<p><strong>该模式是 Linux 内核提供进程的调度机制，所以性能最好。</strong></p>
</li>
</ul>
<h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><p>事件驱动程序设计（Event-Driven Programming）是一种程序设计模型，这种模型的程序流程是由外部操作或消息交互事件触发的。其代码架构通常是预先设计一个<strong>事件循环方法</strong>，再由这个事件循环方法<strong>不断地检查</strong>当前要处理的信息，并根据相应的信息触发<strong>事件函数</strong>进行事件处理。</p>
<p>通常未被处理的事件会放在事件<strong>队列</strong>中等待处理，而被事件函数处理的事件也会形成一个事件串，因此事件驱动模型的重点就在于事件处理的弹性和异步化。</p>
<p>Linux 系统将用于寻址操作的虚拟存储器分为<strong>内核空间</strong>和<strong>用户空间</strong>，所有硬件设备的操作都是在内核空间中实现的。<br>当应用程序监听的网络接口接收到网络数据时，<strong>内核</strong>会先把数据保存在<strong>内核空间的缓冲区</strong>中，然后再由<strong>应用程序复制到用户空间</strong>进行处理。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#数据传递路径</span><br><span class="line">接口-&gt; 内核（内核空间的缓冲区）-&gt; 用户空间</span><br></pre></td></tr></table></figure>

<p><strong>套接字（socket）</strong>：套接字是应用程序与 TCP&#x2F;IP 协议通信的中间抽象层，也是一种特殊的文件，应用程序以文件描述符的方式对其进行读&#x2F;写（I&#x2F;O）、打开或关闭操作。每次对 socket 进行读操作都需要等待数据准备（数据被读取到内核缓冲区），然后再将数据从内核缓冲区复制到用户空间。</p>
<p>提高 I&#x2F;O 读写操作性能的模型：</p>
<ul>
<li><p>I&#x2F;O 多路复用模型：</p>
<p>一个进程可以监视多个文件描述符，一旦某个文件描述符就绪（数据准备就绪），进程就可以进行相应的读写操作。</p>
<ul>
<li><p><strong>epoll</strong> 引擎：在 1GB 内存下可以监听 10 万个端口。</p>
<p>epoll 模型利用 mmap 映射内存加速与内核空间的消息传递，从而减少复制消耗。</p>
</li>
</ul>
</li>
</ul>
<p>事件驱动的<strong>异步非阻塞机制</strong>：</p>
<p><img src="https://nginx.mosong.cc/assets/8-200S11106455A.BaTMB0Iv.gif" alt="img"></p>
<h4 id="图示流程："><a href="#图示流程：" class="headerlink" title="图示流程："></a>图示流程：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A[主进程Master 启动] --&gt; B[解析配置]</span><br><span class="line">    B --&gt; C[绑定端口]</span><br><span class="line">    C --&gt; D[创建工作进程Fork Workers]</span><br><span class="line">    D --&gt; E&#123;持续监控&#125;</span><br><span class="line">    E --收到reload信号--&gt; F[启动新工作进程Worker]</span><br><span class="line">    E --工作进程Worker崩溃--&gt; G[重启新工作进程Worker]</span><br><span class="line">    E --正常关闭--&gt; H[通知工作进程Worker退出]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">│</span><br><span class="line">├─ 主进程  </span><br><span class="line">│   │  </span><br><span class="line">│   ├─ 解析配置 → 绑定端口 → 初始化共享内存 → 启动 Worker  </span><br><span class="line">│   ├─ 监听信号：  </span><br><span class="line">│   │   ├─ SIGHUP → 热重载  </span><br><span class="line">│   │   ├─ SIGTERM → 关闭所有 Worker  </span><br><span class="line">│   │   └─ SIGUSR1 → 日志重开  </span><br><span class="line">│   └─ 监控 Worker（自动重启崩溃进程）  </span><br><span class="line">│  </span><br><span class="line">└─ Worker 进程（多实例，独立运行）  </span><br><span class="line">    │  </span><br><span class="line">    ├─ 事件循环（epoll_wait）  </span><br><span class="line">    │   ├─ 处理新连接（通过 accept_mutex 竞争）  </span><br><span class="line">    │   ├─ 处理 I/O 事件（非阻塞读写）  </span><br><span class="line">    │   └─ 定时器与异步任务  </span><br><span class="line">    ├─ 访问共享内存（需加锁）  </span><br><span class="line">    └─ 通过 Socket Pair 与主进程通信</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="工作流机制"><a href="#工作流机制" class="headerlink" title="工作流机制"></a>工作流机制</h3><p>Nginx 在处理客户端请求时，<strong>每个连接仅由一个进程进行处理</strong>，<strong>每个请求仅运行在一个工作流中</strong>，工作流被划分为多个阶段（见下图）</p>
<p><img src="https://nginx.mosong.cc/assets/8-200S1110H41L.vQB5hUaJ.gif" alt="img"></p>
<h4 id="HTTP-请求处理阶段（应用层）"><a href="#HTTP-请求处理阶段（应用层）" class="headerlink" title="HTTP 请求处理阶段（应用层）"></a>HTTP 请求处理阶段（应用层）</h4><p>HTTP请求的处理过程被划分为多个阶段，<strong>每个模块专注于特定阶段的处理任务</strong>，最终由不同模块协作<strong>完成整个请求的响应</strong>。</p>
<p>HTTP 请求的处理过程可分为 11 个阶段，HTTP 请求处理阶段如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">阶段标识</th>
<th align="left">阶段说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NGX_HTTP_POST_READ_PHASE</td>
<td align="left">读取请求阶段，会进行 HTTP 请求头的读取和解析处理</td>
</tr>
<tr>
<td align="left">NGX_HTTP_SERVER_REWRITE_PHASE</td>
<td align="left">server 重定向阶段，会在 URI进入location路由前修改 URI 的内容，进行重定向处理</td>
</tr>
<tr>
<td align="left">NGX_HTTP_FIND_CONFIG_PHASE</td>
<td align="left">URI 匹配阶段，URI 进行 location 匹配处理，该阶段不支持外部模块引入</td>
</tr>
<tr>
<td align="left">NGX_HTTP_REWRITE_PHASE</td>
<td align="left">rewrite 重写阶段，对 URI 执行 rewrite 规则修改处理</td>
</tr>
<tr>
<td align="left">NGX_HTTP_POST_REWRITE_PHASE</td>
<td align="left">rewrite 重写结束阶段，对 rewrite 的结果执行跳转操作并进行次数验证，超过 10 次的则认为是死循环，返回 500 错误。该阶段不支持外部模块引入</td>
</tr>
<tr>
<td align="left">NGX_HTTP_PREACCESS_PHASE</td>
<td align="left">访问控制前阶段，进行连接数、单 IP 访问频率等的处理</td>
</tr>
<tr>
<td align="left">NGX_HTTP_ACCESS_PHASE</td>
<td align="left">访问控制阶段，进行用户认证、基于源 IP 的访问控制等处理</td>
</tr>
<tr>
<td align="left">NGX_HTTP_POST_ACCESS_PHASE</td>
<td align="left">访问控制结束阶段，对访问控制的结果进行处理，如向用户发送拒绝访问等响应。该阶段不支持外部模块引入</td>
</tr>
<tr>
<td align="left">NGX_HTTP_PRECONTENT_PHASE</td>
<td align="left">访问内容前阶段，对目标数据进行内容检验等操作。以前的版本称为 NGX_HTTP_TRY_FILES_PHASE，try_files 和 mirror 功能在这个阶段被执行</td>
</tr>
<tr>
<td align="left">NGX_HTTP_CONTENT_PHASE</td>
<td align="left">访问内容阶段，执行读取本地文件，返回响应内容等操作</td>
</tr>
<tr>
<td align="left">NGX_HTTP_LOG_PHASE</td>
<td align="left">日志记录阶段，处理完请求，进行日志记录</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR  </span><br><span class="line">A[POST_READ] --&gt; B[SERVER_REWRITE]  </span><br><span class="line">B --&gt; C[FIND_CONFIG]  </span><br><span class="line">C --&gt; D[REWRITE]  </span><br><span class="line">D --&gt; E[POST_REWRITE]  </span><br><span class="line">E --&gt;|重写URI| C  </span><br><span class="line">E --&gt; F[PREACCESS]  </span><br><span class="line">F --&gt; G[ACCESS]  </span><br><span class="line">G --&gt; H[POST_ACCESS]  </span><br><span class="line">H --&gt; I[PRECONTENT]  </span><br><span class="line">I --&gt; J[CONTENT]  </span><br><span class="line">J --&gt; K[LOG]  </span><br></pre></td></tr></table></figure>

<h4 id="TCP-UDP-处理阶段（传输层）"><a href="#TCP-UDP-处理阶段（传输层）" class="headerlink" title="TCP&#x2F;UDP 处理阶段（传输层）"></a>TCP&#x2F;UDP 处理阶段（传输层）</h4><p>TCP&#x2F;UDP 会话一共会经历 7 个处理阶段，每个 TCP&#x2F;UDP 会话会自上而下地按照7个阶段进行流转处理，每个处理阶段的说明如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">阶段标识</th>
<th align="left">阶段说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Post-accept</td>
<td align="left">接收客户端连接请求后的第一阶段。模块 ngx_stream_realip_module 在这个阶段被调用</td>
</tr>
<tr>
<td align="left">Pre-access</td>
<td align="left">访问处理前阶段。模块 ngx_stream_limit_conn_module 在这个阶段被调用</td>
</tr>
<tr>
<td align="left">Access</td>
<td align="left">访问处理阶段。模块 ngx_stream_access_module 在这个阶段被调用</td>
</tr>
<tr>
<td align="left">SSL</td>
<td align="left">TLS&#x2F;SSL 处理阶段。模块 ngx_stream_ssl_module 在这个阶段被调用</td>
</tr>
<tr>
<td align="left">Preread</td>
<td align="left">数据预读阶段。将 TCP&#x2F;UDP 会话数据的初始字节读入预读缓冲区，以允许 ngx_stream_ssl_preread_module 之类的模块在处理之前分析</td>
</tr>
<tr>
<td align="left">Content</td>
<td align="left">数据数据处理阶段。通常将 TCP&#x2F;UDP 会话数据代理到上游服务器，或将模块 ngx_stream_return_module 指定的值返回给客户端</td>
</tr>
<tr>
<td align="left">Log</td>
<td align="left">记录客户端会话处理结果的最后阶段。模块 ngx_stream_log_module 在这个阶段被调用</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR  </span><br><span class="line">A[客户端连接] --&gt; B[POST_ACCEPT修正IP]  </span><br><span class="line">B --&gt; C[PRE_ACCESS限流]  </span><br><span class="line">C --&gt; D[ACCESS权限校验]  </span><br><span class="line">D --&gt; E[SSL解密]  </span><br><span class="line">E --&gt; F[PREREAD协议分析]  </span><br><span class="line">F --&gt; G[CONTENT代理至上游]  </span><br><span class="line">G --&gt; H[LOG记录结果]  </span><br></pre></td></tr></table></figure>

<h4 id="图示流程"><a href="#图示流程" class="headerlink" title="图示流程"></a>图示流程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR  </span><br><span class="line">A[客户端] --&gt; B(TCP三次握手)  </span><br><span class="line">B --&gt; C&#123;TCP/UDP处理阶段&#125;  </span><br><span class="line">C --&gt;|传输层连接建立| D[HTTP请求传输]  </span><br><span class="line">D --&gt; E&#123;HTTP处理阶段&#125;  </span><br><span class="line">E --&gt;|应用层解析与响应| F[返回HTTP结果]  </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>Nginx 一直秉持模块化的理念，其模块化的架构中，除了少量的主流程代码，都是模块。模块化的设计为 Nginx 提供了高度的可配置、可扩展、可定制特性。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p><strong>核心模块</strong>：负责维护进程的运行、内存及事件的管理</p>
<ul>
<li>核心模块（core）</li>
</ul>
<p>  该模块提供了 Nginx 服务运行的基本功能，如 Nginx 的进程管理、CPU 亲缘性、内存管理、配置文件解析、日志等功能。</p>
<ul>
<li><p>事件模块（event）</p>
<p>该模块负责进行连接处理，提供对不同操作系统的 I&#x2F;O 网络模型支持和自动根据系统平台选择最有效 I&#x2F;O 网络模型的方法。</p>
</li>
</ul>
</li>
<li><p><strong>功能模块</strong>：负责具体功能应用的实现，包括路由分配、内容过滤、网络及磁盘数据读写、代理转发、负载均衡等操作。</p>
<ul>
<li><p>HTTP模块（http）</p>
<p>该模块提供 HTTP 处理的核心功能和部分功能模块，HTTP 核心功能维护了 HTTP 多个阶段的工作流，并实现了对各种 HTTP 功能模块的管理和调用。</p>
</li>
<li><p>Mail模块（mail）</p>
<p>该模块实现邮件代理功能，代理 IMAP、POP3、SMTP 协议。</p>
</li>
<li><p>Stream模块（stream）</p>
<p>该模块提供 TCP&#x2F;UDP 会话的代理和负载相关功能。</p>
</li>
<li><p>第三方模块</p>
<p> lua-resty、nginx-module-vts 等</p>
</li>
</ul>
</li>
</ul>
<h4 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h4><ul>
<li><p><strong>静态加载模块</strong></p>
<p>Nginx 早期版本在进行模块编译时，通过编译配置（configure）选项<code>--with_module</code>和<code>--without-module</code>决定要编译哪些模块，被选择的模块代码与 Nginx 核心代码被编译到同一个 Nginx 二进制文件中，Nginx 文件每次启动时都会<strong>重新编译加载所有的模块</strong>。</p>
</li>
<li><p><strong>动态加载模块</strong></p>
<p>Nginx 可以在运行时有选择地加载 Nginx 官方或第三方模块。</p>
<p>为使动态模块更易于使用，Nginx 官方还提供了 <code>pkg-oss</code> 工具，该工具可为任何动态模块创建可安装的动态模块包。</p>
<p>编译工具链‌：需安装 <code>gcc</code>、<code>make</code> 等编译工具，并确保与原有 Nginx 编译环境一致。</p>
<p>在 Nginx 开源版本的代码中，编译配置选项中含有<code>=dynamic</code>选项，表示支持动态模块加载。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200S1111252930.DigbyJZf.gif" alt="img"></p>
</li>
</ul>
<p>**动态加载操作流程：**‌</p>
<ol>
<li><p>‌<strong>获取模块源码</strong>‌</p>
<ul>
<li>下载目标模块源码（需与当前 Nginx 版本兼容），例如第三方模块 <code>ngx_http_lua_module</code>；</li>
</ul>
</li>
<li><p>‌<strong>配置编译参数</strong>‌</p>
<ul>
<li><p>进入本地安装的 Nginx 源码目录，通过 <code>nginx -V</code>获取原有编译参数，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--prefix=/usr/local/nginx-1.19.1 --with-openssl=/usr/local/src/openssl-1.0.2 --with-pcre=/usr/local/src/pcre-8.37 --with-zlib=/usr/local/src/zlib-1.2.8 --with-http_ssl_module</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>./configure</code>命令，需包含原有编译参数并追加新模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure [原有编译参数] --add-dynamic-module=/path/to/module  <span class="comment">#动态添加第三方模块</span></span><br><span class="line"><span class="comment"># 可添加 --with-compat参数解决某些结构字段未被编译到代码中的问题</span></span><br></pre></td></tr></table></figure>

<p>（示例：<code>--add-dynamic-module=/opt/ngx_http_example_module</code>）；</p>
</li>
</ul>
</li>
<li><p>‌<strong>编译生成动态模块</strong>‌</p>
<ul>
<li>执行 <code>make modules</code>，生成模块文件（<code>.so</code> 文件）；</li>
<li>‌<strong>关键注意</strong>‌：避免直接运行 <code>make install</code>，防止覆盖原有主程序；</li>
</ul>
</li>
<li><p>‌<strong>部署模块文件</strong>‌</p>
<ul>
<li>将生成的 <code>.so</code> 文件复制到 Nginx 模块目录（如 <code>/usr/lib/nginx/modules/</code>）；</li>
</ul>
</li>
<li><p>‌<strong>配置加载模块</strong>‌</p>
<ul>
<li><p>在<code>nginx.conf</code>顶部添加加载指令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">load_module</span> modules/模块名.so;  </span><br></pre></td></tr></table></figure>

<p>（示例：<code>load_module modules/ngx_http_example_module.so;</code>）；</p>
</li>
</ul>
</li>
<li><p>‌<strong>重载配置验证</strong>‌</p>
<ul>
<li>执行 <code>nginx -s reload</code> 平滑重载配置；</li>
<li>通过 <code>nginx -T</code> 检查模块是否生效。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://nginx.mosong.cc/guide/nginx_install.html">安装</a></h3><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>Nginx 的核心功能就是应对 HTTP 请求的处理。</p>
<p>Nginx 提供了多种配置指令，让用户可以根据实际的软硬件及使用场景进行灵活配置。</p>
<p>分类：</p>
<ul>
<li><p>核心配置指令</p>
<ul>
<li><p>事件核心配置指令：</p>
<p><strong>-</strong> 主要是与 Nginx 自身软件运行管理及 Nginx 事件驱动架构有关的配置指令</p>
</li>
<li><p>HTTP 核心配置指令：</p>
<p><strong>-</strong>  对客户端从发起 HTTP 请求、完成 HTTP 请求处理、返回处理结果，到关闭 HTTP 连接的完整过程中的各个处理方法进行配置的配置指令。</p>
</li>
</ul>
</li>
<li><p>模块配置指令</p>
<p>每个 Nginx 模块中对所在模块的操作方法进行配置的配置指令。</p>
</li>
</ul>
<hr>
<h3 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h3><p>保存位置： <strong>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</strong> </p>
<p>主配置文件是 <strong>nginx.conf</strong>（唯一的默认配置入口）</p>
<p><strong>配置文件目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conf/</span><br><span class="line">├── fastcgi.conf</span><br><span class="line">├── fastcgi.conf.default</span><br><span class="line">├── fastcgi_params				</span><br><span class="line">├── fastcgi_params.default</span><br><span class="line">├── koi-utf</span><br><span class="line">├── koi-win</span><br><span class="line">├── mime.types</span><br><span class="line">├── mime.types.default</span><br><span class="line">├── nginx.conf</span><br><span class="line">├── nginx.conf.default</span><br><span class="line">├── scgi_params</span><br><span class="line">├── scgi_params.default</span><br><span class="line">├── uwsgi_params</span><br><span class="line">├── uwsgi_params.default</span><br><span class="line">└── win-utf </span><br><span class="line"><span class="comment"># &quot;.default&quot;为扩展名的文件是 Nginx 配置文件的配置样例文件。</span></span><br></pre></td></tr></table></figure>

<p>Windows 下：</p>
<p><img src="/blog2025.github.io/image-20250506101149244.png" alt="image-20250506101149244"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastcgi_params: </span><br><span class="line"><span class="comment"># Nginx 在配置 FastCGI 代理服务时会根据 fastcgi_params 文件的配置向 FastCGI 服务器传递变量，该配置文件现已由 fastcgi.conf 代替；</span></span><br><span class="line">fastcgi.conf:</span><br><span class="line"><span class="comment"># 为了规范配置指令 SCRIPT_FILENAME 的用法，引入 FastCGI 变量传递配置；</span></span><br><span class="line">mime.types:</span><br><span class="line"><span class="comment"># MIME 类型映射表，Nginx 会根据服务端文件后缀名在映射关系中获取所属文件类型，将文件类型添加到 HTTP 消息头字段&quot;Content-Type&quot;中；</span></span><br><span class="line">nginx.conf:</span><br><span class="line"><span class="comment"># Nginx 默认的配置入口文件； </span></span><br><span class="line">scgi_params:</span><br><span class="line"><span class="comment"># Nginx 在配置 SCGI 代理服务时会根据 scgi_params 文件的配置向 SCGI 服务器传递变量；</span></span><br><span class="line">uwsgi_params:</span><br><span class="line"><span class="comment"># Nginx 在配置 uWSGI 代理服务时会根据 uwsgi_params 文件的配置向 uWSGI 服务器传递变量；</span></span><br><span class="line">koi-utf、koi-win、win-utf</span><br><span class="line"><span class="comment"># :这 3 个文件是 KOI8-R 编码转换的映射文件，因为 Nginx 的作者是俄罗斯人，在 Unicode 流行之前，KOI8-R 是使用最为广泛的俄语编码。</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件结构：</strong></p>
<ul>
<li><p>配置指令（directive）</p>
<p><strong>约定</strong>的内部固定字符串， Nginx 中功能配置的最基本元素，Nginx 的每个功能配置都是通过多个不同的指令组合来实现的。</p>
</li>
<li><p>配置指令值</p>
<p>每个配置指令都有<strong>对应的内容</strong>来表示该指令的<strong>控制参数</strong>，可以是<strong>字符串、数字或变量等多种类型。</strong></p>
</li>
<li><p>配置指令语句</p>
<p><strong>指令</strong>与<strong>指令值</strong>组合构成指令语句。一条指令语句可以包含多个配置指令值，在 Nginx 配置文件中，每条指令语句都要用**<code>;</code>**作为语句结束的标识符。</p>
</li>
<li><p>配置指令域</p>
<p>由**<code>&#123; &#125;</code>**括起来的指令语句集合，指令域既可以包含多个指令语句，也可以包含多个指令域。</p>
</li>
<li><p>配置全局域</p>
<p>配置文件 nginx.conf 中<strong>上层</strong>没有其他指令域的区域被称为配置全局域，简称全局域。</p>
<p>常见配置指令域：</p>
<table>
<thead>
<tr>
<th align="left">域名称</th>
<th align="left">域类型</th>
<th align="left">域说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">main</td>
<td align="left">全局域</td>
<td align="left">Nginx 的根级别指令区域。该区域的配置指令是全局有效的，该指令名为隐性显示，nginx.conf 的整个文件内容都写在该指令域中</td>
</tr>
<tr>
<td align="left">events</td>
<td align="left">指令域</td>
<td align="left">Nginx 事件驱动相关的配置指令域</td>
</tr>
<tr>
<td align="left">http</td>
<td align="left">指令域</td>
<td align="left">Nginx HTTP 核心配置指令域，包含客户端完整 HTTP 请求过程中每个过程的处理方法的配置指令</td>
</tr>
<tr>
<td align="left">upstream</td>
<td align="left">指令域</td>
<td align="left">用于定义被代理服务器组的指令区域，也称”上游服务器”</td>
</tr>
<tr>
<td align="left">server</td>
<td align="left">指令域</td>
<td align="left">Nginx 用来定义服务 IP、绑定端口及服务相关的指令区域</td>
</tr>
<tr>
<td align="left">location</td>
<td align="left">指令域</td>
<td align="left">对用户 URI 进行访问路由处理的指令区域</td>
</tr>
<tr>
<td align="left">stream</td>
<td align="left">指令域</td>
<td align="left">Nginx 对 TCP 协议实现代理的配置指令域</td>
</tr>
<tr>
<td align="left">types</td>
<td align="left">指令域</td>
<td align="left">定义被请求文件扩展名与 MIME 类型映射表的指令区域</td>
</tr>
<tr>
<td align="left">if</td>
<td align="left">指令域</td>
<td align="left">按照选择条件判断为真时使用的配置指令域</td>
</tr>
</tbody></table>
</li>
</ul>
<p>nginx.conf文件结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;		<span class="comment"># 只启动一个工作进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;	<span class="comment"># 每个工作进程的最大连接为1024</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;	 <span class="comment"># 引入MIME类型映射表文件</span></span><br><span class="line">    default_type  application/octet-stream;	 <span class="comment"># 全局默认映射类型为application/octet-stream</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;		 <span class="comment"># 启用零复制机制</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;		<span class="comment"># 保持连接超时时间为65s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;		<span class="comment"># 监听80端口的网络连接请求</span></span><br><span class="line">        server_name  localhost;		<span class="comment"># 虚拟主机名为localhost</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 Nginx 配置文件时，为了便于维护，也会把一些指令或指令域写在外部文件中，再通过 include 指令引入 nginx.conf 主配置文件中。</p>
<p><strong>配置文件中的计量单位：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">容量单位可以使用字节、千字节、兆字节或千兆字节，示例如下。</span><br><span class="line">512</span><br><span class="line">1k或1K</span><br><span class="line">10m或10M</span><br><span class="line">1g或10G 2) 时间的最小单位是毫秒，示例如下。</span><br><span class="line">10ms  <span class="comment"># 10毫秒</span></span><br><span class="line">30s     <span class="comment"># 30秒</span></span><br><span class="line">2m      <span class="comment"># 2分钟</span></span><br><span class="line">5h      <span class="comment"># 5小时</span></span><br><span class="line">1h 30m  <span class="comment"># 1小时30分</span></span><br><span class="line">6d      <span class="comment"># 6天</span></span><br><span class="line">3w      <span class="comment"># 3周</span></span><br><span class="line">5M      <span class="comment"># 5个月</span></span><br><span class="line">2y      <span class="comment"># 2年</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件中的哈希表：</strong></p>
<p>Nginx 使用哈希表加速对 Nginx 配置中常量的处理，如 server 中的主机名、types 中的 MIME 类型映射表、请求头属性字段等数据集合。</p>
<p>哈希表是通过关键码来快速访问常量对应值的数据存储结构，在通过哈希表获取数据的过程中，其内部实现通过相关函数将常量名转换为一个关键码来实现对应值的快速定位和读取。</p>
<h3 id="进程配置指令"><a href="#进程配置指令" class="headerlink" title="进程配置指令"></a>进程配置指令</h3><p>Nginx 的进程配置指令包含在 Nginx 核心代码及事件模块代码中，按配置指令设定的功能可分为进程管理、进程调优、进程调试、事件处理 4 个部分。</p>
<h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a><strong>进程管理</strong></h4><table>
<thead>
<tr>
<th>指令</th>
<th>默认值</th>
<th>指令说明</th>
</tr>
</thead>
<tbody><tr>
<td>daemon</td>
<td>on</td>
<td>用于设定 Nginx 进程是否以守护进程的方式在后台运行，on 为启用，off 为不启用</td>
</tr>
<tr>
<td>pid</td>
<td>logs&#x2F;nginx.pid</td>
<td>设定保存 Nginx 主进程 ID 的文件路径</td>
</tr>
<tr>
<td>user</td>
<td>nobody nobody</td>
<td>用于设定 Nginx 启动后，主进程唤起的工作进程运行的用户及用户组</td>
</tr>
<tr>
<td>load_module</td>
<td>–</td>
<td>加载动态模块的指令</td>
</tr>
<tr>
<td>include</td>
<td>–</td>
<td>加载外部配置文件</td>
</tr>
<tr>
<td>error_log</td>
<td>logs&#x2F;error.log error</td>
<td>指定错误日志文件路径及文件名</td>
</tr>
<tr>
<td>pcre_jit</td>
<td>off</td>
<td>用于设定在配置文件中的正则表达式是否使用 pcre_jit 技术，off 为不使用，on 为使用。<br />需要 Nginx 在配置编译时加上<code>--with-pcre-jit</code> 参数；</td>
</tr>
<tr>
<td>ssl_engine</td>
<td>–</td>
<td>指定使用的 OpenSSL 加速引擎名称</td>
</tr>
</tbody></table>
<h4 id="进程调优"><a href="#进程调优" class="headerlink" title="进程调优"></a>进程调优</h4><p>Nginx 是按照<strong>事件</strong>驱动架构设计的。每个外部请求都以<strong>事件</strong>的形式被工作进程（Worker Process）响应，并发完成各种功能的操作处理。</p>
<ul>
<li><strong>线程池指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>线程池指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>thread_pool（提升文件操作性能）</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>thread_pool default threads&#x3D;32 max_queue&#x3D;65536;</td>
</tr>
<tr>
<td>指令说明</td>
<td>线程池配置指令，允许调整默认线程池或创建新的线程池，用于读取和发送文件的场景中。在线程池中所有线程都繁忙时，新的请求任务将在队列中等待，默认情况下，等待队列中的最大任务数是 65536，使用线程池机制时，通过配置该指令，可以在因读取和发送文件引发阻塞的场景中提升 Nginx 读取和发送文件的处理性能</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread_pool pool_1 threads=16; 具体参数说明如下。</span><br><span class="line"></span><br><span class="line">thread_pool 也可以编写在 http 指令域中；</span><br><span class="line">threads=</span><br><span class="line"><span class="comment"># 参数定义了线程池的线程数；</span></span><br><span class="line">max_queue= </span><br><span class="line"><span class="comment"># 参数指定了等待队列中的最大任务数，在线程池中所有线程都处于繁忙状态时，新任务将进入等待队列。等待队列中的最大任务数为 65536；</span></span><br><span class="line">线程池指令需要在编译配置时增加 --with-threads 参数。</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>定时器方案指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>定时器方案指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>timer_resolution</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 中的处理事件超时管理方案有两种，一种是设定一个定时器，每过一段时间就对所有超时事件进行一次扫描；另一种是先计算出距离当前时间最近的将要发生超时事件的时间，然后等待这个时间之后再去进行一次超时检测。默认配置下使用第二种超时检测方案，该方案是依据事件超时时间与当前时间的时间差进行检测的，所以每次事件返回都需要进行新的检测时间计算，在 I&#x2F;O 事件比较多的场景下，这会导致频繁地调用时间函数 gettimeofday 进行计算并更新下次检测的时间，资源消耗相对较高。而设置一个指定的时间值启用第一种方案时，Nginx 内置的事件超时检测定时器会在指定时间周期内进行事件超时检测，无须调用时间函数 gettimeofday 更新时间，资源消耗相对较低</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timer_resolution 100ms; </span><br><span class="line"><span class="comment"># 在因频繁调用时间函数引发的资源消耗不大的场景中可不设定该指令。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>工作进程优先级指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>工作进程优先级指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_priority</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>0</td>
</tr>
<tr>
<td>指令说明</td>
<td>工作进程优先级设定指令，可以通过该指令设定工作进程在 Linux 系统中的优先级（nice 值）</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_priority -5; </span><br><span class="line"><span class="comment"># worker_priority 指令值的取值范围是 -20～19，数值越小，优先级越高，获得的 CPU 时间就越多。</span></span><br></pre></td></tr></table></figure>

<p>配置生效后可以通过如下命令查看，输出结果如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z11003131R.BeYZ-E3O.gif" alt="img"></p>
<ul>
<li><strong>工作进程数指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>工作进程数指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_processes</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>1</td>
</tr>
<tr>
<td>可配置选项</td>
<td>number 或 auto</td>
</tr>
<tr>
<td>指令说明</td>
<td>依据 Nginx 架构可知，工作进程数量的最佳配置是小于或等于 CPU 内核的数量。通过该指令可以手动设置工作进程的数量，该指令也支持 auto 指令值，由 Nginx 进行自动分配</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes auto; </span><br><span class="line"><span class="comment"># 工作进程数指令的指令值有两种类型，分别为数字和 auto。指令值为 auto 时，Nginx 会根据 CPU 的内核数生成等数量的工作进程。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>工作进程 CPU 绑定指令</li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>工作进程 CPU 绑定指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_cpu_affinity</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>可配置选项</td>
<td>cpumark 或 auto</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 工作进程处于高效的工作状态是因为充分利用了进程与 CPU 的亲缘性，使每个工作进程均可固定在一个 CPU 上运行。该指令可以手动进行工作进程与 CPU 的绑定，当然也可以通过设定指令值 auto 交由 Nginx 自动分配</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line">worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; 指令值是用 CPU 掩码来表示的，使用与 CPU 数量相等位数的二进制值来表示。单个 CPU 用单个二进制值表示，多个 CPU 组合可用二进制值相加来表示。如配置样例所示，CPU 有 8 个核，分别表示绑定了从第 0 核到第 7 核的 CPU。CPU 核数是从 0 开始计数的。</span><br><span class="line"></span><br><span class="line">指令值除了可以是 CPU 掩码外，还可以是 auto。当指令值为 auto 时，Nginx 会自动进行 CPU 绑定。</span><br><span class="line"></span><br><span class="line">配置样例如下:</span><br><span class="line"></span><br><span class="line">worker_processes auto;</span><br><span class="line"></span><br><span class="line">worker_cpu_affinity auto; 工作进程与 CPU 核数也可以是多种对应组合，指令语句如下: worker_processes 4;</span><br><span class="line"></span><br><span class="line">worker_cpu_affinity 01 10 01 10; <span class="comment"># 表示把第1、3工作进程绑定在2核CPU的第0核，第2、4工作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程绑定在2核CPU的第1核</span></span><br><span class="line"><span class="comment"># worker_processes 2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># worker_cpu_affinity 0101 1010;   # 表示把第1工作进程绑定在CPU的第0核和第2核，第2工作进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定在CPU的第1核和第3核</span></span><br><span class="line"><span class="comment"># 工作进程 CPU 绑定指令仅适合于 FreeBSD 和 Linux 操作系统。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>工作进程开文件数指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>工作进程开文件数指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_rlimit_nofile</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 Nginx 所有工作进程同时打开文件的最大数量，默认为操作系统的文件打开数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_rlimit_nofile 65535;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>工作进程关闭等待时间指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>工作进程关闭等待时间指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_shutdown_timeout</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 Nginx 正常关闭工作进程的超时时间，当超过设定的时间时，Nginx 主进程将强制关闭所有已经打开的连接，以便关闭工作进程</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_shutdown_timeout 10s;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>设置互斥锁文件指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>设置互斥锁文件指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>lock_file</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>logs&#x2F;nginx.lock;</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置互斥锁文件指令，在开启 accept mutex 进程调度模式或使用共享内存的场景下，需要用到互斥锁机制。在一些支持原子操作的操作系统中，可使用共享内存实现互斥锁。在不支持原子操作的系统环境下，需要通过该指令指定一个互斥锁文件</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lock_file logs/nginx.lock;</span><br></pre></td></tr></table></figure>

<h4 id="进程调试"><a href="#进程调试" class="headerlink" title="进程调试"></a>进程调试</h4><p>Nginx 调整配置或运行发生异常时，为了及时获知工作进程在事件处理过程中发生的问题，可通过获取内存中各状态机、变量等数据的内容进行调试。</p>
<p>Nginx 为用户提供了一些调试用的配置指令，方便用户进行进程调试。</p>
<ul>
<li><strong>主进程指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>主进程指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>master_process</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>可配置选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 默认是以一个主进程管理多个工作进程的工作方式，设定指令值为 off 时，Nginx 将只运行一个主进程来处理所有请求</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">master_process off; 当只由主进程处理请求时，调试进程会更加方便。</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调试点控制指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>调试点控制指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>debug_points</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>可配置选项</td>
<td>stop 或 abort</td>
</tr>
<tr>
<td>指令说明</td>
<td>该指令用于进行调试点的控制，当指令值为 stop 时，Nginx 在执行到内部调试点时就会发出 SIGSTOP 信号，方便用户进行调试；当指令值为 abort 时则会停止进程并创建 corefile</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debug_points stop;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>工作目录指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>工作目录指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>working_directory</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>在 Linux 操作系统中，当进程执行出错或收到终止信号时，操作系统会将执行进程过程中，内存中的内容存储到一个文件中，该文件被称为崩溃文件（corefile），当 Nginx 进程发生这种状况时也会生成一个崩溃文件，该崩溃文件中包含当时的堆栈及寄存器等信息，方便用户排查问题产生的原因。该指令用于设定工作进程保存崩溃文件的目录，在 Nginx 程序崩溃时向该目录中写入崩溃文件，Nginx 进程需要被设定有目录的写权限</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">working_directory logs 可以使用工具 objdump、GDB 进行文件分析。</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调试文件大小指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>调试文件大小指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_rlimit_core</td>
</tr>
<tr>
<td>作用域</td>
<td>main</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>该指令是崩溃文件大小的设置指令。因为崩溃文件会存储非常详细的信息，数据量很大，很容易把磁盘空间占满，因此需要合理限制崩溃文件的文件大小</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_rlimit_core 800m;</span><br></pre></td></tr></table></figure>

<h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>Nginx 是采用事件驱动式架构处理外部请求的，这一架构使得 Nginx 在现有硬件架构下可以处理数以万计的并发请求。</p>
<p>通过事件处理指令的配置可以让 Nginx 与实际运行的硬件及系统进行有效的适配，从而发挥更加高效的并发处理能力。</p>
<ul>
<li><strong>工作进程并发数指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>工作进程并发数指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_connections</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>512</td>
</tr>
<tr>
<td>指令说明</td>
<td>每个 Nginx 工作进程可处理并发连接的最大数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	worker_connections 65535;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">#Linux 系统下，因为每个网络连接都将打开一个文件描述符，Nginx 可处理的并发连接数受限于操作系统的最大打开文件数，同时所有工作进程的并发数也受 worker_rlimit_nofile 指令值的限制。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>事件处理机制选择指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名 称</th>
<th>事件处理机制选择指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>use</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 内部有多种事件处理机制模型，以下简称事件模型。默认情况下，Nginx 会自动选择一种高效的事件模型，用户可以通过该指令自行选择事件模型进行事件处理</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	use epoll;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># Nginx 支持的事件模型有 select、poll、kqueue、epoll、/dev/poll、eventport。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>互斥锁指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>互斥锁指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>accept_mutex</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>可配置选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置是否启用互斥锁模式的进程调度</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	accept_mutex on;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 在 Nginx 1.11.3 版本之前，互斥锁指令是默认开启的。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>互斥锁等待时间指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>互斥锁等待时间指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>accept_mutex_delay</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>500ms</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 工作进程在互斥锁模式下需要不断地争抢互斥锁，没有互斥锁的工作进程如果争抢不到互斥锁，会在等待时间结束后执行下一轮争抢。通过该指令可以将抢锁等待时间设置为一个较短的时间，以提高进程争抢互斥锁的频率</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	accept_mutex_delay 300ms;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>多请求支持指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>多请求支持指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>multi_accept</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>可配置选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>默认情况下，每个工作进程一次只接收一个新连接。如果开启该指令，则每个工作进程将接收所有的新连接</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	multi_accept on;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>未完成异步操作最大数指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>未完成异步操作最大数指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>worker_aio_requests</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>32</td>
</tr>
<tr>
<td>指令说明</td>
<td>用于设置当在 epoll 事件模型下使用 AIO 时，单个工作进程未完成异步 I&#x2F;O 操作的最大数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	worker_aio_requests 128;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>调试指定连接指令</strong></li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>调试指定连接指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>debug_connection</td>
</tr>
<tr>
<td>作用域</td>
<td>events</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>可配置选项</td>
<td>address 或 CIDR 或 unix:</td>
</tr>
<tr>
<td>指令说明</td>
<td>对指定的客户端连接开启调试日志</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">    debug_connection 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    debug_connection localhost;</span><br><span class="line"></span><br><span class="line">    debug_connection 192.0.2.0/24;</span><br><span class="line"></span><br><span class="line">    debug_connection ::1;</span><br><span class="line"></span><br><span class="line">    debug_connection 2001:0db8::/32;</span><br><span class="line"></span><br><span class="line">    debug_connection unix:;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 该指令需要 Nginx 在编译时通过--with-debug参数开启。</span></span><br></pre></td></tr></table></figure>

<h4 id="指令配置样例"><a href="#指令配置样例" class="headerlink" title="指令配置样例"></a>指令配置样例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemon on;                                              <span class="comment"># 以守护进程的方式运行Nginx</span></span><br><span class="line"></span><br><span class="line">pid  logs/nginx.pid;                                    <span class="comment"># 主进程ID记录在logs/nginx.pid中</span></span><br><span class="line"></span><br><span class="line">user nobody nobody;                                     <span class="comment"># 工作进程运行用户为nobody</span></span><br><span class="line"></span><br><span class="line">load_module <span class="string">&quot;modules/ngx_http_xslt_filter_module.so&quot;</span>;   <span class="comment"># 加载动态模块ngx_http_xslt_</span></span><br></pre></td></tr></table></figure>

<p><strong>filter_module.so</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error_log  logs/error.log debug;                        <span class="comment"># 错误日志输出级别为debug</span></span><br><span class="line"></span><br><span class="line">pcre_jit on;                                            <span class="comment"># 启用pcre_jit技术</span></span><br><span class="line"></span><br><span class="line">thread_pool default threads=32 max_queue=65536;         <span class="comment"># 线程池的线程数为32，等待队列中的最大</span></span><br></pre></td></tr></table></figure>

<p><strong>任务数为65536</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timer_resolution 100ms;                                 <span class="comment"># 定时器周期为100毫秒</span></span><br><span class="line"></span><br><span class="line">worker_priority -5;                                     <span class="comment"># 工作进程系统优先级为-5</span></span><br><span class="line"></span><br><span class="line">worker_processes auto;                                  <span class="comment"># 工作进程数由Nginx自动调整</span></span><br><span class="line"></span><br><span class="line">worker_cpu_affinity auto;                               <span class="comment"># 工作进程的CPU绑定由Nginx自动调整</span></span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 65535;                             <span class="comment"># 所有工作进程的最大连接数是65535</span></span><br><span class="line"></span><br><span class="line">worker_shutdown_timeout 10s;                            <span class="comment"># 工作进程关闭等待时间是10秒</span></span><br><span class="line"></span><br><span class="line">lock_file logs/nginx.lock;                              <span class="comment"># 互斥锁文件的位置是logs/nginx.lock</span></span><br><span class="line"></span><br><span class="line">working_directory logs                                  <span class="comment"># 工作进程工作目录是logs</span></span><br><span class="line"></span><br><span class="line">debug_points stop;                                      <span class="comment"># 调试点模式为stop</span></span><br><span class="line"></span><br><span class="line">worker_rlimit_core 800m;                                <span class="comment"># 崩溃文件大小为800MB</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">	worker_connections 65535;                           <span class="comment"># 每个工作进程的最大连接数是65535</span></span><br><span class="line"></span><br><span class="line">	use epoll;                                          <span class="comment"># 指定事件模型为epoll</span></span><br><span class="line"></span><br><span class="line">	accept_mutex on;                                    <span class="comment"># 启用互斥锁模式的进程调度</span></span><br><span class="line"></span><br><span class="line">	accept_mutex_delay 300ms;                           <span class="comment"># 互斥锁模式下进程等待时间为300毫秒</span></span><br><span class="line"></span><br><span class="line">	multi_accept on;                                    <span class="comment"># 启用支持多连接</span></span><br><span class="line"></span><br><span class="line">	worker_aio_requests 128;                            <span class="comment"># 完成异步操作最大数为128</span></span><br><span class="line"></span><br><span class="line">	debug_connection 192.0.2.0/24;                       <span class="comment"># 调试指定连接的IP地址和端口是	192.0.2.0/24</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="端口监听（listen指令）"><a href="#端口监听（listen指令）" class="headerlink" title="端口监听（listen指令）"></a>端口监听（listen指令）</h3><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">端口监听指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">listen</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">server</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">listen*:80 或 *:8000</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">服务监听端口、绑定 IP、监听方式的配置</td>
</tr>
</tbody></table>
<p>Nginx 服务通过 listen 指令的指令值监听网络请求，可以是 IP 协议的形式，也可以是 UNIX 域套接字。</p>
<p>如果不设置 listen 指令，Nginx 在以超级用户运行时则监听 80 端口，以非超级用户运行时则监听 8000 端口。</p>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">若为 IP 协议，该参数值为指定绑定监听端口的 IP 或主机名；若为 UNIX 域套接字，则该参数值为 sock 文件路径</td>
</tr>
<tr>
<td align="left">port</td>
<td align="left">80</td>
<td align="left">IP 协议监听的端口</td>
</tr>
<tr>
<td align="left">bind</td>
<td align="left">address:port</td>
<td align="left">指定 IP 及端口</td>
</tr>
<tr>
<td align="left">ipv6only</td>
<td align="left">on</td>
<td align="left">只接收 IPv6 连接或接收 IPv6 和 IPv4 连接</td>
</tr>
<tr>
<td align="left">default_server</td>
<td align="left">–</td>
<td align="left">当 http 指令域中包含多个虚拟主机时，该参数用于指定哪个虚拟主机是默认服务，默认将第一个顺序的 server 设为默认服务。默认服务可以用来处理没有 server_name 匹配成功的请求</td>
</tr>
<tr>
<td align="left">http2</td>
<td align="left">–</td>
<td align="left">HTTP&#x2F;2 协议支持</td>
</tr>
<tr>
<td align="left">spdy</td>
<td align="left">–</td>
<td align="left">SDPY 协议支持，与 HTTP&#x2F;2 协议不能同时存在</td>
</tr>
<tr>
<td align="left">ssl</td>
<td align="left">–</td>
<td align="left">SSL 支持</td>
</tr>
<tr>
<td align="left">proxy_protocol</td>
<td align="left">–</td>
<td align="left">在指定监听端口上启用 proxy_protocol 协议支持</td>
</tr>
<tr>
<td align="left">fastopen</td>
<td align="left">number</td>
<td align="left">HTTP 处于保持连接（keepalive）状态时，允许不经过三次握手的 TCP 连接的队列的最大数</td>
</tr>
<tr>
<td align="left">deferred</td>
<td align="left">–</td>
<td align="left">添加该参数后，在 TCP 三次握手的过程中，检测到客户端有数据时才将 TCP 状态置为 ESTABLISHED 状态，没有数据则直接丢弃</td>
</tr>
<tr>
<td align="left">reuseport</td>
<td align="left">–</td>
<td align="left">默认情况下，所有的工作进程会共享一个 socket 去监听同一 IP 和端口的组合。该参数启用后，允许每个工作进程有独立的 socket 去监听同一 IP 和端口的组合，内核会对传人的连接进行负载均衡。适用于 Linux 3.9+，DragonFly BSD 和 FreeBSD 12+</td>
</tr>
<tr>
<td align="left">so_keepalive</td>
<td align="left">off</td>
<td align="left">配置是否在监听的端口启用”TCP keepalive”机制。当设置为 on 时，默认等同于 so_keepalive&#x3D;30m::10，表示 30 分钟无数据传输时发送探测包，发送 10 次，发送间隔使用系统内核参数 tcp_keepalive_intvl 的设定值</td>
</tr>
<tr>
<td align="left">backlog</td>
<td align="left">-1&#x2F;511</td>
<td align="left">当阻塞时，设置挂起连接队列的最大长度，在 FreeBSD，DragonFly BSD 和 MacOS 操作系统上，默认值为 -1，其他平台上值为 511</td>
</tr>
<tr>
<td align="left">rcvbuf</td>
<td align="left">–</td>
<td align="left">socket 接收缓冲的大小，默认为 8k 字节，在接收数据比较大的场景中可以适当调整</td>
</tr>
<tr>
<td align="left">sndbuf</td>
<td align="left">–</td>
<td align="left">socket 发送缓冲的大小，默认为 8k 字节，在发送数据较大的场景中可以适当调整</td>
</tr>
<tr>
<td align="left">setfib</td>
<td align="left">number</td>
<td align="left">为监听套接字设置关联路由表，仅在 FreeBSD 系统上有效</td>
</tr>
<tr>
<td align="left">accept_filter</td>
<td align="left">filter</td>
<td align="left">为监听套接字设置过滤器，仅支持 FreeBSD 和 NetBSD 5.0+ 系统</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        listen 127.0.0.1:8000;           <span class="comment"># 监听127.0.0.1的8000端口</span></span><br><span class="line"></span><br><span class="line">        listen 127.0.0.1;                    <span class="comment"># 监听127.0.0.1的默认80端口（root权限）</span></span><br><span class="line"></span><br><span class="line">        listen 8000;                          <span class="comment"># 监听本机所有IP的8000端口</span></span><br><span class="line"></span><br><span class="line">        listen *:8000;                        <span class="comment"># 监听本机所有IP的8000端口</span></span><br><span class="line"></span><br><span class="line">        listen localhost:8000;           <span class="comment"># 监听locahost的8000端口</span></span><br><span class="line"></span><br><span class="line">        listen [::]:8000;                      <span class="comment"># 监听IPv6的8000端口</span></span><br><span class="line"></span><br><span class="line">        listen [::1];                             <span class="comment"># 监听IPv6的回环IP的默认80端口(root权限)</span></span><br><span class="line"></span><br><span class="line">        listen unix:/var/run/nginx.sock; <span class="comment"># 监听域套接字文件</span></span><br><span class="line"></span><br><span class="line">        listen *:8000 \                     <span class="comment"># 监听本机的8000端口</span></span><br><span class="line"></span><br><span class="line">        default_server \          <span class="comment"># 当前服务是http指令域的主服务</span></span><br><span class="line"></span><br><span class="line">        fastopen=30 \            <span class="comment"># 开启fastopen功能并限定最大队列数为30</span></span><br><span class="line"></span><br><span class="line">        deferred \                   <span class="comment"># 拒绝空数据连接</span></span><br><span class="line"></span><br><span class="line">        reuseport \                 <span class="comment"># 工作进程共享socket这个监听端口</span></span><br><span class="line"></span><br><span class="line">        backlog=1024 \          <span class="comment"># 请求阻塞时挂起队列数是1024个</span></span><br><span class="line"></span><br><span class="line">        so_keepalive=on;        <span class="comment"># 当socket为保持连接时，开启状态检测功能</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="server-name-配置主机名称"><a href="#server-name-配置主机名称" class="headerlink" title="server_name 配置主机名称"></a>server_name 配置主机名称</h3><p>Nginx 中的 server_name 指令主要用于配置基于名称的虚拟主机，</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">主机名指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">server_name</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">server</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定所在 server 指令域的主机名</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name example.com .example.com; <span class="comment"># 泛域名的使用</span></span><br><span class="line">        server_name www.example.;             <span class="comment"># 多个后缀域名的使用server_name</span></span><br><span class="line">        www.example.com ~^www.example.com$;   <span class="comment"># 正则表达式匹配</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 正则匹配变量的场景</span></span><br><span class="line">        server_name ~^(www\.)?(.+)$;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /sites/<span class="variable">$2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 正则匹配为变量的场景</span></span><br><span class="line">        server_name ~^(www\.)?(?&lt;domain&gt;.+)$;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /sites/<span class="variable">$domain</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 server_name 指令值中有多个主机名时，第一个主机名为首主机名。</p>
<hr>
<h3 id="处理HTTP请求"><a href="#处理HTTP请求" class="headerlink" title="处理HTTP请求"></a>处理HTTP请求</h3><p>标准的 HTTP 请求从开始到结束包括<strong>请求报文</strong>和<strong>响应报文</strong>。</p>
<p><strong>请求报文：</strong></p>
<ul>
<li><p>客户端向服务端发起请求时告知服务端请求的方式、相关属性和请求内容的数据包，由请求行、请求头、请求体组成。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z1142U23T.DRL08zOL.gif" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求行：</span></span><br><span class="line">GET 		https://www.baidu.com/ 		HTTP/1.1</span><br><span class="line">请求方法			请求的URL地址		请求的协议及版本号</span><br><span class="line"><span class="comment"># 请求头：</span></span><br><span class="line">除第一行外剩下的内容</span><br><span class="line"><span class="comment"># 请求体：</span></span><br><span class="line">一般为&#123;JSON&#125;格式 <span class="comment"># 本例请求方法为 GET ，没有请求体。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常见的请求头属性如下表所示</p>
<table>
<thead>
<tr>
<th align="left">属性名称</th>
<th align="left">属性值样例</th>
<th align="left">属性说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Host</td>
<td align="left"><a href="http://www.baidu.com/">www.baidu.com</a></td>
<td align="left">记录用户请求的目标主机名，常用于服务端虚拟主机的区分，对应 Nginx 的 server_name 指令的配置</td>
</tr>
<tr>
<td align="left">Accept</td>
<td align="left">text&#x2F;html, application&#x2F;xhtml+xml</td>
<td align="left">描述客户端能够接收服务端返回的数据类型，Nginx 会通过 types 指令域中的内容做匹配</td>
</tr>
<tr>
<td align="left">Cookie</td>
<td align="left">BD_HOME&#x3D;1; sugstore&#x3D;1</td>
<td align="left">客户端当前连接的所有 cookie</td>
</tr>
<tr>
<td align="left">Referer</td>
<td align="left"><a href="https://www.baidu.com/">https://www.baidu.com</a></td>
<td align="left">表示当前连接的上一个来源 URI</td>
</tr>
<tr>
<td align="left">Cache-Control</td>
<td align="left">no-cache</td>
<td align="left">当前客户端缓存机制的控制，可通过更多的属性值参数进行缓存控制</td>
</tr>
<tr>
<td align="left">Connection</td>
<td align="left">keep-alive</td>
<td align="left">表示是否需要启用保持连接机制，HTTP&#x2F;1.1 默认启用保持连接</td>
</tr>
<tr>
<td align="left">If-None-Match</td>
<td align="left">W&#x2F; “50b1c1d4f775c61:df3”</td>
<td align="left">与页面响应头中 etag 的属性值配合使用，将 etag 的内容提交给服务端，用以判断请求内容是否已经被修改，若未被修改，则返回状态码 304，客户端使用本地缓存</td>
</tr>
<tr>
<td align="left">if_modified_since</td>
<td align="left">–</td>
<td align="left">当前请求 URI 页面本地缓存的最后修改时间。服务器会将实际文件的修改时间与该参数值进行比较，若一致，则返回 304，客户端读取本地缓存；若不一致，则返回服务端文件的内容</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>响应报文：</strong></p>
<ul>
<li><p>服务端处理客户端请求后返回客户端的数据，数据包括<strong>响应行、响应头、响应体</strong> 3 个部分。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z1143304418.BadwDGA0.gif" alt="img"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应行：</span></span><br><span class="line">HTTP/1.1 			200 			OK</span><br><span class="line">报文协议及版本号	响应状态码		响应状态描述</span><br><span class="line"><span class="comment"># 响应头：</span></span><br><span class="line">包含服务端处理完请求后响应设定的若干属性字段，如 set-cookie 信息等。</span><br><span class="line"><span class="comment"># 响应体：</span></span><br><span class="line">返回的处理结果，本次请求的响应体是 HTML 页面数据。</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应状态码类别：</p>
<ul>
<li>1××（消息）:表示服务端已经接收到请求，正在进行处理；</li>
<li>2××（处理成功）:表示服务端已经正确处理完客户端的 HTTP 请求；</li>
<li>3××（重定向）:服务端接收到 HTTP 请求，并将其 HTTP 请求重定向到客户本地或其他服务器进行处理；</li>
<li>4××（客户端请求有误）:客户端提交的请求不符合规范或未被授权、禁止访问等；</li>
<li>5××（服务端处理出错）:服务端无法正常完成请求操作，如超时等。</li>
</ul>
</li>
<li><p>常见的响应头属性如下表所示</p>
<table>
<thead>
<tr>
<th align="left">属性名称</th>
<th align="left">属性值样例</th>
<th align="left">属性说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Content-Type</td>
<td align="left">text&#x2F;html; charset&#x3D;utf-8</td>
<td align="left">告知客户端返回数据的类型</td>
</tr>
<tr>
<td align="left">Connection</td>
<td align="left">keep-alive</td>
<td align="left">告知客户端是否启用保持连接机制</td>
</tr>
<tr>
<td align="left">Cache-Control</td>
<td align="left">no-cache</td>
<td align="left">告知客户端对缓存机制的控制</td>
</tr>
<tr>
<td align="left">ETag</td>
<td align="left">“50b1c 1d4f775c61:df3”</td>
<td align="left">当前响应数据的实体标签值，用于在客户端与服务端提交相同请求时判断请求内容是否有修改</td>
</tr>
<tr>
<td align="left">Location</td>
<td align="left"><code>https://map.baidu.com/</code></td>
<td align="left">告知客户端跳转到指定的 URI</td>
</tr>
<tr>
<td align="left">Set-Cookie</td>
<td align="left">username&#x3D;john.wang</td>
<td align="left">通知客户端修改本地 cookie 内容</td>
</tr>
</tbody></table>
</li>
<li><p>当 Nginx 接收 HTTP 请求后，处理相关的配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">作用域</th>
<th align="left">默认值</th>
<th align="left">指令值选项</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ignore_invalid_headers</td>
<td align="left">http, server</td>
<td align="left">on</td>
<td align="left">on 或 off</td>
<td align="left">忽略请求头中的无效属性字段，请求头属性字段中，属性名称默认由英文字符、数字和连接符组成，不符合此标准的属性名均为无效属性名。当指令值为on时，不对无效的属性名称进行过滤</td>
</tr>
<tr>
<td align="left">underscores_in_headers</td>
<td align="left">http, server</td>
<td align="left">off</td>
<td align="left">on 或 off</td>
<td align="left">请求头中属性名称的定义中”<em>“是无效连接符，启用该指令后，”</em>“将被认为是有效的连接符。如果该指令值为 off，则按照 ignore_invalid_headers 指令的配置进行处理</td>
</tr>
<tr>
<td align="left">client_header_buffer_size</td>
<td align="left">http, server</td>
<td align="left">1k</td>
<td align="left">–</td>
<td align="left">设置存放读取客户端请求头的缓冲区的大小，默认值为1K，当请求头的数据因cookie过长等其他原因超过所设定的大小时，会按照large-client header buffers的指令配置进行处理</td>
</tr>
<tr>
<td align="left">large_client_header_buffers</td>
<td align="left">http, server</td>
<td align="left">48k</td>
<td align="left">–</td>
<td align="left">当客户请求头的大小超过 client_header_buffer_size 指令设置的值时，会将超出的部分转移到该缓冲区中。在默认配置下，超大请求头第一次可分配到一个 8KB 的缓冲区块，请求行的大小不能超过该缓冲区块的大小，否则将返回 414 错误。超出 8KB 的请求头会被循环转移到新的缓冲区块中，最多转移 4 次，当超过该值时，则会返回 400 错误</td>
</tr>
<tr>
<td align="left">client_header_timeout</td>
<td align="left">http, server</td>
<td align="left">60s</td>
<td align="left">–</td>
<td align="left">读取客户端请求头的最大超时时间</td>
</tr>
<tr>
<td align="left">request_pool_size</td>
<td align="left">http, server</td>
<td align="left">4k</td>
<td align="left">–</td>
<td align="left">Nginx 开始处理请求时，会为每个请求分配一个 4KB 大小的内存池，以减少内核对小块内存的分配次数，HTTP 请求结束后会回收为其分配的内存池</td>
</tr>
<tr>
<td align="left">client_max_body_size</td>
<td align="left">http, server, Location</td>
<td align="left">1m</td>
<td align="left">–</td>
<td align="left">HTTP 请求时，请求体的最大值。当请求头中属性 Content-Length 的大小超过指令配置时，返回状态码 408</td>
</tr>
<tr>
<td align="left">client_body_buffer_size</td>
<td align="left">http, server, location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">设置读取客户请求体的缓冲区大小，当请求体的大小超过该设定值后，会按照 client_body_in_single_buffer 指令的配置选择部分或全部写入 client_body_temp_path 指令设定的文件中。默认配置下，32 位系统下缓冲区的大小是 8KB，64 位系统下缓冲区的大小是 16KB</td>
</tr>
<tr>
<td align="left">client_body_in_file_only</td>
<td align="left">http, server, location</td>
<td align="left">off</td>
<td align="left">off 或 clean 或 on</td>
<td align="left">默认情况下是优先使用缓存，在请求体超出请求体缓冲区的大小时再写入文件。启用该指令后将禁用缓冲区，请求体会被直接写入 client_body_temp_path 指令设定的文件中</td>
</tr>
<tr>
<td align="left">client_body_temp_path</td>
<td align="left">http, server, location</td>
<td align="left">client_body_temp_path_client_body_temp</td>
<td align="left">–</td>
<td align="left">请求体被写入文件的临时目录</td>
</tr>
<tr>
<td align="left">client_body_timeout</td>
<td align="left">http, server, location</td>
<td align="left">60s</td>
<td align="left">–</td>
<td align="left">当 HTTP 请求建立连接后，客户端在超过设定时间后仍未发送请求体内容到服务端，则 Nginx 认为请求体超时，将返回响应状态码 408</td>
</tr>
<tr>
<td align="left">if_modified_since</td>
<td align="left">http, server, location</td>
<td align="left">exact</td>
<td align="left">off 或 exact 或 before</td>
<td align="left">在请求头中存在属性if modified since时，关闭或设置客户端缓存文件修改时间的服务端校验功能</td>
</tr>
<tr>
<td align="left">etag</td>
<td align="left">http, server, location</td>
<td align="left">on</td>
<td align="left">on 或 off</td>
<td align="left">etag（Entity Tag），用于在响应头中返回文件实体标签，与同一文件的下一次请求头中 If-None-Match 属性值组合检查文件是否被修改，未修改则返回响应状态码 304，否则返回最新的文件内容</td>
</tr>
<tr>
<td align="left">max_ranges</td>
<td align="left">http, server, location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">默认为不限制大小，当客户端以 byte-range 方式获取数据请求时，该指令限定了允许的最大值。当指令值为 0 时，则关闭以 byte-range 方式获取数据的功能</td>
</tr>
<tr>
<td align="left">types</td>
<td align="left">http, server, location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">被请求文件扩展名与 MIME 类型映射表</td>
</tr>
<tr>
<td align="left">types_hash_max_size</td>
<td align="left">http, server, location</td>
<td align="left">1024</td>
<td align="left">–</td>
<td align="left">设定 MIME 类型哈希表的大小</td>
</tr>
<tr>
<td align="left">types_hash_bucket_size</td>
<td align="left">http, server, location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">设定 MIME 类型哈希桶的大小，默认值与 CPU 缓存行的大小一致，有 32、64、128（单位:字节）3 个值</td>
</tr>
<tr>
<td align="left">error_page</td>
<td align="left">http, server, location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">当 HTTP 请求发生错误时，可以根据响应状态码定义一个返回的页面或执行跳转</td>
</tr>
<tr>
<td align="left">recursive_error_pages</td>
<td align="left">http, server, location</td>
<td align="left">off</td>
<td align="left">off 或 on</td>
<td align="left">当使用 error_pages 设定多层内部访问时，仍可处理上一层级返回的响应状态码</td>
</tr>
<tr>
<td align="left">server_tokens</td>
<td align="left">http, server, location</td>
<td align="left">on</td>
<td align="left">on 或 off</td>
<td align="left">默认在错误信息响应头中增加属性字段”Server”以标识 Nginx 的版本号</td>
</tr>
<tr>
<td align="left">msie_padding</td>
<td align="left">http, server, location</td>
<td align="left">on</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    ignore_invalid_headers off;</span><br><span class="line"></span><br><span class="line">    underscores_in_headers on;</span><br><span class="line"></span><br><span class="line">    client_header_buffer_size 2k;</span><br><span class="line"></span><br><span class="line">    large_client_header_buffers 10 8k;</span><br><span class="line"></span><br><span class="line">    client_header_timeout 180s;</span><br><span class="line"></span><br><span class="line">    request_pool_size 4k;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 100m;</span><br><span class="line"></span><br><span class="line">    client_body_in_file_only on;</span><br><span class="line"></span><br><span class="line">    client_body_temp_path /tmp/nginx/client_temp 1 2;</span><br><span class="line"></span><br><span class="line">    client_body_timeout 120s;</span><br><span class="line"></span><br><span class="line">    if_modified_since before;</span><br><span class="line"></span><br><span class="line">    etag off;</span><br><span class="line"></span><br><span class="line">    max_ranges 1024 ;</span><br><span class="line"></span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    types_hash_bucket_size 64;</span><br><span class="line"></span><br><span class="line">    error_page 404             /404.html;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line"></span><br><span class="line">    error_page 404 = @fallback;</span><br><span class="line"></span><br><span class="line">    location @fallback &#123;</span><br><span class="line"></span><br><span class="line">    	proxy_pass http://backend;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 =200 /empty.gif;</span><br><span class="line"></span><br><span class="line">    location /download/ &#123;</span><br><span class="line"></span><br><span class="line">    	types &#123;</span><br><span class="line"></span><br><span class="line">    		application/octet-stream yaml;</span><br><span class="line"></span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">   		default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    proxy_intercept_errors on;          <span class="comment"># 当上游服务器返回非200状态码时，返回代理服务器处理</span></span><br><span class="line"></span><br><span class="line">    recursive_error_pages on;           <span class="comment"># 启用多级错误跳转功能</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">    	error_page 404 = @fallback;     <span class="comment"># 当前URL请求为404时执行内部请求@fallback</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @fallback &#123;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://backend;      <span class="comment"># 当前所有请求代理到上游服务器backend</span></span><br><span class="line"></span><br><span class="line">        error_page 502 = @upfallback;   <span class="comment"># 当上游服务器返回502状态码时，执行内部请求@upfallback</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @upfallback &#123;</span><br><span class="line"></span><br><span class="line">    	proxy_pass http://newbackend;   <span class="comment"># 当前的所有请求代理到上游服务器newbackend</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    msie_padding off;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a><strong>路由匹配规则</strong></h3><p>URI 即统一标识资源符，通用的 URI 语法格式如下:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</span><br></pre></td></tr></table></figure>

<ul>
<li>在 Nginx 的应用场景中，URL 与 URI 并无明确区别。URI 标准（RFC3986）中约定，URL 是 URI 的一个子集；</li>
<li>scheme 是 URI 请求时遵守的协议，常见的有 <strong>HTTP、HTTPS、FTP</strong>；</li>
<li>host[:port] 是主机名与端口号，HTTP 协议的默认端口是 <strong>80</strong>，HTTPS 协议的默认端口是 <strong>443</strong>；</li>
<li>[&#x2F;path] 是<strong>访问路径与访问文件名</strong>；</li>
<li>[?query] 是<strong>访问参数</strong>，访问参数以**”?”<strong>开始作标识，由多个以</strong>“&amp;”**连接的 <strong>key&#x3D;value</strong> 形式的字符串组成。</li>
</ul>
<h4 id="URI-匹配规则"><a href="#URI-匹配规则" class="headerlink" title="URI 匹配规则"></a>URI 匹配规则</h4><p>location 是 Nginx 对 HTTP 请求中的 URI 进行匹配处理的指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location [=|~|~*|^~|@] pattern &#123; ... &#125; </span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>[=|~*|^~|@]</code></strong>：修饰语（Modifier），修饰语定义了与 URI 的匹配方式。</p>
</li>
<li><p><strong>pattern</strong>：匹配项，可以是字符串或正则表达式。</p>
<ul>
<li><p>无修饰语：pattern只能是字符串（完全匹配URL中除了参数之外的内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /images &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰语为**<code>=</code>**，Linux 系统下会区分大小写，Windows 系统下则不会。（完全匹配URL中除了参数之外的内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location = /images &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰语为**<code>~</code>**，Linux 系统下会区分大小写，Windows 系统下则会无效。匹配项的内容必须是正则表达式。（完全匹配URL中除了参数之外的内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ /images/.*.(gif|jpg|png)$ &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰语为**<code>~*</code>**，不区分大小写。匹配项的内容必须是正则表达式。（完全匹配URL中除了参数之外的内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~* .(gif|jpg|png)$ &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰语为**<code>^~</code>**，匹配项的内容如果不是正则表达式，则不再进行正则表达式测试。（完全匹配URL中除了参数之外的内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ^~ /images &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰语为**<code>@</code>**，定义一个只能内部访问的 location 区域，可以被其他内部跳转指令使用，如 try_files 或 error_page。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location @images &#123;</span><br><span class="line">	proxy_pass http://images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h4><ol>
<li>先检测匹配项的内容为非正则表达式修饰语的 location，然后再检测匹配项的内容为正则表达式修饰语的 location。</li>
<li>匹配项的内容为正则与非正则都匹配的 location，按照匹配项的内容为正则匹配的 location 执行。</li>
<li>所有匹配项的内容均为非正则表达式的 location，按照匹配项的内容完全匹配的内容长短进行匹配，即匹配内容多的 location 被执行。</li>
<li>所有匹配项的内容均为正则表达式的 location，按照书写的先后顺序进行匹配，匹配后就执行，不再做后续检测。</li>
</ol>
<p>当 location 为正则匹配且内部有 proxy_pass 指令时，proxy_pass 的指令值中不能包含无变量的字符串。修饰语”^~”不受该规则限制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ /images &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;                                 <span class="comment"># 正确的指令值</span></span><br><span class="line">    proxy_pass http://127.0.0.1:8080<span class="variable">$request_uri</span>;             <span class="comment"># 正确的指令值</span></span><br><span class="line">    proxy_pass http://127.0.0.1:8080/image<span class="variable">$request_uri</span>; <span class="comment"># 正确的指令值</span></span><br><span class="line">    proxy_pass http://127.0.0.1:8080/;                               <span class="comment"># 错误的指令值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问路由指令"><a href="#访问路由指令" class="headerlink" title="访问路由指令"></a>访问路由指令</h4><ul>
<li><p><strong>合并空斜线指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>合并空斜线指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>merge_slashes</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>off 或 on</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	merge_slashes off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转主机名指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>跳转主机名指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>server_name_in_redirect</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令说明</td>
<td>默认情况下，Nginx 重定向时，会用当前 server 指令域中主机的 IP 与 path 拼接成完整的 URL 进行重定向。开启该参数后，Nginx 会先查看当前指令域中 server_name 的第一个主机名，如果没有，则会查找请求头中 host 字段的内容，如果再没有则会用 IP 与 path 进行拼接</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	server_name_in_redirect on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转端口指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>跳转端口指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>port_in_redirect</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 重定向时，会用当前 server 指令域的监听端口与主机拼接成完整的URL进行重定向。当指令值为 off 时，则默认用 80 端口</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	port_in_redirect on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子请求输出缓冲区大小指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>子请求输出缓冲区大小指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>subrequest_output_buffer_size</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>4k 或 8k</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置用于存储子请求响应报文的缓冲区大小，默认值与操作系统的内存页大小一致</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	subrequest_output_buffer_size 64K;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>绝对跳转指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>绝对跳转指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>absolute_redirect</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>off 或 on</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 发起的重定向使用绝对路径做跳转，即用主机名和端口及访问路径的方式，如果关闭的话，则跳转为默认相对当前请求的主机名和端口的访问路径</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	absolute_redirect off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>响应刷新指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>响应刷新指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>msie_refresh</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>Nginx 处理页面跳转或刷新的方式通常是以向客户端返回 3xx 状态码来实现。该指令是当客户端为 msie 时，在返回 HTML 头部添加”&lt;meta http-equiv&#x3D;&quot;Refresh&quot; content&#x3D;&quot;0;&quot; url&#x3D;*&gt;”</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	msie_refresh off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="重定向配置详解"><a href="#重定向配置详解" class="headerlink" title="重定向配置详解"></a>重定向配置详解</h3><p>访问重写 <strong>rewrite</strong> 是 Nginx HTTP 请求处理过程中的一个重要功能，它是以模块的形式存在于代码中的，其功能是对用户请求的 URI 进行 PCRE 正则<strong>重写</strong>，然后返回 <strong>30×</strong> 重定向跳转或按条件执行相关配置。</p>
<p>rewrite 模块内置了类似脚本语言的 set、if、break、return 配置指令，通过这些指令，用户可以在 HTTP 请求处理过程中对 URI 进行更灵活的操作控制。</p>
<p>rewrite 模块提供的指令可以分两类：</p>
<ul>
<li><p>标准配置指令</p>
<p>对指定的操作进行相应的操作控制。</p>
</li>
<li><p>脚本指令</p>
<p>可以在 HTTP 指令域内以类似脚本编程的形式进行编写。</p>
</li>
</ul>
<h4 id="标准配置指令"><a href="#标准配置指令" class="headerlink" title="标准配置指令"></a>标准配置指令</h4><ul>
<li><p><strong>rewrite 日志记录指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>rewrite 日志记录指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>rewrite_log</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>当指令值为 on 时，rewrite 的执行结果会以 notice 级别记录到 Nginx 的 error 日志文件中</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	rewrite_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>未初始化变量告警日志记录指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>未初始化变量告警日志记录指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>uninitialized_variable_warn</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>指令值为 on 时，会将未初始化的变量告警记录到日志中</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	uninitialized_variable_warn off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>rewrite 指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>rewrite 指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>rewrite</td>
</tr>
<tr>
<td>作用域</td>
<td>server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>对用户的 URI 用正则表达式的方式进行重写，并跳转到新的 URI</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	rewrite ^/users/(.*)$ /show?user=<span class="variable">$1</span> last;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>rewrite 访问重写是通过 rewrite 指令实现的，rewrite 指令的语法格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure>

<ul>
<li>regex 是 PCRE 语法格式的正则表达式。</li>
<li>replacement 是重写 URI 的改写规则。当改写规则以”http:&#x2F;&#x2F;“”https:&#x2F;&#x2F;“或”$scheme”开头时，Nginx 重写该语句后将停止执行后续任务，并将改写后的 URI 跳转返回客户端。</li>
<li>flag 是执行该条重写指令后的操作控制符。操作控制符有如下 4 种:<ul>
<li>ast:执行完当前重写规则跳转到新的 URI 后继续执行后续操作；</li>
<li>break:执行完当前重写规则跳转到新的 URI 后不再执行后续操作。不影响用户浏览器 URI 显示；</li>
<li>redirect:返回响应状态码 302 的临时重定向，返回内容是重定向 URI 的内容，但浏览器网址仍为请求时的 URI；</li>
<li>permanent:返回响应状态码 301 的永久重定向，返回内容是重定向 URI 的内容，浏览器网址变为重定向的 URI。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="脚本指令"><a href="#脚本指令" class="headerlink" title="脚本指令"></a>脚本指令</h4><ul>
<li><p><strong>设置变量指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>设置变量指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>set</td>
</tr>
<tr>
<td>作用域</td>
<td>server, location, if</td>
</tr>
<tr>
<td>指令说明</td>
<td>set 指令，可以用来定义变量</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server&#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$test</span> <span class="string">&quot;check&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">    server &#123;</span><br><span class="line">    	listen 8080;</span><br><span class="line">        location /foo &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$a</span> hello;</span><br><span class="line">            rewrite ^ /bar;</span><br><span class="line">        &#125;</span><br><span class="line">        location /bar &#123;</span><br><span class="line">            如果这个请求来自<span class="string">&quot;/foo&quot;</span>,<span class="variable">$a</span>的值是<span class="string">&quot;hello&quot;</span>。如果直接访问<span class="string">&quot;/bar&quot;</span>，<span class="variable">$a</span>的值为空</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;a = [<span class="variable">$a</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>用 set 指令创建变量后，变量名是 Nginx 配置全局域可用的，但变量值只在有该变量赋值操作的 HTTP 处理流程中可用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location /foo &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$a</span> hello;</span><br><span class="line">            rewrite ^ /bar;</span><br><span class="line">        &#125;</span><br><span class="line">        location /bar &#123;</span><br><span class="line">            如果这个请求来自<span class="string">&quot;/foo&quot;</span>,<span class="variable">$a</span>的值是<span class="string">&quot;hello&quot;</span>。如果直接访问<span class="string">&quot;/bar&quot;</span>，<span class="variable">$a</span>的值为空</span><br><span class="line">            <span class="keyword">if</span> ( <span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span> )&#123;</span><br><span class="line">            	rewrite ^ /newbar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>当 set 指令后只有变量名时，系统会自动创建该变量，变量值为空。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server&#123;</span><br><span class="line">    	<span class="built_in">set</span> <span class="variable">$test</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">#变量插值如下:</span></span><br><span class="line">http &#123;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$test</span> <span class="string">&quot;check &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&quot;<span class="variable">$&#123;test&#125;</span>nginx&quot;</span> = <span class="string">&quot;nginx&quot;</span> )&#123; </span><br><span class="line">            <span class="comment">#$&#123;test&#125;nginx的值为&quot;check nginx&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>条件判断指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>条件判断指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>if</td>
</tr>
<tr>
<td>作用域</td>
<td>server, location</td>
</tr>
<tr>
<td>指令说明</td>
<td>条件判断指</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_cookie</span> ~* <span class="string">&quot;id=([^;]+)(?:;|$)&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$id</span> <span class="variable">$1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>当判断条件为一个变量时，变量值为空或以 0 开头的字符串都被判断为 false。</p>
</li>
<li><p>变量内容字符串比较操作运算符为”&#x3D;”或”!&#x3D;”。</p>
</li>
<li><p>进行正则表达式比较时，有以下 4 个操作运算符:</p>
<ul>
<li><p>“~”:区分大小写匹配；</p>
</li>
<li><p>“~*”:不区分大小写匹配；</p>
</li>
<li><p>“!~”:区分大小写不匹配；</p>
</li>
<li><p>“!~*”:不区分大小写不匹配。</p>
</li>
</ul>
</li>
<li><p>进行文件或目录比较时，有以下 4 个操作运算符:</p>
<ul>
<li><p>“-f”:判断文件是否存在，可在运算符前加”!”表示反向判断。</p>
</li>
<li><p>“-d”:判断目录是否存在，可在运算符前加”!”表示反向判断。</p>
</li>
<li><p>“-e”:判断文件、目录或链接符号是否存在，可在运算符前加”!”表示反向判断。</p>
</li>
<li><p>“-x”:判断文件是否为可执行文件，可在运算符前加”!”表示反向判断。</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>终止指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>终止指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>break</td>
</tr>
<tr>
<td>作用域</td>
<td>server, location, if</td>
</tr>
<tr>
<td>指令说明</td>
<td>终止后续指令的执行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$slow</span>) &#123;</span><br><span class="line">            limit_rate 10k;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>跳转指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>return</td>
</tr>
<tr>
<td>作用域</td>
<td>server, location, if</td>
</tr>
<tr>
<td>指令说明</td>
<td>向客户端返回响应状态码或执行跳转</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span> = POST) &#123;</span><br><span class="line">        	<span class="built_in">return</span> 405;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>return 的指令值有以下 4 种方式。</p>
<ul>
<li><p>return code:向客户端返回指定 code 的状态码，当返回非标准的状态码 444 时，Nginx 直接关闭连接，不发送响应头信息。</p>
</li>
<li><p>return code text:向客户端发送带有指定 code 状态码和 text 内容的响应信息。因要在客户端显示 text 内容，所以 code 不能是 30×。</p>
</li>
<li><p>return code URL:这里的 URL 可以是内部跳转或变量 $uri，也可以是有完整 scheme 标识的 URL，将直接返回给客户端执行跳转，code 只能是 30×。</p>
</li>
<li><p>return URL:此时默认 code 为 302，URL 必须是有完整 scheme 标识的 URL。</p>
</li>
</ul>
</li>
<li><p>return 也可以用来调试输出 Nginx 的变量。</p>
</li>
</ol>
</li>
</ul>
<hr>
<h3 id="root指令根目录配置"><a href="#root指令根目录配置" class="headerlink" title="root指令根目录配置"></a>root指令根目录配置</h3><p>用户请求的最终结果是要返回数据，当响应文件在 Nginx 服务器本地时，需要进行本地文件位置、读或写、返回执行结果的操作。</p>
<p>Nginx 中的 root 指令可以设定请求 URL 的本地文件根目录，如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">根目录指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">root</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http, server, location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">on</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定请求 URL 的本地文件根目录</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /flv/ &#123;</span><br><span class="line">	root /data/web;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>当 root 指令在 location 指令域时，root 设置的是 location 匹配访问路径的上一层目录，样例中被请求文件的实际本地路径为 &#x2F;data&#x2F;web&#x2F;flv&#x2F;。</p>
<p>location 中的路径是否带”&#x2F;“，对本地路径的访问无任何影响。</p>
<hr>
<h3 id="alias-访问路径别名指令"><a href="#alias-访问路径别名指令" class="headerlink" title="alias 访问路径别名指令"></a>alias 访问路径别名指令</h3><p>Nginx 中想要配置虚拟目录可以使用 alias 指令，该指令的介绍如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">名 称</th>
<th align="left">访问路径别名指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">alias</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">默认情况下，本地文件的路径是 root 指令设定根目录的相对路径，通过 alias 指令可以将匹配的访问路径重新指定为新定义的文件路径。</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name www.nginxtest.org;</span><br><span class="line">    root /opt/nginx-web/www;</span><br><span class="line">    location /flv/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /opt/nginx-web/flv/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /js &#123;</span><br><span class="line">	<span class="built_in">alias</span> /opt/nginx-web/js;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /img &#123;</span><br><span class="line">	<span class="built_in">alias</span> /opt/nginx-web/img/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:8080/flv/</span><br><span class="line"></span><br><span class="line">curl -L http://127.0.0.1:8080/js</span><br><span class="line"></span><br><span class="line">curl http://127.0.0.1:8080/js/</span><br><span class="line"></span><br><span class="line">curl -L http://127.0.0.1:8080/img</span><br><span class="line"></span><br><span class="line">curl http://127.0.0.1:8080/img/ </span><br></pre></td></tr></table></figure>

<p>alias 指定的目录是 location 路径的实际目录，其所在 location 的 rewrite 指令不能使用 break 参数。</p>
<hr>
<h3 id="try-files-文件判断指令"><a href="#try-files-文件判断指令" class="headerlink" title="try_files 文件判断指令"></a>try_files 文件判断指令</h3><p>可以按顺序检查文件是否存在，并返回第一个找到的文件，如果未找到任何文件，则会调用最后一个参数进行内部重定向，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">文件判断指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">try_files</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">用于顺序检查指定文件是否存在，如果不存在，则按照最后一个指定 URI 做内部跳转</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">    <span class="variable">$uri</span>存在则执行代理的上游服务器操作，否则跳转到default.gif的location</span><br><span class="line">    try_files <span class="variable">$uri</span> /images/default.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /images/default.gif &#123;</span><br><span class="line">	expires 30s;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转的目标也可以是一个location区域，脚本如下:</span></span><br><span class="line">http&#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">    	try_files /system/maintenance.html <span class="variable">$uri</span> <span class="variable">$uri</span>/index.html <span class="variable">$uri</span>.html @mongrel;</span><br><span class="line">    &#125;</span><br><span class="line">    location @mongrel &#123;</span><br><span class="line">        proxy_pass http://mongrel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="sendfile-零复制指令"><a href="#sendfile-零复制指令" class="headerlink" title="sendfile 零复制指令"></a>sendfile 零复制指令</h3><p>sendfile 配置项用来在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为<strong>零拷贝</strong>，如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">零复制指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">sendfile</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">指令值选项</td>
<td align="left">on 或 off</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">启用零复制（sendfile）。零复制（也称零拷贝）是读取本地文件后向网络接口发送文件内容的文件传输机制</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;	</span><br><span class="line">	sendfile on;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>默认配置下，Nginx 读取本地文件后，在进行网络传输时会先将硬盘文件从硬盘中读取到 Nginx 的文件缓冲区中。<br><strong>操作流程为：硬盘 → 内核文件缓冲区 → 应用缓冲区。</strong></p>
<p>然后将 Nginx 文件缓冲区的数据写入网络接口。<br><strong>操作流程：应用缓冲区 → 内核网络缓冲区 → 网络接口。</strong></p>
<p>为了提高文件的传输效率，内核提供了零复制技术，该技术支持文件在内核缓冲区内直接交换打开的文件句柄，无须重复复制文件内容到缓冲区。</p>
<p><strong>操作流程变为：硬盘 → 内核文件缓冲区 → 内核网络缓冲区 → 网络接口。</strong></p>
<p>零复制技术减少了文件的读写次数，提升了本地文件的网络传输速度。内核缓冲区的默认大小为 4096B。</p>
<hr>
<h3 id="日志记录配置指令"><a href="#日志记录配置指令" class="headerlink" title="日志记录配置指令"></a>日志记录配置指令</h3><ul>
<li><p><strong>不存在文件日志指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>不存在文件日志指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>log_not_found</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>用于设定如果文件不存在错误是否写入日志</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	log_not_found on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子请求访问日志指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>子请求访问日志指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>log_subrequest</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>用于设定子请求的访问记录是否写入日志</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	log_subrequest on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="镜像模块"><a href="#镜像模块" class="headerlink" title="镜像模块"></a>镜像模块</h3><p><strong>ngx_http_mirror_module</strong></p>
<p>Nginx 中镜像模块的功能是将用户的访问请求镜像<strong>复制到指定的 URI</strong>，通过 location 的 URI 匹配将流量发送到指定的服务器。</p>
<p>用户请求的实际请求响应通过 Nginx 返回客户端，镜像服务器的请求响应则会被 Nginx 服务器丢弃。</p>
<p>镜像请求与实际请求是异步处理的，对实际请求无影响。</p>
<h3 id="内置配置指令"><a href="#内置配置指令" class="headerlink" title="内置配置指令"></a>内置配置指令</h3><ul>
<li><p><strong>访问镜像指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>访问镜像指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>mirror</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令说明</td>
<td>将用户的访问请求镜像到指定的 URI，同级支持多个 URI</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /opt/nginx-web/www;</span><br><span class="line">    location / &#123;</span><br><span class="line">        mirror /benchmark;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /benchmark &#123;</span><br><span class="line">    	internal;</span><br><span class="line">    	proxy_pass http://192.168.2.145<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>镜像请求体指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>镜像请求体指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>mirror_request_body</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>将用户的访问请求体同步镜像到指定的 URI，当启用该指令时，创建镜像子请求前会优先读取并缓存客户端的请求体内容，同时 proxy_request_buffering、fastcgi_request_buffering、scgi_request_buffering 和 uwsgi_request_buffering 等指令的不缓存设置将被关闭</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /opt/nginx-web/www;</span><br><span class="line">    mirror_request_body off;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">        mirror /accesslog;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /accesslog &#123;</span><br><span class="line">        internal;</span><br><span class="line">        proxy_pass http://192.168.2.145/accesslog/<span class="variable">$&#123;server_name&#125;</span>_$server_port<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>如果该指令值为 off 则不同步请求体。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /opt/nginx-web/www;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        mirror /benchmark; <span class="comment"># 镜像用户请求</span></span><br><span class="line">        mirror /benchmark; <span class="comment"># 镜像用户请求</span></span><br><span class="line">        mirror /benchmark; <span class="comment"># 镜像用户请求</span></span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /benchmark &#123;</span><br><span class="line">        internal;</span><br><span class="line">        proxy_pass http://192.168.2.145<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>访问镜像模块可以将用户请求同步镜像到指定的服务器，同时还可以对用户的流量进行放大，通常可以在镜像线上流量后进行压力测试或预生产环境验证。</p>
</li>
</ul>
<hr>
<h3 id="请求头控制模块"><a href="#请求头控制模块" class="headerlink" title="请求头控制模块"></a>请求头控制模块</h3><p><strong>referer</strong> 请求头控制模块可以通过设置请求头中的属性字段 Referer 的值<strong>控制访问的拒绝与允许。</strong></p>
<p>Referer 字段用来表示<strong>当前请求的跳转来源</strong>，由于该字段可能会涉及隐私权问题，部分浏览器允许用户不发送该属性字段，因此也会存在浏览器正常的请求头中无 Referer 字段的情况。</p>
<p>有些代理服务器或防火墙也会把 Referer 字段<strong>过滤掉</strong>。</p>
<p>虽然通过 Referer 字段进行来源控制<strong>并不十分可靠</strong>，但用在防盗链的场景中还是基本可以满足需求的。该模块的内置配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">作用域</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">referer_hash_max_size</td>
<td align="left">server, location</td>
<td align="left">2048</td>
<td align="left">referer 指令中，存储变量的哈希表的大小</td>
</tr>
<tr>
<td align="left">referer_hash_bucket_size</td>
<td align="left">server, location</td>
<td align="left">64</td>
<td align="left">referer 指令中，存储变量的哈希桶的大小</td>
</tr>
<tr>
<td align="left">valid_referers</td>
<td align="left">server, location</td>
<td align="left">–</td>
<td align="left">当用户的 HTTP 头的属性字段 Referer 的值符合指令值的检测时，设置变量 $invalid_referer 为空</td>
</tr>
</tbody></table>
<p>referer 指令值参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">none</td>
<td align="left">Referer 的值为空</td>
</tr>
<tr>
<td align="left">blocked</td>
<td align="left">代理服务器或防火墙过滤后的 Referer 值，这些值都不以 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 开头</td>
</tr>
<tr>
<td align="left">server_names</td>
<td align="left">Referer 的值中包含一个服务器名</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name nginxtest.org;</span><br><span class="line">    root /opt/nginx-web/www;</span><br><span class="line">    valid_referers none blocked *.nginxtest.org;</span><br><span class="line"></span><br><span class="line"><span class="comment">#当Referer为空或内容不包含&quot;http://&quot;或以&quot;https://&quot;开头的主机名为&quot;*.nginxtest.org&quot;时允许访问</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">    	<span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>指令值为字符串时，既可以是包含前缀或后缀的主机名，也可以是包含主机名的 URI。</p>
<p>指令值为正则表达式时，必须以<code>~</code>开头，Nginx 将从”http:&#x2F;&#x2F;“或”https:&#x2F;&#x2F;“之后的字符串开始匹配。</p>
<p>默认变量 $invalid_referer 的值为 1，当 Referer 的值与指令值的内容匹配时，$invalid_referer 的值为空。</p>
<hr>
<h3 id="IP访问控制模块"><a href="#IP访问控制模块" class="headerlink" title="IP访问控制模块"></a>IP访问控制模块</h3><p>Nginx 中IP访问控制模块名称为 <strong>ngx_http_access_module</strong>，该模块可以对<strong>客户端的源 IP 地址</strong>进行<strong>允许或拒绝</strong>访问控制。该模块的内置配置指令如下面表格中所示。</p>
<ul>
<li><p><strong>allow 允许访问指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>允许访问指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>allow</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location、limit_except</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>允许指定源 IP 的客户端请求访问</td>
</tr>
</tbody></table>
</li>
<li><p><strong>deny 拒绝访问指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>拒绝访问指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>deny</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location、limit_except</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>拒绝指定源 IP 的客户端请求访问</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny  192.168.1.1;          <span class="comment"># 禁止192.168.1.1</span></span><br><span class="line">    allow 192.168.0.0/24;       <span class="comment"># 允许192.168.0.0/24的IP访问</span></span><br><span class="line">    allow 10.1.1.0/16;          <span class="comment"># 允许10.1.1.0/16的IP访问</span></span><br><span class="line">    allow 2001:0db8::/32;</span><br><span class="line">    deny  all;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>Nginx 会按照自上而下的顺序进行匹配。</p>
<hr>
<h3 id="用户cookie模块"><a href="#用户cookie模块" class="headerlink" title="用户cookie模块"></a>用户cookie模块</h3><p>用户 cookie 模块（<strong>ngx_http_userid_module</strong>）的作用是为客户端设置 cookie 以标识不同的访问用户。</p>
<p>可以通过内部变量 <strong>$uid_got</strong> 和 <strong>$uid_set</strong> 记录已接收和设置的 cookie。</p>
<ul>
<li><p><strong>用户cookie指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on、off、v1 或 log</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置关闭或启用用户 cookie 及启用的方式</td>
</tr>
</tbody></table>
<ul>
<li>当指令值为 off 时，关闭用户 cookie 接收和记录功能。</li>
<li>当指令值为 on 时，启用用户 cookie 接收和记录功能，默认为 v2 版本设置 cookie。设置 cookie 的响应头标识为 Set-Cookie2。</li>
<li>当指令值为 v1 时，使用 v1 版本设置 cookie，设置 cookie 的响应头标识为 Set-Cookie。</li>
<li>当指令值为 log 时，不设置用户 cookie，但对接收到的 cookie 进行记录。</li>
</ul>
</li>
<li><p><strong>用户 cookie 域指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 域指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_domain</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>none</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置用户 cookie 中的域名，none 表示禁用 cookie 的域设置</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用户 cookie 过期指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 过期指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_expires</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>time 或 max 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置用户 cookie 的过期时间，time 表示客户端保存 cookie 的时间，max 表示 cookie 的过期时间，默认为会话结束即过期</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用户 cookie 标识指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 标识指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_mark</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>letter 或 digit 或 &#x3D; 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置用户 cookie 的标识机制并设置用作标记的字符。该标识机制用于在保存客户标识符的同时添加或修改 userid_p3p 及 cookie 的过期时间</td>
</tr>
</tbody></table>
<p>用作标记的指令值可以是<strong>任意英文字母（区分大小写）、数字或”&#x3D;”</strong>。</p>
<p>userid_mark 设置完成后，将与用户 cookie 中传送的 Base64 格式的标识的第一个字符进行比较，如果不匹配，则重新发送用户标识、userid_p3p 及 cookie 的过期时间。</p>
</li>
<li><p><strong>用户 cookie 名称指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 名称指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_name</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>uid</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 cookie 名称</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用户 p3p 指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 p3p 指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_p3p</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>none</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置是否将 p3p 头属性字段同 cookie 一同发送</td>
</tr>
</tbody></table>
<p>P3P 是 W3C 推荐的隐私保护标准，P3P 头属性字段通常用于解决与支持 P3P 协议的浏览器的跨域访问问题。</p>
</li>
<li><p><strong>用户 cookie 路径指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 路径指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_path</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 cookie 路径</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用户 cookie 源服务器指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用户 cookie 源服务器指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>userid_service</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 cookie 的发布服务器。当 cookie 标识符由多个服务器发出时，为确保用户标识的唯一性，则应为每个服务器分配编号，cookie 版本 1 时默认为 0，cookie 版本 2 时默认为服务器 IP 地址的最后 4 个八位字节组成的数字</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8083;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    auth_request /auth;</span><br><span class="line">    userid         on;</span><br><span class="line">    userid_name    uid;</span><br><span class="line">    userid_domain  example.com;</span><br><span class="line">    userid_path    /;</span><br><span class="line">    userid_expires 1d;</span><br><span class="line">    userid_p3p     <span class="string">&#x27;policyref=&quot;/w3c/p3p.xml&quot;, CP=&quot;CUR ADM OUR NOR STA NID&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        add_header    Set-Cookie <span class="string">&quot;username=<span class="variable">$remote_user</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /auth &#123;</span><br><span class="line">        proxy_pass_request_body off;</span><br><span class="line">        proxy_set_header Content-Length <span class="string">&quot;&quot;</span>;</span><br><span class="line">        proxy_set_header X-Original-URI <span class="variable">$request_uri</span></span><br><span class="line">        proxy_pass http://192.168.2.145:8080/HttpBasicAuth.php;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="并发连接数限制模块"><a href="#并发连接数限制模块" class="headerlink" title="并发连接数限制模块"></a>并发连接数限制模块</h3><p>Nginx 中的并发连接数限制模块（<strong>ngx_http_limit_conn_module</strong>）能够对访问连接中含有指定变量且变量值相同的连接进行计数，指定的变量可以是客户端 IP 地址或请求的主机名等。</p>
<p>当计数值达到 limit_conn 指令设定的值时，将会对超出并发连接数的连接请求返回指定的响应状态码（默认状态码为 503）</p>
<p>该模块只会对请求头已经完全读取完毕的请求进行计数统计。</p>
<p>由于 Nginx 采用的是多进程的架构，该模块通过共享内存存储计数状态以实现多个进程间的计数状态共享。该模块的内置配置指令如下面表格中所示。</p>
<ul>
<li><p><strong>计数存储区指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>计数存储区指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_conn_zone</td>
</tr>
<tr>
<td>作用域</td>
<td>http</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设定用于存储指定变量计数的共享内存区域</td>
</tr>
</tbody></table>
</li>
<li><p><strong>连接数设置指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>连接数设置指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_conn</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置指定变量的最大并发连接数</td>
</tr>
</tbody></table>
</li>
<li><p><strong>连接数日志级别指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>连接数日志级别指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_conn_log_level</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>error</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>info、notice、warn、error</td>
</tr>
<tr>
<td>指令说明</td>
<td>当指定变量的并发连接数达到最大值时，输出日志的级别</td>
</tr>
</tbody></table>
</li>
<li><p><strong>连接数状态指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>连接数状态指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_conn_status</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>503</td>
</tr>
<tr>
<td>指令说明</td>
<td>当指定变量的并发连接数达到最大值时，请求返回的状态码</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=addr:10m;  <span class="comment"># 对用户IP进行并发计数，将计数内存区命名为addr，设置计数内存区大小为10MB</span></span><br><span class="line">server &#123;</span><br><span class="line">    location /web1/ &#123;</span><br><span class="line">    limit_conn addr 1;                                                      <span class="comment"># 限制用户的并发连接数为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>limit_conn_zone 的格式为 limit_conn_zone key zone&#x3D;name:size。</p>
</li>
<li><p>limit_conn_zone 的 key 可以是文本、变量或文本与变量的组合。</p>
</li>
<li><p>$binary_remote_addr 为 IPv4 时占用 4B，为 IPv6 时占用 16B。</p>
</li>
<li><p>limit_conn_zone 中 1MB 的内存空间可以存储 32 000 个 32B 或 16 000 个 64B 的变量计数状态。</p>
</li>
<li><p>变量计数状态在 32 位系统平台占用 32B 或 64B，在 64 位系统平台占用 64B。</p>
</li>
</ul>
<p>并发连接数同样支持多个变量的同时统计，配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=perip:10m;</span><br><span class="line">limit_conn_zone <span class="variable">$server_name</span> zone=perserver:10m;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    limit_conn perip 10;</span><br><span class="line">    limit_conn perserver 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="首页处理模块"><a href="#首页处理模块" class="headerlink" title="首页处理模块"></a>首页处理模块</h3><p>HTTP 请求经过一系列的请求流程处理后，最终将读取数据并把数据内容返回给用户。</p>
<p>当用户请求没有明确指定请求的文件名称时，Nginx 会根据设定返回默认数据。</p>
<p>实现这一功能包含 <strong>ngx_http_index_module</strong>、<strong>ngx_http_random_index_module</strong>、<strong>ngx_http_autoindex_module</strong> 这 3 个模块。</p>
<ul>
<li><p><strong>首页指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>首页指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>index</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>index index.html</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 HTTP 服务器的默认首页</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	index index.<span class="variable">$geo</span>.html index.html;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 指令值为多个文件时，会按照从左到右的顺序依次查找，找到对应文件后将结束查找。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>随机首页指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>随机首页指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>random_index</td>
</tr>
<tr>
<td>作用域</td>
<td>location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>随机读取文件目录下的文件内容为首页内容</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root /opt/nginx-web/html;</span><br><span class="line">location / &#123;</span><br><span class="line">	random_index on;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 该指令的执行优先级高于 index 指令，文件目录中的隐藏文件将被忽略。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动首页指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>自动首页指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>autoindex</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>自动创建目录文件列表为目录首页</td>
</tr>
</tbody></table>
</li>
<li><p><strong>自动首页格式指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>自动首页格式指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>autoindex_format</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>html</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>html 或 xml 或 json 或 jsonp</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 HTTP 服务器的自动首页文件格式</td>
</tr>
</tbody></table>
</li>
<li><p><strong>自动首页文件大小指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>自动首页文件大小指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>autoindex_exact_size</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>on</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>设置 HTTP 服务器的自动首页显示文件大小。默认文件大小单位为 Byte，当指令值为 off 时，将根据文件大小自动换算为 KB 或者 MB 或者 GB 的单位大小</td>
</tr>
</tbody></table>
</li>
<li><p><strong>自动首页时间指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>自动首页时间指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>autoindex_localtime</td>
</tr>
<tr>
<td>作用域</td>
<td>http、server、location</td>
</tr>
<tr>
<td>默认值</td>
<td>off</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>on 或 off</td>
</tr>
<tr>
<td>指令说明</td>
<td>按照服务器时间显示文件时间。默认显示的文件时间为 GMT 时间。当指令值为 on 时，显示的文件时间为服务器时间</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_format html;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="请求频率限制模块"><a href="#请求频率限制模块" class="headerlink" title="请求频率限制模块"></a>请求频率限制模块</h3><p>Nginx 的请求频率限制模块（<strong>ngx_http_limit_req_module</strong>）会对指定变量的请求次数进行计数。</p>
<p>当该变量在单位时间内的请求次数超过设定的数值时，后续请求会被延时处理，当被延时处理的请求数超过指定的队列数时，将返回指定的状态码（默认状态码为 503）。</p>
<p>通常该模块被用于限定同一 IP 客户端单位时间内请求的次数。</p>
<p>该模块通过共享内存存储计数状态以实现多个工作进程间的同一变量计数状态的共享。</p>
<ul>
<li><p><strong>计数存储区指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>计数存储区指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_req_zone</td>
</tr>
<tr>
<td>作用域</td>
<td>http</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>设定用于存储指定变量请求计数的共享内存区域</td>
</tr>
</tbody></table>
</li>
<li><p><strong>请求限制设置指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>请求限制设置指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_req</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>–</td>
</tr>
<tr>
<td>指令说明</td>
<td>启用请求限制并进行请求限制的相关配置</td>
</tr>
</tbody></table>
</li>
<li><p><strong>请求限制日志级别指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>请求限制日志级别指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_req_log_level</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>error</td>
</tr>
<tr>
<td>指令值可选项</td>
<td>info, notice, warn, error</td>
</tr>
<tr>
<td>指令说明</td>
<td>当指定变量的并发连接数达到最大值时，输出日志的级别</td>
</tr>
</tbody></table>
</li>
<li><p><strong>请求限制状态指令</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>请求限制状态指令</th>
</tr>
</thead>
<tbody><tr>
<td>指令</td>
<td>limit_req_status</td>
</tr>
<tr>
<td>作用域</td>
<td>http, server, location</td>
</tr>
<tr>
<td>默认值</td>
<td>503</td>
</tr>
<tr>
<td>指令说明</td>
<td>当指定变量的并发连接数达到最大值时，请求返回的状态码</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    limit_req_zone <span class="variable">$server_name</span> zone=addr:10m rate=1r/s;</span><br><span class="line"><span class="comment"># 限制访问当前站点的请求数，对站点请求计数，将计数内存区命名为addr，设置计数内存区大小为10MB，请求限制为1秒1次</span></span><br><span class="line">    server &#123;</span><br><span class="line">        location /search/ &#123;</span><br><span class="line">            limit_req zone=one;</span><br><span class="line"><span class="comment"># 同一秒只接收一个请求，其余的立即返回状态码503，直到第2秒才接收新的请求</span></span><br><span class="line">            limit_req zone=one burst=5;</span><br><span class="line"><span class="comment"># 同一秒接收6个请求，其余的返回状态码503，只处理一个请求，其余5个请求进入队列，每秒向Nginx释放一个请求进行处理，同时允许接收一个新的请求进入队列</span></span><br><span class="line">            limit_req zone=one burst=5 nodelay;</span><br><span class="line"><span class="comment"># 同一秒接收6个请求，其余的返回状态码503，同时处理6个请求，6秒后再接收新的请求</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ul>
<li>limit_req_zone 的 rate 参数的作用是对请求频率进行限制，有 r&#x2F;s（每秒的请求次数）和 r&#x2F;m（每分钟的请求次数）两个频率单位，也可根据每秒的次数换算成毫秒单位的次数。1MB 内存大小大约可以存储 16000 个 IP 地址的状态信息。</li>
<li>imit_req 的 burst 参数相当于一个缓冲容器，该容器内可容纳 burst 所设置的数量的请求，没有 nodelay 参数时，将匀速向 Nginx 释放需要处理的请求。未进入 burst 容器队列的请求将被返回状态码 503 或由 limit_req_status 指令指定的状态码。</li>
<li>limit_req 的 nodelay 参数是指对请求队列中的请求不进行延时等待，而是立即处理。</li>
</ul>
<p>请求频率同样支持多个变量的同时计数及叠加，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=perip:10m rate=1r/s;</span><br><span class="line">limit_req_zone <span class="variable">$server_name</span> zone=perserver:10m rate=10r/s;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    limit_req zone=perip burst=5 nodelay;</span><br><span class="line">    limit_req zone=perserver burst=10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="页面缓存时间配置"><a href="#页面缓存时间配置" class="headerlink" title="页面缓存时间配置"></a>页面缓存时间配置</h3><p>Nginx 缓存的设置可以<strong>提高网站性能</strong>，对于网站的图片，尤其是新闻网站，图片一旦发布，改动的可能是非常小的，为了减小对服务器请求的压力，提高用户浏览速度，我们可以通过设置 Nginx 中的 <strong>expires 指令</strong>，让用户访问一次后，将图片缓存在用户的浏览器中。</p>
<p>需要注意的是，这种缓存方式只能在用户<strong>不对浏览器强制刷新</strong>的情况下生效，如果用户通过 url 来进行访问，是可以访问到缓存的。</p>
<p><strong>expires 指令</strong>的介绍如下表所示:</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">缓存时间指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">expires</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、server、location、if in location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">指令值可选项</td>
<td align="left">时间或 epoch 或 max 或 off</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">当响应状态码为 200、201、204、206、301、302、303、304、307 或 308 时，对响应头中的属性字段”Expires”和”Cache-Control”进行添加或编辑操作</td>
</tr>
</tbody></table>
<p>当指令值为时间时，既可以是正值也可以是负值。</p>
<p>Expires 的值为当前时间与指令值的时间之和。</p>
<ul>
<li>当指令值的时间为正或 0 时，Cache-Control 的值为指令值的时间。</li>
<li>当指令值的时间为负时，Cache-Control 的值为 no-cache。</li>
<li>当指令值为时间时，可用前缀<code>@</code>指定一个绝对时间，表示在当天的指定时间失效。</li>
<li>当指令值为 epoch 时，Expires 的值为 Thu,01 Jan 1970 00:00:01 GMT，Cache-Control 的值为 no-cache。</li>
<li>当指令值为 max 时，Expires 的值为 Thu,31 Dec 2037 23:55:55 GMT，Cache-Control 的值为 10 年。</li>
<li>当指令值为 off 时，不对响应头中的属性字段 Expires 和 Cache-Control 进行任何操作。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">map <span class="variable">$content_type</span> <span class="variable">$expires</span> &#123;     <span class="comment"># 根据$content_type的值，对变量$expires进行赋值</span></span><br><span class="line">    default         off;         <span class="comment"># 默认不修改Expires和Cache-Control的值</span></span><br><span class="line">    application/pdf 42d;         <span class="comment"># application/pdf类型为42天</span></span><br><span class="line">    ~image/         max;         <span class="comment"># 图片类型为max</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    expires    24h;              <span class="comment"># 设置Expires的值为当前时间之后的24小时，</span></span><br><span class="line">    Cache-Control的值为24小时</span><br><span class="line">    expires    modified +24h;    <span class="comment"># 编辑Expires的值增加24小时，Cache-Control的值增加24小时</span></span><br><span class="line">    expires    @15h;             <span class="comment"># 设置Expires的值为当前日的15点，Cache-Control的值为当前时间到当前日15点的时间差</span></span><br><span class="line">    expires    <span class="variable">$expires</span>;         <span class="comment"># 根据变量$expires的内容设置缓存时间</span></span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">    add_trailer  X-Always <span class="variable">$host</span> always;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="开启压缩及相关配置详解"><a href="#开启压缩及相关配置详解" class="headerlink" title="开启压缩及相关配置详解"></a>开启压缩及相关配置详解</h3><p><strong>gzip</strong></p>
<p>为提高用户<strong>获取响应数据的速度</strong>，Nginx 服务器可以将<strong>响应数据进行 gzip 压缩</strong>，在减小响应数据的大小后再发送给用户端浏览器，相对于使用户浏览 Web 页面，上述方式显示速度更快。</p>
<p>要想启用响应数据 gzip 压缩（<strong>ngx_http_gzip_module</strong> 模块）功能，需要用户浏览器也支持 gzip 解压功能，目前大多数浏览器都支持 gzip 压缩数据的显示。</p>
<p>Nginx 服务器接收客户端浏览器发送的请求后，通过请求头中的属性字段 <strong>Accept-Encoding</strong> 判断浏览器是否支持 gzip 压缩，对支持 gzip 压缩的浏览器将发送 gzip 压缩的响应数据。</p>
<p><img src="/blog2025.github.io/image-20250506124622632.png" alt="image-20250506124622632"></p>
<p>ngx_http_gzip_module 模块的内置配置参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">作用域</th>
<th align="left">默认值</th>
<th align="left">指令值可选项</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gzip</td>
<td align="left">http、server、location、if in location</td>
<td align="left">off</td>
<td align="left">on 或 off</td>
<td align="left">启用 gzip 功能</td>
</tr>
<tr>
<td align="left">gzip_buffers</td>
<td align="left">http、server、location</td>
<td align="left">32 4k 或 16 8k</td>
<td align="left">–</td>
<td align="left">设置 gzip 压缩缓冲区</td>
</tr>
<tr>
<td align="left">gzip_comp_level</td>
<td align="left">http、server、location</td>
<td align="left">1</td>
<td align="left">–</td>
<td align="left">设置 gzip 压缩级别，取值范围为 1~9，该指令值越大，压缩程度越高</td>
</tr>
<tr>
<td align="left">gzip_disable</td>
<td align="left">http、server、location</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">当请求头中的属性字段 User-Agent 的内容与指令值正则匹配时关闭 gzip 压缩功能</td>
</tr>
<tr>
<td align="left">gzip_http_version</td>
<td align="left">http、server、location</td>
<td align="left">1.1</td>
<td align="left">1.0 或 1.1</td>
<td align="left">设置压缩请求的最早 HTTP 协议版本</td>
</tr>
<tr>
<td align="left">gzip_min_length</td>
<td align="left">http、server、location</td>
<td align="left">20</td>
<td align="left">–</td>
<td align="left">设置启用 gzip 压缩的响应数据的最小长度，判断依据为响应头中 Content-Length 的值。如果 Content-Length 不存在，则该指令无效；如果指令值为 0，则表示全部压缩</td>
</tr>
<tr>
<td align="left">gzip_proxied</td>
<td align="left">http、server、location</td>
<td align="left">off</td>
<td align="left">off 或 expired 或 no-cache 或 no-store 或 private 或 no_last_modified 或 no_etag 或 auth 或 any</td>
<td align="left">根据被代理服务器返回响应数据的响应头属性字段判断是否启用 gzip 压缩</td>
</tr>
<tr>
<td align="left">gzip_types</td>
<td align="left">http、server、location</td>
<td align="left">text&#x2F;html</td>
<td align="left">–</td>
<td align="left">设置可进行 gzip 压缩的响应数据的 MIME 类型，指令值为 * 时表示所有 MIME 类型</td>
</tr>
<tr>
<td align="left">gzip_vary</td>
<td align="left">http、server、location</td>
<td align="left">off</td>
<td align="left">on 或 off</td>
<td align="left">在响应头中添加 Vary:Accept-Encoding，返回给前端代理或 CDN 服务器，用于判岗是否向客户端发送 gzip 的缓存副本，避免代理或 CDN 服务器将 gzip 压缩后的缓存副本响应给不具备 gzip 解压能力的浏览器</td>
</tr>
</tbody></table>
<p> gzip_proxied 指令的指令值可选项说明如下:</p>
<ul>
<li>off:关闭该指令功能；</li>
<li>expired:若 HTTP 响应头中包含属性字段 Expires，则启用压缩；</li>
<li>no-cache:若 HTTP 响应头中包含属性字段 Cache-Control:no-cache，则启用压缩；</li>
<li>no-store:若 HTTP 响应头中包含属性字段 Cache-Control:no-store，则启用压缩；</li>
<li>private:若 HTTP 响应头中包含属性字段 Cache-Control:private，则启用压缩；</li>
<li>no_last_modified:若 HTTP 响应头中不包含属性字段 Last-Modified，则启用压缩；</li>
<li>no_etag:若 HTTP 响应头中不包含属性字段 ETag，则启用压缩；</li>
<li>auth:若 HTTP 响应头中包含属性字段 Authorization，则启用压缩；</li>
<li>any:对所有响应数据启用压缩。</li>
</ul>
<p>当客户端浏览器<strong>不支持 gzip</strong> 压缩时，可以使用 <strong>ngx_http_gunzip_module</strong> 模块将压缩的数据解压后发送给客户端。对支持 gzip 压缩的浏览器不做处理。</p>
<p>ngx_http_gunzip_module 模块的内置配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">作用域</th>
<th align="left">默认值</th>
<th align="left">指令值可选项</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gunzip</td>
<td align="left">http、server、location</td>
<td align="left">off</td>
<td align="left">on 或 off</td>
<td align="left">设置是否启用动态解压支持</td>
</tr>
<tr>
<td align="left">gunzip_buffers</td>
<td align="left">http、server、location</td>
<td align="left">32 4K</td>
<td align="left">–</td>
<td align="left">设置用于解压的缓冲区大小</td>
</tr>
</tbody></table>
<p>通常 gzip 压缩指令都是读取未压缩的文本，在进行动态压缩后把响应数据发送给客户端，<strong>ngx_http_gzip_static_module</strong> 模块可以使 Nginx 把 gzip 压缩过的以 <strong>.gz</strong> 为后缀的文件或已压缩的响应数据直接发送给客户端。</p>
<p><strong>ngx_http_gzip_static_module</strong> 模块的内置配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">静态压缩指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">gzip_static</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">指令值可选项</td>
<td align="left">on 或 off 或 always</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">启用压缩数据读取功能</td>
</tr>
</tbody></table>
<p>gzip_static 指令的指令值可选项说明如下:</p>
<ul>
<li>on:不检查客户端是否支持 gzip 压缩数据，始终发送 gzip 压缩数据；</li>
<li>always:不检查客户端是否支持 gzip 压缩数据，始终发送 gzip 压缩数据；</li>
<li>该指令的执行优先级高于 gzip 指令；</li>
<li>开启该指令后，默认优先查找以 .gz 为后缀的文件；</li>
<li>gzip_types 指令对 gzip_static 的设置无效。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip_static always;                  <span class="comment"># 始终发送静态的gzip压缩数据</span></span><br><span class="line">gunzip on;                           <span class="comment"># 若客户端浏览器不支持gzip压缩数据，则解压后发送</span></span><br><span class="line">gunzip_buffers 16 8k;                                         <span class="comment"># 解压缓冲区大小为128KB</span></span><br><span class="line">gzip_proxied expired no-cache no-store private auth;    <span class="comment"># 当被代理的服务器符合条件时，</span></span><br><span class="line">                                                        <span class="comment"># 对响应数据启用gzip压缩</span></span><br><span class="line"></span><br><span class="line">gzip on;                             <span class="comment"># 启用动态gzip压缩功能</span></span><br><span class="line">gzip_min_length  1k;                 <span class="comment"># 响应数据超过1KB时启用gzip压缩</span></span><br><span class="line">gzip_buffers     4 16k;              <span class="comment"># 动态压缩的缓冲区大小是64KB</span></span><br><span class="line">gzip_comp_level 3;                   <span class="comment"># 压缩级别为3</span></span><br><span class="line">gzip_types       text/plain application/x-javascript</span><br><span class="line">                text/css application/xml text/javascript</span><br><span class="line">                application/x-httpd-php image/jpeg</span><br><span class="line">                image/gif image/png; <span class="comment"># 对指定的MIME类型数据启用动态压缩</span></span><br><span class="line">gzip_vary on;                        <span class="comment"># 向前端代理或缓存服务器发送添加&quot;Vary: Accept-</span></span><br><span class="line">                                     <span class="comment"># Encoding&quot;的响应数据</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="静态资源服务器搭建"><a href="#静态资源服务器搭建" class="headerlink" title="静态资源服务器搭建"></a>静态资源服务器搭建</h3><p>配置样式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /opt/nginx-web/www;                <span class="comment"># 存放静态文件的文件目录</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /js &#123;</span><br><span class="line">        <span class="built_in">alias</span> /opt/nginx-web/static/js/;    <span class="comment"># 存放JavaScript文件的文件目录</span></span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个 server 指令域等同于一个虚拟服务器，每个 location 指令域等同于一个虚拟目录。</p>
<h3 id="文件下载服务器搭建"><a href="#文件下载服务器搭建" class="headerlink" title="文件下载服务器搭建"></a>文件下载服务器搭建</h3><p>配置样式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root    /opt/nginx-web/files;             <span class="comment"># 文件存放目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex on;                         <span class="comment"># 启用自动首页功能</span></span><br><span class="line">        autoindex_format html;                <span class="comment"># 首页格式为HTML</span></span><br><span class="line">        autoindex_exact_size off;             <span class="comment"># 文件大小自动换算</span></span><br><span class="line">        autoindex_localtime on;               <span class="comment"># 按照服务器时间显示文件时间</span></span><br><span class="line"></span><br><span class="line">        default_type application/octet-stream;# 将当前目录中所有文件的默认MIME类型设置为</span><br><span class="line">                                              <span class="comment"># application/octet-stream</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_filename</span> ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$)&#123;</span><br><span class="line">            <span class="comment"># 当文件格式为上述格式时，将头字段属性Content-Disposition的值设置为&quot;attachment&quot;</span></span><br><span class="line">            add_header Content-Disposition: <span class="string">&#x27;attachment;&#x27;</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        sendfile on;                          <span class="comment"># 开启零复制文件传输功能</span></span><br><span class="line">        sendfile_max_chunk 1m;                <span class="comment"># 每个sendfile调用的最大传输量为1MB</span></span><br><span class="line">        tcp_nopush on;                        <span class="comment"># 启用最小传输限制功能</span></span><br><span class="line"></span><br><span class="line">        aio on;                               <span class="comment"># 启用异步传输</span></span><br><span class="line">        directio 5m;                          <span class="comment"># 当文件大于5MB时以直接读取磁盘的方式读取文件</span></span><br><span class="line">        directio_alignment 4096;              <span class="comment"># 与磁盘的文件系统对齐</span></span><br><span class="line">        output_buffers 4 32k;                 <span class="comment"># 文件输出的缓冲区大小为128KB</span></span><br><span class="line"></span><br><span class="line">        limit_rate 1m;                        <span class="comment"># 限制下载速度为1MB</span></span><br><span class="line">        limit_rate_after 2m;                  <span class="comment"># 当客户端下载速度达到2MB时进入限速模式</span></span><br><span class="line">        max_ranges 4096;                      <span class="comment"># 客户端执行范围读取的最大值是4096B</span></span><br><span class="line">        send_timeout 20s;                     <span class="comment"># 客户端引发传输超时时间为20s</span></span><br><span class="line">        postpone_output 2048;                 <span class="comment"># 当缓冲区的数据达到2048B时再向客户端发送</span></span><br><span class="line">        chunked_transfer_encoding on;         <span class="comment"># 启用分块传输标识</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪动态SSI服务器"><a href="#伪动态SSI服务器" class="headerlink" title="伪动态SSI服务器"></a>伪动态SSI服务器</h3><p>Nginx 可以通过 SSI 命令将<strong>多个超文本文件</strong>组合成<strong>一个页面文件</strong>发送给<strong>客户端</strong>。</p>
<p>SSI（Server Side Include）是一种基于服务端的超文本文件处理技术。</p>
<p>SSI 仍是通过其他动态脚本语言获取动态数据的，所以此处将其归类为伪动态服务功能。</p>
<p>SSI 服务器可通过 SSI 命令实现诸多<strong>动态脚本语言的 HTML 模板功能</strong>，配合其他动态脚本服务的 API，<strong>完全可以实现前后端分离的 Web 应用</strong>。</p>
<p><strong>简单理解</strong>：</p>
<p><strong>Nginx的“伪动态SSI服务器”可以理解为：‌用静态文件实现简单动态效果的功能‌，就像给网页添加“自动拼图”能力一样。</strong></p>
<p><strong>简单来说</strong>：</p>
<ul>
<li>‌<strong>静态网页</strong>‌：普通HTML文件，内容固定不变（比如一个写死的“欢迎页面”）。</li>
<li>‌<strong>动态网页</strong>‌：内容由程序实时生成（比如购物车页面显示不同用户的信息）。</li>
</ul>
<p>而 ‌<strong>Nginx的SSI（伪动态）<strong>‌ 介于两者之间：<br>你仍然用静态HTML文件，但可以在文件中‌</strong>插入特殊指令</strong>‌，让服务器在发送网页前自动完成一些“小修改”，比如：</p>
<ol>
<li>‌<strong>插入公共模块</strong>‌：自动把页头、页脚拼接到每个页面。</li>
<li>‌<strong>显示动态信息</strong>‌：自动插入当前时间、文件修改日期等。</li>
<li>‌<strong>条件判断</strong>‌：根据设备类型（手机&#x2F;电脑）显示不同内容。</li>
</ol>
<p><strong>为什么叫“伪动态”？</strong></p>
<ul>
<li>‌<strong>真动态</strong>‌：每次访问都通过程序生成完整页面（比如PHP、Python）。</li>
<li>‌<strong>伪动态</strong>‌：页面主体还是静态文件，只是服务器在发送前按指令“修改了一下”（比如替换、插入内容），不需要复杂程序。</li>
</ul>
<p><strong>适合场景</strong>：</p>
<ul>
<li>静态网站中需要复用部分内容（比如导航栏、版权声明）。</li>
<li>希望减少维护重复代码，但不想用后端编程。</li>
</ul>
<h4 id="配置指令"><a href="#配置指令" class="headerlink" title="配置指令"></a>配置指令</h4><p>Nginx 是通过 ngx_http_ssi_module 模块实现 SSI 命令处理的，SSI 配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ssi</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用 SSI 命令功能</td>
</tr>
<tr>
<td align="left">ssi_last_modified</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">允许保留原始响应头中的属性字段 Last-Modified，默认配置下该字段会被移除</td>
</tr>
<tr>
<td align="left">ssi_min_file_chunk</td>
<td align="left">size</td>
<td align="left">1k</td>
<td align="left">设置存储在磁盘上的响应数据的最小值，超过该值的文件使用 sendfile 功能发送</td>
</tr>
<tr>
<td align="left">ssi_silent_errors</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">当指令值为 on 时，SSI 处理出现错误后不输出 errmsg 的内容</td>
</tr>
<tr>
<td align="left">ssi_types</td>
<td align="left">mime-type…</td>
<td align="left">text&#x2F;html</td>
<td align="left">设置 SSI 处理的 MIME 类型</td>
</tr>
<tr>
<td align="left">ssi_value_length</td>
<td align="left">length</td>
<td align="left">256</td>
<td align="left">SSI 中变量值的最大长度</td>
</tr>
</tbody></table>
<p>上述指令均可编写在 http、server、location 指令域中，ssi 指令还可编写在 if 指令域中。</p>
<h4 id="SSI-命令"><a href="#SSI-命令" class="headerlink" title="SSI 命令"></a>SSI 命令</h4><p>SSI 命令格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--# <span class="built_in">command</span> parameter1=value1 parameter2=value2 ... --&gt;</span><br></pre></td></tr></table></figure>

<p>Nginx 支持如下 SSI 命令。</p>
<ul>
<li><strong>block</strong></li>
</ul>
<p>通过 block 命令可以定义一个超文本内容，该内容可以被 include 命令参数 stub 引用。超文本内容中可以包含其他 SSI 命令。</p>
<ul>
<li><strong>include</strong></li>
</ul>
<p>通过 include 命令可以引入一个文件或请求响应的结果数据。参数有 file（引入一个文件）、virtual（引入一个内部请求响应数据）、stub（引入一个 block 内容为默认数据）、wait（是否等待 virtual 参数发起请求处理完毕再处理 SSI 命令）、set（将 virtual 参数的响应内容输出到指定的变量）。</p>
<p>SSI 文件配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--# block name=<span class="string">&quot;one&quot;</span> --&gt;&amp;nbsp;&lt;!--# endblock --&gt;   <span class="comment"># block one的内容为空</span></span><br><span class="line">&lt;!--# include file=<span class="string">&quot;footer.html&quot;</span> stub=<span class="string">&quot;one&quot;</span> --&gt;    </span><br><span class="line">	<span class="comment"># 引用文件footer.html的内容，若footer.html文件不存在或SSI命令出错，输出block one的内容</span></span><br><span class="line">&lt;!--# include virtual=<span class="string">&quot;/remote/body.php?argument=value&quot;</span> <span class="built_in">wait</span>=<span class="string">&quot;yes&quot;</span> stub=<span class="string">&quot;one&quot;</span> <span class="built_in">set</span>=<span class="string">&quot;body&quot;</span> --&gt;</span><br><span class="line">	<span class="comment"># 引用内部请求的响应数据，等待请求完毕再处理SSI指令，若出错则输出block one的内容，成功则把返回结果赋值给变量body</span></span><br></pre></td></tr></table></figure>

<p>Nginx中样例配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /remote/ &#123;</span><br><span class="line">  subrequest_output_buffer_size 128k;　<span class="comment"># 子请求的输出缓冲区大小是128KB</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>include 不支持”..&#x2F;“这样的相对路径；另外 include 参数 set 的响应数据大小通过指令 subrequest_output_buffer_size 设置。</p>
<ul>
<li><strong>config</strong></li>
</ul>
<p>通过 config 命令可以设置 SSI 处理过程中使用的参数 errmsg（SSI 处理出错时输出的字符串）和 timefmt（输出时间的格式，默认为”%A,%d-%b-%Y %H:%M:%S %Z”）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--# config errmsg=<span class="string">&quot;oh!出错了&quot;</span> timefmt=<span class="string">&quot;%A, %d-%b-%Y %H:%M:%S %Z&quot;</span> --&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>set</strong></li>
</ul>
<p>通过 set 命令设置变量。参数有 var（变量名）和 value（变量值）。</p>
<ul>
<li><strong>echo</strong></li>
</ul>
<p>通过 echo 命令输出变量的值。参数有 encoding（HTML 编码方式，默认为 entity）、default（变量不存在时定义的默认输出，默认为 none）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--# <span class="built_in">set</span> var=<span class="string">&quot;This_TEST&quot;</span> value=<span class="string">&quot;with a SSI test value&quot;</span> --&gt;</span><br><span class="line">&lt;!--# <span class="built_in">echo</span> var=<span class="string">&quot;This_TEST&quot;</span> --&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>if</strong></li>
</ul>
<p>通过 if 命令可进行条件控制，且 if 命令支持正则判断。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--# <span class="keyword">if</span> <span class="built_in">expr</span>=<span class="string">&quot;<span class="variable">$name</span> != /text/&quot;</span> --&gt;</span><br><span class="line">  &lt;!--# <span class="built_in">echo</span> var=<span class="string">&quot;name&quot;</span> --&gt;</span><br><span class="line">&lt;!--# endif --&gt;</span><br><span class="line">&lt;!--# <span class="keyword">if</span> <span class="built_in">expr</span>=<span class="string">&quot;<span class="variable">$name</span> = /(.+)@(?P&lt;domain&gt;.+)/&quot;</span> --&gt;</span><br><span class="line">  &lt;!--# <span class="built_in">echo</span> var=<span class="string">&quot;domain&quot;</span> --&gt;</span><br><span class="line">&lt;!--# <span class="keyword">else</span> --&gt;</span><br><span class="line">  &lt;!--# <span class="built_in">echo</span> var=<span class="string">&quot;1&quot;</span> --&gt;</span><br><span class="line">&lt;!--# endif --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="配置样例"><a href="#配置样例" class="headerlink" title="配置样例"></a>配置样例</h3><p>根据 Nginx SSI 模块提供的功能可以搭建一个类似 HTML 框架的前端模板网站。模板目录规划如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── _footer.html </span><br><span class="line">├── _header.html</span><br><span class="line">├── _head.html</span><br><span class="line">├── index.html</span><br><span class="line">├── _sidebar.html</span><br><span class="line">├── static</span><br><span class="line">│   └── main.css</span><br><span class="line">└── table.html</span><br></pre></td></tr></table></figure>

<p>文件 <strong>_footer.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--# config timefmt=&quot;%Y&quot; --&gt;</span><span class="symbol">&amp;copy;</span></span><br><span class="line">    <span class="comment">&lt;!--# echo var=&quot;date_local&quot; --&gt;</span> Nginx SSI sample - All Rights Reserved.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件 <strong>_header.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://nginx.org/nginx.png&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;nginx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>        			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;table.html&quot;</span>&gt;</span>表格测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件 <strong>_head.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/main.css?v=12&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件 <strong>index.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--# block name=&quot;one&quot; --&gt;</span><span class="comment">&lt;!--# endblock --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--# include file=&quot;_head.html&quot; stub=&quot;one&quot; --&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--# include file=&quot;_header.html&quot; stub=&quot;one&quot; --&gt;</span>   </span><br><span class="line">        <span class="comment">&lt;!--# include file=&quot;_sidebar.html&quot; stub=&quot;one&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--# include file=&quot;_footer.html&quot; stub=&quot;one&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件 <strong>_sidebar.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong></p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z3125643141.BeWm2lgY.gif" alt="img"></p>
<p>文件 <strong>table.html</strong> 内容如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--# block name=&quot;one&quot; --&gt;</span><span class="comment">&lt;!--# endblock --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--# include file=&quot;_head.html&quot; stub=&quot;one&quot; --&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--# include file=&quot;_header.html&quot; stub=&quot;one&quot; --&gt;</span>   </span><br><span class="line">        <span class="comment">&lt;!--# include file=&quot;_sidebar.html&quot; stub=&quot;one&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格示例<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>省会<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--# include file=&quot;_footer.html&quot; stub=&quot;one&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格页页面效果如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z3125G9523.CHVZkCT6.gif" alt="img"></p>
<p>Nginx 配置内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web/nginx-ssi;</span><br><span class="line">    sendfile on;</span><br><span class="line">    ssi on;                         <span class="comment"># 启用SSI命令解析支持</span></span><br><span class="line">    ssi_min_file_chunk 1k;          <span class="comment"># 存储在磁盘上的响应数据的最小值为1KB</span></span><br><span class="line">    ssi_value_length 1024;          <span class="comment"># SSI中变量值的最大长度为1024字节</span></span><br><span class="line">    ssi_silent_errors off;          <span class="comment"># 输出errmsg的内容</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="HTTPS服务器搭建"><a href="#HTTPS服务器搭建" class="headerlink" title="HTTPS服务器搭建"></a>HTTPS服务器搭建</h3><p>HTTPS 协议可验证用户客户端和服务器的身份，确保数据可以在正确的用户客户端和服务器间传输。</p>
<p>因为 HTTPS 协议的数据传输是加密的，所以在传输过程中可以有效防止数据被窃取和修改，从而保障网络信息的安全。</p>
<p>Nginx 的 HTTPS 协议服务是通过 ngx_http_ssl_module 模块实现的，在配置编译参数时需要添加 <strong>–with-http_ssl_module</strong> 参数启用该功能。</p>
<h4 id="配置指令-1"><a href="#配置指令-1" class="headerlink" title="配置指令"></a>配置指令</h4><p>Nginx HTTPS 配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ssl</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用 SSL 支持，建议使用 listen 的 ssl 参数开启</td>
</tr>
<tr>
<td align="left">ssl_protocols</td>
<td align="left">[SSLv2][SSLv3] [TLSvl][TLSv1.1] [TLSv1.2][TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">设置使用的 SSL 协议</td>
</tr>
<tr>
<td align="left">ssl_buffer_size</td>
<td align="left">size</td>
<td align="left">16k</td>
<td align="left">设置用于发送数据的缓存大小</td>
</tr>
<tr>
<td align="left">ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">PEM 格式的网站证书文件，可自建或由 CA 机构颁发</td>
</tr>
<tr>
<td align="left">ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">PEM 格式的网站证书私钥文件，可自建或由 CA 机构颁发</td>
</tr>
<tr>
<td align="left">ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">存放网站证书私钥密码的文件，一个密码一行，有多个密码时，Nginx 会依次尝试</td>
</tr>
<tr>
<td align="left">ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">HIGH: !aNULL: !MD5</td>
<td align="left">设置 HTTPS 建立连接时用于协商使用的加密算法组合，也称密码套件，指令值内容为 openssl 的密码套件名称，多个套件名称间用”:”分隔</td>
</tr>
<tr>
<td align="left">ssl_prefer_server_ciphers</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用在 SSLv3 和 TLSv1 协议的 HTTPS 连接时优先使用服务端设置的密码套件</td>
</tr>
<tr>
<td align="left">ssl_dhparam</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">DH 密钥交换的 Diffie-Hellman 参数文件</td>
</tr>
<tr>
<td align="left">ssl_ecdh_curve</td>
<td align="left">curve</td>
<td align="left">auto</td>
<td align="left">配置 SSL 加密时使用椭圆曲线DH密钥交换的曲线参数，多个参数间使用”:”分隔。ecdh 是 Elliptic-Curve 和 Diffie-Hellman 的缩写，指令值为 auto 时，配置的曲线参数是 prime256v1</td>
</tr>
<tr>
<td align="left">ssl_early_data</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用 TLS 1.3 0-RTT 支持</td>
</tr>
<tr>
<td align="left">ssl_session_cache</td>
<td align="left">off 或 none 或 [builtin[:size]] [shared:name:size]</td>
<td align="left">none</td>
<td align="left">HTTPS 会话缓存设置，指令值参数见后面的介绍</td>
</tr>
<tr>
<td align="left">ssl_session_tickets</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">是否启用会话凭证（Session Ticket）机制实现 HTTPS 会话缓存，当指令值为 off 时，使用会话编号（Session ID）机制</td>
</tr>
<tr>
<td align="left">ssl_session_ticket_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定会话凭证密钥文件，用于在多台 Nginx 间实现会话凭证共享，否则 Nginx 会随机生成一个会话凭证密钥</td>
</tr>
<tr>
<td align="left">ssl_session_timeout</td>
<td align="left">time</td>
<td align="left">5m</td>
<td align="left">设置客户端可用会话缓存的超时时间</td>
</tr>
<tr>
<td align="left">ssl_verify_client</td>
<td align="left">on 或 off 或 optional 或 optional_no_ca</td>
<td align="left">off</td>
<td align="left">设置是否启用客户端证书验证功能。当指令值为 on 时启用验证；当指令值为 optional 时，如果接收到客户端证书则启用验证；当指令值为 optional_no_ca 时，若接收到客户端证书则启用客户端证书验证，但不进行证书链校验。将验证结果存储在 $ssl_client_verity 变量中</td>
</tr>
<tr>
<td align="left">ssl_verify_depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置客户端证书链验证深度</td>
</tr>
<tr>
<td align="left">ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">用于验证客户端证书有效性的证书吊销列表文件</td>
</tr>
<tr>
<td align="left">ssl_client_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作在线证书协议（OCSP）响应的证书验证或客户端证书验证，该证书列表会发送给客户端</td>
</tr>
<tr>
<td align="left">ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作在线证书协议响应的证书验证或客户端证书验证，该证书列表不会发送给客户端</td>
</tr>
<tr>
<td align="left">ssl_stapling</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用在线证书协议结果缓存</td>
</tr>
<tr>
<td align="left">ssl_stapling_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">在线证书协议结果缓存文件</td>
</tr>
<tr>
<td align="left">ssl_stapling_responder</td>
<td align="left">url</td>
<td align="left">–</td>
<td align="left">设置获取在线证书协议结果的 URL，优先级低于 ssl_stapling_file，仅支持 HTTP 协议，默认端口为 80</td>
</tr>
<tr>
<td align="left">ssl_stapling_verify</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否启用在线证书协议结果缓存证书验证</td>
</tr>
</tbody></table>
<ol>
<li>上述指令都可编写在 http、server 指令域中。</li>
<li>ssl_ciphers 指令值的内容是 OpenSSL 参数 ciphers 的内容，可通过如下命令查看。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl ciphers                 <span class="comment"># 列出OpenSSL支持的密码套件</span></span><br><span class="line">openssl ciphers -v <span class="string">&#x27;ALL:eNULL&#x27;</span>  <span class="comment"># 列出指定密码套件详情</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>密码套件格式及说明可参见 OpenSSL 相关文档。</li>
<li>ssl_session_cache 指令值参数如下。</li>
</ol>
<ul>
<li>off:禁用 HTTPS 会话缓存；</li>
<li>none:启用伪会话缓存支持，Nginx 告知客户端可进行会话重用，但服务端并未存储会话参数；</li>
<li>builtin:使用内置 OpenSSL 缓存机制，无法在 Nginx 的多个工作进程中共享缓存内容；</li>
<li>shared:使用 Nginx 的共享缓存机制，会在 Nginx 的多个工作进程中共享缓存内容，1MB 内存可以存储 4000 个会话。</li>
</ul>
<h4 id="HTTPS-基本配置"><a href="#HTTPS-基本配置" class="headerlink" title="HTTPS 基本配置"></a>HTTPS 基本配置</h4><p>HTTPS 协议数据的传输是基于 SSL 层加密的数据，</p>
<p>简单模型：</p>
<ol>
<li>服务端获得客户请求后，将用私钥加密的协商数据发送给客户端。</li>
<li>客户端先使用服务端提供的公钥解密协商数据并读取真实的内容，再用公钥加密返回协商数据并发送给服务端，完成彼此间的密钥协商。</li>
<li>密钥协商完毕后，服务端和客户端通过协商后的密钥进行通信数据的加解密传输。</li>
<li>私钥只存放在<strong>服务端</strong>，公钥则由所有的<strong>客户端</strong>持有。</li>
</ol>
<p>使用第三方 CA 机构的证书实现对服务器身份的认证和网站公钥的安全传递。HTTPS 先通过非对称加密方式交换密钥，建立连接后再通过协商后的密钥与加密算法进行对称加密数据传输，如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200Z3150252264.D8eNiZEc.gif" alt="img"></p>
<ol>
<li>服务端按照自身的域名等身份信息创建网站证书私钥和网站证书申请文件，网站管理员将证书申请文件提交给 CA 机构并获得网站证书，网站证书和网站证书私钥被部署到服务端。</li>
<li>客户端发送包含协议版本号、客户端随机数（Client Random）、支持加密套件列表的请求给服务端。</li>
<li>服务端获得客户端 HTTPS 请求后，将包含网站信息及网站证书公钥的证书、服务端随机数（Server Random）及随机选择的客户端支持加密套件返回给客户端，若需要验证客户端身份，也会在此时发送相关信息给客户端。</li>
<li>客户端通过操作系统中的 CA 公钥解密证书获取网站证书公钥并进行网站证书的合法性、有效期和是否被吊销的验证。</li>
<li>客户端用网站证书公钥将新生成的客户端随机数加密后发送给服务端，同时使用 3 个随机数生成会话密钥。</li>
<li>服务端使用网站证书私钥解密客户端数据获取客户端随机数（Pre-master），使用 3 个随机数生成会话密钥。</li>
<li>服务端与客户端使用一致的会话密钥和加密算法完成传输数据的加解密交互。</li>
</ol>
<p>HTTPS 网站证书是由 CA 机构颁发的，网站管理员只需按照相关流程向 CA 机构提交请求文件即可，操作步骤如下。</p>
<ul>
<li><strong>生成请求文件</strong></li>
</ul>
<p>生成请求文件的脚本如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建无密码网站证书私钥文件的请求文件</span></span><br><span class="line">openssl req -out /etc/nginx/conf/ssl/www_nginxbar_org.csr -new -sha256 -newkey rsa:2048 -nodes -keyout /etc/nginx/conf/ssl/www_nginxbar_org.key -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress=admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建有密码私钥文件的请求文件</span></span><br><span class="line">openssl genrsa -aes256 -passout pass:111111 -out /etc/nginx/conf/ssl/www_nginxbar_org.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -out /etc/nginx/conf/ssl/www_nginxbar_org.csr -new -sha256 -nodes -passin pass:111111 -key /etc/nginx/conf/ssl/www_nginxbar_org.key -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress=admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 保存私钥密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;111111&quot;</span> &gt;&gt;/etc/nginx/conf/ssl/www_nginxbar_org.pass</span><br></pre></td></tr></table></figure>

<p>网站证书私钥文件是否需要密码由用户自行选择，只需选择一种方式执行即可。</p>
<ul>
<li><strong>获取证书文件</strong></li>
</ul>
<p>将 www_nginxbar_org.csr 文件提交给 CA 机构后，即可获得 Nginx 支持的 PEM 格式证书文件。</p>
<p>CA 机构为方便进行证书管理，通常会以证书链的方式进行网站证书的颁发与验证，证书链通常由网站证书、中间证书与根证书组成。证书链的验证是由网站证书开始、自下而上进行信任验证传递的。根证书通常存放在客户端，吊销根证书的过程非常困难；中间证书只是增加了一个中间验证环节，可以减少 CA 机构对根证书的管理维护工作，吊销也相对简单。除了向 CA 机构申请证书外，也可以自签证书在内部使用，自签证书操作如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建独立站点使用的自签证书</span></span><br><span class="line">openssl req -new -x509 -nodes -out /etc/nginx/conf/ssl/www_nginxbar_org.pem -keyout /etc/nginx/conf/ssl/www_nginxbar_org.key -days 3650 -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress=admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建独立站点使用有密码的网站证书私钥文件的自签证书</span></span><br><span class="line">openssl genrsa -aes256 -passout pass:111111 -out /etc/nginx/conf/ssl/www_nginxbar_org.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -new -x509 -nodes -out /etc/nginx/conf/ssl/www_nginxbar_org.pem -passin pass:111111 -key /etc/nginx/conf/ssl/www_nginxbar_org.key -days 3650 -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress=admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 保存私钥密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;111111&quot;</span> &gt;&gt;/etc/nginx/conf/ssl/www_nginxbar_org.pass</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建自签客户端证书</span></span><br><span class="line">openssl req -new -x509 -nodes -out /etc/nginx/conf/ssl/client.pem -keyout /etc/nginx/conf/ssl/client.key -days 3650 -subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress=admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 转换客户端证书为可被浏览器导入的pkcs12格式</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -<span class="keyword">in</span> /etc/nginx/conf/ssl/client.pem -inkey /etc/nginx/conf/ssl/client.key -out /etc/nginx/conf/ssl/client.p12</span><br></pre></td></tr></table></figure>

<p>获得网站证书后，可以按照如下方式配置 HTTPS 站点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;                                 <span class="comment"># 启用HTTPS支持</span></span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;       <span class="comment"># HTTPS网站证书</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;   <span class="comment"># HTTPS网站证书私钥</span></span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;    <span class="comment"># HTTPS网站证书私钥密码文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HTTPS-密钥交换算法"><a href="#HTTPS-密钥交换算法" class="headerlink" title="HTTPS 密钥交换算法"></a>HTTPS 密钥交换算法</h4><p>在 HTTPS 建立连接进行密钥交换阶段，可以通过多种密钥交换算法实现密钥交换。基于 RSA 的密钥交换过程是客户端把第 3 个随机数发送给服务端，但在 HTTPS 建立连接阶段的传输仍是明文的，会存在安全问题。</p>
<p>DH（Diffie-Hellman）密钥交换算法可保证通信双方在明文传输的环境下安全地交换密钥。基于 DH 的密钥交换过程是在服务端产生服务端随机数后，将 DH 参数和密钥交换服务端公钥加密后传递给客户端，客户端根据 DH 参数和密钥交换服务端公钥计算出第 3 个随机数，并把自己产生的密钥更换为客户端公钥发送给服务端，服务端依据密钥交换客户端公钥计算出第 3 个随机数并完成后续的操作。</p>
<p>椭圆曲线的 DH（ECDH）密钥交换算法与 DH 交换算法相似，但使用了不同的数学模型。在使用椭圆曲线的 DH 密钥交换时，服务器会为密钥交换指定一条预先定义好参数的曲线，Nginx 的 ECDH 密钥交换默认配置的是 prime256v1 曲线算法。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line">    ssl_dhparam ssl/dhparam.pem;                    <span class="comment"># DH参数文件</span></span><br><span class="line">    ssl_ecdh_curve auto;                            <span class="comment"># ECDH椭圆曲线算法为prime256v1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DH 参数文件可通过如下命令生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl dhparam -out /etc/nginx/conf/ssl/dhparam.pem 2048</span><br></pre></td></tr></table></figure>

<p>基于 DH 的密钥交换算法也称前向加密（Forward Secrecy）或完全前向加密（Perfect Forward Secrecy），其应用场景是即便日后服务器的 SSL 私钥被第三方获得，后者也无法推算出会话密钥。</p>
<h4 id="HTTPS-会话缓存"><a href="#HTTPS-会话缓存" class="headerlink" title="HTTPS 会话缓存"></a>HTTPS 会话缓存</h4><p>HTTPS 建立连接时传递证书及协商会话密钥会占用一定资源，为加快 HTTPS 建立连接的速度，提升性能，TLS 协议使用了会话缓存机制。会话缓存机制可以使已经断开连接的 HTTPS 会话重用之前的协商会话密钥继续 HTTPS 数据传输。会话缓存机制有两种实现方式:会话编号（Session ID）和会话凭证（Session Ticket）。</p>
<p><strong>会话编号</strong></p>
<p>服务端在与客户端进行数据传输时，会为每次会话生成一个会话编号，并存储该会话编号与会话协商数据。HTTPS 会话中断需要重新连接时，客户端将最后一次会话的会话编号发送给服务端，服务端检查存储中该编号是否存在，如果存在就与客户端使用原有的会话密钥进行数据传输。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;               <span class="comment"># HTTPS会话缓存存储大小为10MB</span></span><br><span class="line">    ssl_session_tickets off;                        <span class="comment"># 以会话编号机制实现会话缓存</span></span><br><span class="line">    ssl_session_timeout 10m;                        <span class="comment"># 会话缓存超时时间为10分钟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里作以下两点说明。</p>
<ul>
<li>服务端会存储会话编号和会话协商数据，相对会消耗服务器资源；</li>
<li>当 Nginx 服务器为多台时，无法实现会话共享。</li>
</ul>
<p><strong>会话凭证</strong></p>
<p>会话凭证类似于 cookie，它将协商的通信数据加密之后发送给客户端保存，服务端只保存密钥。HTTPS 建立连接后，服务端发送一个会话凭证给客户端，当需要重新连接时，客户端发送会话凭证与服务端恢复会话连接。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;               <span class="comment"># HTTPS会话缓存存储大小为10MB</span></span><br><span class="line">    ssl_session_tickets off;                        <span class="comment"># 以会话凭证机制实现会话缓存</span></span><br><span class="line">    ssl_session_timeout 10m;                        <span class="comment"># 会话缓存超时时间为10分钟</span></span><br><span class="line">    ssl_session_ticket_key ssl/session_ticket.key;  <span class="comment"># 会话凭证密钥文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ssl_session_ticket_key 可以实现多台 Nginx 间共用会话缓存，解决了会话缓存共享问题，可通过如下命令生成:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand 80 &gt; /etc/nginx/conf/ssl/session_ticket.key</span><br></pre></td></tr></table></figure>

<h4 id="HTTPS-双向认证配置"><a href="#HTTPS-双向认证配置" class="headerlink" title="HTTPS 双向认证配置"></a>HTTPS 双向认证配置</h4><p>通常网站的 HTTPS 访问，都是客户端通过证书验证所访问服务器的身份，而服务器对来访的客户端并不做身份验证，也称单向认证。在一些场景中，也会增加客户端身份验证以提高数据传输的安全性，这就是双向认证。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_session_ticket_key ssl/session_ticket.key;</span><br><span class="line"></span><br><span class="line">    ssl_verify_client on;                          <span class="comment"># 启用客户端证书认证</span></span><br><span class="line">    ssl_client_certificate ssl/ca.pem;             <span class="comment"># 客户端证书信任链的CA中间证书或根证书</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HTTPS-吊销证书配置"><a href="#HTTPS-吊销证书配置" class="headerlink" title="HTTPS 吊销证书配置"></a>HTTPS 吊销证书配置</h4><p>HTTPS 的证书会因安全原因在正常有效期到期前进行证书变更，为了方便客户端或浏览器及时判断当前使用的网站证书是否已被吊销，通常会采用以下两种方式实现:证书吊销列表（CRL）和在线证书协议（OCSP）。</p>
<p><strong>证书吊销列表</strong></p>
<p>证书吊销列表是由 CA 机构维护的列表，列表中包含已被吊销的证书序列号和时间，通常在 CA 机构证书中都会包含 CRL 下载地址。证书吊销列表 Nginx 配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_session_ticket_key ssl/session_ticket.key;</span><br><span class="line"></span><br><span class="line">    ssl_crl ssl/ca.crl;                          <span class="comment"># 证书吊销列表文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>证书吊销列表可通过查看网站证书字段”CRL分发点”的字段值下载获得。</p>
<p><strong>在线证书协议</strong></p>
<p>在线证书协议是一个吊销证书在线查询协议，虽然可以实现实时查询，但同时也会因在 HTTPS 建立连接时查询 OCSP 接口引发性能问题。为解决 OCSP 查询造成的性能影响，引入了 OCSP Stapling 机制，即由 HTTPS 服务器查询 OCSP 接口或本地 OCSP 缓存，并通过证书状态消息返回给客户端。</p>
<p>在线证书协议缓存 Nginx 配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resolver 114.114.114.114 valid=300s;             <span class="comment"># DNS服务器地址</span></span><br><span class="line">resolver_timeout 1s;                             <span class="comment"># DNS解析超时时间为1s</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;</span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;</span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_session_ticket_key ssl/session_ticket.key;</span><br><span class="line"></span><br><span class="line">    ssl_stapling on;                                 <span class="comment"># 启用OCSP缓存</span></span><br><span class="line">    ssl_stapling_file ssl/ocsp.pem;                  <span class="comment"># OCSP结果缓存文件</span></span><br><span class="line">    ssl_stapling_responder http://ocsp.example.com/; <span class="comment"># 设置获取OCSP结果的URL</span></span><br><span class="line">    ssl_stapling_verify on;                          <span class="comment"># 设置OCSP结果缓存证书验证</span></span><br><span class="line">    ssl_trusted_certificate ssl/ca.pem;              <span class="comment"># 网站证书信任证书链的中间证书文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，OCSP 结果缓存文件和获取 OCSP 结果的 URL 同时设置时，OCSP 结果缓存文件的优先级最高。</p>
<p>OCSP 响应结果可通过如下命令获得。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl ocsp -issuer /etc/nginx/conf/ssl/ca.pem -cert</span><br><span class="line">/etc/nginx/conf/ssl/www_nginxbar_org.pem -no_nonce -text -url</span><br><span class="line">http://ocsp.example.com -text -respout /etc/nginx/conf/ssl/ocsp.pem</span><br></pre></td></tr></table></figure>

<h4 id="HTTPS-配置样例"><a href="#HTTPS-配置样例" class="headerlink" title="HTTPS 配置样例"></a>HTTPS 配置样例</h4><p>HTTPS 通过加密通道保护客户端与服务端之间的数据传输，极大地降低了数据被窃取、篡改的风险，增强了网站对数据安全的保护能力，已成为当前网站建设的必选配置。根据Nginx提供的配置指令，HTTPS 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resolver 114.114.114.114 valid=300s;               <span class="comment"># DNS服务器地址</span></span><br><span class="line">resolver_timeout 5s;                               <span class="comment"># DNS解析超时时间为5s</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;   <span class="comment"># DNS服务器地址</span></span><br><span class="line">    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers on;                  <span class="comment"># 启用服务端密码组件优先</span></span><br><span class="line">    ssl_dhparam  ssl/dhparam.pem;                  <span class="comment"># 设置DH密钥交换算法参数</span></span><br><span class="line">    ssl_ecdh_curve secp384r1;                      <span class="comment"># DH密钥交换椭圆曲线算法为secp384r1</span></span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;      <span class="comment"># 网站证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;  <span class="comment"># 网站证书密钥文件</span></span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;   <span class="comment"># 网站证书密钥密码文件</span></span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;              <span class="comment"># 会话缓存存储大小为10MB</span></span><br><span class="line">    ssl_session_timeout  10m;                      <span class="comment"># 会话缓存超时时间为10分钟</span></span><br><span class="line">    ssl_session_tickets on;                        <span class="comment"># 设置会话凭证为会话缓存机制</span></span><br><span class="line">    ssl_session_ticket_key  ssl/session_ticket.key;# 设置会话凭证密钥文件</span><br><span class="line"></span><br><span class="line">    ssl_stapling on;                               <span class="comment"># 启用OCSP缓存</span></span><br><span class="line">    ssl_stapling_file ssl/ocsp.pem;                <span class="comment"># OCSP结果缓存文件</span></span><br><span class="line">    ssl_stapling_verify on;                        <span class="comment"># 设置OCSP结果缓存证书验证</span></span><br><span class="line">    ssl_trusted_certificate  ssl/ca.pem;           <span class="comment"># 网站证书信任证书链的中间证书文件</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 启用HSTS</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains; preload&quot;</span>;</span><br><span class="line"></span><br><span class="line">    add_header X-Frame-Options DENY;               <span class="comment"># 禁止被嵌入框架</span></span><br><span class="line">    add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;   <span class="comment"># XSS跨站防护</span></span><br><span class="line">    add_header X-Content-Type-Options nosniff;     <span class="comment"># 防止在浏览器中的MIME类型混淆攻击</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    rewrite ^(.*)$  https://$host<span class="variable">$1</span>? permanent;    <span class="comment"># 强制HTTP访问跳转为HTTPS访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过网站 ssllabs.com 对 HTTPS 的配置进行安全性检测，并按照测试结果有针对性地进行优化。</p>
<h3 id="FastCGI模块配置简述"><a href="#FastCGI模块配置简述" class="headerlink" title="FastCGI模块配置简述"></a>FastCGI模块配置简述</h3><p>Nginx 的 FastCGI 模块默认编译在 Nginx 的二进制文件中，无须单独编译。该模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fastcgi_bind</td>
<td align="left">address [transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口号与 FastCGI 服务器建立连接，指令值可以是变量。当指令值参数为 transparent 时，允许将客户端的真实 IP 透传给 FastCGI 服务器，并以客户端真实 IP 为访问 FastCGI 服务器的源 IP，当指令值为 off 时，取消上一层指令域同名指令的配置</td>
</tr>
<tr>
<td align="left">fastegi_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否启用响应数据缓冲区</td>
</tr>
<tr>
<td align="left">fastcgi_buffers</td>
<td align="left">number size</td>
<td align="left">8 4k 或 8k</td>
<td align="left">设置单个连接从 FastCGI 服务器接收响应数据缓冲区的数量及单个缓冲区的大小，至少是两个</td>
</tr>
<tr>
<td align="left">fastcgi_buffer_size</td>
<td align="left">size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置用于读取 FastCGI 服务器响应数据第一部分的缓冲区大小，默认值根据操作系统平台的不同为 4KB 或 8KB</td>
</tr>
<tr>
<td align="left">fastcgi_busy_buffers_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">限制在响应数据未完全读取完毕时忙于向客户端发送响应的缓冲区的大小，以使其余的缓冲区用于读取响应数据。该值必须大于单个缓冲区或 fastcgi_buffer_size 的大小，小于总缓冲区大小减掉一个缓冲区的大小</td>
</tr>
<tr>
<td align="left">fastcgi_limit_rate</td>
<td align="left">rate</td>
<td align="left">0</td>
<td align="left">限制从 FastCGI 服务器读取响应的每个请求的速率，单位是字节&#x2F;秒，指令值为 0 表示不限制。该指令只在 fastcgi_buffer_ing 启用时有效</td>
</tr>
<tr>
<td align="left">fastcgi_max_temp_file_size</td>
<td align="left">size</td>
<td align="left">1024m</td>
<td align="left">当响应数据超出响应数据缓冲区的大小时，超出部分的数据将存储于临时文件中。该指令用于设置临时文件的最大值。该指令值必须大于单个缓冲区或 fastcgi_buffer_size 的大小</td>
</tr>
<tr>
<td align="left">fastegi_temp_file_write_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">限制一次写入临时文件的数据大小。默认配置下，其大小通过 fastcgi-buffer-size 和 fastcgi-buffers 指令配置进行限制，最大值是 fastcgi_max_temp_file_size 指令的值，最小值必须大于单个缓冲区或 fastcgi_buffer_size 的大小</td>
</tr>
<tr>
<td align="left">fastcgi_temp_path</td>
<td align="left">path[level1 [level2[level3]]]</td>
<td align="left">fastcgi_temp</td>
<td align="left">设置临时文件存储目录</td>
</tr>
<tr>
<td align="left">fastcgi_request_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否在将请求转发给 FastCGI 服务器之前先从客户端读取整个请求体。当禁用该功能时，如果已经发送请求主体，则无法将请求传递到下一个服务器</td>
</tr>
<tr>
<td align="left">fastcgi_store</td>
<td align="left">on、off 或 string</td>
<td align="left">off</td>
<td align="left">设置是否将 FastCGI 的响应数据在本地持久存储。当指令值为 on 时，存储路径为 root 或 alias 的设置。该指令可以为不经常变更的 FastCGI 响应文件创建本地镜像。响应数据先存储到临时文件中，再进行复制或重命名存储</td>
</tr>
<tr>
<td align="left">fastcgi_store_access</td>
<td align="left">users:permissions…</td>
<td align="left">user:rw</td>
<td align="left">设置创建持久存储路径的文件夹权限</td>
</tr>
<tr>
<td align="left">fastcgi_cache</td>
<td align="left">zone 或 off</td>
<td align="left">off</td>
<td align="left">设置一个共享内存 zone 用作缓存</td>
</tr>
<tr>
<td align="left">fastegi_cache_path</td>
<td align="left">path 参数</td>
<td align="left">–</td>
<td align="left">设置缓存文件存储路径及参数。缓存数据以 URL 的 MD5 值命名并存储在缓存目录中。</td>
</tr>
<tr>
<td align="left">fastcgi_cache_bypass</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">设置不使用缓存响应数据的条件，指令值中至少有一个值不为空或 0 时，当前请求不使用缓存中的响应数据</td>
</tr>
<tr>
<td align="left">fastcgi_cache_key</td>
<td align="left">string</td>
<td align="left">–</td>
<td align="left">设置缓存的关键字</td>
</tr>
<tr>
<td align="left">fastegi_cache_lock</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存锁指令。向 FastCGI 发送请求时，每次只允许一个请求按照 fastcgi_cache_key 指令设置的标识增添新的缓存数据，其他相同的请求将等待缓存中出现响应数据或该缓存锁被释放，等待时间由 fastcgi_cache_lock_timeout 指令设置</td>
</tr>
<tr>
<td align="left">fastcgi_cache_lock_age</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">如果一个请求在该指令设定的时间内没有完成响应数据缓存的添加，则再向 FastCGI 发送一次请求</td>
</tr>
<tr>
<td align="left">fastcgi_cache_lock_timeout</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">缓存锁超时时间。超过该时间的请求将直接从 FastCGI 读取响应</td>
</tr>
<tr>
<td align="left">fastcgi_cache_max_range_offset</td>
<td align="left">number</td>
<td align="left">–</td>
<td align="left">用于设置范围请求（byte-range）请求时的最大偏移量。超出该偏移量的请求将直接从 FastCGI 读取响应</td>
</tr>
<tr>
<td align="left">fastcgi_cache_methods</td>
<td align="left">GET、HEAD 或 POST …</td>
<td align="left">GET HEAD</td>
<td align="left">指定可被缓存的请求方法列表</td>
</tr>
<tr>
<td align="left">fastcgi_cache_min_uses</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">响应数据超过设置请求次数后将被缓存</td>
</tr>
<tr>
<td align="left">fastcgi_no_cache</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">指定字符串的值不为空或不等于 0，则不对当前请求的响应数据进行缓存</td>
</tr>
<tr>
<td align="left">fastcgi_cache_purge</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">定义清除缓存请求条件，若指定的字符串不为空或 0，则将 fastcgi_cache_key 设置的标识的缓存清除。清除成功则返回状态码 204，商业版有效</td>
</tr>
<tr>
<td align="left">fastcgi_cache_revalidate</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置在 HTTP 头中有字段属性 If-Modified-Since 和 If-None-Match 时是否启用重新验证</td>
</tr>
<tr>
<td align="left">fastcgi_cache_use_stale</td>
<td align="left">error、timeout、 invalid_header、 updating、http_500、 http_503、http_403、 http_404、http_429、 off…</td>
<td align="left">off</td>
<td align="left">当出现指定的条件时，使用已经过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">fastcgi_cache_background_update</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">当允许使用过期的响应数据时，设置是否启用后台子请求更新过期缓存，同时向客户端返回过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">fastcgi_cache_valid</td>
<td align="left">[code…]time</td>
<td align="left">–</td>
<td align="left">根据响应码设置缓存时间</td>
</tr>
<tr>
<td align="left">fastcgi_catch_stderr</td>
<td align="left">string</td>
<td align="left">–</td>
<td align="left">错误响应标识。若 FastCGI 响应中包含指定的字符串，则被判断为返回了无效响应</td>
</tr>
<tr>
<td align="left">fastcgi_index</td>
<td align="left">name</td>
<td align="left">–</td>
<td align="left">设置默认 index 文件</td>
</tr>
<tr>
<td align="left">fastcgi_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">设置 FastCGI 服务器的 IP 地址或套接字，也可以是域名或 upstream 定义的服务器组</td>
</tr>
<tr>
<td align="left">fastcgi_pass_request_body</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求体传递给 FastCGI 服务器</td>
</tr>
<tr>
<td align="left">fastcgi_pass_request_headers</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求头传递给 FastCGI 服务器</td>
</tr>
<tr>
<td align="left">fastcgi_force_ranges</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">无论 FastCGI 的 HTTP 响应头中是否有字段 Accept-Ranges，都启用 byte-range 请求支持</td>
</tr>
<tr>
<td align="left">fastcgi_hide_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">指定 FastCGI 响应数据中不向客户端传递的 HTTP 头字段名称</td>
</tr>
<tr>
<td align="left">fastcgi_pass_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">默认配置下，Nginx 不会将头字段属性 Status 和 X-Accel-… 传递给客户端，可通过该指令开放传递</td>
</tr>
<tr>
<td align="left">fastcgi_ignore_headers</td>
<td align="left">field…</td>
<td align="left">–</td>
<td align="left">设置禁止 Nginx 处理从 FastCGI 获取响应的头字段</td>
</tr>
<tr>
<td align="left">fastcgi_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">Nginx 与 FastCGI 服务器建立连接的超时时间，通常不超过 75s</td>
</tr>
<tr>
<td align="left">fastcgi_keep_conn</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">默认配置下，FastCGI 发送完响应数据后会立刻关闭连接，当该指令的指令值为 on 时，将启用保持连接</td>
</tr>
<tr>
<td align="left">fastcgi_ignore_client_abort</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置当客户端关闭连接时，是否关闭与 FastCGI 服务器的连接</td>
</tr>
<tr>
<td align="left">fastcgi_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从 FastCGI 服务器接收数据的读操作之间的间隔时间超过设定的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">fastcgi_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到 FastCGI 服务器的写操作之间的间隔时间超过设定的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">fastcgi_send_lowat</td>
<td align="left">size</td>
<td align="left">0</td>
<td align="left">设置 FreeBSD 系统中使用 kqueue 驱动时，socket 接口 SO_SNDLOWAT 选项的大小。在 Linux、Solaris 及 Windows 台该指令无效</td>
</tr>
<tr>
<td align="left">fastcgi_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否对 FastCGI 的连接启用 so-keepalive socket 选项</td>
</tr>
<tr>
<td align="left">fastcgi_intercept_errors</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">在 FastCGI 响应数据中响应码大于或等于 300 时，设置是直接传递给客户端还是重定向给 Nginx，以便 error_page 指令进行处理</td>
</tr>
<tr>
<td align="left">fastcgi_next_upstream</td>
<td align="left">error、timeout、 invalid、header、 http_500、http_503、 http_403、http_404、 http_429、non_idempotent、off…</td>
<td align="left">error timeout</td>
<td align="left">当出现指定的条件时，将未返回响应的客户端请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">fastcgi_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的请求传递给 upstream 中下一个服务器的超时时间。当指令值为 0 时，关闭该限制</td>
</tr>
<tr>
<td align="left">fastcgi_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置将符合条件的请求传递给 upstream 中下一个服务器的尝试次数。当指令值为 0 时，关闭该限制</td>
</tr>
<tr>
<td align="left">fastcgi_split_path_info</td>
<td align="left">regex</td>
<td align="left">–</td>
<td align="left">定义一个正则表达式，可以将 URI 正则匹配赋值到 $fastcgi_script_name 及 $fastcgi_path_info 两个变量中，可用于获取 index.php&#x2F;arg1&#x2F;111&#x2F;arg2&#x2F;222 格式的请求参数</td>
</tr>
<tr>
<td align="left">fastegi_param</td>
<td align="left">parameter value[if_not_empty]</td>
<td align="left">–</td>
<td align="left">设置发送请求到 FastCGI 时传递的请求参数。指令值为 if_not_empty 时，表示当传递的参数值不为空时才进行传递</td>
</tr>
</tbody></table>
<p>对于上表，有以下几点说明。</p>
<ul>
<li>除 fastcgi_cache_path 指令外，FastCGI 模块指令均可编写在 http、server、location 指令域中。</li>
<li>fastcgi_cache_purge 指令仅商业版 Nginx 才支持。开源版可通过第三方模块或自己写脚本实现。</li>
<li>fastcgi_cache_path 指令只能编写在 http 指令域中。</li>
<li>fastcgi_cache 与 fastcgi_store 指令不能在同一指令域中同时使用。</li>
<li>non_idempotent 是指 POST、LOCK、PATCH 请求方法的处理。</li>
</ul>
<p>fastcgi_cache_path 指令值参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">参数格式</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">levels</td>
<td align="left">levels</td>
<td align="left">–</td>
<td align="left">设置缓存目录的层级及命名方式</td>
</tr>
<tr>
<td align="left">use_temp_path</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">当指令值为 on 时，使用 fastcgi_temp_path 设置作为临时文件目录；当指令值为 off 时，使用缓存目录作为临时文件目录</td>
</tr>
<tr>
<td align="left">keys_zone</td>
<td align="left">name:size</td>
<td align="left">–</td>
<td align="left">设置存储 cache_key 的共享内存 zone 及其大小，1MB 内存可以存储 8000 个 key</td>
</tr>
<tr>
<td align="left">inactive</td>
<td align="left">time</td>
<td align="left">10 分钟</td>
<td align="left">设定时间内未被访问的缓存将被删除</td>
</tr>
<tr>
<td align="left">max_size</td>
<td align="left">size</td>
<td align="left">–</td>
<td align="left">缓存数据的最大值，超出设定的最大值时，将执行一次迭代更新，并删除最近使用最少的缓存数据</td>
</tr>
<tr>
<td align="left">manager_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">当执行一次迭代更新时，删除文件的最大数</td>
</tr>
<tr>
<td align="left">manager_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代更新间的最短时间间隔</td>
</tr>
<tr>
<td align="left">manager_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">执行一次迭代更新时的最大执行时间</td>
</tr>
<tr>
<td align="left">loader_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">每次迭代加载时，加载缓存目录中缓存数据的最大文件数</td>
</tr>
<tr>
<td align="left">loader_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代加载间的最短时间间隔</td>
</tr>
<tr>
<td align="left">loader_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">每次迭代加载时的最大执行时间</td>
</tr>
<tr>
<td align="left">purger</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存清除功能。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_files</td>
<td align="left">number</td>
<td align="left">10</td>
<td align="left">每次迭代清除时，清除缓存目录中缓存数据的最大文件数。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代清除间的最短时间间隔。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_threshold</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">每次迭代清除时的最大执行时间。仅商业版有效</td>
</tr>
</tbody></table>
<h3 id="基于FastCGI实现负载均衡"><a href="#基于FastCGI实现负载均衡" class="headerlink" title="基于FastCGI实现负载均衡"></a>基于FastCGI实现负载均衡</h3><p>Nginx 支持后端多个 FastCGI 服务器的负载均衡，负载均衡有两种方式:一种是通过域名解析多个 FastCGI 服务器，该方式通过所有域名地址轮询（round-robin）的方式实现负载；另一种是通过配置 Nginx 的 <strong>upstream</strong> 模块实现负载。</p>
<p>本节通过后一种方式实现负载均衡场景的搭建。Nginx 的 FastCGI 模块支持对后端 PHP 解析数据的缓存，对于动态数据的缓存可以在实际应用场景中提升动态网站的访问速度。</p>
<p>Nginx 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream fscgi_server &#123;</span><br><span class="line">    ip_hash;                               <span class="comment"># session会话保持</span></span><br><span class="line">    server 192.168.2.145:9000;             <span class="comment"># PHP-FPM服务器IP</span></span><br><span class="line">    server 192.168.2.159:9000;             <span class="comment"># PHP-FPM服务器IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastcgi_cache_path /usr/local/nginx/nginx-cache1</span><br><span class="line">                            levels=1:2</span><br><span class="line">                            keys_zone=fscgi_hdd1:100m</span><br><span class="line">                            max_size=10g</span><br><span class="line">                            use_temp_path=off</span><br><span class="line">                            inactive=60m;    <span class="comment"># 设置缓存存储路径1，缓存的共享内存名称和大小</span></span><br><span class="line">                                             <span class="comment"># 100MB，无效缓存的判断时间为1小时</span></span><br><span class="line"></span><br><span class="line">fastcgi_cache_path /usr/local/nginx/nginx-cache2</span><br><span class="line">                            levels=1:2</span><br><span class="line">                            keys_zone=fscgi_hdd2:100m</span><br><span class="line">                            max_size=10g</span><br><span class="line">                            use_temp_path=off</span><br><span class="line">                            inactive=60m;   <span class="comment"># 设置缓存存储路径2，缓存的共享内存名称和大小</span></span><br><span class="line">                                            <span class="comment"># 100MB，无效缓存的判断时间为1小时</span></span><br><span class="line"></span><br><span class="line">split_clients <span class="variable">$request_uri</span> <span class="variable">$fscgi_cache</span> &#123;</span><br><span class="line">              50%           <span class="string">&quot;fscgi_hdd1&quot;</span>;  <span class="comment"># 50%请求的缓存存储在第一个磁盘上</span></span><br><span class="line">              50%           <span class="string">&quot;fscgi_hdd2&quot;</span>;  <span class="comment"># 50%请求的缓存存储在第二个磁盘上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /opt/nginx-web/phpweb;</span><br><span class="line">    index index.php;</span><br><span class="line">    include        fscgi.conf;             <span class="comment"># 引入默认配置文件</span></span><br><span class="line">   </span><br><span class="line">    location ~ \.(gif|jpg|png|htm|html|css|js|flv|ico|swf)(.*) &#123;  <span class="comment"># 静态资源文件过期时间</span></span><br><span class="line">                                                                  <span class="comment"># 为12小时</span></span><br><span class="line">        expires      12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$no_cache</span> 0;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$query_string</span> != <span class="string">&quot;&quot;</span>) &#123;              <span class="comment"># URI无参数的数据不进行缓存</span></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$no_cache</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php(.*)$ &#123;</span><br><span class="line">        root /opt/nginx-web/phpweb;</span><br><span class="line"></span><br><span class="line">        fastcgi_cache <span class="variable">$fscgi_cache</span>;        <span class="comment"># 启用fastcgi_cache_path设置的$fscgi_cache</span></span><br><span class="line">                                           <span class="comment"># 的共享内存区域做缓存</span></span><br><span class="line">        fastcgi_cache_key <span class="variable">$&#123;request_method&#125;</span>://$host<span class="variable">$request_uri</span>; <span class="comment"># 设置缓存的关键字</span></span><br><span class="line">        fastcgi_cache_lock on;             <span class="comment"># 启用缓存锁</span></span><br><span class="line">        fastcgi_cache_lock_age 5s;         <span class="comment"># 启用缓存锁时，添加缓存请求的处理时间为5s</span></span><br><span class="line">        fastcgi_cache_lock_timeout 5s;     <span class="comment"># 等待缓存锁超时时间为5s</span></span><br><span class="line">        fastcgi_cache_methods GET HEAD;    <span class="comment"># 默认对GET及HEAD方法的请求进行缓存</span></span><br><span class="line">        fastcgi_cache_min_uses 1;          <span class="comment"># 响应数据被请求一次就将被缓存</span></span><br><span class="line"></span><br><span class="line">        fastcgi_no_cache <span class="variable">$no_cache</span>;        <span class="comment"># $no_cache时对当前请求不进行缓存</span></span><br><span class="line">        fastcgi_cache_bypass <span class="variable">$no_cache</span>;    <span class="comment"># $no_cache时对当前请求不进行缓存</span></span><br><span class="line"></span><br><span class="line">        fastcgi_cache_use_stale error <span class="built_in">timeout</span> invalid_header</span><br><span class="line">                                updating http_500 http_503</span><br><span class="line">                                http_403 http_404 http_429;        <span class="comment"># 当出现指定的条件时，使用</span></span><br><span class="line">                                                                   <span class="comment"># 已经过期的缓存响应数据</span></span><br><span class="line">        fastcgi_cache_background_update on; <span class="comment"># 允许使用过期的响应数据时，启用后台子请求用于</span></span><br><span class="line">                                            <span class="comment"># 更新过期缓存，并将过期的缓存响应数据返回给客户端</span></span><br><span class="line"></span><br><span class="line">        fastcgi_cache_revalidate on;       <span class="comment"># 当缓存过期时，向后端服务器发起包含If-</span></span><br><span class="line">                                           <span class="comment"># Modified-Since和If-None-Match HTTP消息</span></span><br><span class="line">                                           <span class="comment"># 头字段的服务端校验</span></span><br><span class="line">        fastcgi_cache_valid 200 301 302 10h; <span class="comment"># 200 301 302状态码的响应缓存10小时</span></span><br><span class="line">        fastcgi_cache_valid any 1m;        <span class="comment"># 其他状态码的响应缓存1分钟</span></span><br><span class="line"></span><br><span class="line">        add_header X-Cache-Status <span class="variable">$upstream_cache_status</span>;   <span class="comment"># 查看缓存命中状态</span></span><br><span class="line"></span><br><span class="line">        fastcgi_pass   fscgi_server;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_split_path_info       ^(.+\.php)(.*)$;      <span class="comment"># 获取$fastcgi_path_info变量值</span></span><br><span class="line">        fastcgi_param PATH_INFO       <span class="variable">$fastcgi_path_info</span>;   <span class="comment"># 赋值给参数PATH_INFO</span></span><br><span class="line">        include        fastcgi.conf;                        <span class="comment"># 引入默认参数文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CGI、FastCGI、SCGI、WSGI网关接口简介"><a href="#CGI、FastCGI、SCGI、WSGI网关接口简介" class="headerlink" title="CGI、FastCGI、SCGI、WSGI网关接口简介"></a>CGI、FastCGI、SCGI、WSGI网关接口简介</h3><p>我们将服务端程序分为了 <strong>web 服务器</strong>和<strong>应用程序服务器</strong>两个部分。web 服务器是用于处理 HTML 文件，让客户可以通过浏览器进行访问。主流的有 Apache、IIS、Nginx、Lghttpd 等。而应用服务器处理业务逻辑，比如使用 python 的 django,flask 写成的程序。</p>
<p>通常来自客户端浏览器的请求被 web 服务器截获，如果是静态请求，则如 nginx 会自己做处理，如果是动态请求，则会抛给后端应用服务器来处理。于是如何在 web 服务器与应用服务器之间进行通信成了主要问题，这就引出了以下四种处理的接口:CGI、FastCGI、SCGI、WSGI。</p>
<p><strong>CGI（Common Gateway Interface，通用网关接口）</strong></p>
<p>CGI 是一种通用网关接口规范，该规范详细描述了 Web 服务器和请求处理程序（脚本解析器）在获取及返回数据过程中传输数据的标准，如 HTTP 协议的参数名称等。大多数 Web 程序以脚本形式接收并处理请求，然后返回响应数据，如脚本程序 PHP、JSP、Python 等。</p>
<p><strong>FastCGI（Fast Common Gateway Interface，快速通用网关接口）</strong></p>
<p>FastCGI 是 CGI 的增强版本，其将请求处理程序独立于 Web 服务器之外，并通过减少系统为创建进程而产生的系统开销，使 Web 服务器可以处理更多的 Web 请求。FastCGI 与 CGI 的区别在于，FastCGI 不像 CGI 那样对 Web 服务器的每个请求均建立一个进程进行请求处理，而是由 FastCGI 服务进程接收 Web 服务器的请求后，由自己的进程自行创建线程完成请求处理。</p>
<p><strong>SCGI（Simple Common Gateway Interface，简单通用网关接口）</strong></p>
<p>SCGI 是 CGI 的替代版本，它与 FastCGI 类似，同样是将请求处理程序独立于 Web 服务器之外，但更容易实现，性能比 FastCGI 要弱一些。</p>
<p><strong>WSGI（Web Server Gateway Interface，Web 服务网关接口）</strong></p>
<p>WSGI 是为 Python 语言中定义的 Web 服务器与 Python 应用程序或框架间的通用通信接口，可以使 Python 应用程序或框架与支持这一协议的不同Web服务器进行通信。常见的 Python Web 框架都实现了该协议的封装。</p>
<hr>
<h3 id="uWSGI模块配置简述"><a href="#uWSGI模块配置简述" class="headerlink" title="uWSGI模块配置简述"></a>uWSGI模块配置简述</h3><p>uWSGI 是 Python 实现 WSGI、uWSGI（uWSGI 独有的协议）、HTTP 等协议功能的 Web 服务器。</p>
<p>Nginx 通过 ngx_http_uwsgi_module 模块实现与 uWSGI 服务器的数据交换并完成 Python 网站的请求处理。</p>
<p>该模块默认编译在 Nginx 二进制文件中，无须单独编译。该模块的配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">uwsgi_bind</td>
<td align="left">address [transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口号与 uWSGI 服务器建立连接，指令值可以是变量。当指令值为 transparent 时，允许将客户端的真实 IP 透传给 uWSGI 服务器，并以客户端真实IP为访问 uWSGI 服务器的源 IP；当指令值为 off 时，则取消上一层指令域同名指令的配置</td>
</tr>
<tr>
<td align="left">uwsgi_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否启用响应数据缓冲区</td>
</tr>
<tr>
<td align="left">uwsgi_buffers</td>
<td align="left">number size</td>
<td align="left">8 4k 或 8k</td>
<td align="left">设置单个连接从 uWSGI 服务器接收响应数据缓冲区的数量及单个缓冲区的大小。至少是两个</td>
</tr>
<tr>
<td align="left">uwsgi_buffer_size</td>
<td align="left">size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置用于读取 uWSGI 服务器响应数据第一部分的缓冲区大小，默认值根据操作系统平台的不同为 4KB 或 8KB</td>
</tr>
<tr>
<td align="left">uwsgi_busy_buffers_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">限制在响应数据未完全读取完毕时忙于向客户端发送响应的缓冲区的大小，以使其余的缓冲区用于读取响应数据。该值必须大于单个缓冲区或 uwsgi_buffer_size 的大小，小于总缓冲区大小减掉一个缓冲区的大小</td>
</tr>
<tr>
<td align="left">uwsgi_limit_rate</td>
<td align="left">rate</td>
<td align="left">0</td>
<td align="left">限制从 uWSGI 服务器读取响应的每个请求的速率，单位是字节&#x2F;秒，指令值为 0 表示不限制。该指令只在 uwsgi_buffering 启用时有效</td>
</tr>
<tr>
<td align="left">uwsgi_max_temp_file_size</td>
<td align="left">size</td>
<td align="left">1024m</td>
<td align="left">当响应数据超出响应数据缓冲区的大小时，超出部分的数据将存储于临时文件中。该指令设置临时文件的最大值。该值必须大于单个缓冲区或 uwsgi_buffer_size 的大小</td>
</tr>
<tr>
<td align="left">uwsgi_temp_file_write_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">限制一次写入临时文件的数据大小。默认配置下，大小通过 uwsgi-buffer-size 和 uwsgi-buffers 配置指令进行限制，最大值是 uwsgi_max_temp_filesize 指令的值，最小值必须大于单个缓冲区或 uwsgi_buffer_size 的大小</td>
</tr>
<tr>
<td align="left">uwsgi_temp_path</td>
<td align="left">path[level1 [level2 [level3]]]</td>
<td align="left">uwsgi_temp</td>
<td align="left">设置临时文件存储目录</td>
</tr>
<tr>
<td align="left">uwsgi_request_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否在将请求转发给 uWSGI 服务器之前先从客户端读取整个请求体。若禁用该功能，如果已经发送请求主体，则无法将请求传递到下一个服务器。对于基于 HTTP&#x2F;1.1 协议的分块传输请求，会强制读取完整请求体</td>
</tr>
<tr>
<td align="left">uwsgi_store</td>
<td align="left">on 或 off 或 string</td>
<td align="left">off</td>
<td align="left">设置是否将 uWSGI 服务器的响应数据在本地持久存储。当指令值为 on 时，存储路径为 root 或 alias 的设置。该指令可以为不经常变更的 uWSGI 服务器响应文件创建本地镜像。响应数据先存储到临时文件中再进行复制或重命名存储</td>
</tr>
<tr>
<td align="left">uwsgi_store_access</td>
<td align="left">users:permissions…</td>
<td align="left">user:rw</td>
<td align="left">设置创建持久存储路径的文件夹权限</td>
</tr>
<tr>
<td align="left">uwsgi_cache</td>
<td align="left">zone 或 off</td>
<td align="left">off</td>
<td align="left">设置一个共享内存 zone 用作缓存</td>
</tr>
<tr>
<td align="left">uwsgi_cache_path</td>
<td align="left">path 参数</td>
<td align="left">–</td>
<td align="left">设置缓存文件存储路径及参数。缓存数据以 URI 的 MD5 值命名并存储在缓存目录中</td>
</tr>
<tr>
<td align="left">uwsgi_cache_bypass</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">设置不使用缓存响应数据的条件，指令值中至少一个值不为空或 0 时，则当前请求不使用缓存中的响应数据</td>
</tr>
<tr>
<td align="left">uwsgi_cache_key</td>
<td align="left">string</td>
<td align="left">–</td>
<td align="left">设置缓存的关键字</td>
</tr>
<tr>
<td align="left">uwsgi_cache_lock</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存锁指令。向 uWSGI 服务器发送请求时，每次只允许一个请求按照 uwsgi_cache_key 指令设置的标识增添新的缓存数据，其他相同的请求将等待缓存中出现响应数据或该缓存锁被释放，等待时间通过 uwsgi_cache_lock_timeout 指令设置</td>
</tr>
<tr>
<td align="left">uwsgi_cache_lock_age</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">如果一个请求在该指令设定的时间内没有完成响应数据缓存的添加，则向 uWSGI 服务器再发送一次请求</td>
</tr>
<tr>
<td align="left">uwsgi_cache_lock_timeout</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">缓存锁超时时间。超过该时间的请求将直接从 uWSGI 服务器读取响应</td>
</tr>
<tr>
<td align="left">uwsgi_cache_max_range_offset</td>
<td align="left">number</td>
<td align="left">–</td>
<td align="left">用于设置范围请求请求时的最大偏移量。超出该偏移量的请求将直接从 uWSGI 服务器读取响应</td>
</tr>
<tr>
<td align="left">uwsgi_cache_methods</td>
<td align="left">GET、HEAD 或 POST…</td>
<td align="left">GET HEAD</td>
<td align="left">指定可被缓存的请求方法列表</td>
</tr>
<tr>
<td align="left">uwsgi_cache_min_uses</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">响应数据超过设置请求次数后将被缓存</td>
</tr>
<tr>
<td align="left">uwsgi_no_cache</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">指定字符串的值不为空或不等于 0，则不对当前请求的响应数据进行缓存</td>
</tr>
<tr>
<td align="left">uwsgi_cache_purge</td>
<td align="left">string</td>
<td align="left">–</td>
<td align="left">定义清除缓存请求条件，若指定的字符串不为空或 0，则对 uwsgi_cache_key 设置的标识的缓存进行清除。清除成功则返回状态码 204。仅商业版有效</td>
</tr>
<tr>
<td align="left">uwsgi_cache_revalidate</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置在 HTTP 头中有字段属性 If-Modified-Since 和 If-None-Match 时是否启用重新验证</td>
</tr>
<tr>
<td align="left">uwsgi_cache_ use_stale</td>
<td align="left">error、timeout、  invalid_header、 updating、http_500、 http_503、http_403、 http_404、http_429、 off …</td>
<td align="left">off</td>
<td align="left">当出现指定的条件时，使用已经过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">uwsgi_cache_background_update</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">允许使用过期的响应数据时，设置是否启用后台子请求更新过期缓存，同时向客户端返回过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">uwsgi_cache_valid</td>
<td align="left">[code …] time</td>
<td align="left">–</td>
<td align="left">根据响应码设置缓存时间</td>
</tr>
<tr>
<td align="left">uwsgi_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">设置 uWSGI 服务器的协议、IP 地址或套接字，也可以是域名或 upstream 定义的服务器组。支持的协议有 HTTP、uWSGI、suwsgi（基于 SSL 的 uWSGI）</td>
</tr>
<tr>
<td align="left">uwsgi_pass_request_body</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求体传递给 uWSGI 服务器</td>
</tr>
<tr>
<td align="left">uwsgi_pass_request_headers</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求头传递给 uWSGI 服务器</td>
</tr>
<tr>
<td align="left">uwsgi_force_ranges</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">无论 uWSGI 服务器的 HTTP 响应头中是否有字段 Accept-Ranges，都启用 byte-range 请求支持</td>
</tr>
<tr>
<td align="left">uwsgi_hide_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">指定 uWSGI 服务器响应数据中不向客户端传递的 HTTP 头字段名称</td>
</tr>
<tr>
<td align="left">uwsgi_pass_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">默认配置下，Nginx 不会将头字段属性 Status 和 X-Accel-… 传递给客户端，可通过该指令开放传递</td>
</tr>
<tr>
<td align="left">uwsgi_ignore_headers</td>
<td align="left">field …</td>
<td align="left">–</td>
<td align="left">设置禁止 Nginx 处理从 uWSGI 服务器获取响应的头字段</td>
</tr>
<tr>
<td align="left">uwsgi_modifier1</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置 uWSGI 数据包头中 modifier1 字段的值</td>
</tr>
<tr>
<td align="left">uwsgi_modifier2</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置 uWSGI 数据包头中 modified2 字段的值</td>
</tr>
<tr>
<td align="left">uwsgi_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">Nginx 与 uWSGI 服务器建立连接的超时时间，通常不超过 75s</td>
</tr>
<tr>
<td align="left">uwsgi_ignore_client_abort</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">当客户端关闭连接时，是否关闭与 uWSGI 服务器的连接</td>
</tr>
<tr>
<td align="left">uwsgi_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从 uWSGI 服务器接收数据的读操作之间的间隔时间超过设定的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">uwsgi_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到 uWSGI 服务器的写操作之间的间隔时间超过设定的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">uwsgi_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否对 uWSGI 服务器的连接启用 so-kccpalive socket 选项</td>
</tr>
<tr>
<td align="left">uwsgi_intercept_errors</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">在 uWSGI 服务器响应数据中响应码大于或等于 300 时，设置是直接传递给客户端还是重定向给 Nginx，以便 error_page 指令进行处理</td>
</tr>
<tr>
<td align="left">uwsgi_next_ upstream</td>
<td align="left">error、timeout、 invalid_header、 http_500、http_503、 http_403、http_404、 http_429、 non_idempotent、 off …</td>
<td align="left">error timeout</td>
<td align="left">当出现指定条件时，将未返回响应的客户端请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">uwsgi_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的请求传递给 upstream 中的下一个服务器的超时时间。指令值为 0 时关闭该限制</td>
</tr>
<tr>
<td align="left">uwsgi_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置将符合条件的请求传递给 upstream 中的下一个服务器的尝试次数。指令值为 0 时关闭该限制</td>
</tr>
<tr>
<td align="left">uwsgi_param</td>
<td align="left">parameter value [if_not_empty]</td>
<td align="left">–</td>
<td align="left">设置发送请求到 uWSGI 服务器时传递的请求参数。指令值为 if_not_empty 时，表示传递的参数值不为空时才进行传递</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定用于安全 uWSGI 服务器 SSL 身份认证的 PEM 格式服务器证书文件</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定用于安全 uWSGI 服务器 SSL 身份认证的 PEM 格式服务器证书密钥文件</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个包含服务器证书密钥密码的文件。文件中每行一个密码，Nginx 将遍历整个文件并尝试有效的密码</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">DEFAULT</td>
<td align="left">指定用于安全 uWSGI 服务器 SSL 请求的 OpenSSL 格式密码套件</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定用于验证安全 uWSGI 服务器 SSL 证书的 PEM 格式吊销证书文件</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定用于验证安全 uWSGI 服务器 SSL 证书的 PEM 格式 CA 证书文件</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_name</td>
<td align="left">name</td>
<td align="left">uwsgi_pass 指 令指定的主机</td>
<td align="left">允许指定并覆盖安全uWSGI服务器SSL证书验证的 主机名，将通过SNI向建立连接的SSL安全uWSGI服 务器进行传递</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_protocols</td>
<td align="left">[SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">指定安全 uWSGI 服务器 SSL 协议的版本</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_server_name</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用通过 SNI 或 RFC 6066 向建立连接的 SSL 安全 uWSGI 服务器传递主机名</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_session_reuse</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用 SSL 会话重用功能</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_verify</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用安全 uWSGI 服务器的证书验证功能</td>
</tr>
<tr>
<td align="left">uwsgi_ssl_verify_depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置安全 uWSGI 服务器的证书链的验证深度</td>
</tr>
</tbody></table>
<p>关于上表，有以下几点需要说明:</p>
<ul>
<li>除 uwsgi_cache_path 指令外，uWSGI 模块指令均可编写在 http、server、location 指令域中；</li>
<li>uwsgi_cache_path 指令只能编写在 http 指令域中；</li>
<li>uwsgi_cache 与 uwsgi_store 指令不可在同一指令域中同时使用；</li>
<li>non_idempotent 是指 POST、LOCK、PATCH 请求方法的处理。</li>
</ul>
<p>uwsgi_cache_path 指令值参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">参数格式</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">levels</td>
<td align="left">levels</td>
<td align="left">–</td>
<td align="left">设置缓存目录的层级及命名方式</td>
</tr>
<tr>
<td align="left">use_temp_path</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">当指令值为 on 时，使用 uwsgi_temp_path 设置作为临时文件目录；当指令值为 off 时，使用缓存目录作为临时文件目录</td>
</tr>
<tr>
<td align="left">keys_zone</td>
<td align="left">name:size</td>
<td align="left">–</td>
<td align="left">设置存储 cache_key 的共享内存 zone 及其大小，1MB 内存可以存储 8000 个 key</td>
</tr>
<tr>
<td align="left">inactive</td>
<td align="left">time</td>
<td align="left">10m</td>
<td align="left">设定时间内未被访问的缓存将被删除</td>
</tr>
<tr>
<td align="left">max_size</td>
<td align="left">size</td>
<td align="left">–</td>
<td align="left">缓存数据的最大值，超出设定的最大值时将执行一次迭代更新，并删除最近使用最少的缓存数据</td>
</tr>
<tr>
<td align="left">manager_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">执行一次迭代更新时删除文件的最大数</td>
</tr>
<tr>
<td align="left">manager_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代更新间的最短时间间隔</td>
</tr>
<tr>
<td align="left">manager_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">执行一次迭代更新时的最大执行时间</td>
</tr>
<tr>
<td align="left">loader_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">每次迭代加载时，加载缓存目录中缓存数据的最大文件数</td>
</tr>
<tr>
<td align="left">loader_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代加载间的最短时间间隔</td>
</tr>
<tr>
<td align="left">loader_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">每次迭代加载时的最大执行时间</td>
</tr>
<tr>
<td align="left">purger</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存清除功能。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_files</td>
<td align="left">number</td>
<td align="left">10</td>
<td align="left">每次迭代清除时，清除缓存目录中缓存数据的最大文件数。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代清除间的最短时间间隔。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_threshold</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">每次迭代清除时的最大执行时间。仅商业版有效</td>
</tr>
</tbody></table>
<hr>
<h3 id="伪流媒体服务器搭建"><a href="#伪流媒体服务器搭建" class="headerlink" title="伪流媒体服务器搭建"></a>伪流媒体服务器搭建</h3><p>Nginx 支持伪流媒体播放功能，其可以和客户端的 Flash 播放器结合，对以 .flv、.f4f、.mp4、.m4v、.m4a 为扩展名的文件实现流媒体的播放功能。</p>
<p>若启用伪流媒体的支持功能，需要按媒体文件格式在配置编译时增加 –with-http_f4f_module、–with-http_flv_module 和 –with-http_mp4_module 这 3 个参数。</p>
<h4 id="模块配置指令"><a href="#模块配置指令" class="headerlink" title="模块配置指令"></a>模块配置指令</h4><p>伪流媒体模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">f4f</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">启用 F4F 文件支持</td>
</tr>
<tr>
<td align="left">f4f_buffer_size</td>
<td align="left">size</td>
<td align="left">512k</td>
<td align="left">设置读取 .f4x 索引文件的缓冲区大小</td>
</tr>
<tr>
<td align="left">flv</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">启用 FLV 文件支持</td>
</tr>
<tr>
<td align="left">mp4</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">启用 MP4 文件支持</td>
</tr>
<tr>
<td align="left">mp4_buffer_size</td>
<td align="left">size</td>
<td align="left">512k</td>
<td align="left">设置处理 MP4 文件的缓冲区大小</td>
</tr>
<tr>
<td align="left">mp4_max_buffer_size</td>
<td align="left">size</td>
<td align="left">512k</td>
<td align="left">Metadata 数据处理过程中的最大缓冲区大小</td>
</tr>
<tr>
<td align="left">mp4_limit_rate</td>
<td align="left">on 或 off 或 facto</td>
<td align="left">off</td>
<td align="left">限制客户单媒体流请求的最大速率。仅在 Nginx 商业版本中提供</td>
</tr>
<tr>
<td align="left">mp4_limit_rate_after</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">客户单媒体流请求的速率达到指定值时开始限速。仅在 Nginx 商业版本中提供</td>
</tr>
</tbody></table>
<p>F4F 格式仅在 Nginx 商业版本中提供。</p>
<h4 id="伪流媒体配置样例"><a href="#伪流媒体配置样例" class="headerlink" title="伪流媒体配置样例"></a>伪流媒体配置样例</h4><p>伪流媒体配置样例是利用 Nginx 的自动索引功能生成 XML 格式的目录列表，通过 XSLT 生成前端页面，使用 jQuery 插件 video.js 的 Flash 播放器播放 FLV 及 MP4 格式的流媒体文件。页面效果如下图所示。</p>
<p>Nginx 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8081;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web/files;</span><br><span class="line">    default_type text/xml;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">       autoindex on;                                    <span class="comment"># 启用自动页面功能</span></span><br><span class="line">       autoindex_localtime on;                          <span class="comment"># 使用Nginx服务器时间</span></span><br><span class="line">       autoindex_format xml;                            <span class="comment"># 自动页面输出格式为XML</span></span><br><span class="line">       xslt_stylesheet conf/conf.d/example/test.xslt;   <span class="comment"># 引入XSLT模板文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.flv$ &#123;</span><br><span class="line">        flv;                                            <span class="comment"># FLV文件启用伪流媒体支持</span></span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.mp4$ &#123;</span><br><span class="line">        mp4;                                            <span class="comment"># MP4文件启用伪流媒体支持</span></span><br><span class="line">        mp4_buffer_size       1m;                       <span class="comment"># MP4文件的缓冲区大小为1MB</span></span><br><span class="line">        mp4_max_buffer_size   5m;                       <span class="comment"># MP4文件最大缓冲区大小为5MB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件 <strong>test.xslt</strong> 内容如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/ 3.3.7/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/video.js/6.6.2/video-js.css&quot;</span> <span class="attr">ref</span>= <span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/video.js/6.6.2/video.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Nginx流媒体示例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件类型<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件大小<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>文件修改时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">&quot;list/*&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:sort</span> <span class="attr">select</span>=<span class="string">&quot;mtime&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;.&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;ext&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring($name,string-length($name)-2,3)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">&quot;string-length(@size) <span class="symbol">&amp;gt;</span> 0&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">&quot;number(@size) <span class="symbol">&amp;gt;</span> 0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">&quot;round(@size div 1024) <span class="symbol">&amp;lt;</span> 1&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;@size&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">&quot;round(@size div 1048576) <span class="symbol">&amp;lt;</span> 1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;format-number((@size div 1024), &#x27;0.0&#x27;)&quot;</span> /&gt;</span>K<span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">xsl:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;format-number((@size div 1048576), &#x27;0.00&#x27;)&quot;</span> /&gt;</span>M<span class="tag">&lt;/<span class="name">xsl:otherwise</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring(@mtime,1,4)&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>= <span class="string">&quot;substring(@mtime,6,2)&quot;</span>/&gt;</span>-<span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring(@mtime,9,2)&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">xsl:text</span>&gt;</span> <span class="tag">&lt;/<span class="name">xsl:text</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring(@mtime,12,2)&quot;</span>/&gt;</span>:<span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring(@mtime,15,2)&quot;</span>/&gt;</span>:<span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;substring(@mtime,18,2)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;$name&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;.&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">xsl:when</span>  <span class="attr">test</span>=<span class="string">&quot;$ext=&#x27;mp4&#x27; or $ext=&#x27;flv&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;example_video_1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-default-skin&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;true&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;none&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;264&quot;</span>  <span class="attr">poster</span>=<span class="string">&quot;http://vjs.zencdn.net/v/oceans.png&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&#123;$name&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">xsl:otherwise</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$ext&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">xsl:otherwise</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">xsl:otherwise</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$size&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$date&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTTP2模块配置简述"><a href="#HTTP2模块配置简述" class="headerlink" title="HTTP2模块配置简述"></a>HTTP2模块配置简述</h3><p>HTTP&#x2F;2 是 HTTP 协议的 2.0 版本，该协议通过多路复用、请求优化、HTTP 头压缩等功能提升网络传输速度、优化用户体验。</p>
<p>HTTP&#x2F;2 使用二进制分帧层将传输的数据分割为<strong>更小的数据和帧</strong>，并对它们进行二进制格式编码处理，以实现在不改变 HTTP 现有语义等标准的基础上提升传输性能，从而降低响应延迟、提高请求吞吐的能力。</p>
<p>HTTP&#x2F;2 通过多路复用技术使客户端可以并行发送多个请求，以提高带宽的利用率。</p>
<p>HTTP&#x2F;2 是基于 SPDY 协议设计的，是 SPDY 的演进版本，但其不强制使用 HTTPS 协议，仍可支持 HTTP 明文传输。Nginx 是通过</p>
<p>ngx_http_v2_module 实现 HTTP&#x2F;2 协议支持的，编译配置时可通过增加参数 –with-http_v2_module 启用 HTTP2 模块。</p>
<p>HTTP2 模块配置指令如下。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">http2_body_preread_size</td>
<td align="left">size</td>
<td align="left">64k</td>
<td align="left">设置每个请求可用缓冲区的大小，可用于保存请求体数据</td>
</tr>
<tr>
<td align="left">http2_chunk_size</td>
<td align="left">size</td>
<td align="left">8k</td>
<td align="left">设置响应体被分割成块的大小，该指令值设置得太小时将消耗服务器资源，太大时将因队列头部阻塞（Head-of-line Blocking，HOL）影响优先级</td>
</tr>
<tr>
<td align="left">http2_idle_timeout</td>
<td align="left">time</td>
<td align="left">3m</td>
<td align="left">设置关闭连接后非活动连接超时时间</td>
</tr>
<tr>
<td align="left">http2_max_concurrent_pushes</td>
<td align="left">number</td>
<td align="left">10</td>
<td align="left">设置连接中并发推送请求的最大数</td>
</tr>
<tr>
<td align="left">http2_max_concurrent_streams</td>
<td align="left">number</td>
<td align="left">128</td>
<td align="left">设置连接中并发 HTTP&#x2F;2 流的最大数</td>
</tr>
<tr>
<td align="left">http2_max_field_size</td>
<td align="left">size</td>
<td align="left">4k</td>
<td align="left">设置 HPACK 压缩请求头字段的最大大小，如果应用了 Huffman 编码，解压缩后的名称和值字符串的实际大小可能会更大</td>
</tr>
<tr>
<td align="left">http2_max_header_size</td>
<td align="left">size</td>
<td align="left">16k</td>
<td align="left">设置 HPACK 解压缩后整个请求头列表的最大大小</td>
</tr>
<tr>
<td align="left">http2_max_requests</td>
<td align="left">number</td>
<td align="left">1000</td>
<td align="left">设置一个连接多路复用最大请求数</td>
</tr>
<tr>
<td align="left">http2_push</td>
<td align="left">uri 或 off</td>
<td align="left">off</td>
<td align="left">设置服务端主动推送的资源 URI，指令值 uri 是推送资源的网站绝对路径</td>
</tr>
<tr>
<td align="left">http2_push_preload</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置当响应头中有 Link 字段时，是否自动向客户端推送 Link 字段中设置的网站资源</td>
</tr>
<tr>
<td align="left">http2_recv_buffer_size</td>
<td align="left">size</td>
<td align="left">256k</td>
<td align="left">设置 Nginx 每个工作进程接收缓冲区的大小</td>
</tr>
<tr>
<td align="left">http2_recv_timeout</td>
<td align="left">time</td>
<td align="left">30s</td>
<td align="left">设置等待客户端发送更多数据的超时时间，超过设定时间之后关闭连接</td>
</tr>
</tbody></table>
<p>关于上面的表格，有以下几点需要说明。</p>
<ul>
<li>http2_recv_buffer_size 指令可编写在 http 指令域中；</li>
<li>http2_chunk_size、http2_push、http2_push_preload 指令可编写在 http、server、location 指令域中；</li>
<li>其余的指令可编写在 http、server 指令域中。</li>
</ul>
<p>HTTP2 服务器推送可以实现将多个资源文件（CSS、JS、图片等）同时发送到客户端，如下页面中包含 style.css 和 nginx.png 两个资源文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Nginx HTTPv2 Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nginx HTTPv2 Test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;nignx.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在没有服务器推送的情况下，客户端通过 3 个 GET 方法获取该页面的所有资源。在启用服务器推送后客户端只需通过一个 GET 方法，就可以获取到该页面的所有资源。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;       <span class="comment"># 网站证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;   <span class="comment"># 网站证书密钥文件</span></span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;    <span class="comment"># 网站证书密钥密码文件</span></span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    location / &#123;</span><br><span class="line">        http2_push /style.css                       <span class="comment"># 服务端推送</span></span><br><span class="line">        http2_push /nginx.png                       <span class="comment"># 服务端推送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="WebDAV模块配置简述"><a href="#WebDAV模块配置简述" class="headerlink" title="WebDAV模块配置简述"></a>WebDAV模块配置简述</h3><p>WebDAV（Web-based Distributed Authoring and Versioning）是基于 HTTP&#x2F;1.1 的增强协议。</p>
<p>该协议使用户可以直接对 Web 服务器进行<strong>文件读写</strong>，并支持对文件的版本控制和写文件的加锁及解锁等操作。</p>
<p>Nginx 通过 ngx_http_dav_module 模块实现对 WebDAV 协议的支持，使用户通过 WebDAV 模块的配置指令实现文件的管理操作，该模块支持 WebDAV 协议的 <strong>PUT、DELETE、MKCOL、COPY</strong> 和<strong>MOVE</strong> 请求方法，在配置编译参数时，需要添加 <code>--with-http_dav_module</code> 参数启用该功能。</p>
<p>ngx_http_dav_module 模块的配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">create_full_put_path</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用创建目录支持，默认情况下，Put 方法只能在已存在的目录里创建文件</td>
</tr>
<tr>
<td align="left">dav_access</td>
<td align="left">users:permissions…</td>
<td align="left">user:rw</td>
<td align="left">设置创建的文件及目录的访问权限，如果定义了 group 或 all 权限，user 设置可省略</td>
</tr>
<tr>
<td align="left">dav_methods</td>
<td align="left">off 或  [PUT]、[DELETE]、[MKCOL]、[COPY]、[MOVE]</td>
<td align="left">off</td>
<td align="left">指定支持的 WebDAV 方法</td>
</tr>
<tr>
<td align="left">min_delete_depth</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">允许删除文件及目录的最小层级，小于该层级的文件及目录不允许删除</td>
</tr>
</tbody></table>
<p>上述指令都可编写在 http、server、location 指令域中。</p>
<p>Nginx 的自有模块对 WebDAV 协议的支持并不完整，可以通过第三方模块 nginx-dav-ext-module 增加文件特性查找和对写文件的加锁与解锁支持。nginx-dav-ext-module 模块的配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dav_ext_methods</td>
<td align="left">[PROPFIND]、[OPTIONS]、[LOCK]、[UNLOCK]</td>
<td align="left">–</td>
<td align="left">指定支持的 WebDAV 方法</td>
</tr>
<tr>
<td align="left">dav_ext_lock_zone</td>
<td align="left">zone&#x3D;NAME:SIZE[timeout&#x3D;TIMEOUT]</td>
<td align="left">–</td>
<td align="left">定义存储文件锁的共享内存区域及锁超时时间，默认锁超时时间是 1 分钟</td>
</tr>
<tr>
<td align="left">dav_ext_lock</td>
<td align="left">zone&#x3D;NAME</td>
<td align="left">–</td>
<td align="left">启用 WebDav 的锁操作支持</td>
</tr>
</tbody></table>
<p>关于上表，有以下几点需要说明。</p>
<ul>
<li>dav_ext_lock_zone 指令只能编写在 http 指令域中；</li>
<li>dav_methods 和 dav_ext_lock 指令可编写在 http、server、location 指令域中；</li>
<li>WebDAV 协议方法及方法说明如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法名称</th>
<th align="left">文件权限</th>
<th align="left">方法说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OPTIONS</td>
<td align="left">–</td>
<td align="left">支持 WebDAV 的检索服务方法</td>
</tr>
<tr>
<td align="left">GET</td>
<td align="left">读</td>
<td align="left">获取文件</td>
</tr>
<tr>
<td align="left">PUT、POST</td>
<td align="left">写</td>
<td align="left">上传文件</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">删除</td>
<td align="left">删除文件或集合</td>
</tr>
<tr>
<td align="left">COPY</td>
<td align="left">读、写</td>
<td align="left">复制文件</td>
</tr>
<tr>
<td align="left">MOVE</td>
<td align="left">删除、写</td>
<td align="left">移动文件</td>
</tr>
<tr>
<td align="left">MKCOL</td>
<td align="left">写</td>
<td align="left">创建由一个或多个文件 URI 组成的新集合</td>
</tr>
<tr>
<td align="left">PROPFIND</td>
<td align="left">读</td>
<td align="left">获取一个或多个文件的特性（创建日期、文件作者等），实现文件的查找与管理</td>
</tr>
<tr>
<td align="left">LOCK、UNLOCK</td>
<td align="left">写</td>
<td align="left">添加、删除文件锁，实现写操作保护</td>
</tr>
</tbody></table>
<p>进行 WebDAV 协议的 MOVE&#x2F;COPY 操作时，会通过 HTTP 请求头属性字段 Destination 指定目标路径，如果客户端请求头中没有字段 Destination，Nginx 会直接报错。为增加服务端兼容性，可以通过第三方模块 headers-more-nginx-module 的 more_set_input_headers 指令在 MOVE&#x2F;COPY 操作的 HTTP 请求头中强制添加 Destination 字段。</p>
<p>WebDAV 协议服务配置过程如下所示。</p>
<p><strong>模块编译</strong></p>
<p>模块编译配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译模块</span></span><br><span class="line">$ ./configure --with-http_dav_module --add-module=../nginx-dav-ext-module --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>

<p><strong>设置文件夹权限</strong></p>
<p>文件夹权限配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R nobody:nobody /opt/nginx-web/davfile</span><br><span class="line"><span class="built_in">chmod</span> -R 700 /opt/nginx-web/davfile</span><br></pre></td></tr></table></figure>

<p><strong>设置登录账号及密码</strong></p>
<p>登录账号及密码配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;admin:<span class="subst">$(openssl passwd 123456)</span>&quot;</span> &gt;/etc/nginx/conf/.davpasswd</span><br></pre></td></tr></table></figure>

<p><strong>Nginx</strong> 配置</p>
<p>Nginx 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dav_ext_lock_zone zone=davlock:10m;                   <span class="comment"># DAV文件锁内存共享区</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;                             <span class="comment"># 启用HTTPS及HTTP/2提升传输性能</span></span><br><span class="line">    server_name  dav.nginxbar.org;</span><br><span class="line">    access_log  logs/webdav.access.log  main;</span><br><span class="line">    root    /opt/nginx-web/davfile;</span><br><span class="line">   </span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;         <span class="comment"># 网站证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;     <span class="comment"># 网站证书密钥文件</span></span><br><span class="line">    ssl_password_file ssl/www_nginxbar_org.pass;      <span class="comment"># 网站证书密钥密码文件</span></span><br><span class="line">    ssl_session_cache shared:SSL:10m;                 <span class="comment"># 会话缓存存储大小为10MB</span></span><br><span class="line">    ssl_session_timeout  20m;                         <span class="comment"># 会话缓存超时时间为20分钟</span></span><br><span class="line"></span><br><span class="line">    client_max_body_size 20G;                         <span class="comment"># 最大允许上传的文件大小</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$dest</span> <span class="variable">$http_destination</span>;</span><br><span class="line">        <span class="keyword">if</span> (-d <span class="variable">$request_filename</span>) &#123;                   <span class="comment"># 对目录请求、对URI自动添加&quot;/&quot;</span></span><br><span class="line">            rewrite ^(.*[^/])$ <span class="variable">$1</span>/;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$dest</span> <span class="variable">$dest</span>/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span> ~ (MOVE|COPY)) &#123; <span class="comment"># 对MOVE|COPY方法强制添加Destination请求头</span></span><br><span class="line">            more_set_input_headers <span class="string">&#x27;Destination: $dest&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span> ~ MKCOL) &#123;</span><br><span class="line">            rewrite ^(.*[^/])$ <span class="variable">$1</span>/ <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dav_methods PUT DELETE MKCOL COPY MOVE;      <span class="comment"># DAV支持的请求方法</span></span><br><span class="line">        dav_ext_methods PROPFIND OPTIONS LOCK UNLOCK;# DAV扩展支持的请求方法</span><br><span class="line">        dav_ext_lock zone=davlock;                   <span class="comment"># DAV扩展锁绑定的内存区域</span></span><br><span class="line">        create_full_put_path  on;                    <span class="comment"># 启用创建目录支持</span></span><br><span class="line">        dav_access user:rw group:r all:r;            <span class="comment"># 设置创建的文件及目录的访问权限</span></span><br><span class="line"></span><br><span class="line">        auth_basic <span class="string">&quot;Authorized Users WebDAV&quot;</span>;</span><br><span class="line">        auth_basic_user_file /etc/nginx/conf/.davpasswd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="HTTP代理服务器"><a href="#HTTP代理服务器" class="headerlink" title="HTTP代理服务器"></a><font color="red">HTTP代理服务器</font></h3><p>代理功能根据应用方式的不同可以分为正向代理和反向代理。</p>
<ul>
<li><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h4><p>客户端设置代理地址后，以代理服务器的 IP 作为源 IP 访问互联网应用服务的代理方式；</p>
</li>
<li><p><strong>反向代理</strong></p>
<p>客户端直接访问<strong>代理服务器</strong>，代理服务器再根据客户端请求的主机名、端口号及 URI 路径等条件判断后，将客户端请求转发到应用服务器获取响应数据的代理方式。</p>
</li>
</ul>
<h4 id="模块指令"><a href="#模块指令" class="headerlink" title="模块指令"></a>模块指令</h4><p>Nginx 的 HTTP 代理功能是通过 ngx_http_proxy_module 模块实现的，该模块会被默认构建，无须特殊配置编译参数。配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">proxy_bind</td>
<td align="left">address[transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口与被代理服务器建立连接，指令值可以是变量。指令值参数为 transparent 时，允许将客户端的真实 IP 透传给被代理服务器，并将客户端的真实 IP 设置为访问被代理服务器的源 IP；指令值参数为 off 时，取消上一层指令域同名指令的配置</td>
</tr>
<tr>
<td align="left">proxy_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否启用响应数据缓冲区</td>
</tr>
<tr>
<td align="left">proxy_buffers</td>
<td align="left">number size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置每个连接从被代理服务器接收响应数据的缓冲区数量及单个缓冲区的大小。默认单个缓冲区的大小与操作系统的单个内存页（Page Size）的大小相等。缓冲区至少有 2 个</td>
</tr>
<tr>
<td align="left">proxy_buffer_size</td>
<td align="left">size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置用于读取被代理服务器响应数据第一部分的缓冲区大小，默认值等于操作系统的单个内存页的大小</td>
</tr>
<tr>
<td align="left">proxy_busy_buffers_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">当每个连接从被代理服务器接收响应数据时，限制 proxy_buffers 设置的缓冲区中可用于向客户端发送响应数据的缓冲区大小，以使其余的缓冲区用于从被代理服务器接收响应数据。该值必须大于单个缓冲区或 proxy_buffer_size 的大小，小于总缓冲区减掉一个缓冲区的大小。默认值为单个缓冲区大小的 2 倍</td>
</tr>
<tr>
<td align="left">proxy_limit_rate</td>
<td align="left">rate</td>
<td align="left">0</td>
<td align="left">限制从被代理服务器读取响应的每个请求的流量速度，单位是字节&#x2F;秒，指令值为”0”时表示不限制。该指令只有在 proxy_buffering 启用时才有效</td>
</tr>
<tr>
<td align="left">proxy_max_temp_file_size</td>
<td align="left">size</td>
<td align="left">1024m</td>
<td align="left">当响应数据超出响应数据缓冲区的大小时，超出部分数据将存储到临时文件中。该指令设置临时文件的最大值，指令值为”0”时，关闭存储临时文件的功能。该值必须大于单个缓冲区或 proxy_buffer_size 的大小</td>
</tr>
<tr>
<td align="left">proxy_temp_file_write_size</td>
<td align="left">size</td>
<td align="left">8k 或 16k</td>
<td align="left">限制一次写入临时文件的数据大小，默认值为 2 个缓冲区的大小。在默认配置下，缓冲区大小由 proxy_buffer_size 和 proxy_buffers 指令配置限制，最大值是 proxy_max_temp_file_size 指令的值</td>
</tr>
<tr>
<td align="left">proxy_temp_path</td>
<td align="left">path [level1 [level2 [level3]]]</td>
<td align="left">proxy_temp</td>
<td align="left">设置临时文件存储目录</td>
</tr>
<tr>
<td align="left">proxy_request_buffering</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将请求转发给被代理服务器之前，先从客户端读取整个请求体。若禁用该功能，Nginx 接收到请求体时会立即转发给被代理服务器，已经发送请求体的请求，将无法使用 proxy_next_upstream 指令功能。对于基于 HTTP&#x2F;1.1 协议的分块传输请求，会强制读取完整请求体</td>
</tr>
<tr>
<td align="left">proxy_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">设置连接被代理服务器的协议、IP 地址或套接字，也可以是域名或 upstream 定义的服务器组</td>
</tr>
<tr>
<td align="left">proxy_method</td>
<td align="left">method</td>
<td align="left">–</td>
<td align="left">将当前客户端的请求方法改为指令值设定的请求方法，并向被代理服务器发送请求</td>
</tr>
<tr>
<td align="left">proxy_pass_request_body</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求体传递给被代理服务器</td>
</tr>
<tr>
<td align="left">proxy_pass_request_headers</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">设置是否将客户端请求头传递给被代理服务器</td>
</tr>
<tr>
<td align="left">proxy_set_header</td>
<td align="left">field value</td>
<td align="left">–</td>
<td align="left">在转发给被代理服务器前，修改或添加客户端的请求头属性字段</td>
</tr>
<tr>
<td align="left">proxy_set_body</td>
<td align="left">value</td>
<td align="left">–</td>
<td align="left">修改客户端的请求体为指令值指定的内容，指令值可以是文本、变量及其组合</td>
</tr>
<tr>
<td align="left">proxy_redirect</td>
<td align="left">default 或 off 或 redirect replacement</td>
<td align="left">default</td>
<td align="left">替换被代理服务器返回的响应头中属性字段 location 或 Refresh 的值，并返回给客户端。指令值为 default 时，使用 proxy_pass 指令值的内容进行替换</td>
</tr>
<tr>
<td align="left">proxy_cookie_domain</td>
<td align="left">off 或 domain replacement</td>
<td align="left">off</td>
<td align="left">修改被代理服务器返回的响应头属性字段 Set-Cookie 中 domain 的内容，支持正则及变量</td>
</tr>
<tr>
<td align="left">proxy_cookie_path</td>
<td align="left">off 或 path replacement</td>
<td align="left">off</td>
<td align="left">修改被代理服务器返回的响应头属性字段 Set-Cookie 中 path 的内容，支持正则及变量</td>
</tr>
<tr>
<td align="left">proxy_force_ranges</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">无论被代理服务器的 HTTP 响应头中是否有属性字段 Accept-Ranges，都启用 byte-range 请求支持</td>
</tr>
<tr>
<td align="left">proxy_hide_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">指定被代理服务器响应数据中不向客户端传递的 HTTP 头字段名称</td>
</tr>
<tr>
<td align="left">proxy_pass_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">默认配置下 Nginx 不会将头属性字段 Status 和 X-Accel-… 传递给客户端，可通过该指令开放传递</td>
</tr>
<tr>
<td align="left">proxy_headers_hash_bucket_size</td>
<td align="left">size</td>
<td align="left">64</td>
<td align="left">设置指令 proxy_set_header 及 proxy_hide_header 使用哈希表的桶的大小</td>
</tr>
<tr>
<td align="left">proxy_headers_hash_max_size</td>
<td align="left">size</td>
<td align="left">512</td>
<td align="left">设置指令 proxy_set_header 及 proxy_hide_header 使用哈希表的大小</td>
</tr>
<tr>
<td align="left">proxy_ignore_headers</td>
<td align="left">field…</td>
<td align="left">–</td>
<td align="left">设置 Nginx 对被代理服务器响应头包含指定字段时，不执行响应操作。如 Expires 和 Cache-Control</td>
</tr>
<tr>
<td align="left">proxy_send_lowat</td>
<td align="left">size</td>
<td align="left">0</td>
<td align="left">设置 FreeBSD 系统中，使用 kqueue 驱动时 socket 接口 SO_SNDLOWAT 选项的大小。在 Linux、Solaris 及 Windows 平台，该指令无效</td>
</tr>
<tr>
<td align="left">proxy_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">Nginx 与被代理服务器建立连接的超时时间，通常不应该超过 75s，与请求是否返回响应无关</td>
</tr>
<tr>
<td align="left">proxy_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从被代理服务器接收数据的读操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">proxy_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到被代理服务器的操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">proxy_ignore_client_abort</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置当客户端未接收响应就关闭连接时，是否关闭 Nginx 与被代理服务器的连接。默认配置下，Nginx 会记录日志响应码 499，并关闭连接</td>
</tr>
<tr>
<td align="left">proxy_http_version</td>
<td align="left">1.0</td>
<td align="left">1.0 或 1.1</td>
<td align="left">设置用于代理的 HTTP 协议版本，若使用 keepalive 或 NTLM 认证，建议指令值设置为 1.1</td>
</tr>
<tr>
<td align="left">proxy_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置 Nginx 与被代理服务器的 TCP keepalive 行为的心跳检测机制，默认使用操作系统的 socket 配置。若指令值为 on，则开启 SO_KEEPALIVE 选项进行心跳检测</td>
</tr>
<tr>
<td align="left">proxy_intercept_errors</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">当指令值为 on 时，将拦截被代理服务器响应码大于或等于 300 的结果，error_page 指令可对该结果做后续处理；当指令值为 off 时，直接返回给客户端</td>
</tr>
<tr>
<td align="left">proxy_next_upstream</td>
<td align="left">error、timeout、 invalid_header、 http_500、http_502、 http_503、http_504、 http_403、http_404、 http_429、 non_idempotent、 off…</td>
<td align="left">enror timeout</td>
<td align="left">当出现指令值中指定的条件时，将未返回响应的客户端请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">proxy_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端请求传递给 upstream 中下一个服务器的超时时间。”0”为不做超时限制，此时须遍历完所有上游服务器组中的服务器</td>
</tr>
<tr>
<td align="left">proxy_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端请求传递给 upstream 中下一个服务器的尝试次数，包括第一次失败次数。”0”为不做尝试次数限制，此时须遍历完所有上游服务器组中的服务器</td>
</tr>
<tr>
<td align="left">proxy_ssl_protocols</td>
<td align="left">[SSLv2]、[SSLv3]、 [TLSv1]、[TLSv1.1] 、[TLSv1.2]、[TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">指定可用于 Nginx 与被代理服务器建立 SSL 连接的 SSL 协议版本</td>
</tr>
<tr>
<td align="left">proxy_ssl_server_name</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">在与被代理服务器建立 HTTPS 连接时，设置是否启用通过 SNI 或 RFC 6066 传递主机名</td>
</tr>
<tr>
<td align="left">proxy_ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">DEFAULT</td>
<td align="left">设置与被代理服务器建立 SSL 连接时用于协商使用的加密算法组合，又称密码套件，指令值内容为 openssl 的密码套件名称，多个套件名称由”:”分隔</td>
</tr>
<tr>
<td align="left">proxy_ssl_session_reuse</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">决定是否启用与被代理服务器 HTTPS 连接的 SSL 会话重用功能</td>
</tr>
<tr>
<td align="left">proxy_ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">存放被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件的密码文件，一个密码一行。有多个密码时，Nginx 会依次尝试</td>
</tr>
<tr>
<td align="left">proxy_ssl_verify</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否启用对被代理服务器的 SSL 证书验证功能</td>
</tr>
<tr>
<td align="left">proxy_ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">证书吊销列表文件，用以验证被代理服务器 SSL 证书有效性的 PEM 格式文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式 CA 证书（根或中间证书）文件，该证书用作被代理服务器的证书链验证</td>
</tr>
<tr>
<td align="left">proxy_ssl_name</td>
<td align="left">name</td>
<td align="left">$proxy_host</td>
<td align="left">指定对被代理服务器 SSL 证书验证的主机名</td>
</tr>
<tr>
<td align="left">proxy_ssl_verify_depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置对被代理服务器 SSL 证书链的验证深度</td>
</tr>
</tbody></table>
<p>关于上表，有以下几点需要说明。</p>
<ul>
<li>在 ngx_http_proxy_module 模块指令列表中，除 proxy_pass 指令以外，其余指令使用的指令域范围都是 http、server 或 location；</li>
<li>缓冲区的大小默认为操作系统中单个内存页的大小，在 CentOS 下可通过如下命令查询:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getconf PAGE_SIZE</span><br></pre></td></tr></table></figure>

<ul>
<li>proxy_next_upstream 指令值中，当 non_idempotent 参数启用时，请求方法 POST、LOCK、PATCH 在出现错误时，也可以向下一个服务器重复提交。</li>
</ul>
<h4 id="正向代理-1"><a href="#正向代理-1" class="headerlink" title="正向代理"></a>正向代理</h4><p>正向代理是客户端设置代理地址后，通过将代理服务器的 IP 作为源 IP 访问互联网应用服务的代理方式。通过对正向代理访问设置，可以实现限制客户端的访问行为、下载速度、访问记录统计、隐藏客户端信息等目的。实现原理如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z41A3095G.gif" alt="正向代理"></p>
<p><strong>HTTP 的正向代理</strong></p>
<p>Nginx 的 proxy 模块可以实现基础的 HTTP 代理功能。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">map <span class="variable">$host</span> <span class="variable">$deny</span> &#123;</span><br><span class="line">     hostnames;</span><br><span class="line">     default 0;</span><br><span class="line">     www.google.com 1;                             <span class="comment"># 禁止访问www.google.com</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    resolver 114.114.114.114;</span><br><span class="line">    resolver_timeout 30s;</span><br><span class="line">    access_log logs/proxy_access.log;              <span class="comment"># 记录访问日志</span></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$deny</span> ) &#123;</span><br><span class="line">            <span class="built_in">return</span> 403;                            <span class="comment"># 被禁止访问的网址返回403错误</span></span><br><span class="line">        &#125;</span><br><span class="line">        proxy_limit_rate    102400;                <span class="comment"># 限制客户端的下载速率是100KB/s</span></span><br><span class="line">        proxy_buffering on ;                       <span class="comment"># 启用代理缓冲</span></span><br><span class="line">        proxy_buffers   8 8k;                      <span class="comment"># 代理缓冲区大小为64KB</span></span><br><span class="line">        proxy_buffer_size   8k;                    <span class="comment"># 响应数据第一部分的缓冲区大小为8KB</span></span><br><span class="line">        proxy_busy_buffers_size 16k;               <span class="comment"># 向客户端发送响应的缓冲区大小16KB</span></span><br><span class="line">        proxy_temp_file_write_size  16k;           <span class="comment"># 一次写入临时文件的数据大小为16KB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置所有代理客户端的agent</span></span><br><span class="line">        proxy_set_header User-Agent <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_connect_timeout   70s;               <span class="comment"># 代理连接超时时间</span></span><br><span class="line">        proxy_http_version  1.1;                   <span class="comment"># 代理协议为http/1.1</span></span><br><span class="line">        proxy_pass <span class="variable">$scheme</span>://$http_host<span class="variable">$request_uri</span>; <span class="comment"># 代理到远端服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HTTPS 的正向代理</strong></p>
<p>Nginx 默认不支持 HTTP 的 CONNECT 方法，所以无法实现 HTTPS 的正向代理的功能，若要实现 Nginx 的 HTTPS 的正向代理功能，需要添加一个第三方模块 ngx_http_proxy_connect_module，实现 HTTPS 的正向代理支持。对于该模块，官网提示可支持到 Nginx 1.15.8 版本，但实测 Nginx 的 1.17.0 版本也可以编译通过。模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">proxy_connect</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">启用 HTTP 的 CONNECT 方法支持</td>
</tr>
<tr>
<td align="left">proxy_connect_allow</td>
<td align="left">all 或端口或端口范围</td>
<td align="left">443 563</td>
<td align="left">设置允许 CONNECT 方法的访问端口</td>
</tr>
<tr>
<td align="left">proxy_connect_timeout</td>
<td align="left">time</td>
<td align="left">–</td>
<td align="left">设置与被代理服务器建立连接的超时时间</td>
</tr>
<tr>
<td align="left">proxy_connect_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从被代理服务器接收数据的操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">proxy_connect_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到被代理服务器的操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">proxy_connect_address</td>
<td align="left">address 或 off</td>
<td align="left">none</td>
<td align="left">设置代理服务器的 IP 地址，指令值可以是变量。指令值 off 等于 none</td>
</tr>
<tr>
<td align="left">proxy_connect_bind</td>
<td align="left">address[tran-sparent] 或 off</td>
<td align="left">none</td>
<td align="left">设置从指定的本地 IP 地址及端口号与被代理服务器建立连接，指令值不能是变量。transparent 参数启用时，将会允许以非 Nginx 的客户端 IP 为源 IP 访问被代理服务器。指令值 off 等于 none</td>
</tr>
</tbody></table>
<p>proxy_connect 模块指令使用的指令域范围为 server。模块编译如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install patch</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/chobits/ngx_http_proxy_connect_module.git</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">patch -p1 &lt; ../ngx_http_proxy_connect_module/patch/proxy_connect_rewrite_101504.patch</span><br><span class="line">./configure --add-module=../ngx_http_proxy_connect_module</span><br></pre></td></tr></table></figure>

<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    resolver 114.114.114.114;</span><br><span class="line">    resolver_timeout 30s;</span><br><span class="line">    access_log logs/proxy_access.log             <span class="comment"># 记录访问日志</span></span><br><span class="line"></span><br><span class="line">    proxy_connect;                               <span class="comment"># 启用HTTP的CONNECT方法支持</span></span><br><span class="line">    proxy_connect_allow            all;          <span class="comment"># 允许所有端口</span></span><br><span class="line">    proxy_connect_connect_timeout  60s;          <span class="comment"># 与互联网网站建立连接的超时时间</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_buffering on ;                     <span class="comment"># 启用代理缓冲</span></span><br><span class="line">        proxy_buffers   8 8k;                    <span class="comment"># 代理缓冲区的大小为64KB</span></span><br><span class="line">        proxy_buffer_size   8k;                  <span class="comment"># 响应数据第一部分的缓冲区的大小为8KB</span></span><br><span class="line">        proxy_busy_buffers_size 16k;             <span class="comment"># 向客户端发送响应的缓冲区的大小16KB</span></span><br><span class="line">        proxy_limit_rate    102400;              <span class="comment"># 限制客户端的下载速率是100KB/s</span></span><br><span class="line">        proxy_temp_file_write_size  16k;         <span class="comment"># 一次写入临时文件的数据大小为16KB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置所有代理客户端的agent</span></span><br><span class="line">        proxy_set_header    User-Agent <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_connect_timeout   70s;             <span class="comment"># 代理连接</span></span><br><span class="line">        proxy_http_version  1.1;                 <span class="comment"># 代理协议为http/1.1</span></span><br><span class="line">        proxy_pass <span class="variable">$scheme</span>://$http_host<span class="variable">$request_uri</span>;# 代理到远端服务器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 本地测试</span></span><br><span class="line">curl -x 127.0.0.1:8080  https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>各浏览器可以通过代理功能配置使用 Nginx 代理服务器访问互联网服务器。</p>
<h4 id="HTTP-的反向代理"><a href="#HTTP-的反向代理" class="headerlink" title="HTTP 的反向代理"></a>HTTP 的反向代理</h4><p>反向代理是用户客户端访问代理服务器后，被反向代理服务器软件按照一定的规则从一个或多个被代理服务器中获取响应资源并返回给客户端的代理模式，客户端只知道代理服务器的 IP，并不知道后端服务器的 IP，原因是代理服务器隐藏了被代理服务器的信息。</p>
<p>因为编写 Nginx 的反向代理配置时，被代理服务器通常会被编写在 upstream 指令域中，所以被代理服务器也被称为上游服务器。实现原理如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z41A624934.gif" alt="反向代理"></p>
<p>为方便反向代理的配置，此处把通用的代理配置写在 proxy.conf 文件中。在使用时，通过主配置文件 nginx.conf 用 include 指令引入。文件 proxy.conf 的内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;proxy.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">proxy_buffering on;           # 启用响应数据缓冲区</span></span><br><span class="line"><span class="string">proxy_buffers 8 8k;           # 设置每个HTTP请求读取上游服务器响应数据缓冲区的大小为64KB</span></span><br><span class="line"><span class="string">proxy_buffer_size 8k;         # 设置每个HTTP请求读取响应数据第一部分缓冲区的大小为8KB</span></span><br><span class="line"><span class="string">proxy_busy_buffers_size 16k;  # 接收上游服务器返回响应数据时，同时用于向客户端发送响应的缓</span></span><br><span class="line"><span class="string">                              # 冲区的大小为16KB</span></span><br><span class="line"><span class="string">proxy_limit_rate 0;           # 不限制每个HTTP请求每秒读取上游服务器响应数据的流量</span></span><br><span class="line"><span class="string">proxy_request_buffering on;   # 启用客户端HTTP请求读取缓冲区功能</span></span><br><span class="line"><span class="string">proxy_http_version 1.1;       # 使用HTTP 1.1版本协议与上游服务器建立通信</span></span><br><span class="line"><span class="string">proxy_connect_timeout 5s;     # 设置与上游服务器建立连接的超时时间为5s</span></span><br><span class="line"><span class="string">proxy_intercept_errors on;    # 拦截上游服务器中响应码大于300的响应处理</span></span><br><span class="line"><span class="string">proxy_read_timeout 60s;       # 从上游服务器获取响应数据的间隔超时时间为60s</span></span><br><span class="line"><span class="string">60sproxy_send_timeout 60s;    # 向上游服务器发送请求的间隔超时时间为60s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段Host为客户端请求头头字段Host的值</span></span><br><span class="line"><span class="string">proxy_set_header   Host              $host:$server_port;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段Referer为客户端请求头头字段的值Host</span></span><br><span class="line"><span class="string">proxy_set_header   Referer           $http_referer;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段Cookie为客户端请求头头字段的值Host</span></span><br><span class="line"><span class="string">proxy_set_header   Cookie            $http_cookie;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段X-Real-IP为客户端的IP</span></span><br><span class="line"><span class="string">proxy_set_header   X-Real-IP         $remote_addr;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段X-Forwarded-For为客户端请求头的X-Forwarded-For的</span></span><br><span class="line"><span class="string"># 值，如果没有该字段，则等于$remote_addr</span></span><br><span class="line"><span class="string">proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置发送给上游服务器的头属性字段X-Forwarded-Proto为请求协议的值</span></span><br><span class="line"><span class="string">proxy_set_header   X-Forwarded-Proto $scheme;  </span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>在 nginx.conf 的 http 指令域中引入该文件，配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    include proxy.conf</span><br><span class="line">    include conf.d/*.conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 的指令支持在指令域中对上级指令域指令的继承和修改，若对 proxy.conf 有特殊配置需求的，可在对应的 server 指令域中添加同名指令。</p>
<p>反向代理的配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    access_log  logs/proxy.access.log  main;</span><br><span class="line">   </span><br><span class="line">    tcp_nodelay off;                 <span class="comment"># 因启用缓冲区功能，所以关闭立刻发送功能</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/ &#123;</span><br><span class="line">        proxy_force_ranges on;       <span class="comment"># 强制启用字节范围请求支持</span></span><br><span class="line">        proxy_pass   http://192.168.2.145:8082;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HTTPS-的反向代理"><a href="#HTTPS-的反向代理" class="headerlink" title="HTTPS 的反向代理"></a>HTTPS 的反向代理</h4><p>HTTPS 通过加密通道保护客户端与服务端之间的数据传输，已成为当前网站部署的必选配置。在部署有 Nginx 代理集群的 HTTPS 站点，通常会把 SSL 证书部署在 Nginx 的服务器上，然后把请求代理到后端的上游服务器。这种部署方式由 Nginx 服务器负责 SSL 请求的运算，相对减轻了后端上游服务器的 CPU 运算量，这种方式也被称为 SSL 终止（SSL Termination）。</p>
<p>因 Nginx 启用了对 TSL SNI（Server Name Identification）技术的支持，所以在同一服务器上可以安装多个绑定不同域名的 SSL 证书，使其可以在 Nginx 服务器上统一部署，同时也极大地方便了证书的管理和维护。</p>
<p>由 Nginx 服务器实现 SSL 终止的 HTTPS 的反向代理的常见方式有两种，一种是由 Nginx 通过 HTTP 方式与被代理服务器建立连接；另一种是由 Nginx 通过 HTTPS 方式与被代理服务器建立连接。由 Nginx 通过 HTTP 方式与被代理服务器建立连接的部署方式为客户端 → Nginx 服务器（HTTPS）→ 上游服务器（HTTP），配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    access_log  logs/sslproxy.access.log  main;</span><br><span class="line">   </span><br><span class="line">    tcp_nodelay off;                              <span class="comment"># 因启用缓冲区功能，所以关闭立刻发送功能</span></span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;     <span class="comment"># 网站证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key; <span class="comment"># 网站证书密钥文件</span></span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;               <span class="comment"># 会话缓存的存储大小为10MB</span></span><br><span class="line">    ssl_session_timeout  10m;                       <span class="comment"># 会话缓存的超时时间为10分钟</span></span><br><span class="line">    ssl_session_tickets on;                         <span class="comment"># 设置会话凭证为会话缓存机制</span></span><br><span class="line">    ssl_session_ticket_key  ssl/session_ticket.key; <span class="comment"># 设置会话凭证密钥文件</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/ &#123;</span><br><span class="line">        proxy_pass   http://192.168.2.145:8082;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照上面的配置，Nginx 服务器与后端的上游服务器之间仍然采用的是 HTTP 透明传输，虽然可以与上游服务器部署在同一内网，但数据传输仍是不安全的。为了提高传输安全性，建议在上游服务器也开启 HTTPS 协议，实现全链路的安全数据传输。由 Nginx 通过 HTTPS 方式与被代理服务器建立连接的配置样例场景如下。</p>
<p>在配置样例的场景中有两个 HTTPS 节点，为方便举例说明配置指令的功能及配置指令中所用的 SSL 证书的区别，共设计了 3 个 SSL 证书并通过自签证书的方式进行签发，部署方式如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z41AK02T.gif" alt="HTTPS代理"></p>
<p><code>www.nginxbar.org (http://www.nginxbar.org)</code> 证书为对外网站的域名证书，用于给用户提供身份验证。</p>
<p><code>backend.nginxbar.org (htp://backend.nginxbar.org)</code> 证书为被代理服务器的域名证书，用于给 Nginx 服务器提供身份验证。</p>
<p><code>proxy.nginxbar.com (http://proxy.nginxbar.com)</code> 证书为 Nginx 服务器的域名证书，用于给被代理服务器提供身份验证。</p>
<p>自签证书命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成自建根域nginxbar.org证书</span></span><br><span class="line">openssl req -new -x509 -out /etc/nginx/conf/ssl/root.pem -keyout</span><br><span class="line">/etc/nginx/conf/ssl/root.key -days 3650 -subj</span><br><span class="line"><span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.org/emailAddress= admin@nginxbar.org&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名www.nginxbar.org生成请求文件，面向用户端的域名请求文件</span></span><br><span class="line">openssl req -out /etc/nginx/conf/ssl/www_nginxbar_org.csr -new -sha256</span><br><span class="line">-newkey rsa:2048 -nodes -keyout /etc/nginx/conf/ssl/www_nginxbar_org.key</span><br><span class="line">-subj</span><br><span class="line"><span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=www/CN=www.nginxbar.org/emailAddress= www@nginxbar.org&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颁发自签域名www.nginxbar.org证书，面向用户端的域名证书</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> /etc/nginx/conf/ssl/www_nginxbar_org.csr -out</span><br><span class="line">/etc/nginx/conf/ssl/www_nginxbar_org.pem -CA /etc/nginx/conf/ssl/root.pem</span><br><span class="line">-CAkey /etc/nginx/conf/ssl/root.key  -CAcreateserial -days 3650</span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名backend.nginxbar.org生成请求文件，后端上游服务器的SSL请求文件</span></span><br><span class="line">openssl req -out /etc/nginx/conf/ssl/backend_nginxbar_org.csr -new -sha256</span><br><span class="line">-newkey rsa:2048 -nodes -keyout</span><br><span class="line">/etc/nginx/conf/ssl/backend_nginxbar_org.key -subj</span><br><span class="line"><span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=backend/CN=backend.nginxbar.org/emailAddress=backend@nginxbar.org&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颁发自签域名backend.nginxbar.org证书，后端上游服务器的SSL证书</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> /etc/nginx/conf/ssl/backend_nginxbar_org.csr -out</span><br><span class="line">/etc/nginx/conf/ssl/backend_nginxbar_org.pem -CA</span><br><span class="line">/etc/nginx/conf/ssl/root.pem -CAkey /etc/nginx/conf/ssl/root.key</span><br><span class="line">-CAcreateserial -days 3650</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自建根域nginxbar.com证书，该域名仅为方便区分代理端和后端证书使用，实际使用时可以使用一个根证书</span></span><br><span class="line">openssl req -new -x509 -out /etc/nginx/conf/ssl/proxy_root.pem -keyout</span><br><span class="line">/etc/nginx/conf/ssl/proxy_root.key -days 3650 -subj</span><br><span class="line"><span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=admin/CN=nginxbar.com/emailAddress= admin@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名proxy.nginxbar.com生成请求文件，Nginx服务器的SSL代理请求文件</span></span><br><span class="line">openssl req -out /etc/nginx/conf/ssl/proxy_nginxbar_com.csr -new -sha256</span><br><span class="line">-newkey rsa:2048 -nodes -keyout /etc/nginx/conf/ssl/proxy_nginxbar_com.key</span><br><span class="line">-subj <span class="string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=nginxbar/OU=proxy/CN=proxy.nginxbar.com</span></span><br><span class="line"><span class="string">/emailAddress=proxy@nginxbar.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颁发自签域名proxy.nginxbar.com证书，Nginx服务器的SSL代理证书</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> /etc/nginx/conf/ssl/proxy_nginxbar_com.csr -out</span><br><span class="line">/etc/nginx/conf/ssl/proxy_nginxbar_com.pem -CA</span><br><span class="line">/etc/nginx/conf/ssl/proxy_root.pem -CAkey</span><br><span class="line">/etc/nginx/conf/ssl/proxy_root.key  -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure>

<p>Nginx 代理服务器的配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resolver 114.114.114.114 valid=300s;              <span class="comment"># DNS服务器地址</span></span><br><span class="line">resolver_timeout 5s;                              <span class="comment"># DNS解析的超时时间为5s</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      443 ssl;</span><br><span class="line">    server_name www.nginxbar.org;</span><br><span class="line">    access_log  logs/sslproxy2_access.<span class="built_in">log</span>  main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;     <span class="comment"># 网站www.nginxbar.org证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key; <span class="comment"># 网站www.nginxbar.org证书密钥文件</span></span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;             <span class="comment"># 会话缓存的存储大小为10MB</span></span><br><span class="line">    ssl_session_timeout  10m;                     <span class="comment"># 会话缓存的超时时间为10分钟</span></span><br><span class="line">    ssl_session_tickets on;                       <span class="comment"># 设置会话凭证为会话缓存机制</span></span><br><span class="line">    ssl_session_ticket_key  ssl/session_ticket.key;  <span class="comment"># 设置会话凭证密钥文件</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass                    https://backend.nginxbar.org; <span class="comment"># 被代理服务器的地址</span></span><br><span class="line">        proxy_ssl_certificate         ssl/proxy_nginxbar_com.pem;   <span class="comment"># 代理服务器的客户端证书</span></span><br><span class="line">                                                                    <span class="comment"># 文件</span></span><br><span class="line">        proxy_ssl_certificate_key     ssl/proxy_nginxbar_com.key;   <span class="comment"># 代理服务器的客户端证书</span></span><br><span class="line">                                                                    <span class="comment"># 密钥文件</span></span><br><span class="line">        proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        proxy_ssl_ciphers             HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">        proxy_ssl_verify        on;                  <span class="comment"># 启用验证被代理服务器的证书</span></span><br><span class="line">        proxy_ssl_trusted_certificate ssl/root.pem;  <span class="comment"># 用于验证被代理服务器的主机名backend.</span></span><br><span class="line">                                                     <span class="comment"># nginxbar.org的根证书</span></span><br><span class="line">        proxy_ssl_verify_depth  2;                   <span class="comment"># 证书验证深度为2</span></span><br><span class="line">        proxy_ssl_session_reuse on;                  <span class="comment"># SSL连接启用会话重用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx Web 服务器配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      443 ssl;</span><br><span class="line">    server_name backend.nginxbar.org;</span><br><span class="line">    access_log  logs/sslbackend_access.log  main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate        ssl/backend_nginxbar_org.pem;# 网站backend.nginxbar.org证书文件</span><br><span class="line">    ssl_certificate_key    ssl/backend_nginxbar_org.key;# 网站backend.nginxbar.org证书密钥</span><br><span class="line">                                                        <span class="comment"># 文件</span></span><br><span class="line">    ssl_verify_client      on;                          <span class="comment"># 启用对Nginx服务的证书验证</span></span><br><span class="line">    ssl_client_certificate ssl/proxy_root.pem;          <span class="comment"># 用以验证Nginx服务器主机名</span></span><br><span class="line">                                                        <span class="comment"># proxy.nginxbar.com的根证书</span></span><br><span class="line">    ssl_verify_depth  2;                                <span class="comment"># 证书验证深度为2</span></span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:10m;                   <span class="comment"># HTTPS会话缓存的存储大小为10MB</span></span><br><span class="line">    ssl_session_tickets off;                            <span class="comment"># 以会话编号机制实现会话缓存</span></span><br><span class="line">    ssl_session_timeout 10m;                            <span class="comment"># 会话缓存的超时时间为10分钟</span></span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line">    root /opt/nginx-web;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反向代理的真实客户端-IP"><a href="#反向代理的真实客户端-IP" class="headerlink" title="反向代理的真实客户端 IP"></a>反向代理的真实客户端 IP</h4><p>客户端在访问互联网应用服务器时，与真实的应用服务器之间会因为有多层反向代理，而导致真实应用服务器获取的仅是最近一层的反向代理服务器 IP。为使 Nginx 后端的上游服务器可以获得真实客户端 IP，Nginx 提供了 ngx_http_realip_module 模块用以实现真实客户端 IP 的获取及传递的功能。</p>
<p>通过该模块提供的配置指令，用户可以手动设置上层反向代理服务器的 IP 作为授信 IP，Nginx 服务器根据配置指令的配置排除授信 IP，而甄别出真实的客户端 IP 进行日志记录，并传递给上游服务器。模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">set_real_ip_from</td>
<td align="left">address 或 CIDR 或 unix</td>
<td align="left">–</td>
<td align="left">设置授信 IP，IP 网段或 UNIX 套接字</td>
</tr>
<tr>
<td align="left">real_ip_header</td>
<td align="left">field 或 X-Real-IP 或 X-For-warded-For 或 proxy_protocol</td>
<td align="left">X-Real-IP</td>
<td align="left">通过指定的 HTTP 头字段获取真实客户端 IP</td>
</tr>
<tr>
<td align="left">real_ip_recursive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">当客户端经多层反向代理到达当前服务器时，指定的 HTTP 头字段中会有多个 IP 地址。默认会以最后一个 IP 为真实客户端 IP，当指令值为 on 时，会以最后一个非信 IP 为真实客户端 IP</td>
</tr>
</tbody></table>
<p>该模块指令使用的指令域范围为http、server、location。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8088;</span><br><span class="line">    access_log  logs/proxy.access.log  main;</span><br><span class="line">   </span><br><span class="line">    set_real_ip_from 192.168.2.159;   <span class="comment"># 设置192.168.2.159为授信IP</span></span><br><span class="line">    real_ip_header X-Forwarded-For;   <span class="comment"># 通过HTTP头字段X-Forwarded-For获取真实客户端IP</span></span><br><span class="line">    real_ip_recursive on;             <span class="comment"># 以最后一个非授信IP为真实客户端IP</span></span><br><span class="line">   </span><br><span class="line">    tcp_nodelay off;                  <span class="comment"># 因启用缓冲区功能，所以关闭立刻发送功能</span></span><br><span class="line"></span><br><span class="line">    location ~ ^/ &#123;</span><br><span class="line">        proxy_force_ranges on;        <span class="comment"># 强制启用字节范围请求支持</span></span><br><span class="line">        proxy_pass   http://192.168.2.145:8082;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="stream模块简述"><a href="#stream模块简述" class="headerlink" title="stream模块简述"></a>stream模块简述</h3><p>Nginx 的 TCP&#x2F;UDP 代理功能的模块分为核心模块和辅助模块、核心模块 stream 需要在编译配置时增加”–with-stream”参数进行编译。核心模块的全局配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">listen</td>
<td align="left">address:port[ssl][udp][proxy protocol] [backlog&#x3D;number][rcvbuf&#x3D;size]</td>
<td align="left">–</td>
<td align="left">stream 监听协议及端口</td>
</tr>
<tr>
<td align="left">listen</td>
<td align="left">[sndbuf&#x3D;size][bind][ipv6only&#x3D;on 或 off] [reuseport][so_keepalive&#x3D;on 或 off 或 [keepidle]:[keepintvl]:[keepent]]</td>
<td align="left">–</td>
<td align="left">stream 监听协议及端口</td>
</tr>
<tr>
<td align="left">preread_buffer_size</td>
<td align="left">size</td>
<td align="left">16k</td>
<td align="left">设置每个会话数据预读缓冲区的大小</td>
</tr>
<tr>
<td align="left">preread_timeout</td>
<td align="left">timeout</td>
<td align="left">30s</td>
<td align="left">设置每个会话数据预读取的超时时间</td>
</tr>
<tr>
<td align="left">proxy_protocol_timeout</td>
<td align="left">timeout</td>
<td align="left">30s</td>
<td align="left">读取代理协议头的超时时间</td>
</tr>
<tr>
<td align="left">resolver</td>
<td align="left">address… [valid&#x3D;time][ipv6&#x3D;on 或 off]</td>
<td align="left">–</td>
<td align="left">域名解析服务器地址</td>
</tr>
<tr>
<td align="left">resolver_timeout</td>
<td align="left">time</td>
<td align="left">30s</td>
<td align="left">域名解析超时时间</td>
</tr>
<tr>
<td align="left">tcp_nodelay</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">启用或关闭立即发送数据（tcp_nodelay）选项</td>
</tr>
<tr>
<td align="left">variables_hash_bucket_size</td>
<td align="left">size</td>
<td align="left">64</td>
<td align="left">设置变量哈希表中桶的大小</td>
</tr>
<tr>
<td align="left">variables_hash_max_size</td>
<td align="left">size</td>
<td align="left">1024</td>
<td align="left">设置变量哈希表的最大值</td>
</tr>
</tbody></table>
<p>关于上表有以下几点需要说明。</p>
<ul>
<li>指令 listen 使用的指令域范围为 server；</li>
<li>指令 variables_hash_bucket_size 和 variables_hash_max_size 使用的指令域范围为 stream；</li>
<li>stream 核心模块其余指令使用的指令域范围为 stream、server；</li>
<li>resolver 指令值可填写多个域名解析服务器地址，各个地址用空格分隔；</li>
<li>listen 指令值参数如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">默认</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ssl</td>
<td align="left">–</td>
<td align="left">在指定监听端口上启用 SSL 协议支持</td>
</tr>
<tr>
<td align="left">udp</td>
<td align="left">–</td>
<td align="left">在指定监听端口上启用 UDP 协议支持</td>
</tr>
<tr>
<td align="left">proxy_protocol</td>
<td align="left">–</td>
<td align="left">在指定监听端口上启用 proxy_protocol 协议支持</td>
</tr>
<tr>
<td align="left">backlog</td>
<td align="left">-1&#x2F;511</td>
<td align="left">设置挂起连接队列的最大长度，在 FreeBSD、DragonFly BSD 和 macOS 操作系统上，设置默认值为 -1，其他平台为 511</td>
</tr>
<tr>
<td align="left">rcvbuf</td>
<td align="left">–</td>
<td align="left">设置套接字（socket）接收缓冲区（SO_RCVBUF 选项）的大小，Linux 操作系统下默认值为内核参数 net.core.rmem_default 的值</td>
</tr>
<tr>
<td align="left">sndbuf</td>
<td align="left">–</td>
<td align="left">设置套接字（socket）发送缓冲区（SO_SNDBUF 选项）的大小，Linux 操作系统下默认值为内核参数 net.core.wmem_default 的值</td>
</tr>
<tr>
<td align="left">bind</td>
<td align="left">–</td>
<td align="left">address:port 指定 IP 及端口</td>
</tr>
<tr>
<td align="left">ipv6only</td>
<td align="left">on</td>
<td align="left">只接收 IPv6 连接，或接收 IPv6 和 IPv4 连接</td>
</tr>
<tr>
<td align="left">reuseport</td>
<td align="left">–</td>
<td align="left">在默认情况下，所有的工作进程都会共享一个 socket 去监听同一 IP 和端口的组合。该参数启用后，允许每个工作进程由独立的 socket 去监听同一 IP 和端口的组合，内核会对传入的连接进行负载均衡。目前，它只适用于 Linux 3.9+、DragonFly BSD 和 FreeBSD 12+</td>
</tr>
<tr>
<td align="left">so_keepalive</td>
<td align="left">off</td>
<td align="left">配置监听的端口启用 TCP keepalive 机制时的心跳检测参数。当指令值为 on 时，默认等同于 so_keepalive&#x3D;30m::10，表示 30 分钟无数据传输时发送探测包，总共发送 10 次，发送时间间隔为系统内核参数 tcp_keepalive_intvl 的设定值</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    resolver 114.114.114.114 valid=300s; </span><br><span class="line">    resolver_timeout 2s;</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">       server 192.168.0.1:333;</span><br><span class="line">       server www.example.com:333;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 127.0.0.1:333 udp reuseport;</span><br><span class="line">        proxy_timeout 20s;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen [::1]:12345;</span><br><span class="line">        proxy_pass unix:/tmp/stream.socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>stream 辅助模块</strong></p>
<ul>
<li><strong>ngx_stream_map_module</strong></li>
</ul>
<p>该模块的功能是在客户端每次连接时，Nginx按照map指令域中源变量的当前值，把设定的对应值赋给新变量。该指令的语法格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">map 源变量 新变量&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这个指令使用的指令域只有 stream，指令值参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名称</th>
<th align="left">参数值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">default</td>
<td align="left">为新变量指定一个默认值。若不指定这个参数，新变量默认值为空</td>
</tr>
<tr>
<td align="left">hostnames</td>
<td align="left">当源变量为主机名时，允许使用主机名前缀或后缀对源变量值进行匹配</td>
</tr>
<tr>
<td align="left">include</td>
<td align="left">引入一个外部文件作为 map 的指令域内容</td>
</tr>
<tr>
<td align="left">volatile</td>
<td align="left">map 默认创建的是可被缓存的变量，启用该参数后，创建的为不可被缓存的变量</td>
</tr>
</tbody></table>
<p>map 指令域中，当源变量值存在相同匹配项时，匹配的顺序如下:</p>
<ul>
<li>完全匹配的字符串；</li>
<li>有主机前缀的最长字符串；</li>
<li>有主机后缀的最长字符串；</li>
<li>在指令域中按自上而下的顺序最先匹配到的正则表达式；</li>
<li>default 参数给定的默认值。</li>
</ul>
<p>map 哈希表大小指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">map 哈希表大小指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">map_hash_max_size</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">2048</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">map 指令中，存储变量的哈希表的大小</td>
</tr>
<tr>
<td align="left">map 哈希桶大小指令如下表所示。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>map 哈希桶大小指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">map 哈希桶大小指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">map_hash_bucket_size</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">32、64 或 128</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">map 指令中，存储变量的哈希桶的大小</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream&#123;</span><br><span class="line">   </span><br><span class="line">    map <span class="variable">$remote_addr</span> <span class="variable">$limit</span> &#123;</span><br><span class="line">        127.0.0.1    <span class="string">&quot;&quot;</span>;</span><br><span class="line">        default      <span class="variable">$binary_remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    limit_conn_zone <span class="variable">$limit</span> zone=addr:10m;</span><br><span class="line">    limit_conn addr 1;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 33060 reuseport;</span><br><span class="line">        access_log  logs/tcp.log tcp;</span><br><span class="line"></span><br><span class="line">        proxy_timeout 20s;</span><br><span class="line">        proxy_pass 127.0.0.1:3306;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ngx_stream_geo_module</strong></li>
</ul>
<p>该模块的功能是从源变量获取 IP 地址，并根据设定的 IP 与对应值的列表对新变量进行赋值。该模块只有一个 geo 指令，指令格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geo [源变量]新变量&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>geo 指令的默认源变量是 $remote_addr，新变量默认值为空，这个指令使用的指令域只有 stream，指令值参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">参数描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">delete</td>
<td align="left">删除配置中已经存在的相同 IP 地址的设定</td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">如果从源变量获取的IP无法匹配任意一个 IP 或 IP 范围时，使用这个参数的值作为新变量赋值</td>
</tr>
<tr>
<td align="left">include</td>
<td align="left">引入一个包含 IP 与对应值的外部文件</td>
</tr>
<tr>
<td align="left">ranges</td>
<td align="left">以地址段的形式定义 IP 地址，这个参数必须放在最上面</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geo <span class="variable">$country</span> &#123;</span><br><span class="line">    ranges;</span><br><span class="line">    default                   CN;</span><br><span class="line">    127.0.0.0-127.0.0.0       US;</span><br><span class="line">    10.1.0.0-10.1.255.255     RU;</span><br><span class="line">    192.168.1.0-192.168.1.255 UK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">geo <span class="variable">$country</span> &#123;</span><br><span class="line">    default        ZZ;</span><br><span class="line">    include        conf/geo.conf;</span><br><span class="line">    delete         127.0.0.0/16;</span><br><span class="line"></span><br><span class="line">    127.0.0.0/24   US;</span><br><span class="line">    10.1.0.0/16    RU;</span><br><span class="line">    192.168.1.0/24 UK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ngx_stream_geoip_module</strong></li>
</ul>
<p>该模块的功能首先是根据客户端的 IP 地址与 MaxMind 数据库中的城市地址信息做比对，然后再将对应的城市地址信息赋值给内置变量。</p>
<p>国家信息数据库指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">国家信息数据库指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">geoip_country</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">指定国家信息的 MaxMind 数据库文件路径</td>
</tr>
</tbody></table>
<p>城市信息数据库指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">城市信息数据库指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">geoip_city</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">指定城市信息的 MaxMind 数据库文件路径</td>
</tr>
</tbody></table>
<p>机构信息数据库指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">机构信息数据库指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">geoip_org</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">指定机构信息的 MaxMind 数据库文件路径</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    geoip_country         /usr/share/GeoIP/GeoIP.dat;</span><br><span class="line">    geoip_city            /usr/share/GeoIP/GeoLiteCity.dat;</span><br><span class="line"></span><br><span class="line">    map <span class="variable">$geoip_city_continent_code</span> <span class="variable">$nearest_server</span> &#123;</span><br><span class="line">        default        example.com;</span><br><span class="line">        EU          eu.example.com;</span><br><span class="line">        NA          na.example.com;</span><br><span class="line">        AS          as.example.com;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ngx_stream_split_clients_module</strong></li>
</ul>
<p>该模块会按照配置指令将一个 0～232 之间的数值根据设定的比例分割为多个数值范围，每个数值范围会被设定一个对应的给定值。用户每次请求时，指定的字符串会被计算出一个数值，该模块会将该数值所在范围对应的给定值赋值给配置中定义的变量。该功能常用来按照用户的来源IP进行访问流量分流。该指令的语法格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">split_clients 字符串 新变量 &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    split_clients <span class="string">&quot;<span class="variable">$&#123;remote_addr&#125;</span>AAA&quot;</span> <span class="variable">$upstream</span> &#123;  <span class="comment"># $&#123;remote_addr&#125;AAA会被计算出一个数值</span></span><br><span class="line">        0.5%     backend1;  <span class="comment"># 数值在0 ~ 21474835之间，$upstream被赋值backend1</span></span><br><span class="line">        80.0%    backend2;  <span class="comment"># 数值在21474836 ~ 3435973836之间，$upstream被赋值backend2</span></span><br><span class="line">        *        backend;   <span class="comment"># 数值在3435973837 ~ 4294967295，$upstream被赋值backend</span></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389;</span><br><span class="line">        proxy_pass <span class="variable">$upstream</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个指令使用的指令域只有 stream；客户端每次请求时，指定字符串会被使用 MurmurHash2 算法计算出一个 0～232（0～4294967295）之间的数值，该模块会将该数值所在范围对应的给定值赋值给配置中定义的变量。</p>
<ul>
<li><strong>ngx_stream_ssl_preread_module</strong></li>
</ul>
<p>该模块可以在预读取阶段从 ClientHello 消息中提取信息，赋值给内置变量后供用户调用。</p>
<p>SSL 信息预读如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">SSL 信息预读</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">ssl_preread</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream、server</td>
</tr>
<tr>
<td align="left">可选项</td>
<td align="left">on 或 off</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置是否启用 SSL 信息预读功能</td>
</tr>
</tbody></table>
<p>内置变量如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">变量说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$ssl_preread_protocol</td>
<td align="left">客户端支持的最高 SSL 协议版本</td>
</tr>
<tr>
<td align="left">$ssl_preread_server_name</td>
<td align="left">通过 SNI 请求的服务器名称</td>
</tr>
<tr>
<td align="left">$ssl_preread_alpn_protocols</td>
<td align="left">客户通过 ALPN 公布的协议列表</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    map <span class="variable">$ssl_preread_protocol</span> <span class="variable">$upstream</span> &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>        ssh.example.com:22;</span><br><span class="line">        <span class="string">&quot;TLSv1.2&quot;</span> new.example.com:443;</span><br><span class="line">        default   tls.example.com:443;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen      192.168.0.1:443;</span><br><span class="line">        proxy_pass  <span class="variable">$upstream</span>;</span><br><span class="line">        ssl_preread on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ngx_stream_limit_conn_module</strong></li>
</ul>
<p>该模块对访问连接中含有指定变量且变量值相同的连接数进行计数，当计数值达到 limit_conn 指令设定的值时，Nginx 服务器将关闭此类连接。由于 Nginx 采用的是多进程的架构，因此该模块通过共享内存存储计数状态并实现了多个进程间的计数状态共享。</p>
<p>计数存储区指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">计数存储区指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">limit_conn_zone</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定用以存储指定变量计数的共享内存区域</td>
</tr>
</tbody></table>
<p>连接数设置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">连接数设置指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">limit_conn</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream、server</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置指定变量并发连接的最大数</td>
</tr>
</tbody></table>
<p>连接数日志级别指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">连接数日志级别指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">limit_conn_log_level</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream、server</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">error</td>
</tr>
<tr>
<td align="left">可选项</td>
<td align="left">info、notice、warn、error</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">当指定变量的并发连接数达最大值时，输出日志的级别</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=addr:10m; <span class="comment"># 对客户端IP进行并发计数，计数内存区</span></span><br><span class="line">                                                       <span class="comment"># 命名为addr，计数内存区的大小为10MB</span></span><br><span class="line">    server &#123;</span><br><span class="line">        limit_conn addr 1;                             <span class="comment"># 限制客户端的并发连接数为1</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置说明如下所示:</p>
<p>limit_conn_zone 的格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit_conn_zone key zone=name:size;</span><br></pre></td></tr></table></figure>

<p>limit_conn_zone 的 key 可以是文本、变量或文本与变量的组合；</p>
<p>$binary_remote_addr 为 IPv4 时，占用 4B；为 IPv6 时，占用 16B；</p>
<p>limit_conn_zone 中，1MB 的内存空间可以存储 32000 个 32B 或 16000 个 64B 的变量计数状态；</p>
<p>变量计数状态在 32 位系统平台占用 32B 或 64B，在 64 位系统平台占用 64B。</p>
<ul>
<li><strong>ngx_stream_access_module</strong></li>
</ul>
<p>这个模块可以允许或拒绝客户端的源 IP 地址进行连接。</p>
<p>允许连接指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">允许连接指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">allow</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream、server</td>
</tr>
<tr>
<td align="left">可选项</td>
<td align="left">address 或 CIDR 或 unix: 或 all</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">允许指定源 IP 的客户端连接</td>
</tr>
</tbody></table>
<p>拒绝连续指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">拒绝连接指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">deny</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">stream、server</td>
</tr>
<tr>
<td align="left">可选项</td>
<td align="left">address 或 CIDR 或 unix: 或 all</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">拒绝指定源 IP 的客户端连接</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        deny  192.168.1.1;          <span class="comment"># 禁止192.168.1.1</span></span><br><span class="line">        allow 192.168.0.0/24;       <span class="comment"># 允许192.168.0.0/24的IP访问</span></span><br><span class="line">        allow 10.1.1.0/16;          <span class="comment"># 允许10.1.1.0/16的IP访问</span></span><br><span class="line">        allow 2001:0db8::/32;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 按照自上而下的顺序进行匹配。</p>
<ul>
<li><strong>ngx_stream_return_module</strong></li>
</ul>
<p>该模块向客户端返回指定值并关闭连接。</p>
<p>返回值指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">返回值指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">return</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">server</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">向客户端返回指定值并关闭连接</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 12345;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$time_iso8601</span>; <span class="comment"># 返回当前连接的时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TCP-UDP代理简述"><a href="#TCP-UDP代理简述" class="headerlink" title="TCP&#x2F;UDP代理简述"></a>TCP&#x2F;UDP代理简述</h3><p>Nginx 并不直接提供 TCP&#x2F;UDP 的应用响应，Nginx Stream 模块的核心功能是将客户端的 TCP&#x2F;UDP 连接反向代理给后端的被代理服务器。</p>
<h4 id="核心配置指令"><a href="#核心配置指令" class="headerlink" title="核心配置指令"></a>核心配置指令</h4><p>TCP&#x2F;UDP 代理功能的核心配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">proxy_bind</td>
<td align="left">address[transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口与被代理服务器建立连接，指令值可以是变量。指令值参数为 transparent 时，允许将客户端的真实 IP 透传给被代理服务器，并以客户端真实 IP 为访问被代理服务器的源 IP；指令值参数为 off 时，则取消上一层指令域同名指令的配置</td>
</tr>
<tr>
<td align="left">proxy_buffer_size</td>
<td align="left">size</td>
<td align="left">16k</td>
<td align="left">设置用于从被代理服务器读取数据的缓冲区的大小，也用于设置从客户端读取会话数据的缓冲区的大小</td>
</tr>
<tr>
<td align="left">proxy_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">与被代理服务器建立连接的超时时间</td>
</tr>
<tr>
<td align="left">proxy_timeout</td>
<td align="left">time</td>
<td align="left">10m</td>
<td align="left">Nginx 服务器与客户端或被代理服务器的两个连续成功的读或写操作的最大间隔时间，如果在间隔时间内没有数据传输，则关闭连接</td>
</tr>
<tr>
<td align="left">proxy_download_rate</td>
<td align="left">rate</td>
<td align="left">0</td>
<td align="left">限制每个连接每秒从被代理服务器中读取数据的字节数，默认不限制</td>
</tr>
<tr>
<td align="left">proxy_upload_rate</td>
<td align="left">rate</td>
<td align="left">0</td>
<td align="left">限制每个连接每秒发送到被代理服务器的数据的字节数，默认不限制</td>
</tr>
<tr>
<td align="left">proxy_next_upstream</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">当被代理的服务返回错误或超时时，将未返回响应的客户端连接请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">proxy_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端连接请求传递给 upstream 中下一个服务器的超时时间。”0”为不做超时限制，即直到遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">proxy_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端连接请求传递给 upstream 中下一个服务器的尝试次数，包括第一次的失败次数。”0”为不做尝试次数限制，即直到遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">proxy_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">被代理服务器的地址，支持 IP 或域名加端口、UNIX 域套接字、upstream 名</td>
</tr>
<tr>
<td align="left">proxy_protocol</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否对被代理服务器的连接启用代理协议（proxy_protocol）支持</td>
</tr>
<tr>
<td align="left">proxy_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置 Nginx 与被代理服务器的 TCP keepalive 行为的心跳检测机制，默认使用操作系统的 socket 配置，若指令值为 on，则开启 SO_KEEPALIVE 选项进行心跳检测</td>
</tr>
<tr>
<td align="left">proxy_ssl</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否启用 SSL&#x2F;TLS 协议与被代理服务器建立连接</td>
</tr>
<tr>
<td align="left">proxy_ssl_protocols</td>
<td align="left">[SSLv2][SSLv3] [TLSv1][TLSv1.1] [TLSv1.2][TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">指定可用于 Nginx 与被代理服务器建立 SSL 连接的 SSL 协议版本</td>
</tr>
<tr>
<td align="left">proxy_ssl_session_reuse</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">是否启用与被代理服务器 SSL TCP 连接的 SSL 会话重用功能</td>
</tr>
<tr>
<td align="left">proxy_ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">DEFAULT</td>
<td align="left">设置与被代理服务器建立 SSL 连接时，用于协商使用的加密算法组合，也称为密码套件，指令值内容为 openssl 的密码套件名称，多个套件名称由”:”分隔</td>
</tr>
<tr>
<td align="left">proxy_ssl_server_name</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">在与被代理服务器建立 SSL 连接时，设置是否启用通过 SNI 或 RFC 6066 传递主机名</td>
</tr>
<tr>
<td align="left">proxy_ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">存放被代理服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件的密码文件，一个密码一行。有多个密码时，Nginx 会依次尝试</td>
</tr>
<tr>
<td align="left">proxy_ssl_verify</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否启用对被代理服务器的 SSL 证书的验证功能</td>
</tr>
<tr>
<td align="left">proxy_ssl_name</td>
<td align="left">name</td>
<td align="left">proxy_pass 指令指定的主机名</td>
<td align="left">指定对被代理服务器 SSL 证书验证的主机名</td>
</tr>
<tr>
<td align="left">proxy_ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">证书品销列表文件，用于验证被代理服务器 SSL 证书有效性的 PEM 格式文件</td>
</tr>
<tr>
<td align="left">proxy_ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作被代理服务器的证书链验证</td>
</tr>
<tr>
<td align="left">proxy_ssl_verify_depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置被代理服务器的证书链的验证深度</td>
</tr>
<tr>
<td align="left">proxy_requests</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">UDP 代理时，设置同一客户端被 Nginx 在每次 UDP 会话中，转发给被代理服务器的数据报的数量。当达到这个数量时，将启用一个新的 UDP 会话继续转发。可用于 Nginx 对 UDP 虚拟连接会话的控制</td>
</tr>
<tr>
<td align="left">proxy_responses</td>
<td align="left">number</td>
<td align="left">–</td>
<td align="left">UDP 代理时，设置允许被代理服务器返回 UDP 数据报的数量，超过指令值时将中止会话。默认无限制，0 为不返回响应数据</td>
</tr>
</tbody></table>
<p>该模块的指令使用的指令域范围为 stream、server。</p>
<h4 id="TCP-反向代理配置样例"><a href="#TCP-反向代理配置样例" class="headerlink" title="TCP 反向代理配置样例"></a>TCP 反向代理配置样例</h4><p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389 ;                          <span class="comment"># 设置监听端口为389</span></span><br><span class="line">        proxy_pass 192.168.2.100:389;         <span class="comment"># 将连接代理到后端192.168.2.100:389</span></span><br><span class="line">        proxy_timeout 5s;                     <span class="comment"># 与被代理服务器的连续通信间隔大于5s，</span></span><br><span class="line">                                              <span class="comment"># 则认为通信超时，将关闭连接</span></span><br><span class="line">        proxy_connect_timeout 5s;             <span class="comment"># 与被代理服务器建立连接的超时时间为5s</span></span><br><span class="line">        access_log logs/ldap_access.log tcp;  <span class="comment"># 记录日志文件为logs/ldap_access.log，</span></span><br><span class="line">                                              <span class="comment"># 日志模板为tcp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代理-SSL-TCP"><a href="#代理-SSL-TCP" class="headerlink" title="代理 SSL TCP"></a>代理 SSL TCP</h4><p>代理模块 stream 可以实现基于 SSL&#x2F;TLS 协议的被代理服务器的反向代理，部署方式为客户端 → Nginx 服务器（TCP）→ 被代理服务器（SSL TCP）。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 636;                            <span class="comment"># 设置监听端口为636</span></span><br><span class="line">        access_log  logs/ldap_access.log tcp;</span><br><span class="line">        proxy_pass  192.168.2.100:636;</span><br><span class="line">        proxy_ssl   on;                        <span class="comment"># 启用SSL/TLS协议，与被代理服务器建立连接</span></span><br><span class="line">        proxy_ssl_session_reuse on;            <span class="comment"># 与被代理服务器SSL TCP连接的SSL会话重用功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UDP-反向代理配置"><a href="#UDP-反向代理配置" class="headerlink" title="UDP 反向代理配置"></a>UDP 反向代理配置</h4><p>UDP 协议是一种无连接的协议，发送端与接收端传输数据之前不需要建立连接，发送端会尽最大努力把数据发送出去，不能保证安全地传输到接收端。由于传输数据不建立连接，也不需要维持复杂的链路关系（包括连接状态、收发状态等），因此发送端可同时向多个接收端传输相同的消息。</p>
<p>虽然 UDP 的数据传输是不可靠的，但如果有一个数据报丢失，另一个新的数据报会在几秒内替换它发送到接收端。UDP 协议通常被用在单向传输无须返回响应及信息分发的场景，如日志收集或在屏幕上的航班信息、股票行情等多媒体场景。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1514 udp;               <span class="comment"># 设置监听端口为1514并启用UDP协议</span></span><br><span class="line">        proxy_pass 192.168.2.123:1514;</span><br><span class="line">        proxy_responses 0;             <span class="comment"># 会话接收数据报后无须等待返回响应，立即关闭会话</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于SSL的TCP代理服务器"><a href="#基于SSL的TCP代理服务器" class="headerlink" title="基于SSL的TCP代理服务器"></a>基于SSL的TCP代理服务器</h3><p>Nginx 可以通过代理模块实现上游服务器 SSL&#x2F;TLS 协议的连接，同时 Nginx 还通过模块 ngx_stream_ssl_module 提供了基于 SSL&#x2F;TLS 协议的 TCP 连接监听。Nginx 还可以把 SSL 证书部署在 Nginx 服务器上，这就减轻了后端上游服务器的 CPU 运算量并实现 SSL 证书的统一管理和维护。</p>
<p>ngx_stream_ssl_module 模块默认不会被构建，这就需要在编译的时候通过<code>--with-stream_ssl_module</code>参数进行启用。相关配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ssl_protocols</td>
<td align="left">[SSLv2][SSLv3] [TLSv1][TLSv1.1] [TLSv1.2][TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">设置使用的 SSL 协议版本</td>
</tr>
<tr>
<td align="left">ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">PEM 格式的 SSL 证书文件，可自建或由 CA 机构颁发</td>
</tr>
<tr>
<td align="left">ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">PEM 格式的 SSL 证书私钥文件，可自建或由 CA 机构颁发</td>
</tr>
<tr>
<td align="left">ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">存放 SSL 证书私钥文件的密码文件，一个密码一行。有多个密码时，Nginx 会依次尝试</td>
</tr>
<tr>
<td align="left">ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">HIGH:!aNULL:!MD5</td>
<td align="left">设置 SSL TCP 建立连接时用于协商使用的加密算法组合，也称为密码套件。指令值内容为 openssl 的密码套件名称，多个套件名称由”:”分隔</td>
</tr>
<tr>
<td align="left">ssl_prefer_server_ciphers</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用 SSLv3 和 TLSv1 协议在 SSL TCP 连接时优先使用服务端设置的密码套件</td>
</tr>
<tr>
<td align="left">ssl_dhparam</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">DH 密钥交换的 Diffie-Hellman 参数文件</td>
</tr>
<tr>
<td align="left">ssl_ecdh_curve</td>
<td align="left">curve</td>
<td align="left">auto</td>
<td align="left">配置 SSL 加密时使用椭圆曲线 DH 密钥交换的曲线参数，多个参数使用”:”分隔。ecdh 是 Elliptic-Curve 和 Diffie-Hellman 的缩写，指令值为 auto 时，配置的曲线参数是 prime256v1</td>
</tr>
<tr>
<td align="left">ssl_session_cache</td>
<td align="left">off 或 none 或 [builtin[:size]] [shared:name:size]</td>
<td align="left">none</td>
<td align="left">SSL TCP 会话缓存设置</td>
</tr>
<tr>
<td align="left">ssl_session_tickets</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">是否启用 SSL TCP 会话缓存 session ticket 机制，指令值为 off 时，使用 session ID 会话缓存机制</td>
</tr>
<tr>
<td align="left">ssl_session_ticket_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定会话凭证密钥文件，用以多台 Nginx 间实现 session ticket 共享，否则 Nginx 会随机生成一个会话凭证密钥</td>
</tr>
<tr>
<td align="left">ssl_session_timeout</td>
<td align="left">time</td>
<td align="left">5m</td>
<td align="left">设置客户端可用会话缓存的超时时间</td>
</tr>
<tr>
<td align="left">ssl_verify_client</td>
<td align="left">on 或 off 或 optional 或 optional_no_ca</td>
<td align="left">off</td>
<td align="left">设置是否启用对客户端证书验证功能，指令值为 on 时，启用验证；指令值为 optional 时，如果接收到客户端证书则启用验证；指令值为 optional_no_ca 时，若接收到客户端证书，则启用客户端证书验证，但不进行证书链校验。验证结果将存储在 $ssl_client_verity 变量中</td>
</tr>
<tr>
<td align="left">ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">证书吊销列表文件，用以验证客户端 SSL 证书有效性的 PEM 格式文件</td>
</tr>
<tr>
<td align="left">ssl_client_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作客户端的证书验证。该证书列表会被发送给客户端</td>
</tr>
<tr>
<td align="left">ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作客户端的证书验证。该证书列表不会被发送给客户端</td>
</tr>
<tr>
<td align="left">ssl_verify _depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置客户端证书链验证深度</td>
</tr>
</tbody></table>
<p>关于上表有以下几点需要说明。</p>
<ul>
<li>该模块指令值使用的指令域范围为 stream、server。</li>
<li>Nginx 建立 SSL TCP 监听，用户发送 SSL TCP 连接时，由 Nginx 实现 SSL 终止并把 TCP 会话代理到上游服务器，部署方式为客户端 → Nginx 服务器（SSL TCP）→ 上游服务器（TCP）。配置样例如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen              636 ssl;                    <span class="comment"># 设置监听端口为636</span></span><br><span class="line">        access_log logs/ldap_access.log tcp;</span><br><span class="line"></span><br><span class="line">        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;      <span class="comment"># 设置使用的SSL协议版本</span></span><br><span class="line">        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;</span><br><span class="line">            <span class="comment"># 设置服务端使用的密码套件</span></span><br><span class="line">        ssl_certificate     ssl/www_nginxbar_org.pem;   <span class="comment"># 主机名www.nginxbar.org证书文件</span></span><br><span class="line">        ssl_certificate_key ssl/www_nginxbar_org.key;   <span class="comment"># 主机名www.nginxbar.org证书密钥文件</span></span><br><span class="line">        ssl_session_cache   shared:SSL:10m;             <span class="comment"># SSL TCP会话缓存设置共享内存区域名为</span></span><br><span class="line">                                                        <span class="comment"># SSL，区域大小为10MB</span></span><br><span class="line">        ssl_session_timeout 10m;                        <span class="comment"># SSL TCP会话缓存超时时间为10分钟</span></span><br><span class="line">        proxy_pass                    192.168.2.100:389;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以通过代理模块的 proxy_ssl 指令配置与上游服务器实现全链路的安全数据通信。部署方式为客户端 → Nginx 服务器（SSL TCP）→ 被代理服务器（SSL TCP）。配置样例如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen              636 ssl;                   <span class="comment"># 设置监听端口为636</span></span><br><span class="line">        access_log logs/ldap_access.log tcp;</span><br><span class="line"></span><br><span class="line">        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;     <span class="comment"># 设置使用的SSL协议版本</span></span><br><span class="line">        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;</span><br><span class="line">            <span class="comment"># 设置服务端使用的密码套件</span></span><br><span class="line">        ssl_certificate     ssl/www_nginxbar_org.pem;  <span class="comment"># 主机名www.nginxbar.org证书文件</span></span><br><span class="line">        ssl_certificate_key ssl/www_nginxbar_org.key;  <span class="comment"># 主机名www.nginxbar.org证书密钥文件</span></span><br><span class="line">        ssl_session_cache   shared:SSL:10m;  <span class="comment"># SSL TCP会话缓存设置共享内存区域名为SSL，区域大小为10MB</span></span><br><span class="line">        ssl_session_timeout 10m;             <span class="comment"># SSL TCP会话缓存超时时间为10分钟</span></span><br><span class="line"></span><br><span class="line">        proxy_ssl   on;                      <span class="comment"># 启用SSL/TLS协议，与被代理服务器建立连接</span></span><br><span class="line">        proxy_ssl_session_reuse on;          <span class="comment"># 与被代理服务器SSL TCP连接的SSL会话重用功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gRPC代理服务器"><a href="#gRPC代理服务器" class="headerlink" title="gRPC代理服务器"></a>gRPC代理服务器</h3><p>通过 gRPC 模块的反向代理功能对外发布包括基于 SSL 的 gRPC 服务，且其应用 Nginx 提供的 HTTPv2 模块可实现速率限定、基于 IP 的访问控制以及日志等功能。</p>
<p>通过 Nginx 的 location 指令可检查方法调用，可将不同的调用方法路由到后端的多个不同 gRPC 服务器，以实现单点部署多个 gRPC 服务器的应用场景。并且通过 Nginx 实现 gRPC 服务器负载均衡，还可以使用轮询、最少连接数等算法实现流量分发。</p>
<h4 id="gRPC-介绍"><a href="#gRPC-介绍" class="headerlink" title="gRPC 介绍"></a>gRPC 介绍</h4><p>gRPC 是一个开源的基于 HTTP&#x2F;2 协议的高性能、跨语言的远程过程调用（RPC）框架。它提供了双向流、流控、头部压缩、单 TCP 连接上的多复用请求等功能，这些功能使其在移动设备上可更节省空间和降低电量消耗。而且 gRPC 相对于 REST 的数据调用方式，提供了一个更加适合服务间调用数据的通信方案。</p>
<p>基于 gRPC 的客户端应用可以像调用本地对象方法一样直接调用 gRPC 服务端提供的方法，使其更适合分布式应用和服务场景。</p>
<h4 id="gRPC-模块指令"><a href="#gRPC-模块指令" class="headerlink" title="gRPC 模块指令"></a>gRPC 模块指令</h4><p>Nginx 默认会构建 gRPC 代理的支持，但 gRPC 是基于 HTTP&#x2F;2 协议的，而 ngx_http_v2_module 模块默认不会被构建，这就需要在编译时通过<code>–with-http_v2_module</code>参数来启用对 HTTP&#x2F;2 协议的支持。</p>
<p>gRPC 代理模块配置指令下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">grpc_bind</td>
<td align="left">address[transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口与被代理服务器建立连接，指令值可以是变量。指令值参数为 transparent 时，允许将客户端的真实 IP 透传给被代理服务器，并以客户端真实 IP 为访问被代理服务器的源 IP</td>
</tr>
<tr>
<td align="left">grpc_buffer_size</td>
<td align="left">size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置用于从 gRPC 服务器读取响应数据缓冲区的大小，当 Nginx 收到响应数据后将同步传递给客户端</td>
</tr>
<tr>
<td align="left">grpc_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">设置 gRPC 服务器的地址及端口，地址可以是 IP、域名或 UNIX 套接字</td>
</tr>
<tr>
<td align="left">grpc_hide_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">指定 gRPC 服务器响应数据中，不向客户端传递的 HTTP 头字段名称</td>
</tr>
<tr>
<td align="left">grpc_pass_header</td>
<td align="left">field</td>
<td align="left">–</td>
<td align="left">默认配置下 Nginx 不会将头字段属性 Status 和 X-Accel-… 传递给客户端，可通过该指令开放传递</td>
</tr>
<tr>
<td align="left">grpc_ignore_headers</td>
<td align="left">field…</td>
<td align="left">–</td>
<td align="left">设置禁止 Nginx 处理从 gRPC 服务器获取响应的头字段</td>
</tr>
<tr>
<td align="left">grpc_set_header</td>
<td align="left">field value</td>
<td align="left">Content-Length $content_length</td>
<td align="left">在转发给 gRPC 服务器前，修改或添加客户端的请求头属性字段</td>
</tr>
<tr>
<td align="left">grpc_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">Nginx 与 gRPC 服务器建立连接的超时时间，通常不应该超过 75s</td>
</tr>
<tr>
<td align="left">grpc_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从 gRPC 服务器接收数据的”读”操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">grpc_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到 gRPC 服务器的”写”操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">grpc_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置 Nginx 与被代理服务器的 TCP keepalive 行为的心跳检测机制，默认使用操作系统的 socket 配置，若指令值为 on 时，则开启 SO_KEEPALIVE 选项进行心跳检测</td>
</tr>
<tr>
<td align="left">grpc_intercept_errors</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">指令值为 on 时，将拦截 gRPC 服务器啊应码大于或等于 300 的结果，error page 指令可对该结果做后续处理；指令值为 off 时，则直接返回给客户端</td>
</tr>
<tr>
<td align="left">grpc_next_upstream</td>
<td align="left">error、timeout、 invalid_header、 http_500、http_503、 http_403、http_404、 http_429、 non_idempotent、 off…</td>
<td align="left">error timeout</td>
<td align="left">当出现指令值中指定的条件时，将未返回响应的客户请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">grpc_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端请求传递给 upstream 的过程中，下一个服务器的超时时间。指令值为 0 不做超时限制，直到遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">grpc_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置符合条件的客户端请求传递给 upstream 的过程中，下一个服务器的尝试次数，包括第一次的失败次数。指令值为 0 不做尝试次数限制，直到遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">grpe_ssl_protocols</td>
<td align="left">[SSLv2][SSLv3] [TLSv1][TLSv1.1] [TLSv1.2][TLSv1.3]</td>
<td align="left">TLSv1 TLSv1.1 TLSv1.2</td>
<td align="left">指定可用于 Nginx 与 gRPC 服务器建立 SSL 连接的 SSL 协议的版本</td>
</tr>
<tr>
<td align="left">grpe_ssl_session_reuse</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">是否启用与 gRPC 服务器 HTTPS 连接的 SSL 会话重用功能</td>
</tr>
<tr>
<td align="left">grpc_ssl_ciphers</td>
<td align="left">ciphers</td>
<td align="left">DEFAULT</td>
<td align="left">设置 HTTPS 建立连接时用于协商使用的加密算法组合，也称为密码套件，指令值内容为 openssl 的密码套件名称，多个套件名称由”:”分隔</td>
</tr>
<tr>
<td align="left">grpc_ssl_server_name</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">在与 gRPC 服务器建立 SSL 连接时，设置是否启用通过 SNI 或 RFC 6066 传递主机名</td>
</tr>
<tr>
<td align="left">grpc_ssl_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定 gRPC 服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书文件</td>
</tr>
<tr>
<td align="left">grpc_ssl_certificate_key</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定 gRPC 服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件</td>
</tr>
<tr>
<td align="left">grpc_ssl_password_file</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">存放 gRPC 服务器对 Nginx 服务器身份验证的 PEM 格式 SSL 证书私钥文件的密码文件，一个密码一行。有多个密码时，Nginx 会依次尝试</td>
</tr>
<tr>
<td align="left">grpe_ssl_verify</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置是否启用对 gRPC 服务器的 SSL 证书验证机制</td>
</tr>
<tr>
<td align="left">grpc_ssl_name</td>
<td align="left">name</td>
<td align="left">proxy_pass 指令指定的主机名</td>
<td align="left">指定对 gRPC 服务器 SSL 证书验证的主机名</td>
</tr>
<tr>
<td align="left">grpc_ssl_crl</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">证书吊销列表文件，用以验证被代理服务器 SSL 证书有效性的 PEM 格式文件</td>
</tr>
<tr>
<td align="left">grpc_ssl_trusted_certificate</td>
<td align="left">file</td>
<td align="left">–</td>
<td align="left">指定一个 PEM 格式的 CA 证书（根或中间证书）文件，该证书用作 gRPC 服务器的证书链验证</td>
</tr>
<tr>
<td align="left">grpc_ssl_verify_depth</td>
<td align="left">number</td>
<td align="left">1</td>
<td align="left">设置 gRPC 服务器的证书链的验证深度</td>
</tr>
</tbody></table>
<h4 id="gRPC-反向代理配置"><a href="#gRPC-反向代理配置" class="headerlink" title="gRPC 反向代理配置"></a>gRPC 反向代理配置</h4><p>gRPC 是基于 HTTP&#x2F;2 协议的，所以 Nginx 的 gRPC 代理需要启用 HTTP&#x2F;2，然后 gRPC 客户端将请求发送到 Nginx。Nginx 为 gRPC 服务提供了一个稳定的网关。其部署方式如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZG522312I.gif" alt="gRPC 代理"></p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  8080 http2;                               <span class="comment"># 设置监听端口为8080并启用http/2协议支持</span></span><br><span class="line">    access_log /var/log/nginx/grpc_access.log main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        grpc_pass grpc://192.168.2.145:50051;         <span class="comment"># 设置gRPC服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>gRPC 模块同样提供对后端 SSL gRPC 服务器的反向代理，配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80 http2;                                 <span class="comment"># 设置监听端口为80并启用http/2协议支持</span></span><br><span class="line">    access_log /var/log/nginx/grpcs_access.log main;</span><br><span class="line">    grpc_ssl_verify off;                              <span class="comment"># 关闭对gRPC服务器的SSL证书验证</span></span><br><span class="line">    grpc_ssl_session_reuse on;                        <span class="comment"># 设置gRPC服务器</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        grpc_pass grpcs://192.168.2.145:50051;        <span class="comment"># 设置SSL gRPC服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 可以通过 HTTP 协议的 SSL 证书，对外提供安全的 gRPC 代理转发，部署方式为客户端 → Nginx 服务器（HTTPS）→ 被代理服务器（SSL gRPC）。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;         <span class="comment"># 设置监听端口为443并启用SSL及HTTP/2协议支持</span></span><br><span class="line">    access_log /var/log/nginx/grpcs_access.log main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/www_nginxbar_org.pem;    <span class="comment"># 网站证书文件</span></span><br><span class="line">    ssl_certificate_key ssl/www_nginxbar_org.key;# 网站证书密钥文件</span><br><span class="line"></span><br><span class="line">    grpc_ssl_verify off;</span><br><span class="line">    grpc_ssl_session_reuse on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        grpc_pass grpcs://192.168.2.145:50051;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h3><p>Web 缓存可节约网络带宽，有效提高用户打开网站的速度。</p>
<p>由于应用服务器被请求次数的降低，也相对使它的稳定性得到了提升。</p>
<p>Web 缓存从数据内容传输的方向分为前向位置缓存和反向位置缓存两类。如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61314U5.BDnD5CUT.gif" alt="img"></p>
<p>前向位置缓存既可以是用户的客户端浏览器，也可以是位于用户 ISP 或内部局域网的服务器。</p>
<p>反向位置缓存通常位于互联网端，如内容分发网络或网站的反向代理缓存等。</p>
<h4 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h4><p>为了减少客户端每次访问网站时获取资源的过程的浪费，提高访问效率，客户端浏览器会将访问的内容在本地生成内容缓存。</p>
<p>客户端会通过内容缓存的有效期及 Web 服务器提供的访问请求校验机制，快速判断请求的内容是否已经更新。（避免网站发生变更没来得及更新）</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61340340.Cqb7uLLo.gif" alt="img"></p>
<p>客户端通过<strong>内容缓存有效期的本地校验</strong>和由 <strong>Web 服务端提供的服务端校验</strong>两种方式共同校验内容缓存是否有效，</p>
<p>这两种方式都是通过 <strong>HTTP 消息头</strong>中的相应字段进行判断或与服务端交互的。</p>
<p>HTTP 消息头字段功能说明如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">消息头字段</th>
<th align="left">示例</th>
<th align="left">类型</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Cache-Control</td>
<td align="left">Cache-Control: no-cache</td>
<td align="left">请求&#x2F;响应</td>
<td align="left">HTTP&#x2F;1.1 协议加入的缓存控制字段，用于服务端告知客户端是否缓存及缓存的有效期。也可用于客户端本地缓存检验流程的控制</td>
</tr>
<tr>
<td align="left">Pragma</td>
<td align="left">Pragma: no-cache</td>
<td align="left">请求&#x2F;响应</td>
<td align="left">一个在 HTTP&#x2F;1.0 中规定的通用消息头字段，当字段值为 no-cache 时，功能与消息头 Cache-Control:no-cache 的设定一致</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">Date: Tue, 15 Nov 2018 08:12:31 GMT</td>
<td align="left">响应</td>
<td align="left">原始服务器消息发出的时间</td>
</tr>
<tr>
<td align="left">Expires</td>
<td align="left">Expires: Fri, 16 Aug 2019 19:43:31 GMT</td>
<td align="left">响应</td>
<td align="left">告知客户端当前响应内容缓存的有效期，是个绝对时间，属于 HTTP&#x2F;1.0 的协议约定，优先级低于 HTTP&#x2F;1.1 协议的 max-age 设置</td>
</tr>
<tr>
<td align="left">Last-Modified</td>
<td align="left">Last-Modified: Fri, 16 Aug 2019 12:45:26 GMT</td>
<td align="left">响应</td>
<td align="left">当前响应数据的最后修改时间</td>
</tr>
<tr>
<td align="left">If-Modified-Since</td>
<td align="left">If-Modified-Since: Fri, 16 Aug 2019 19:43:31 GMT</td>
<td align="left">请求</td>
<td align="left">将当前请求本地内容缓存的最后修改时间发送给服务端进行校验，如果请求的内容在指定时间之后被修改了，将返回被修改的内容，否则返回响应状态码 304，客户端将使用本地缓存</td>
</tr>
<tr>
<td align="left">If-Unmodified-Since</td>
<td align="left">If-Unmodified-Since: Fri, 16 Aug 2019 19:43:31 GMT</td>
<td align="left">请求</td>
<td align="left">将当前请求本地内容缓存的最后修改时间发送给服务端进行校验，如果请求的内容在指定时间之后未被修改，将继续传输内容，否则返回响应状态码 412，其常被用在 byte-range 请求的断点续传场景</td>
</tr>
<tr>
<td align="left">ETag</td>
<td align="left">ETag: “0a3ea38e4fd51:0”</td>
<td align="left">响应</td>
<td align="left">当前响应数据的实体标签值</td>
</tr>
<tr>
<td align="left">If-Match</td>
<td align="left">If-Match: “0a3ea38e4fd51:0”</td>
<td align="left">请求</td>
<td align="left">将当前内容缓存的 ETag 值发送给服务端进行校验，如果与服务端的 ETag 匹配一致就继续响应请求，否则返回响应状态码 412</td>
</tr>
<tr>
<td align="left">If-None-Match</td>
<td align="left">If-None-Match: “0a3ea38e4fd51:0”</td>
<td align="left">请求</td>
<td align="left">将当前内容缓存的 ETag 值发送给服务端进行校验，如果与服务端的 ETag 值匹配不一致，则返回新的内容，否则返回响应状态码 304，客户端将使用本地缓存</td>
</tr>
</tbody></table>
<ol>
<li>消息头字段 <strong>Cache-Control</strong> 由客户端发起缓存控制的相关字段值如下表所示。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">消息头</th>
<th align="left">功能分类</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Cache-Control: max-age&#x3D;</td>
<td align="left">有效期</td>
<td align="left">当 max-age&#x3D;0 时，不进行内容缓存的有效期验证，直接向 Web 服务器发起请求，不影响缓存的服务端验证</td>
</tr>
<tr>
<td align="left">Cache-Control: max-stale[&#x3D;]</td>
<td align="left">有效期</td>
<td align="left">如果内容缓存的过期时间不超过指定值，仍可被认为有效并被客户端使用。单位为秒</td>
</tr>
<tr>
<td align="left">Cache-Control: min-fresh&#x3D;</td>
<td align="left">有效期</td>
<td align="left">内容缓存的更新时间不超过指定值，则认为有效。单位为秘</td>
</tr>
<tr>
<td align="left">Cache-Control: no-cache</td>
<td align="left">可缓存性</td>
<td align="left">不进行内容缓存的有效期验证，直接向 Web 服务器发起请求。常用在 Ctrl+F5 的场景，强制从服务端获取最新内容</td>
</tr>
<tr>
<td align="left">Cache-Control: only-if-cached</td>
<td align="left">其他</td>
<td align="left">只使用本地已经缓存的内容，不向 Web 服务器发送请求</td>
</tr>
</tbody></table>
<p>当按下 F5 或者点击刷新时，客户端浏览器会添加请求消息头字段<code>Cache-Control:max-age=0</code>，该请求不进行内容缓存的本地验证，会直接向Web服务端发起请求，服务端将根据消息头字段进行服务端验证。</p>
<p>当按下 Ctrl+F5 时，客户端浏览器会添加请求消息头字段<code>Cache-Control:no-cache</code>和<code>Pragma:no-cache</code>，并忽略所有服务端验证的消息头字段，该请求不进行内容缓存的本地验证，它会直接向 Web 服务端发起请求，因没有服务端验证的消息头字段，所以会直接返回请求内容。</p>
<ol start="2">
<li>消息头字段 Cache-Control 由服务端发起缓存控制的相关字段值如下表所示。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">消息头</th>
<th align="left">类型</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Cache-Control: no-cache</td>
<td align="left">可缓存性</td>
<td align="left">不对响应数据的内容缓存设置有效期，不需要进行本地有效期验证</td>
</tr>
<tr>
<td align="left">Cache-Control: no-store</td>
<td align="left">可缓存性</td>
<td align="left">响应数据不在本地保留内容缓存</td>
</tr>
<tr>
<td align="left">Cache-Control: public</td>
<td align="left">可缓存性</td>
<td align="left">表明当前数据可以被任何对象（客户端、缓存服务器等）缓存</td>
</tr>
<tr>
<td align="left">Cache-Control: private</td>
<td align="left">可缓存性</td>
<td align="left">当响应数据在经过缓存服务器（CDN 或反向代理缓存服务器）时，用于告知缓存服务器不能缓存该响应数据</td>
</tr>
<tr>
<td align="left">Cache-Control: max-age&#x3D;</td>
<td align="left">有效期</td>
<td align="left">设置内容缓存的最大有效期，是个相对值，表示一个时间区间，单位为 s</td>
</tr>
<tr>
<td align="left">Cache-Control: s-maxage&#x3D;</td>
<td align="left">有效期</td>
<td align="left">当响应数据在经过缓存服务器（CDN 或反向代理缓存服务器）时，用于对缓存服务器中缓存的控制，该值优先级高于 max-age 的设定，与客户端浏览器无关</td>
</tr>
<tr>
<td align="left">Cache-Control: must-revalidate</td>
<td align="left">服务端验证</td>
<td align="left">当响应数据被设置有效期时，超过有效期的缓存请求必须进行服务端验证</td>
</tr>
<tr>
<td align="left">Cache-Control: proxy-revalidate</td>
<td align="left">服务端验证</td>
<td align="left">当响应数据在经过缓存服务器（CDN 或反向代理缓存服务器）时，用于缓存服务器缓存的控制，功能与 must-revalidate相同</td>
</tr>
<tr>
<td align="left">Cache-Control: no-transform</td>
<td align="left">其他</td>
<td align="left">当响应数据在经过缓存服务器（CDN 或反向代理缓存服务器）时，用于告知缓存服务器不得对消息头进行修改，与客户端浏览器无关</td>
</tr>
</tbody></table>
<ol start="3">
<li>Last-Modified 与 if-modified-since 属于 HTTP&#x2F;1.0，是用于<strong>服务端对响应数据修改时间进行校验的服务端校验方法。</strong></li>
</ol>
<p>Last-Modified 的值是由服务端生成后传递给客户端的，客户端发送请求时，它会将本地内容缓存中的 Last-Modified 的值由请求消息头的 if-modified-since 字段传递给服务端，如果服务端被请求的内容在 if-modified-since 字段值的时间之后被修改了，将返回被修改的内容，否则返回响应状态码 304，客户端将使用本地缓存。</p>
<ol start="4">
<li>ETag 与 If-None-Match 属于 HTTP&#x2F;1.1，优先级高于 Last-Modified 的验证，是<strong>用于服务端对响应数据进行实体标签校验的服务端校验方法。</strong></li>
</ol>
<p>ETag 类似于<strong>身份指纹</strong>，是一个可以与 Web 资源关联的记号（token）。当客户端第一次发起请求时，ETag 的值在响应消息头中传递给客户端；当客户端再次发送请求时，如果验证本地内容缓存需要发起服务端验证，Etag 的值将由请求消息头的 If-None-Match 字段传递给服务端。</p>
<p>如果验证本地内容缓存与服务端的 ETag 的匹配不一致，则认为请求的内容已经更新，服务端将返回新的内容，否则返回响应状态码 304，客户端将使用本地缓存。</p>
<ol start="5">
<li>客户端会通过 HTTP 消息头字段对本地内容缓存进行本地校验和服务端校验，内容缓存校验的流程如下图所示。</li>
</ol>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61413K9.Bu9LEcNR.gif" alt="img"></p>
<hr>
<h4 id="正向代理缓存"><a href="#正向代理缓存" class="headerlink" title="正向代理缓存"></a>正向代理缓存</h4><p>当客户端浏览器通过正向代理缓存服务器访问互联网 Web 服务器时，正向代理缓存服务器会<strong>先检查本地的缓存</strong>，如果本地已经有客户端访问网站的内容缓存，则会根据缓存策略将缓存内容返回客户端；</p>
<p>如果<strong>本地没有相应的内容缓存</strong>，则会向网站 Web 服务器发起访问请求，在获得响应数据后，它会先将响应内容在本地缓存生成内容缓存，然后再转发给客户端。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61434247.BKfceQrh.gif" alt="img"></p>
<p>通常是<strong>多个客户端共享一台正向代理缓存服务器</strong>，当一台客户端访问某个网站后，其他客户端均会共享这个网站的缓存，无须再向网站服务器发起访问请求，提升内容响应速度。</p>
<p>通过共享正向代理缓存服务器，不仅减少了外网的访问次数，也降低了网络带宽的需求。通过正向代理缓存服务器的控制策略，可以有效地针对内网客户端及访问的目标进行过滤控制，提升内网安全。</p>
<p>正向代理缓存服务器并不严格限制其一定要在客户端的内网，因它是通过<strong>七层协议</strong>实现代理转发的，所以只要客户端通过 HTTP 或 HTTPS 协议可以连接到正向代理服务器即可。</p>
<hr>
<h4 id="内容分发网络（CDN）"><a href="#内容分发网络（CDN）" class="headerlink" title="内容分发网络（CDN）"></a><font color="red">内容分发网络（CDN）</font></h4><p>CDN 是基于反向代理缓存技术实现的大规模网络应用，其将<strong>缓存服务器</strong>分布到用户访问相对集中的<strong>地区或网络</strong>中（被缓存的是更新较少的静态资源（如静态页面、CSS、JavaScript、图片、视频等），当用户访问目标网站时，它会利用全局负载策略，将用户的访问<strong>分配到离用户最近的缓存服务器</strong>，并由被分配的缓存服务器处理用户的访问请求。</p>
<p>国内跨运营商的网络访问会很<strong>慢</strong>，通过 CDN 的分配策略，可有效地优化网络路径，并结合 CDN 缓存服务器节点的缓存，有效提高用户的访问速度，从而提升用户体验。内容分发网络架构如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61454432.WUOQQGK0.gif" alt="img"></p>
<p>CDN 的各缓存服务器节点是通过 HTTP 响应头的 Cache-Control 来控制本地内容缓存有效期的。</p>
<p>CDN 的缓存有效期设置会影响内容缓存的回源率。如果缓存有效期设置的较长，回源率较低，则会使缓存服务器的缓存数据与源网站不同步，影响访问；</p>
<p>如果缓存有效期设置的较短，回源率较高，则会增加源网站的负载，影响 CDN 缓存服务器的使用效率。</p>
<hr>
<h4 id="反向代理缓存"><a href="#反向代理缓存" class="headerlink" title="反向代理缓存"></a>反向代理缓存</h4><p>反向代理缓存是基于反向代理技术在用户请求转发到 Web 服务器<strong>前</strong>进行缓存加载的缓存方式。</p>
<p>反向代理缓存服务器通常位于 Web 服务器之前，通过反向代理缓存服务器可以对被代理服务器的响应内容进行缓存，以加速用户请求响应的处理速度，降低被代理服务器的负载。反向代理缓存服务器架构如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZG61513411.DT-ym0QX.gif" alt="img"></p>
<p>反向代理缓存提高了网站内容的加载速度，降低了被代理服务器的负载，并可以在被代理服务器发生<strong>故障</strong>时<strong>通过缓存的内容作为备份来提高网站的可用性</strong>。</p>
<p><strong>提升网站性能</strong>。反向代理缓存以与静态内容相同的处理速度为所有类型的缓存内容提供用户响应处理，从而减少因被代理服务器动态计算产生的延迟，进一步提升网站的性能。</p>
<p><strong>增加资源容量</strong>。因为减少了被代理服务器的请求，被代理服务器将有更多的计算资源处理动态响应，相对增加了应用服务器的资源容量。</p>
<p><strong>提高可用性</strong>。通过反向代理缓存服务器的本地缓存，可以在被代理服务器出现故障或停机产生的故障等待时，让用户仍可访问网站（单向的浏览缓存中的内容），避免了用户因收到故障信息而产生的负面影响。</p>
<hr>
<h3 id="代理缓存配置"><a href="#代理缓存配置" class="headerlink" title="代理缓存配置"></a>代理缓存配置</h3><p>Nginx 的缓存功能是集成在代理模块中的。</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>存储位置</th>
</tr>
</thead>
<tbody><tr>
<td>请求返回的响应数据</td>
<td>服务器磁盘</td>
</tr>
<tr>
<td>响应数据缓存的相关元数据、有效期及缓存内容等信息</td>
<td>共享内存</td>
</tr>
</tbody></table>
<p>当收到客户端请求时，Nginx 会在<strong>共享内存</strong>中搜索缓存信息，并把查询到的缓存数据从<strong>磁盘</strong>中快速交换到操作系统的页面缓存（Page Cache）中，整个过程的速度非常快。</p>
<p>Nginx 缓存会对<strong>缓存加载进程</strong>（Cache Loader Process）和<strong>库存管理</strong>（Cade Manger Process）进行管理。</p>
<p><strong>缓存加载进程</strong>只在 Nginx <strong>启动时执行一次</strong>，将上一次 Nginx 运行时缓存有关数据的元数据加载到共享内存区域，加载结束后它将自动退出。</p>
<p>缓存加载进程会采用<strong>周期性迭代式</strong>加载缓存数据，避免缓存因加载缓存降低 Nginx 的性能，配置指令 proxy_cache_path 的指令值参数设置来调整周期。</p>
<p>缓存管理进程则周期性的检查缓存的状态，负责清除在一段时间内未被访问的缓存文件，并对超出缓存存储最大值的缓存对象进行删除，缓存管理进程的删除操作也是周期性迭代执行的，并由配置指令 proxy_cache_path 的指令值参数设置。</p>
<h4 id="缓存处理流程及状态"><a href="#缓存处理流程及状态" class="headerlink" title="缓存处理流程及状态"></a>缓存处理流程及状态</h4><p>当客户端发起请求到 Nginx 缓存服务器时，Nginx 会先检查本地是否已经有该请求的内容缓存，有的话会直接返回数据，缓存请求状态会被标记为 <strong>HIT</strong>，否则该缓存请求状态就会被标记为 <strong>MISS</strong>。</p>
<p>如果指令 proxy_cache_lock 未被启用，则会直接向源服务器发起访问请求，如果被启用，则会先确认当前请求是不是第一个发起的请求，若不是，则等待；若是，则向源服务器发起访问请求。服务器响应数据返回后会先被存储在本地缓存，然后再返回给客户端。缓存处理流程如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZGGS0R0.Ezom-1yk.gif" alt="img"></p>
<p>Nginx 在处理缓存过程中，客户端请求的缓存请求状态会被记录在变量 $upstream_cache_status 中，缓存请求状态如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">缓存请求状态</th>
<th align="left">状态说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MISS</td>
<td align="left">缓存未命中，从源服务器获取响应数据</td>
</tr>
<tr>
<td align="left">HIТ</td>
<td align="left">缓存命中，从本地缓存获取数据</td>
</tr>
<tr>
<td align="left">BYPASS</td>
<td align="left">proxy_cache_bypass 生效，直接从源服务器获取响应数据</td>
</tr>
<tr>
<td align="left">REVALIDATED</td>
<td align="left">启用 proxy_cache_revalidate 指令后，缓存将被源服务器服务端验证为有效状态，从本地缓存获取数据</td>
</tr>
<tr>
<td align="left">EXPIRED</td>
<td align="left">缓存过期，从源服务器获取响应数据</td>
</tr>
<tr>
<td align="left">UPDATING</td>
<td align="left">正在更新缓存，当前返回为旧缓存内容，在配置指令 proxy_cache_use_stale updating 时会存在该状态</td>
</tr>
<tr>
<td align="left">STALE</td>
<td align="left">源服务器无法正常返回更新的内容，当前返回为旧缓存内容，在配置指令 proxy_cache_use_stale error timeout 时会存在该状态</td>
</tr>
<tr>
<td align="left">SCARCE</td>
<td align="left">缓存节点被查询次数未达到配置指令 proxy_cache_min_uses 设定的值时，对此请求无法启用缓存机制，将从源服务器获取响应数据</td>
</tr>
</tbody></table>
<h4 id="缓存配置指令"><a href="#缓存配置指令" class="headerlink" title="缓存配置指令"></a>缓存配置指令</h4><p>Nginx 缓存配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">proxy_store</td>
<td align="left">on、off 或 string</td>
<td align="left">off</td>
<td align="left">设置是否将被代理服务器的响应数据在本地按照请求的 URL 建立目录结构镜像。当指令值为 on 时，存储路径的设置为 root 或 alias，响应数据先存储到临时文件后再复制或重命名保存</td>
</tr>
<tr>
<td align="left">proxy_store_access</td>
<td align="left">users:permissions…</td>
<td align="left">user:rw</td>
<td align="left">设置创建本地镜像存储路径的文件夹权限</td>
</tr>
<tr>
<td align="left">proxy_cache</td>
<td align="left">zone 或 off</td>
<td align="left">off</td>
<td align="left">设置一个用以做缓存管理的共享内存区域</td>
</tr>
<tr>
<td align="left">proxy_cache_path</td>
<td align="left">path 参数</td>
<td align="left">–</td>
<td align="left">设置缓存文件存储路径及参数。缓存数据以 URL 的 MD5 值命名存储在缓存目录中</td>
</tr>
<tr>
<td align="left">proxy_cache_key</td>
<td align="left">string</td>
<td align="left">$scheme $proxy_host $request_uri</td>
<td align="left">设置缓存的关键字</td>
</tr>
<tr>
<td align="left">proxy_cache_lock</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存锁指令。当启用缓存锁机制时，每次只允许个向被代理服务器转发的请求，按照 proxy_cache_key 指令设置的标识增添新的缓存数据，其他相同的请求则将等待缓存中出现响应数据或该缓存锁被释放，其等待时间由 proxy_cache_lock_timeout 指令设置</td>
</tr>
<tr>
<td align="left">proxy_cache_lock_age</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">缓存锁有效时间。当启用缓存锁机制时，如果一个请求在该指令的时间内没有完成响应数据缓存的添加，缓存锁将会被释放，获取缓存锁的请求将被转发给被代理服务器由代理服务器负责生成缓存</td>
</tr>
<tr>
<td align="left">proxy_cache_lock_timeout</td>
<td align="left">time</td>
<td align="left">5s</td>
<td align="left">缓存锁等待超时时间。当启用缓存锁机制时，等待超过该时间的请求将直接从被代理服务器中读取响应，该请求响应不会被添加到缓存中</td>
</tr>
<tr>
<td align="left">proxy_cache_max_range_offset</td>
<td align="left">number</td>
<td align="left">–</td>
<td align="left">用以设置范围请求（byte-range）请求时的最大偏移量。超出该偏移量的请求将直接从被代理服务器中读取响应数据</td>
</tr>
<tr>
<td align="left">proxy_cache_methods</td>
<td align="left">GET 或 HEAD 或 POST…</td>
<td align="left">GET HEAD</td>
<td align="left">指定可被缓存的请求方法</td>
</tr>
<tr>
<td align="left">proxy_cache_convert_head</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">开启或禁用将请求方法 HEAD 转换为 GET，如果该功能被禁用，配置指令 proxy_cache_key 的指令值应该添加变量 $request_method</td>
</tr>
<tr>
<td align="left">proxy_cache_min_uses</td>
<td align="left">numberstring</td>
<td align="left">1</td>
<td align="left">响应数据超过设置请求次数后将被缓存</td>
</tr>
<tr>
<td align="left">proxy_no_cache</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">设置不生成缓存数据的条件，指定字符串的值不为空或不等于 0，则不将当前请求返回的响应数据进行缓存</td>
</tr>
<tr>
<td align="left">proxy_cache_bypass</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">设置不使用缓存数据的条件，指令值中至少有一个值不为空或不等于 0 时，当前请求不使用缓存中的响应数据，直接访问源应用服务器。它可以与 proxy_no_cache 指令一起使用</td>
</tr>
<tr>
<td align="left">proxy_cache_revalidate</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用该指令后，如果缓存过期，则通过在 HTTP 头中添加字段属性 If-Modified-Since 和 If-None-Match 的方式发送给源服务器，从而进行缓存的服务端校验</td>
</tr>
<tr>
<td align="left">proxy_cache_use_stale</td>
<td align="left">error、timeout、 invalid_header、 updating、http_500、 http_503、http_403、 http_404、http_429、 off…</td>
<td align="left">off</td>
<td align="left">当出现指定的条件时，使用已经过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">proxy_cache_background_update</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">允许使用过期的响应数据时，设置是否启用后台子请求更新过期缓存，同时向客户端返回过期的缓存响应数据</td>
</tr>
<tr>
<td align="left">proxy_cache_valid</td>
<td align="left">[code…] time</td>
<td align="left">–</td>
<td align="left">根据响应码设置缓存时间</td>
</tr>
<tr>
<td align="left">proxy_cache_purge</td>
<td align="left">string…</td>
<td align="left">–</td>
<td align="left">定义清除缓存请求条件，若指定的字符串不为空或 0，则将 proxy_cache_key 设置的标识的缓存进行清除。清除成功则返回状态码 204，仅商业版有效</td>
</tr>
</tbody></table>
<p>关于上表有以下几点需要说明。</p>
<ul>
<li>该模块指令列表中指令的指令域范围都是 http、server、location；</li>
<li>proxy_cache_path 指令只能编写在 http 指令域中；</li>
<li>proxy_cache 与 proxy_store 指令不能在同一指令域中同时使用；</li>
<li>proxy_cache_path 指令值参数如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">参数格式</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">levels</td>
<td align="left">levels</td>
<td align="left">–</td>
<td align="left">设置缓存目录的层级及命名方式</td>
</tr>
<tr>
<td align="left">use_temp_path</td>
<td align="left">on 或 off</td>
<td align="left">on</td>
<td align="left">参数值为 on，则使用 proxy_temp_path 设置作为临时文件目录。参数值为 off 时，则使用缓存目录做临时文件目录</td>
</tr>
<tr>
<td align="left">keys_zone</td>
<td align="left">name:size</td>
<td align="left">–</td>
<td align="left">设置存储 cache_key 的共享内存 zone 及大小，1MB 可以存储 8000 个 key</td>
</tr>
<tr>
<td align="left">inactive</td>
<td align="left">time</td>
<td align="left">10 分钟</td>
<td align="left">设置时间内未被访问的缓存将被删除</td>
</tr>
<tr>
<td align="left">max_size</td>
<td align="left">size</td>
<td align="left">–</td>
<td align="left">缓存数据的最大值，超出这个最大值时，缓存管理进程将执行迭代更新，即删除最近最少使用的缓存</td>
</tr>
<tr>
<td align="left">manager_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">缓存管理进程执行一次迭代更新时，删除文件的最大数</td>
</tr>
<tr>
<td align="left">manager_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">缓存管理进程每次更新缓存的迭代间隔时间</td>
</tr>
<tr>
<td align="left">manager_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">缓存管理进程执行一次迭代更新时，最大执行的时间，单位为 ms</td>
</tr>
<tr>
<td align="left">loader_threshold</td>
<td align="left">time</td>
<td align="left">200ms</td>
<td align="left">缓存加载进程每次迭代加载时，加载数据的最大执行时间</td>
</tr>
<tr>
<td align="left">loader_files</td>
<td align="left">number</td>
<td align="left">100</td>
<td align="left">缓存加载进程每次迭代加载时，加载缓存目录中缓存数据的最大文件数</td>
</tr>
<tr>
<td align="left">loader_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">缓存加载进程每次迭代的间隔时间</td>
</tr>
<tr>
<td align="left">purger</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">是否启用缓存清除功能。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_files</td>
<td align="left">number</td>
<td align="left">10</td>
<td align="left">每次迭代清除时，清除缓存目录中缓存数据的最大文件数。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_sleep</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">连续两次迭代清除间的最少间隔时间。仅商业版有效</td>
</tr>
<tr>
<td align="left">purger_threshold</td>
<td align="left">time</td>
<td align="left">50ms</td>
<td align="left">每次迭代清除时，最大执行的时间。仅商业版有效</td>
</tr>
</tbody></table>
<h4 id="HTTP-范围请求"><a href="#HTTP-范围请求" class="headerlink" title="HTTP 范围请求"></a>HTTP 范围请求</h4><p>范围请求允许服务器<strong>只发送请求的一部分响应数据</strong>给客户端，通常对大文件传输时，用以实现断点续传、多线程下载等功能。</p>
<p>若服务端响应信息头中包含字段 <strong>Accept-Ranges:bytes</strong>，则表示服务端支持<strong>范围请求</strong>，且节点范围的单位为字节（bytes）。</p>
<p>在 Nginx 缓存默认配置下，Nginx 处理完一个大文件的初始请求后，后续的用户请求必须等待整个文件下载结束并存入缓存后才可以继续被处理，整个过程非常耗时。为解决这个问题，Nginx 提供了 ngx_http_slice_module 模块，用以缓存范围请求的支持。该模块将文件分成<strong>更小的切片（slices）</strong>，客户端每个范围请求覆盖特定的切片，如果该范围没有缓存，则从源服务器请求后存入缓存，否则就从缓存中返回数据。</p>
<p>http_slice 模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">切片指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">slice</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定范围请求切片的大小。默认为不启用该功能</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    slice             1m;                               <span class="comment"># 切片大小为1MB</span></span><br><span class="line">    proxy_cache       cache;                            <span class="comment"># 缓存共享内存名称为cache</span></span><br><span class="line">    proxy_cache_key   $uri$is_args$args<span class="variable">$slice_range</span>;    <span class="comment"># 设置缓存key</span></span><br><span class="line">    proxy_set_header  Range <span class="variable">$slice_range</span>;               <span class="comment"># 添加头字段Range的字段值为</span></span><br><span class="line">                                                        <span class="comment"># $slice_range</span></span><br><span class="line">    proxy_cache_valid 200 206 1h;                       <span class="comment"># 响应状态码为200及206的内容缓存有效期为1h</span></span><br><span class="line">    proxy_pass        http://localhost:8000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Memcached缓存模块"><a href="#Memcached缓存模块" class="headerlink" title="Memcached缓存模块"></a>Memcached缓存模块</h3><p>Nginx 的 ngx_http_memcached_module 模块本身并没有提供缓存功能，它只是一个将用户请求转发到 Memcached 服务器的<strong>代理模块</strong>。</p>
<p>在以 Memcached 服务器为<strong>缓存应用</strong>的方案中，Memcached 作为内容缓存的存储服务器，用户通过 <strong>URL</strong> 为 Memcached 的 key 将 Web 请求数据缓存到 Memcached 服务器中，在客户端发起请求时，Nginx 通过一致的 URL 为 key，快速地从 Memcached 服务器中将缓存的内容作为用户的请求响应数据返回给客户端。</p>
<p>Memcached 是一个开源、高性能的内存对象缓存系统，使用 Memcached 服务器作为缓存存储服务器，充分利用了 Memcached 的高效缓存功能，减少了 Nginx 服务器磁盘 I&#x2F;O 的操作，也可以通过 upstream 指令对多台 Memcached 做分布式集群负载，以便整体提升 Nginx 缓存服务器的性能。</p>
<p>Memcached 缓存模块配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令名称</th>
<th align="left">指令值格式</th>
<th align="left">默认值</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">memcached_bind</td>
<td align="left">address[transparent] 或 off</td>
<td align="left">–</td>
<td align="left">设置从指定的本地 IP 地址及端口与 Memcached 服务器建立连接，指令值可以是变量。指令值参数为 transparent 时，允许将客户端的真实 IP 透传给被代理服务器，并以客户端真实 IP 为访问被代理服务器的源 IP，指令值为 off 时，则取消上一层指令域同名指令的配置</td>
</tr>
<tr>
<td align="left">memcached_buffer_size</td>
<td align="left">size</td>
<td align="left">4k 或 8k</td>
<td align="left">设置用于读取 Memcached 服务器，读取响应数据缓冲区的大小，当 Nginx 收到响应数据后，将同步传递给客户端</td>
</tr>
<tr>
<td align="left">memcached_connect_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">Nginx 与 Memcached 服务器建立连接的超时时间，通常不应超过 75s</td>
</tr>
<tr>
<td align="left">memcached_force_ranges</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">启用来自 Memcached 服务器的缓存和未缓存响应的 byte-range 请求支持，而不考虑这些响应头中的 Accept-Ranges 字段</td>
</tr>
<tr>
<td align="left">memcached_gzip_flag</td>
<td align="left">flag</td>
<td align="left">–</td>
<td align="left">启用对 Memcached 服务器缓存数据 fags 的测试，flags 为客户端写入缓存时的自定义标记，此处用以判断缓存数据是否被压缩存储，如果数据被压缩存储，则将响应头字段 Content-Encoding 设置为 gzip</td>
</tr>
<tr>
<td align="left">memcached_next_upstream</td>
<td align="left">error、timeout、 invalid_header、 not found 或 off…</td>
<td align="left">error timeout</td>
<td align="left">当出现指令值中指定的条件时，将未返回响应的客户请求传递给 upstream 中的下一个服务器</td>
</tr>
<tr>
<td align="left">memcached_next_upstream_timeout</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">设置将符合条件的客户端请求传递给 upstream 中下一个服务器的超时时间。0 为不做超时限制，遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">memcached_next_upstream_tries</td>
<td align="left">number</td>
<td align="left">0</td>
<td align="left">设置符合条件的客户端请求传递给upstream中下一个服务器的尝试次数，包括第一次失败的次数。0为不做尝试次数限制，遍历完所有上游服务器组中的服务器为止</td>
</tr>
<tr>
<td align="left">memcached_pass</td>
<td align="left">address</td>
<td align="left">–</td>
<td align="left">设置 Memcached 服务器的地址及端口，地址可以是 IP、域名或 UNIX 套接字</td>
</tr>
<tr>
<td align="left">memcached_read_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个从 Memcached 服务器接收数据的读操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">memcached_send_timeout</td>
<td align="left">time</td>
<td align="left">60s</td>
<td align="left">在连续两个发送到 Memcached 服务器的写操作之间的间隔时间超过设置的时间时，将关闭连接</td>
</tr>
<tr>
<td align="left">memcached_socket_keepalive</td>
<td align="left">on 或 off</td>
<td align="left">off</td>
<td align="left">设置 Nginx 与 Memcached 服务器的 TCP keepalive 行为的心跳检测机制，默认使用操作系统的 socket 配置，若指令值为 on，则开启 SO_KEEPALIVE 选项进行心跳检测</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="built_in">set</span>            <span class="variable">$memcached_key</span> <span class="string">&quot;<span class="variable">$uri</span>?<span class="variable">$args</span>&quot;</span>;  <span class="comment"># 设置Memcached缓存key</span></span><br><span class="line">        memcached_pass 127.0.0.1:11211;              <span class="comment"># 设置被代理Memcached地址</span></span><br><span class="line">        error_page     404 502 504 = @fallback;      <span class="comment"># 返回状态码404、502、504时跳入内部请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @fallback &#123;</span><br><span class="line">        proxy_pass     http://backend;               <span class="comment"># 将请求转发给后端服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Memcached-缓存应用"><a href="#Memcached-缓存应用" class="headerlink" title="Memcached 缓存应用"></a>Memcached 缓存应用</h4><p>为了提高动态网站的响应速度，有时会采用将<strong>动态网站转换成静态化文件</strong>的方式进行优化，而相对于磁盘存储，使用 Memcached 进行静态文件的存储则可以进一步提升网站的响应速度。</p>
<p>Memcached 是基于<strong>内存</strong>的高性能对象缓存系统，因为存储数据都是在内存中的，所以减少了系统的 I&#x2F;O 操作，从而避免了因磁盘性能带来的影响。</p>
<p>使用 Memcached 作为缓存存储服务器，可以直接利用 Memcached 缓存的过期机制实现缓存的自动化过期管理，且利用 Nginx 的负载机制和 Memcached 分布式特性，可以非常方便地横向扩展，以提升处理性能。Memcached 缓存应用场景如下图所示。</p>
<p><img src="https://nginx.mosong.cc/assets/8-200ZP9350G45.Bu3JUOPM.gif" alt="img"></p>
<p>Web 服务器将动态文件以请求 URI 作为 Memcached 的 key 初始化到 Memcached 服务器中；</p>
<p>Nginx 将用户请求转发到 Memcached 服务器中，并将以请求 URI 作为 Memcached key 的数据返回给用户；</p>
<p>当 Memcached 的请求失败后，则将请求转发给后端 Web 服务器的接口动态生成对应的静态文件，返回响应数据并更新 Memcached。</p>
<p>Memcached 的安装非常简单，在 CentOS 7 系统下使用 yum 安装即可，安装方法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install memcached</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/sysconfig/memcached</span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span>         <span class="comment"># 端口</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span>     <span class="comment"># 最大连接数</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;64&quot;</span>       <span class="comment"># 使用内存大小为64M</span></span><br><span class="line">OPTIONS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">systemctl start memcached</span><br></pre></td></tr></table></figure>

<p>Nginx 服务器配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.2.145:8190;                              <span class="comment"># 后端PHP服务器IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream memcached &#123;</span><br><span class="line">    <span class="built_in">hash</span> $host<span class="variable">$request_uri</span> consistent;                      <span class="comment"># 一致性hash</span></span><br><span class="line">    server 192.168.2.145:11211;                             <span class="comment"># Memcached服务器IP</span></span><br><span class="line">    server 192.168.2.109:11211;                             <span class="comment"># Memcached服务器IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8181;</span><br><span class="line">    access_log logs/mem_access.log;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$memcached_key</span> $host<span class="variable">$request_uri</span>;                   <span class="comment"># 设置Memcached的key</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        memcached_connect_timeout 5s;             <span class="comment"># 与Memcached建立连接超时时间为5s</span></span><br><span class="line">        memcached_read_timeout 2s;                <span class="comment"># 连续两次读的超时时间为2s</span></span><br><span class="line">        memcached_send_timeout 2s;                <span class="comment"># 连续两次写的超时时间为2s</span></span><br><span class="line">        memcached_pass memcached;                 <span class="comment"># 代理到Memcached集群</span></span><br><span class="line">        add_header X-Cache-Satus HIT;             <span class="comment"># 显示缓存命中状态</span></span><br><span class="line">        add_header Content-Type <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>; <span class="comment"># 强制响应数据格式为html</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page     404 502 504 = @fallback;</span><br><span class="line"></span><br><span class="line">    location @fallback &#123;</span><br><span class="line">        proxy_set_header   X-Memcached-Key <span class="variable">$memcached_key</span>;  <span class="comment"># 将memecached key传递</span></span><br><span class="line">                                                            <span class="comment"># 给PHP服务器</span></span><br><span class="line">        proxy_pass     http://backend;                      <span class="comment"># PHP服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="反向代理缓存服务器配置"><a href="#反向代理缓存服务器配置" class="headerlink" title="反向代理缓存服务器配置"></a>反向代理缓存服务器配置</h3><p>Nginx 代理功能根据应用方式的不同分为正向代理和反向代理，Nginx 开源版本的正向代理功能并不完整，不支持 HTTP 的 CONNECT 方法，所以 <strong>HTTPS 的正向代理功能通常是使用第三方模块来实现的。</strong></p>
<p>Nginx 的 HTTPS 正向代理使用最多的第三方模块是 ngx_http_proxy_connect_module，但<strong>其不支持缓存</strong>，所以开源版本 Nginx 无法在正向代理缓存的使用场景中应用。</p>
<p>Nginx 的重点缓存应用是在反向代理缓存的应用场景，官方也一直在不断地增强该功能。</p>
<p>Nginx 反向代理缓存是目前网站架构中最常用的缓存方式，其不仅被网站架设者用以提高访问速度，降低应用服务器的负载，同时也被广泛应用于 CDN 的缓存服务器中。</p>
<p>Nginx的反向代理缓存有以下几个功能特点。</p>
<ul>
<li>故障降级。如果源服务器因故障停机，即便缓存过期，也可以被返回给用户使用，这就避免了页面无法打开的故障信息传递，从而实现有效容错降级；</li>
<li>缓存负载。基于Nginx提供的比例分配赋值指令，可以将请求分配给由多个不同的硬盘组成的缓存池，以实现缓存存储负载，降低I&#x2F;O瓶颈，提升磁盘效率；</li>
<li>缓存锁。使多个相同的请求只有一个可以访问被代理服务器，其他的请求则等待缓存生成后，从缓存中获取响应数据，从而有效地提升缓存利用率，降低被代理服务器的负载；</li>
<li>缓存验证支持。支持在Nginx本地缓存有效期过期后，通过服务器远端验证的方式确认缓存是否有效；</li>
<li>范围请求支持。通过切片指令设置，提升了范围请求的缓存效率，使其响应速度更快；</li>
<li>缓存控制。可对用户的请求是否使用缓存、响应数据是否被缓存、可被缓存的最低使用频率等方式实现缓存控制。</li>
</ul>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend_server &#123;</span><br><span class="line">    ip_hash;                                 <span class="comment"># session会话保持</span></span><br><span class="line">    server 192.168.2.145:8081;               <span class="comment"># 被代理服务器IP</span></span><br><span class="line">    server 192.168.2.159:8081;               <span class="comment"># 被代理服务器IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_cache_path /usr/local/nginx/nginx-cache1</span><br><span class="line">                            levels=1:2</span><br><span class="line">                            keys_zone=cache_hdd1:100m</span><br><span class="line">                            max_size=10g</span><br><span class="line">                            use_temp_path=off</span><br><span class="line">                            inactive=60m;    <span class="comment"># 设置缓存存储路径1，缓存的共享内存名称和大小100MB，</span></span><br><span class="line">                                             <span class="comment"># 无效缓存的判断时间为1小时</span></span><br><span class="line"></span><br><span class="line">proxy_cache_path /usr/local/nginx/nginx-cache2</span><br><span class="line">                            levels=1:2</span><br><span class="line">                            keys_zone=cache_hdd2:100m</span><br><span class="line">                            max_size=10g</span><br><span class="line">                            use_temp_path=off</span><br><span class="line">                            inactive=60m;    <span class="comment"># 设置缓存存储路径2，缓存的共享内存名称和大小100MB，</span></span><br><span class="line">                                             <span class="comment"># 无效缓存的判断时间为1小时</span></span><br><span class="line"></span><br><span class="line">split_clients <span class="variable">$request_uri</span> <span class="variable">$proxy_cache</span> &#123;</span><br><span class="line">              50%          <span class="string">&quot;cache_hdd1&quot;</span>;     <span class="comment"># 50%请求的缓存存储在第一个磁盘上</span></span><br><span class="line">              50%          <span class="string">&quot;cache_hdd2&quot;</span>;     <span class="comment"># 50%请求的缓存存储在第二个磁盘上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    root /opt/nginx-web/phpweb;</span><br><span class="line">    index index.php;</span><br><span class="line">    include        proxy.conf;               <span class="comment"># 引入默认配置文件</span></span><br><span class="line">   </span><br><span class="line">    location ~ \.(gif|jpg|png|htm|html|css|js|flv|ico|swf)(.*) &#123;</span><br><span class="line">                                                <span class="comment"># 设置客户端静态资源文件缓存过期时间为12小时</span></span><br><span class="line">        expires      12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    proxy_ignore_headers Cache-Control Set-Cookie;</span><br><span class="line">                                                <span class="comment"># 忽略被代理服务器返回响应头中指定字段的控制响应</span></span><br><span class="line">    location ~ / &#123;</span><br><span class="line">        root /opt/nginx-web/phpweb;</span><br><span class="line"></span><br><span class="line">        proxy_cache <span class="variable">$proxy_cache</span>;     <span class="comment"># 启用proxy_cache_path设置的$proxy_cache的共享内存区域</span></span><br><span class="line">        proxy_cache_lock on;          <span class="comment"># 启用缓存锁</span></span><br><span class="line">        proxy_cache_lock_age 5s;      <span class="comment"># 缓存锁有效期为5s</span></span><br><span class="line">        proxy_cache_lock_timeout 5s;  <span class="comment"># 等待缓存锁超时时间为5s</span></span><br><span class="line">        proxy_cache_methods GET HEAD; <span class="comment"># 默认对GET及HEAD方法的请求进行缓存</span></span><br><span class="line">        proxy_cache_min_uses 1;       <span class="comment"># 响应数据至少被请求1次，才将被缓存</span></span><br><span class="line"></span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_pragma</span>;    <span class="comment"># 当客户端请求头包含字段pragma时，不适用缓存</span></span><br><span class="line"></span><br><span class="line">        proxy_cache_use_stale error <span class="built_in">timeout</span> invalid_header</span><br><span class="line">                                updating http_500 http_503</span><br><span class="line">                                http_403 http_404 http_429;</span><br><span class="line">                                        　　　　<span class="comment"># 当出现指定条件时，使用已经过期的缓存响应数据</span></span><br><span class="line"></span><br><span class="line">        proxy_cache_background_update on;   <span class="comment"># 允许使用过期的响应数据时，启用后台子请求用以更新过</span></span><br><span class="line">                                            <span class="comment"># 期缓存，并将过期的缓存响应数据返回给客户端</span></span><br><span class="line"></span><br><span class="line">        proxy_cache_revalidate on;          <span class="comment"># 当缓存过期时，向后端服务器发起服务端校验</span></span><br><span class="line">        proxy_cache_valid 200 301 302 10h;  <span class="comment"># 200 301 302状态码的响应缓存10小时</span></span><br><span class="line">        proxy_cache_valid any 1m;           <span class="comment"># 其他状态码的响应缓存1分钟</span></span><br><span class="line"></span><br><span class="line">        add_header X-Cache-Status <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">                                               <span class="comment"># 添加缓存请求状态标识</span></span><br><span class="line"></span><br><span class="line">        proxy_pass   http://backend_server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在默认配置下，Nginx 会对被代理服务器返回<strong>响应数据信息头</strong>的缓存控制字段 Cache-Control 执行相关操作。当 Cache-Control 字段的值为 private、no-cache 或者有字段 Set-Cookie 时，它会对响应数据缓存产生影响，可以使用 proxy_ignore_headers 指令忽略这些字段的操作响应。</p>
<p>proxy_ignore_headers Cache-Control Set-Cookie; Nginx <strong>默认只对 GET 和 HEAD 方法的请求进行缓存</strong>，如果想对 POST 请求方法的数据进行缓存，则可以使用 proxy_cache_methods 指令进行设置。 proxy_cache_methods GET HEAD POST;</p>
<hr>
<h3 id="客户端缓存控制"><a href="#客户端缓存控制" class="headerlink" title="客户端缓存控制"></a>客户端缓存控制</h3><p><strong>expires、etag、if_modified_since</strong></p>
<p>客户端的缓存有两种验证机制，一种是基于<strong>有效期的本地有效期验证</strong>；另一种是<strong>由服务端提供的服务端验证</strong>。Nginx 提供了 expires、etag、if_modified_since 指令可实现对客户端缓存的控制。</p>
<h4 id="有效期验证"><a href="#有效期验证" class="headerlink" title="有效期验证"></a>有效期验证</h4><p>expires 指令可实现在响应状态码为 200、201、204、206、301、302、303、304、307 或 308 时，对响应头中的属性字段 Expires 和 Cache-Control 进行添加或编辑操作。该指令会同时设置 Expires 和 Cache-Control 两个字段，客户端根据这两个字段的值执行内容缓存的本地有效期设置。</p>
<ul>
<li><strong>设置相对时间</strong></li>
</ul>
<p>响应头字段 Expires 的值为当前时间与指令值的时间之和，响应头字段 Cache-Control 的值为指令值的时间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    expires    24h;           <span class="comment"># 设置Expires为当前时间过后的24小时，Cache-Control的值为24</span></span><br><span class="line">                              <span class="comment"># 小时</span></span><br><span class="line">    expires    modified +24h; <span class="comment"># 编辑Expires增加24小时，Cache-Control的值增加24小时</span></span><br><span class="line">    expires    <span class="variable">$expires</span>;      <span class="comment"># 根据变量$expires的内容设置缓存时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>设置绝对时间</strong></li>
</ul>
<p>可以通过前缀 @ 指定一个绝对时间，表示在当天的指定时间失效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    expires    @15h;        <span class="comment"># 设置Expires为当前日的15点，Cache-Control的值为到</span></span><br><span class="line">                            <span class="comment"># 当前时间到15点的时间差</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>无有效期设置</strong></li>
</ul>
<p>时间为负值或为 epoch 时，响应头字段 Cache-Control 的值为 no-cache，表示当前响应数据的内容缓存无有效期。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    expires    -1;</span><br><span class="line">    expires    epoch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>最大值设置</strong></li>
</ul>
<p>指令值为 max 时，Expires 的值为 Thu,31 Dec 2037 23:55:55 GMT，Cache-Control 为 10 年。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    expires  max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 除了提供指令 expires 可以实现有效期控制外，还提供了指令 add_header，可以让用户自定义响应头实现客户端缓存的控制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    add_header Cache-Control no-cache;  <span class="comment"># 响应数据的内容缓存无有效期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端验证"><a href="#服务端验证" class="headerlink" title="服务端验证"></a>服务端验证</h4><ul>
<li><strong>Etag 实体标签</strong></li>
</ul>
<p>Nginx 作为 Web 服务器时，对静态资源会自动在响应头中添加响应头字段 Etag，<strong>字段值为静态资源文件的最后编辑时间（last_modified_time）和文件大小的十六进制组合。</strong></p>
<p>对于代理的响应内容则由被代理服务器进行控制，不会自动添加 Etag 字段，只有存在 Nginx 服务器由 Nginx 直接读取的文件时才会自动添加 Etag 字段，它可以通过添加 etag off 指令禁止自动生成 Etag。</p>
<ul>
<li><strong>文件修改时间</strong></li>
</ul>
<p>Nginx 作为 Web 服务器时，会对静态资源自动添加响应头字段 Last-Modified，字段值为静态资源文件的最后编辑时间（last_modified_time）。</p>
<p>Nginx 提供了配置指令 if_modified_since，对文件修改时间的服务端校验提供了两种不同的比对方式。一种是指令值为 exact 时，Nginx 会将请求头中 if_modified_since 的时间与响应数据中的时间做精确匹配，即完全相等才认为客户端缓存有效，返回响应状态码 304；另一种是指令值为 before 时，则在请求头中 if_modified_since 的时间大于响应数据中的时间也认为客户端缓存有效，返回响应状态码 304。该指令功能控制处于数据流的出入口，对于任何形式产生的响应数据都有效，当指令值为 off 时，则关闭 Nginx 对客户端缓存文件修改时间的服务端校验功能。</p>
<p>任何与用户私人相关的数据都不应该被缓存，所以对于私人内容数据建议设置 HTTP 信息头 Cache-Control 字段值为 no-cache、no-store 或 private 控制客户端不进行缓存，根据数据内容的敏感性，正确设置这些头字段，可以在保持维护私人信息安全的前提下利用缓存的优势提升网站的响应速度。</p>
<hr>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="负载均衡模块"><a href="#负载均衡模块" class="headerlink" title="负载均衡模块"></a>负载均衡模块</h3><p>Nginx 负载均衡是由代理模块和上游（upstream）模块共同实现的，</p>
<p>Nginx 通过代理模块的反向代理功能将用户请求转发到上游服务器组，上游模块通过指定的负载均衡策略及相关的参数配置将用户请求转发到目标服务器上。</p>
<h4 id="服务器配置指令"><a href="#服务器配置指令" class="headerlink" title="服务器配置指令"></a><strong>服务器配置指令</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com       weight=5;     <span class="comment"># 被代理服务器端口号为80，权重为5</span></span><br><span class="line">    server backend2.example.com:8080;               <span class="comment"># 被代理服务器端口号为8080，默认权重为1</span></span><br><span class="line">    server unix:/tmp/backend3;</span><br><span class="line"></span><br><span class="line">    server backup1.example.com:8080   backup;       <span class="comment"># 该被代理服务器为备份状态</span></span><br><span class="line">    server backup2.example.com:8080   backup;       <span class="comment"># 该被代理服务器为备份状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://backend;          <span class="comment"># 将客户端请求反向代理到上游服务器组backend</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 上游模块定义了 upstream 指令域，在该指令域内可设置服务器、负载均衡策略等负载均衡配置，配置样例如下，具体指令说明如下面表格中所示。</p>
<p><strong>表:服务器指令</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">服务器指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">server</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">配置格式</td>
<td align="left">address[parameters];</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定上游服务器组的服务器地址及连接参数</td>
</tr>
<tr>
<td align="left">关于上表有以下几点需要注意:</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>服务器地址可以是指定端口的 IP、域名或 Unix 套接字；</p>
<p>如不指定端口，默认端口号为 80。</p>
<p><strong>表:服务器指令参数</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">参数名称</th>
<th align="left">参数类型</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">weight</td>
<td align="left">权重</td>
<td align="left">int</td>
<td align="left">1</td>
<td align="left">设置服务器的权重</td>
</tr>
<tr>
<td align="left">max_fails</td>
<td align="left">最大失败数</td>
<td align="left">int</td>
<td align="left">1</td>
<td align="left">被代理服务器在 fail timeout 规定时间内的最大请求失败次数，超过设定值后，被代理服务器便被认为不可用。是否失败由 proxy_next_upstream、fastcgi_next_upstream、uwsgi_next_upstream、scgi_next_upstream、memcached_next_upstream 及 grpe_next_upstream 指令定义。0 表示关闭被代理服务器的失败检测功能</td>
</tr>
<tr>
<td align="left">fail_timeout</td>
<td align="left">失败超时</td>
<td align="left">time</td>
<td align="left">10s</td>
<td align="left">被代理服务器被置为不可用的最长时间及被代理服务器被连续失败检测的最长时间</td>
</tr>
<tr>
<td align="left">backup</td>
<td align="left">备份服务器</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">将被代理服务器标为备份状态，当其他非备份被代理服务器不可用时，会把请求转发给备份被代理服务器</td>
</tr>
<tr>
<td align="left">down</td>
<td align="left">无效服务器</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">将被代理服务器标为不可用状态</td>
</tr>
<tr>
<td align="left">max_conns</td>
<td align="left">最大连接数</td>
<td align="left">int</td>
<td align="left">0</td>
<td align="left">与被代理服务器建立活动连接的最大数量，默认值 0 表示没有限制</td>
</tr>
<tr>
<td align="left">resolve</td>
<td align="left">动态解析</td>
<td align="left">–</td>
<td align="left">–</td>
<td align="left">在被代理服务器域名对应的 IP 变化时，自动更新被代理服务器的 IP，该参数依赖 resolver 指令设置的域名解析服务器。仅对商业版本有效</td>
</tr>
<tr>
<td align="left">service</td>
<td align="left">DNS SRV 记录</td>
<td align="left">name</td>
<td align="left">–</td>
<td align="left">DNS SRV 记录设置。仅对商业版本有效</td>
</tr>
<tr>
<td align="left">slow_start</td>
<td align="left">慢恢复时间</td>
<td align="left">time</td>
<td align="left">0</td>
<td align="left">不可用服务器在设置时间内检测持续有效后便被恢复正常，默认关闭。仅对商业版本有效</td>
</tr>
</tbody></table>
<p>其中，slow_start 参数不能与 Hash 负载均衡方法一同使用；若上游服务器组中只有一台被代理服务器，则 max_fails、fail_timeout 和 slow_start 参数都会被忽略，并且这个服务器将永远不会被置为无效。</p>
<p><strong>表:共享内存区指令</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">共享内存区指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">zone</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">配置格式</td>
<td align="left">name[size];</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设定共享内存区域的名称及大小，用以在多个工作进程间共享配置及运行时的状态</td>
</tr>
</tbody></table>
<p><strong>表:长连接最大请求数指令</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">长连接最大请求数指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">keepalive_requests</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">指令格式</td>
<td align="left">number;</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">100;</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置每个与被代理服务器建立的长连接中传输请求的最大数量，超过这个值后，该连接将被关闭</td>
</tr>
</tbody></table>
<p><strong>表:长连接缓存数</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">长连接缓存数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">keepalive</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">指令格式</td>
<td align="left">connections;</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">当 Nginx 与被代理服务器建立长连接时，设定每个工作进程可以缓存的与当前上游服务器组中被代理服务器保持长连接的数量。当超过设定值时，将根据最近最少使用算法（LRU）关闭连接</td>
</tr>
</tbody></table>
<p>注意:该指令不会对活跃的 TCP 连接数有影响。</p>
<p><strong>表:长连接缓存超时时间</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">长连接缓存超时时间</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">keepalive_timeout</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">指令格式</td>
<td align="left">timeout;</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">60;</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置长连接缓存中，每个连接的超时时间，被缓存的连接超过这个时间仍未被激活使用时将被关闭</td>
</tr>
</tbody></table>
<h4 id="负载均衡策略指令"><a href="#负载均衡策略指令" class="headerlink" title="负载均衡策略指令"></a><strong>负载均衡策略指令</strong></h4><p>Nginx 支持多种负载均衡策略，如轮询（Round Robin）、一致性哈希（Consistent Hash）、IP 哈希（IP Hash）、最少连接（least_conn）等。Nginx 的默认负载均衡策略为轮询策略，不需要配置指令，轮询策略通过 server 的权重参数可实现手动分配的加权轮询策略。</p>
<p>负载均衡策略配置指令均应编辑在 upstream 指令域的最上方，常见的配置指令如下面表格中所示。</p>
<p><strong>表:哈希策略</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">哈希策略</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">hash</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">指令格式</td>
<td align="left">key[consistent];</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置用于哈希策略计算哈希值的键值，并对上游服务器组启用哈希的负载均衡策略。键值可以是文本、变量及其组合，当 consistent 参数被指定时，将启用 Ketama 一致性哈希的负载均衡策略</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    <span class="built_in">hash</span> <span class="variable">$request_uri</span>;              <span class="comment"># 以客户端请求URI为计算哈希值的key</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">    <span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;   <span class="comment"># 以客户端请求URI为计算哈希值的key，采用一致性哈希算法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>表:IP 哈希策略</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">IP 哈希策略</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">ip_hash</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置启用 IP 哈希负载均衡策略，根据客户端的 IPv4 地址的前三个八位字节或整个 IPv6 地址作为哈希键计算哈希值，该方法确保同一客户端的请求总会被同一被代理服务器处理。当 IP 哈希值对应的被代理服务器不可用时，请求将被分配给其他服务器</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    ip_hash;                <span class="comment"># 启用IP哈希负载均衡策略</span></span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com down;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当服务器组中一台服务器被临时删除时，可使用 down 参数标记，那么客户端 IP 哈希值将会保留。</p>
<p><strong>表:最少连接策略</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">最少连接策略</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">least_conn</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">在考虑上游服务器组中各服务器权重的前提下，将客户端请求分配给拥有最少活跃连接被代理服务器的负载均衡策略</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    least_conn;             <span class="comment"># 启用最少连接负载均衡策略</span></span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>表:随机负载策略</strong></p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">随机负载策略</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">random</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">upstream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">在考虑上游服务器组中各服务器权重的前提下，将客户端请求分配给随机选择的被代理服务器</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    random;                 <span class="comment"># 每个请求都被随机发送到某个服务器</span></span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指令值参数 two，该参数表示随机选择两台被代理服务器，然后使用指定的负载策略进行选择，默认方法为 least_conn；可被指定的负载策略为 least_conn、least_time（仅对商业版有效）。</p>
<hr>
<h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p>负载均衡技术是将大量的客户端请求通过特定的策略分配到集群中的节点，实现快速响应的应用技术。在应对高并发的应用请求时，单节点的应用服务计算能力有限，无法满足客户端的响应需求，通过负载均衡技术，可以将请求分配到集群中的多个节点中，让多个节点分担高并发请求的运算，快速完成客户端的请求响应。</p>
<h4 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h4><p>轮询（Round Robin）策略是 Nginx 配置中默认的负载均衡策略，该策略将客户端的请求依次分配给后端的服务器节点，对后端集群中的服务器实现轮流分配。轮询策略绝对均衡，且实现简单，但也会因后端服务器处理能力的不同而影响整个集群的处理性能。</p>
<ul>
<li><strong>加权轮询</strong></li>
</ul>
<p>在 Nginx 的轮询策略中，为了避免因集群中服务器性能的差异对整个集群性能造成影响，在轮询策略的基础上增加了权重参数，让使用者可以手动根据集群中各服务器的性能将请求数量按照权重比例分配给不同的被代理服务器。</p>
<ul>
<li><strong>平滑轮询</strong></li>
</ul>
<p>在加权轮询策略中，会按照权重的高低分配客户端请求，若按照高权重分配完再进行低权重分配的话，可能会出现的情况是高权重的服务器一直处于繁忙状态，压力相对集中。Nginx 通过平滑轮询算法，使得上游服务器组中的每台服务器在总权重比例分配不变的情况下，均能参与客户端请求的处理，有效避免了在一段时间内集中将请求都分配给高权重服务器的情况发生。</p>
<p>配置样例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server a weight=5;</span><br><span class="line">        server b weight=1;</span><br><span class="line">        server c weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例中 Nginx 平滑轮询策略计算过程如下。</p>
<p>1.当前配置中 a,b,c 服务器的配置权重为 {5,1,1}；</p>
<p>2.配置样例中 Nginx 平滑轮询计算过程如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">轮询次数</th>
<th align="left">当前权重</th>
<th align="left">选择后权重</th>
<th align="left">选择节点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">{0, 0, 0}</td>
<td align="left">{0, 0, 0}</td>
<td align="left">–</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">{5, 1, 1}</td>
<td align="left">{-2, 1, 1}</td>
<td align="left">a</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">{3, 2, 2}</td>
<td align="left">{-4, 2, 2}</td>
<td align="left">a</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">{1, 3, 3}</td>
<td align="left">{1, -4, 3}</td>
<td align="left">b</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">{6, -3, 4}</td>
<td align="left">{-1, -3, 4}</td>
<td align="left">a</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">{4, -2, 5}</td>
<td align="left">{4, -2, -2}</td>
<td align="left">c</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">{9, -1, -1}</td>
<td align="left">{2, -1, -1}</td>
<td align="left">a</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">{7, 0, 0}</td>
<td align="left">{0, 0, 0}</td>
<td align="left">a</td>
</tr>
</tbody></table>
<p>关于上表有以下几点需要说明:</p>
<ul>
<li>有效权重（effective_weight），初始值为配置文件中权重的值，会因节点的健康状态而变化；</li>
<li>当前权重（current_weight），节点被选择前的权重值，由上一个选择后权重值及各节点与自己的有效权重值相加而得；</li>
<li>选择后权重，所有节点中权重最高节点的当前权重值为其初始值与有效总权重相减的值，其他节点的权重值不变；</li>
<li>有效总权重为所有节点中非备份、非失败状态的服务器的有效权重之和；</li>
<li>根据上述平滑轮询算法，选择节点顺序为 {a,a,b,a,c,a,a}。</li>
</ul>
<h4 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h4><p>Nginx 启用哈希的负载均衡策略，是用 hash 指令来设置的。哈希策略方法可以针对客户端访问的 URL 计算哈希值，对相同的 URL 请求，Nginx 可以因相同的哈希值而将其分配到同一后端服务器。当后端服务器为缓存服务器时，将极大提高命中率，提升访问速度。</p>
<p>一致性哈希的优点是，可以使不同客户端的相似请求发送给同一被代理服务器，当被代理服务器为缓存服务器场景应用时，可以极大提高缓存的命中率。</p>
<p>一致性哈希的缺点是，当上游服务器组中的节点数量发生变化时，将导致所有绑定被代理服务器的哈希值重新计算，影响整个集群的绑定关系，产生大量回源请求。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$request_uri</span>;  <span class="comment"># 以客户端请求URI为计算哈希值的key</span></span><br><span class="line">        server a weight=5;</span><br><span class="line">        server b weight=1;</span><br><span class="line">        server c weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例中 Nginx 哈希策略计算过程如下。</p>
<ul>
<li>首先会根据 $request_uri 计算哈希值；</li>
<li>根据哈希值与配置文件中非备份状态服务器的总权重计算出哈希余数；</li>
<li>按照轮询策略选出初始被代理服务器，如果哈希余数大于初始被代理服务器的权重，则遍历轮询策略中被代理服务器列表；</li>
<li>当遍历轮询策略中被代理服务器列表时，要用哈希余数依次减去轮询策略中的上一个被代理服务器的权重，直到哈希余数小于某个被代理服务器的权重时，该被代理服务器被选出；</li>
<li>若循环 20 次仍无法选出，则使用轮询策略进行选择。</li>
</ul>
<p>针对哈希算法的缺点，Nginx 提供了 consistent 参数启用一致性哈希（Consistent Hash）负载均衡策略。Nginx 采用的是 Ketama 一致性哈希算法，使用一致性哈希策略后，当上游服务器组中的服务器数量变化时，只会影响少部分客户端的请求，不会产生大量回源。</p>
<p>Nginx 一致性哈希计算过程如下。</p>
<ol>
<li><p>根据配置文件中非备份状态服务器的总权重乘以 160 计算出总的虚拟节点数量，初始化虚拟节点数组。</p>
</li>
<li><p>遍历轮询策略中的被代理服务器列表，根据每个服务器的权重数乘以160得出该服务器的虚拟节点数量，并根据服务器的 HOST 和 PORT 计算出该服务器的基本哈希（base_hash）。</p>
</li>
<li><p>循环每个服务器虚拟节点总数次数，由基本哈希（base_hash）值与上一个虚拟节点的哈希值（PREV_HASH）依次计算出所有属于该服务器的虚拟节点哈希值，并把虚拟节点哈希值与服务器映射关系保存在虚拟节点哈希值数组中。</p>
</li>
<li><p>对虚拟节点哈希值数组进行排序去重处理，得到新的有效虚拟节点哈希值数组。</p>
</li>
</ol>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;       <span class="comment"># 以客户端请求URI为计算哈希值的key，使用一致性</span></span><br><span class="line">                                                <span class="comment"># 哈希算法</span></span><br><span class="line">        server a weight=1;</span><br><span class="line">        server b weight=1;</span><br><span class="line">        server c weight=1;</span><br><span class="line">        server c weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例中 Nginx 一致性哈希策略计算过程如下。</p>
<ul>
<li>首先根据 $request_uri 计算哈希值；</li>
<li>通过二分法，快速在虚拟节点列表中选出该哈希值所在范围的最大虚拟节点哈希值；</li>
<li>通过虚拟节点哈希值与虚拟节点集合总数取余，获得对应的服务器作为备选服务器；</li>
<li>遍历轮询策略中被代理服务器列表，判断备选服务器的有效性，选出服务器；</li>
<li>若循环 20 次仍无法选出，则使用轮询策略进行选择。</li>
</ul>
<h4 id="IP-哈希"><a href="#IP-哈希" class="headerlink" title="IP 哈希"></a>IP 哈希</h4><p>IP 哈希（IP Hash）负载均衡策略根据客户端IP计算出哈希值，然后把请求分配给该数值对应的被代理服务器。在哈希值不变且被代理服务器可用的前提下，同一客户端的请求始终会被分配到同一台被代理服务器上。IP 哈希负载均衡策略常被应用在会话（Session）保持的场景。</p>
<p>HTTP 客户端在与服务端交互时，因为 HTTP 协议是无状态的，所以任何需要上下文逻辑的情景都必须使用会话保持机制，会话保持机制是通过客户端存储由唯一的 Session ID 进行标识的会话信息，每次与服务器交互时都会将会话信息提交给服务端，服务端依照会话信息实现客户端请求上下文的逻辑关联。</p>
<p>会话信息通常存储在被代理服务器的内存中，如果负载均衡将客户端的会话请求分配给其他被代理服务器，则该会话逻辑将因为会话信息失效而中断。所以为确保会话不中断，需要负载均衡将同一客户端的会话请求始终都发送到同一台被代理服务器，通过会话保持实现会话信息的有效传递。</p>
<p>配置样例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        ip_hash;            # 启用IP哈希负载均衡策略</span><br><span class="line">        server a weight=5;</span><br><span class="line">        server b weight=1;</span><br><span class="line">        server c weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例中 Nginx 的 IP 哈希策略计算过程如下。</p>
<ul>
<li>在多层代理的场景下，请确保当前 Nginx 可获得真实的客户端源 IP；</li>
<li>首先会根据客户端的 IPv4 地址的前三个八位字节或整个 IPv6 地址作为哈希键计算哈希值；</li>
<li>根据哈希值与配置文件中非备份状态服务器的总权重计算出哈希余数；</li>
<li>按照轮询策略选出初始被代理服务器，如果哈希余数大于初始被代理服务器的权重，则遍历轮询策略中被代理服务器列表，否则初始被代理服务器将被选出；</li>
<li>当遍历轮询策略中被代理服务器列表时，要用哈希余数依次减去轮询策略中的上一个被代理服务器的权重，直到哈希余数小于某个被代理服务器的权重时该被代理服务器被选出；</li>
<li>若循环 20 次仍无法选出，则使用轮询策略进行选择。</li>
</ul>
<h4 id="最少连接"><a href="#最少连接" class="headerlink" title="最少连接"></a>最少连接</h4><p>默认配置下轮询算法是把客户端的请求平均分配给每个被代理服务器，每个被代理服务器的负载大致相同，该场景有个前提就是每个被代理服务器的请求处理能力是相当的。如果集群中某个服务器处理请求的时间比较长，那么该服务器的负载也相对增高。在最少连接（least_conn）负载均衡策略下，会在上游服务器组中各服务器权重的前提下将客户端请求分配给活跃连接最少的被代理服务器，进而有效提高处理性能高的被代理服务器的使用率。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    least_conn;         <span class="comment"># 启用最少连接负载均衡策略</span></span><br><span class="line">    server a weight=4;</span><br><span class="line">    server b weight=2;</span><br><span class="line">    server c weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置样例中 Nginx 最少连接策略计算过程如下。</p>
<ul>
<li>遍历轮询策略中被代理服务器列表，比较各个后端的活跃连接数（conns）与其权重（weight）的比值，选取比值最小者分配客户端请求；</li>
<li>如果上一次选择了 a 服务器，则当前请求将在 b 和 c 服务器中选择；</li>
<li>设 b 的活跃连接数为 100，c 的活跃连接数为 60，则 b 的比值（conns&#x2F;weight）为 50，c 的比值（conns&#x2F;weight）为 60，因此当前请求将分配给 b。</li>
</ul>
<h4 id="随机负载算法"><a href="#随机负载算法" class="headerlink" title="随机负载算法"></a>随机负载算法</h4><p>在 Nginx 集群环境下，每个 Nginx 均通过自身对上游服务器的了解情况进行负载均衡处理，这种场景下，很容易出现多台 Nginx 同时把请求都分配给同一台被代理服务器的场景，该场景被称为羊群行为（Herd Behavior）。</p>
<p>Nginx 基于两种选择的力量（Power of Two Choices）原理，设计了随机（Random）负载算法。该算法使 Nginx 不再基于片面的情况了解使用固有的负载均衡策略进行被代理服务器的选择，而是随机选择两个，在经过比较后进行最终的选择。随机负载算法提供了一个参数 two，当这个参数被指定时，Nginx 会在考虑权重的前提下，随机选择两台服务器，然后用以下几种方法选择一个服务器。</p>
<ul>
<li>最少连接数，配置指令为 least_conn，默认配置；</li>
<li>响应头最短平均时间，配置指令为 least_time&#x3D;header，仅对商业版本有效；</li>
<li>完整请求最短平均时间，配置指令为 least_time&#x3D;last_byte，仅对商业版本有效。</li>
</ul>
<p>配置样例如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    random two least_conn;</span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在只有单台 Nginx 服务器时，一般不建议使用随机负载算法。</p>
<hr>
<h3 id="长连接负载均衡"><a href="#长连接负载均衡" class="headerlink" title="长连接负载均衡"></a>长连接负载均衡</h3><p>当客户端通过浏览器访问 HTTP 服务器时，HTTP 请求会通过 TCP 协议与 HTTP 服务器建立一条访问通道，当本次访问数据传输完毕后，该 TCP 连接会立即被断开，由于这个连接存在的时间很短，所以 HTTP 连接也被称为短连接。</p>
<p>在 HTTP&#x2F;1.1 版本中默认开启 <strong>Connection:keep-alive</strong>，实现了 HTTP 协议的长连接，可以在一个 TCP 连接中传输多个 HTTP 请求和响应，减少了建立和关闭 TCP 连接的消耗和延迟，提高了传输效率。网络应用中，每个网络请求都会打开一个 TCP 连接，基于上层的软件会根据需要决定这个连接的保持或关闭。例如，FTP 协议的底层也是 TCP，是长连接。</p>
<p>默认配置下，HTTP 协议的负载均衡与上游服务器组中被代理的连接都是 HTTP&#x2F;1.0 版本的短连接。Nginx 的连接管理机制如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZQ13044937.gif" alt="Nginx 连接管理机制"></p>
<p>相关说明如下。</p>
<p>Nginx 启动初始化时，每个 Nginx 工作进程（Worker Process）会生成一个由配置指令 worker_connections 指定大小的可用连接池（free_connection pool）。工作进程每建立一个连接，都会从可用连接池中分配（ngx_get_connection）到一个连接资源，而关闭连接时再通知（ngx_free_connection）可用连接池回收此连接资源。</p>
<p>客户端向 Nginx 发起 HTTP 连接时，Nginx 的工作进程获得该请求的处理权并接受请求，同时从可用连接池中获得连接资源与客户端建立客户端连接资源。</p>
<p>Nginx 的工作进程从可用连接池获取连接资源，并与通过负载均衡策略选中的被代理服务器建立代理连接。</p>
<p>默认配置下，Nginx 的工作进程与被代理服务器建立的连接都是短连接，所以获取请求响应后就会关闭连接并通知可用连接池回收此代理连接资源。</p>
<p>Nginx 的工作进程将请求响应返回给客户端，若该请求为长连接，则保持连接，否则关闭连接并通知可用连接池回收此客户端连接资源。</p>
<p>Nginx 能建立的最大连接数是 worker_connections×worker_processes。而对于反向代理的连接，最大连接数是 worker_connections×worker_processes&#x2F;2，但是其会占用与客户端及与被代理服务器建立的两个连接。</p>
<p>在高并发的场景下，Nginx 频繁与被代理服务器建立和关闭连接会消耗大量资源。Nginx 的 upstream_keepalive 模块提供与被代理服务器间建立长连接的管理支持，该模块建立了一个长连接缓存，用于管理和存储与被代理服务器建立的连接。Nginx 长连接管理机制如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZQ13109228.gif" alt="Nginx 长连接管理机制"></p>
<p>相关说明如下。</p>
<p>当 upstream_keepalive 模块初始化时，将建立按照 upstream 指令域中的 keepalive 指令设置大小的长连接缓存（Keepalive Connect Cache）池。</p>
<p>当 Nginx 的工作进程与被代理服务器新建的连接完成数据传输时，其将该连接缓存在长连接缓存池中。</p>
<p>当工作进程与被代理服务器有新的连接请求时，会先在长连接缓存池中查找符合需求的连接，如果存在则使用该连接，否则创建新连接。</p>
<p>对于超过长连接缓存池数量的连接，将使用最近最少使用（LRU）算法进行关闭或缓存。</p>
<p>长连接缓存池中每个连接最大未被激活的超时时间由 upstream 指令域中 keepalive_timeout 指令设置，超过该指令值时间未被激活的连接将被关闭。</p>
<p>长连接缓存池中每个连接可复用传输的请求数由 upstream 指令域中 keepalive_requests 指令设置，超过该指令值复用请求数的连接将被关闭。</p>
<p>Nginx 与被代理服务器间建立的长连接是通过启用 HTTP&#x2F;1.1 版本协议实现的。由于 HTTP 代理模块默认会将发往被代理服务器的请求头属性字段 Connection 的值设置为 Close，因此需要通过配置指令清除请求头属性字段 Connection 的内容。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream http_backend &#123;</span><br><span class="line">    server 192.168.2.154:8080;</span><br><span class="line">    server 192.168.2.109:8080;</span><br><span class="line">    keepalive 32;                           <span class="comment"># 长连接缓存池大小为32</span></span><br><span class="line">    keepalive_requests 2000;                <span class="comment"># 每条长连接最大复用请求数为2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location /http/ &#123;</span><br><span class="line">        proxy_pass http://http_backend;</span><br><span class="line">        proxy_http_version 1.1;             <span class="comment"># 启用HTTP/1.1版本与被代理服务器建立连接</span></span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;&quot;</span>;     <span class="comment"># 清空发送被代理服务器请求头属性字段Connection</span></span><br><span class="line">                                            <span class="comment"># 的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 FastCGI 协议服务器，需要设置 fastcgi_keep_conn 指令启用长连接支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream fastcgi_backend &#123;</span><br><span class="line">    server 192.168.2.154:9000;</span><br><span class="line">    server 192.168.2.109:9000;</span><br><span class="line">    keepalive 8;                            <span class="comment"># 长连接缓存池大小为8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /fastcgi/ &#123;</span><br><span class="line">        fastcgi_pass fastcgi_backend;</span><br><span class="line">        fastcgi_keep_conn on;               <span class="comment"># 启用长连接支持</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SCGI 和 uWSGI 协议没有长连接的概念；Memcached 协议（由 ngx_http_memcached_module 模块提供）的长连接配置，只需在 upstream 指令域中设置 keepalive 指令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream memcached_backend &#123;</span><br><span class="line">    server 127.0.0.1:11211;</span><br><span class="line">    server 10.0.0.2:11211;</span><br><span class="line"></span><br><span class="line">    keepalive 32;                           <span class="comment"># 长连接缓存池大小为32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    location /memcached/ &#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$memcached_key</span> <span class="variable">$uri</span>;            <span class="comment"># 设置$memcached_key为$uri</span></span><br><span class="line">        memcached_pass memcached_backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="stream容错机制详解"><a href="#stream容错机制详解" class="headerlink" title="stream容错机制详解"></a>stream容错机制详解</h3><p>Nginx 在 upstream 模块中默认的检测机制是通过用户的真实请求去检查被代理服务器的可用性，这是一种被动的检测机制，通过 upstream 模块中 server 指令的指令值参数 max_fails 及 fail_timeout 实现对被代理服务器的检测和熔断。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream http_backend &#123;</span><br><span class="line">    <span class="comment"># 10s内出现3次错误，该服务器将被熔断10s</span></span><br><span class="line">    server 192.168.2.154:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">    server 192.168.2.109:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">    server 192.168.2.108:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">    server 192.168.2.107:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    proxy_connect_timeout 5s;               <span class="comment"># 与被代理服务器建立连接的超时时间为5s</span></span><br><span class="line">    proxy_read_timeout 10s;                 <span class="comment"># 获取被代理服务器的响应最大超时时间为10s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当与被代理服务器通信出现指令值指定的情况时，认为被代理出错，并将请求转发给上游服务器组中</span></span><br><span class="line">    <span class="comment"># 的下一个可用服务器</span></span><br><span class="line">    proxy_next_upstream http_502 http_504 http_404 error <span class="built_in">timeout</span> invalid_header;</span><br><span class="line">    proxy_next_upstream_tries 3;            <span class="comment"># 转发请求最多3次</span></span><br><span class="line">    proxy_next_upstream_timeout 10s;        <span class="comment"># 总尝试超时时间为10s</span></span><br><span class="line"></span><br><span class="line">    location /http/ &#123;</span><br><span class="line">        proxy_pass http://http_backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的参数和指令说明如下。</p>
<ul>
<li>指令值参数 max_fails 是指 10s 内 Nginx 分配给当前服务器的请求失败次数累加值，每 10s 会重置为 0；</li>
<li>指令值参数 fail_timeout 既是失败计数的最大时间，又是服务器被置为失败状态的熔断时间，超过这个时间将再次被分配请求；</li>
<li>指令 proxy_connect_timeout 或 proxy_read_timeout 为超时状态时，都会触发 proxy_next_upstream 的 timeout 条件；</li>
<li>proxy_next_upstream 是 Nginx 下提高请求成功率的机制，当被代理服务器返回错误并符合 proxy_next_upstream 指令值设置的条件时，将尝试转发给下一个可用的被代理服务器；</li>
<li>指令 proxy_next_upstream_tries 的指令值次数包括第一次转发请求的次数。</li>
</ul>
<p>Nginx 被动检测机制的优点是不需要增加额外进程进行健康检测，但用该方法检测是不准确的。如当响应超时时，有可能是被代理服务器故障，也可能是业务响应慢引起的。如果是被代理服务器故障，那么 Nginx 仍会在一定时间内将客户端的请求转发给该服务器，用以判断其是否恢复。</p>
<p>Nginx 官方的主动健康检测模块仅集成在商业版本中，对于开源版本，推荐使用 Nginx 扩展版 OpenResty 中的健康检测模块 lua-resty-upstream-healthcheck。该模块的检测参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">shm</td>
<td align="left">–</td>
<td align="left">指定用于健康检测的共享内存名称，共享内存名称由 lua_shared_dict 设定</td>
</tr>
<tr>
<td align="left">upstream</td>
<td align="left">–</td>
<td align="left">指定要做健康检查的 upstream 组名</td>
</tr>
<tr>
<td align="left">type</td>
<td align="left">http</td>
<td align="left">指定检测的协议类型，目前只支持 http</td>
</tr>
<tr>
<td align="left">http_req</td>
<td align="left">–</td>
<td align="left">指定用于健康探测的 raw 格式 http 请求字符串</td>
</tr>
<tr>
<td align="left">timeout</td>
<td align="left">1000</td>
<td align="left">检测请求超时时间，单位为 ms</td>
</tr>
<tr>
<td align="left">interval</td>
<td align="left">1000</td>
<td align="left">健康检测的时间间隔，单位为 ms</td>
</tr>
<tr>
<td align="left">valid_status</td>
<td align="left">–</td>
<td align="left">健康检测请求返回的合法响应码列表，比如 {200, 302}</td>
</tr>
<tr>
<td align="left">concurrency</td>
<td align="left">1</td>
<td align="left">健康检测请求的并发数，建议大于上游服务器组中的节点数</td>
</tr>
<tr>
<td align="left">fall</td>
<td align="left">5</td>
<td align="left">对 UP 状态的设备，连续 fall 次失败，认定为 DOWN</td>
</tr>
<tr>
<td align="left">rise</td>
<td align="left">2</td>
<td align="left">对 DOWN 状态的设备，连续 rise 次成功，认定为 UP</td>
</tr>
<tr>
<td align="left">version</td>
<td align="left">0</td>
<td align="left">每次执行健康检测时的版本号，有节点状态改变，版本号加 1</td>
</tr>
</tbody></table>
<p>模块 lua-resty-upstream-healthcheck 的原理是每到（interval）设定的时间，就会对被代理服务器的 HTTP 端口主动发起 GET 请求（http_req），当请求的响应状态码在确定为合法的列表（valid_status）中出现时，则认为被代理服务器是健康的，如果请求的连续（fall）设定次数返回响应状态码都未在列表（valid_status）中出现，则认为是故障状态。</p>
<p>对处于故障状态的设备，该模块会将其置为 DOWN 状态，直到请求的连续（rise）次返回的状态码都在确定为合法的列表中出现，被代理服务器才会被置为 UP 状态，并获得 Nginx 分配的请求，Nginx 在整个运行过程中不会将请求分配给 DOWN 状态的被代理服务器。</p>
<p>lua-resty-upstream-healthcheck 模块只会使用 Nginx 中的一个工作进程对被代理服务器进行检测，不会对被代理服务器产生大量的重复检测。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 关闭socket错误日志</span></span><br><span class="line">    lua_socket_log_errors off;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上游服务器组样例</span></span><br><span class="line">    upstream foo.com &#123;</span><br><span class="line">        server 127.0.0.1:12354;</span><br><span class="line">        server 127.0.0.1:12355;</span><br><span class="line">        server 127.0.0.1:12356 backup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置共享内存名称及大小</span></span><br><span class="line">    lua_shared_dict _foo_zone 1m;</span><br><span class="line"></span><br><span class="line">    init_worker_by_lua_block &#123;</span><br><span class="line">        <span class="comment"># 引用resty.upstream.health-check模块</span></span><br><span class="line">        <span class="built_in">local</span> hc = require <span class="string">&quot;resty.upstream.healthcheck&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">local</span> ok, err = hc.spawn_checker&#123;</span><br><span class="line">            shm = <span class="string">&quot;_foo_zone&quot;</span>,              <span class="comment"># 绑定lua_shared_dict定义的共享内存</span></span><br><span class="line">            upstream = <span class="string">&quot;foo.com&quot;</span>,           <span class="comment"># 绑定upstream指令域</span></span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&quot;http&quot;</span>,</span><br><span class="line"></span><br><span class="line">            http_req = <span class="string">&quot;GET /status HTTP/1.0\r\nHost: foo.com\r\n\r\n&quot;</span>,</span><br><span class="line">                                                <span class="comment"># 用以检测的raw格式http请求</span></span><br><span class="line"></span><br><span class="line">            interval = 2000,                <span class="comment"># 每2s检测一次</span></span><br><span class="line">            <span class="built_in">timeout</span> = 1000,                 <span class="comment"># 检测请求超时时间为1s</span></span><br><span class="line">            fall = 3,                       <span class="comment"># 连续失败3次，被检测节点被置为DOWN状态</span></span><br><span class="line">            rise = 2,                       <span class="comment"># 连续成功2次，被检测节点被置为UP状态</span></span><br><span class="line">            valid_statuses = &#123;200, 302&#125;,    <span class="comment"># 当健康检测请求返回的响应码为200或302时，被认</span></span><br><span class="line">                                                <span class="comment"># 为检测通过</span></span><br><span class="line">            concurrency = 10,               <span class="comment"># 健康检测请求的并发数为10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">&quot;failed to spawn health checker: &quot;</span>, err)</span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        end</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 10080;</span><br><span class="line">        access_log  off;                    <span class="comment"># 关闭access日志输出</span></span><br><span class="line">        error_log  off;                     <span class="comment"># 关闭error日志输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 健康检测状态页</span></span><br><span class="line">        location = /healthcheck &#123;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            deny all;</span><br><span class="line"></span><br><span class="line">            default_type text/plain;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                <span class="comment"># 引用resty.upstream.healthcheck模块</span></span><br><span class="line">                <span class="built_in">local</span> hc = require <span class="string">&quot;resty.upstream.healthcheck&quot;</span></span><br><span class="line">                ngx.say(<span class="string">&quot;Nginx Worker PID: &quot;</span>, ngx.worker.pid())</span><br><span class="line">                ngx.print(hc.status_page())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是对该配置样例的几点说明。</p>
<ul>
<li>该配置样例参照 OpenResty 官方样例简单修改；</li>
<li>对不同的 upstream 需要通过参数 upstream 进行绑定；</li>
<li>建议为每个上游服务器组指定独享的共享内存，并用参数 shm 进行绑定。</li>
</ul>
<hr>
<h3 id="动态更新upstream"><a href="#动态更新upstream" class="headerlink" title="动态更新upstream"></a>动态更新upstream</h3><p>Nginx 的配置是启动时<strong>一次性加载到内存中</strong>的，在实际的使用中，对 Nginx 服务器上游服务器组中节点的添加或移除仍需要重启或热加载 Nginx 进程。在 Nginx 的商业版本中，提供了 ngx_http_api_module 模块，可以通过 API 动态添加或移除上游服务器组中的节点。</p>
<p>对于 Nginx 开源版本，通过 Nginx 的扩展版 <strong>OpenResty</strong> 及 <strong>Lua</strong> 脚本也可以实现上游服务器组中节点的动态操作，这里只使用 OpenResty 的 lua-upstream-nginx-module 模块简单演示节点的上下线状态动态修改的操作。该模块提供了 set_peer_down 指令，该指令可以对 upstream 的节点实现上下线的控制。</p>
<p>由于该指令只支持 worker 级别的操作，为使得 Nginx 的所有 worker 都生效，此处通过编写 Lua 脚本与 lua-resty-upstream-healthcheck 模块做了简单的集成，利用 lua-resty-upstream-healthcheck 模块的共享内存机制将节点状态同步给其他工作进程，实现对 upstream 的节点状态的控制。</p>
<p>首先在 OpenResty 的 lualib 目录下创建公用函数文件 api_func.lua，lualib&#x2F;api_func.lua 内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> _M = &#123; _VERSION = <span class="string">&#x27;1.0&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">local</span> cjson = require <span class="string">&quot;cjson&quot;</span></span><br><span class="line"><span class="built_in">local</span> upstream = require <span class="string">&quot;ngx.upstream&quot;</span></span><br><span class="line"><span class="built_in">local</span> get_servers = upstream.get_servers</span><br><span class="line"><span class="built_in">local</span> get_primary_peers = upstream.get_primary_peers</span><br><span class="line"><span class="built_in">local</span> set_peer_down = upstream.set_peer_down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割字符串为table</span></span><br><span class="line"><span class="built_in">local</span> <span class="keyword">function</span> <span class="built_in">split</span>( str,reps )</span><br><span class="line">    <span class="built_in">local</span> resultStrList = &#123;&#125;</span><br><span class="line">    string.gsub(str,<span class="string">&quot;[^&quot;</span>..reps..<span class="string">&quot;]+&quot;</span>,<span class="keyword">function</span> ( w )</span><br><span class="line">        table.insert(resultStrList,w)</span><br><span class="line">    end)</span><br><span class="line">    <span class="built_in">return</span> resultStrList</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取server列表</span></span><br><span class="line"><span class="built_in">local</span> <span class="keyword">function</span> get_args_srv( args )</span><br><span class="line">    <span class="keyword">if</span> not args[<span class="string">&quot;server&quot;</span>] <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">&quot;failed to get post args: &quot;</span>, err)</span><br><span class="line">        <span class="built_in">return</span> nil</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(args[<span class="string">&quot;server&quot;</span>]) ~= <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">            server_list=<span class="built_in">split</span>(args[<span class="string">&quot;server&quot;</span>],<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            server_list=args[<span class="string">&quot;server&quot;</span>]</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">return</span> server_list</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取节点在upstream中的顺序</span></span><br><span class="line"><span class="built_in">local</span> <span class="keyword">function</span> get_peer_id(ups,server_name)</span><br><span class="line">    <span class="built_in">local</span> srvs = get_servers(ups)</span><br><span class="line">    <span class="keyword">for</span> i, srv <span class="keyword">in</span> ipairs(srvs) <span class="keyword">do</span></span><br><span class="line">        -- ngx.print(srv[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> srv[<span class="string">&quot;name&quot;</span>] == server_name <span class="keyword">then</span></span><br><span class="line">            target_srv = srv</span><br><span class="line">            target_srv[<span class="string">&quot;id&quot;</span>] = i-1</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">return</span> target_srv[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取节点共享内存key</span></span><br><span class="line"><span class="built_in">local</span> <span class="keyword">function</span> gen_peer_key(prefix, u, is_backup, <span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">if</span> is_backup <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> prefix .. u .. <span class="string">&quot;:b&quot;</span> .. <span class="built_in">id</span></span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">return</span> prefix .. u .. <span class="string">&quot;:p&quot;</span> .. <span class="built_in">id</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置节点状态</span></span><br><span class="line"><span class="built_in">local</span> <span class="keyword">function</span> set_peer_down_globally(ups, is_backup, <span class="built_in">id</span>, value,zone_define)</span><br><span class="line">    <span class="built_in">local</span> u = ups</span><br><span class="line">    <span class="built_in">local</span> dict = zone_define</span><br><span class="line">    <span class="built_in">local</span> ok, err = set_peer_down(u, is_backup, <span class="built_in">id</span>, value)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">        ngx.say(cjson.encode(&#123;code = <span class="string">&quot;E002&quot;</span>, msg = <span class="string">&quot;failed to set peer down&quot;</span>, data = err&#125;))</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> key = gen_peer_key(<span class="string">&quot;d:&quot;</span>, u, is_backup, <span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">local</span> ok, err = dict:<span class="built_in">set</span>(key, value)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">        ngx.say(cjson.encode(&#123;code = <span class="string">&quot;E003&quot;</span>, msg = <span class="string">&quot;failed to set peer down state&quot;</span>, data = err&#125;))</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定upstream的节点列表</span></span><br><span class="line"><span class="keyword">function</span>  _M.list_server(ups)</span><br><span class="line">    <span class="built_in">local</span> srvs, err = get_servers(ups)</span><br><span class="line">    ngx.say(cjson.encode(srvs))</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置节点状态</span></span><br><span class="line"><span class="keyword">function</span>  _M.set_server(ups,args,status,backup,zone_define)</span><br><span class="line">    <span class="built_in">local</span> server_list = get_args_srv(args)</span><br><span class="line">    <span class="keyword">if</span> server_list == nil <span class="keyword">then</span></span><br><span class="line">        ngx.say(cjson.encode(&#123;code = <span class="string">&quot;E001&quot;</span>, msg = <span class="string">&quot;no args&quot;</span>,data = server_list&#125;))</span><br><span class="line">        <span class="built_in">return</span> nil</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, s <span class="keyword">in</span> pairs(server_list) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> peer_id = get_peer_id(ups,s)</span><br><span class="line">        <span class="keyword">if</span> status <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">local</span> key = gen_peer_key(<span class="string">&quot;nok:&quot;</span>, ups, backup, peer_id)</span><br><span class="line">            <span class="built_in">local</span> ok, err = zone_define:<span class="built_in">set</span>(key, 1)</span><br><span class="line">            set_peer_down_globally(ups, backup, peer_id, <span class="literal">true</span>,zone_define)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">local</span> key = gen_peer_key(<span class="string">&quot;ok:&quot;</span>, ups, backup, peer_id)</span><br><span class="line">            <span class="built_in">local</span> ok, err = zone_define:<span class="built_in">set</span>(key, 0)</span><br><span class="line">            set_peer_down_globally(ups, backup, peer_id, nil,zone_define)</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    ngx.say(cjson.encode(&#123;code = <span class="string">&quot;D002&quot;</span>, msg = <span class="string">&quot;set peer is success&quot;</span>,data = server_list&#125;))</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> _M</span><br></pre></td></tr></table></figure>

<p>Nginx 配置文件 status.conf 的内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭socket错误日志</span></span><br><span class="line">lua_socket_log_errors off;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置共享内存名称及大小</span></span><br><span class="line">lua_shared_dict _healthcheck_zone 10m;</span><br><span class="line"></span><br><span class="line">init_worker_by_lua_block &#123;</span><br><span class="line">    <span class="built_in">local</span> hc = require <span class="string">&quot;resty.upstream.healthcheck&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置需要健康监测的upstream</span></span><br><span class="line">    <span class="built_in">local</span> ups = &#123;<span class="string">&quot;foo.com&quot;</span>,<span class="string">&quot;sslback&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历ups，绑定健康监测策略</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> pairs(ups) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> ok, err = hc.spawn_checker&#123;</span><br><span class="line">            shm = <span class="string">&quot;_healthcheck_zone&quot;</span>,      <span class="comment"># 绑定lua_shared_dict定义的共享内存</span></span><br><span class="line">            upstream = v,                   <span class="comment"># 绑定upstream指令域</span></span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&quot;http&quot;</span>,</span><br><span class="line">            http_req = <span class="string">&quot;GET / HTTP/1.0\r\nHost: foo.com\r\n\r\n&quot;</span>,</span><br><span class="line">                                            <span class="comment"># 用以检测的raw格式http请求</span></span><br><span class="line"></span><br><span class="line">            interval = 2000,                <span class="comment"># 每2s检测一次</span></span><br><span class="line">            <span class="built_in">timeout</span> = 1000,                 <span class="comment"># 检测请求超时时间为1s</span></span><br><span class="line">            fall = 3,                       <span class="comment"># 连续失败3次，被检测节点被置为DOWN状态</span></span><br><span class="line">            rise = 2,                       <span class="comment"># 连续成功2次，被检测节点被置为UP状态</span></span><br><span class="line">                                            <span class="comment"># 当健康检测请求返回的响应码为200或302时，被认</span></span><br><span class="line">                                            <span class="comment"># 为检测通过</span></span><br><span class="line">            valid_statuses = &#123;200, 302&#125;,</span><br><span class="line">            concurrency = 10,               <span class="comment"># 健康检测请求的并发数为10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">&quot;failed to spawn health checker: &quot;</span>, err)</span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream foo.com &#123;</span><br><span class="line">    server 192.168.2.145:8080;</span><br><span class="line">    server 192.168.2.109:8080;</span><br><span class="line">    server 127.0.0.1:12356 backup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream sslback &#123;</span><br><span class="line">    server 192.168.2.145:443;</span><br><span class="line">    server 192.168.2.159:443;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 18080;</span><br><span class="line">    access_log  off;</span><br><span class="line">    error_log off;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 健康检测状态页</span></span><br><span class="line">    location = /healthcheck &#123;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        allow 192.168.2.0/24;</span><br><span class="line">        allow 192.168.101.0/24;</span><br><span class="line">        deny all;</span><br><span class="line"></span><br><span class="line">        default_type text/plain;</span><br><span class="line">        content_by_lua_block &#123;</span><br><span class="line">            <span class="built_in">local</span> hc = require <span class="string">&quot;resty.upstream.healthcheck&quot;</span></span><br><span class="line">            ngx.say(<span class="string">&quot;Nginx Worker PID: &quot;</span>, ngx.worker.pid())</span><br><span class="line">            ngx.print(hc.status_page())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /ups_api &#123;</span><br><span class="line">        default_type  application/json;</span><br><span class="line">        content_by_lua <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            # 获取URL参数</span></span><br><span class="line"><span class="string">            local ups = ngx.req.get_uri_args()[&quot;ups&quot;]</span></span><br><span class="line"><span class="string">            local act = ngx.req.get_uri_args()[&quot;act&quot;]</span></span><br><span class="line"><span class="string">            if act == nil or ups == nil then</span></span><br><span class="line"><span class="string">                ngx.say(&quot;usage: /ups_api?ups=&#123;name&#125;&amp;act=[down,up,list]&quot;)</span></span><br><span class="line"><span class="string">                return</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            # 引用api_func.lua脚本</span></span><br><span class="line"><span class="string">            local api_fun = require &quot;api_func&quot;</span></span><br><span class="line"><span class="string">            # 绑定共享内存_healthcheck_zone</span></span><br><span class="line"><span class="string">            local zone_define=ngx.shared[&quot;_healthcheck_zone&quot;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            if act == &quot;list&quot; then</span></span><br><span class="line"><span class="string">                # 获取指定upstream的节点列表</span></span><br><span class="line"><span class="string">                api_fun.list_server(ups)</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                ngx.req.read_body()</span></span><br><span class="line"><span class="string">                local args, err = ngx.req.get_post_args()</span></span><br><span class="line"><span class="string">                if act == &quot;up&quot; then</span></span><br><span class="line"><span class="string">                    # 节点状态将设置为UP</span></span><br><span class="line"><span class="string">                    api_fun.set_server(ups,args,false,false,zone_define)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">                if act == &quot;down&quot; then</span></span><br><span class="line"><span class="string">                    # 节点状态将设置为DOWN</span></span><br><span class="line"><span class="string">                    api_fun.set_server(ups,args,true,false,zone_define)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看upstream foo.com的服务器列表</span></span><br><span class="line">curl <span class="string">&quot;http://127.0.0.1:18080/ups_api?act=list&amp;ups=foo.com&quot;</span></span><br><span class="line"></span><br><span class="line">\# 将192.168.2.145:8080这个节点设置为DOWN状态</span><br><span class="line">curl -X POST -d <span class="string">&quot;server=192.168.2.145:8080&quot;</span> <span class="string">&quot;http://127.0.0.1:18080/ups_api?act= down&amp;ups=foo.com&quot;</span></span><br><span class="line"></span><br><span class="line">\# 将192.168.2.145:8080这个节点设置为UP状态</span><br><span class="line">curl -X POST -d <span class="string">&quot;server=192.168.2.145:8080&quot;</span> <span class="string">&quot;http://127.0.0.1:18080/ups_api?act= up&amp;ups=foo.com&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Stream-TCP-UDP-负载均衡"><a href="#Stream-TCP-UDP-负载均衡" class="headerlink" title="Stream(TCP&#x2F;UDP)负载均衡"></a>Stream(TCP&#x2F;UDP)负载均衡</h3><p>Nginx 的 TCP&#x2F;UDP 负载均衡是应用 Stream 代理模块（ngx_stream_proxy_module）和 Stream 上游模块（ngx_stream_upstream_module）实现的。Nginx 的 TCP 负载均衡与 LVS 都是四层负载均衡的应用，所不同的是，LVS 是被置于 Linux 内核中的，而 Nginx 是运行于用户层的，基于 Nginx 的 TCP 负载可以实现更灵活的用户访问管理和控制。</p>
<h4 id="TCP-UDP-负载均衡"><a href="#TCP-UDP-负载均衡" class="headerlink" title="TCP&#x2F;UDP 负载均衡"></a>TCP&#x2F;UDP 负载均衡</h4><p>Nginx 的 Stream 上游模块支持与 Nginx HTTP 上游模块一致的轮询（Round Robin）、哈希（Hash）及最少连接数（least_conn）负载均衡策略。Nginx 默认使用轮询负载均衡策略，配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server 192.168.2.145:389 weight=5;</span><br><span class="line">        server 192.168.2.159:389 weight=1;</span><br><span class="line">        server 192.168.2.109:389 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哈希负载均衡策略可以通过客户端 IP（$remote_addr）实现简单的会话保持，其可将同一 IP 客户端始终转发给同一台后端服务器。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span>;</span><br><span class="line">        server 192.168.2.145:389 weight=5;</span><br><span class="line">        server 192.168.2.159:389 weight=1;</span><br><span class="line">        server 192.168.2.109:389 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哈希负载均衡策略通过指令参数 consistent 设定是否开启一致性哈希负载均衡策略。Nginx 的一致性哈希负载均衡策略是采用 Ketama 一致性哈希算法，当后端服务器组中的服务器数量变化时，只会影响少部分客户端的请求。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">        server 192.168.2.145:389 weight=5;</span><br><span class="line">        server 192.168.2.159:389 weight=1;</span><br><span class="line">        server 192.168.2.109:389 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最少连接负载均衡策略，可以在后端被代理服务器性能不均时，在考虑上游服务器组中各服务器权重的前提下，将客户端连接分配给活跃连接最少的被代理服务器，从而有效提高处理性能高的被代理服务器的使用率。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        server 192.168.2.145:389 weight=5;</span><br><span class="line">        server 192.168.2.159:389 weight=1;</span><br><span class="line">        server 192.168.2.109:389 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 389;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="TCP-UDP-负载均衡的容错机制"><a href="#TCP-UDP-负载均衡的容错机制" class="headerlink" title="TCP&#x2F;UDP 负载均衡的容错机制"></a>TCP&#x2F;UDP 负载均衡的容错机制</h4><p>Nginx 的 TCP&#x2F;UDP 负载均衡在连接分配时也支持被动健康检测模式，如果与后端服务器建立连接失败，并在 fail_timeout 参数的时间内连续超过 max_fails 参数设置的次数，Nginx 就会将该服务器置为不可用状态，并且在 fail_timeout 参数的时间内不再给该服务器分配连接。当 fail_timeout 参数的时间结束时将尝试分配连接检测该服务器是否恢复，如果可以建立连接，则判定为恢复。</p>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="comment"># 10s内出现3次错误，该服务器将被熔断10s</span></span><br><span class="line">        server 192.168.2.154:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">        server 192.168.2.109:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">        server 192.168.2.108:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">        server 192.168.2.107:8080 max_fails=3 fail_timeout=10s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        proxy_connect_timeout 5s;           <span class="comment"># 与被代理服务器建立连接的超时时间为5s</span></span><br><span class="line">        proxy_timeout 10s;          <span class="comment"># 获取被代理服务器的响应最大超时时间为10s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当被代理的服务器返回错误或超时时，将未返回响应的客户端连接请求传递给upstream中的下</span></span><br><span class="line">        <span class="comment"># 一个服务器</span></span><br><span class="line">        proxy_next_upstream on;</span><br><span class="line">        proxy_next_upstream_tries 3;        <span class="comment"># 转发尝试请求最多3次</span></span><br><span class="line">        proxy_next_upstream_timeout 10s;    <span class="comment"># 总尝试超时时间为10s</span></span><br><span class="line">        proxy_socket_keepalive on;  <span class="comment"># 开启SO_KEEPALIVE选项进行心跳检测</span></span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的参数及指令说明如下。</p>
<ul>
<li>指令值参数 max_fails 是指 10s 内 Nginx 分配给当前服务器的连接失败次数累加值，每 10s 会重置为 0；</li>
<li>指令值参数 fail_timeout 既是失败计数的最大时间，又是服务器被置为失败状态的熔断时间，超过这个时间将再次被分配连接；</li>
<li>指令 proxy_connect_timeout 或 proxy_timeout 为超时状态时，都会触发 proxy_next_upstream 机制；</li>
<li>proxy_next_upstream 是 Nginx 下提高连接成功率的机制，当被代理服务器返回错误或超时时，将尝试转发给下一个可用的被代理服务器；</li>
<li>指令 proxy_next_upstream_tries 的指令值次数包括第一次转发请求的次数。</li>
</ul>
<p>TCP 连接在接收到关闭连接通知前将一直保持连接，当 Nginx 与被代理服务器的两个连续成功的读或写操作的最大间隔时间超过 proxy_timeout 指令配置的时间时，连接将会被关闭。在 TCP 长连接的场景中，应适当调整 proxy_timeout 的设置，同时关注系统内核 SO_KEEPALIVE 选项的配置，可以防止过早地断开连接。</p>
<hr>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志分析简述"><a href="#日志分析简述" class="headerlink" title="日志分析简述"></a>日志分析简述</h3><p>Nginx 通常被置于服务器访问的<strong>入口</strong>，其访问日志可以全局记录用户访问的来源、响应时间，以及用户行为热点等数据，通过对访问日志的分析，可以清晰地了解用户来源、用户行为习惯及自身服务器性能等情况。</p>
<p>借助 ELK 的高性能处理能力，可以实时地将数据分析结果展现给服务器的维护人员及应用的开发人员，进而不断提高业务的可用性及产品的用户体验。</p>
<p>Nginx 的日志分析可以分为<strong>安全分析、性能分析、可用性分析及访问统计分析</strong> 4 个方面。</p>
<ul>
<li><strong>安全分析</strong></li>
</ul>
<p>通常黑客对互联网应用的入侵都是先从 Web 服务器漏洞扫描开始的，最常用的扫描方式就是在 URL 中加入特定的脚本、命令或字符串不断尝试访问，并根据返回结果判断被扫描网站是否存在漏洞或后门。如 SQL 注入攻击会在访问的 URL 中带有 select、and、or、order by 等常见的 SQL 语句，XSS 攻击会在访问的 URL 中带有 javascript、vbscript、onmouseover、eval 等 Javascript 或 VBscript 脚本命令。</p>
<p>另外，对管理后台入口的扫描也是常用的手段之一，多数情况下管理后台的安全加固是最容易被忽视的，往往认为不提供访问链接就高枕无忧了，而 admin、manage 等关键词通常会轻而易举地被穷举出来。</p>
<p>这些不安全的访问痕迹都会被 Nginx 服务器记录到访问日志中，并通过 ELK 对 Nginx 访问日志中的 request_uri 字段进行关键字过滤和展示，以求在第一时间了解这些不安全事件并提前做好防范工作。</p>
<ul>
<li><strong>性能分析</strong></li>
</ul>
<p>一个网站性能的最直接体现就是请求的响应时间。通常用户的请求响应时间都是以毫秒为单位计算的，若用户的请求响应时间以秒为单位时，将极大地加大用户的等待时间，进而影响用户体验。为方便对请求响应的分析，可以将下表所示的 Nginx 服务器提供的变量添加到访问日志中，以记录请求链中消耗的时间。</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">变量名</th>
<th align="left">变量说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$request_time</td>
<td align="left">完全请求时间</td>
<td align="left">从 Nginx 在客户端获取请求的第一个字节到 Nginx 发送给客户端响应数据的最后一个字节间的时间</td>
</tr>
<tr>
<td align="left">$upstream_connect_time</td>
<td align="left">代理建立连接时间</td>
<td align="left">与后端代理服务器建立连接消耗的时间</td>
</tr>
<tr>
<td align="left">$upstream_header_time</td>
<td align="left">代理请求时间</td>
<td align="left">从与后端代理服务器建立连接到接收到响应数据第一个字节间的时间</td>
</tr>
<tr>
<td align="left">$upstream_response_time</td>
<td align="left">响应时间</td>
<td align="left">从与后端代理服务器建立连接到接收到响应数据最后一个字节间的时间</td>
</tr>
</tbody></table>
<p>对请求响应时间的分析，可以通过 ELK 对访问日志 $request_time 字段的时间做排名，对时间值比较大的 URL 从 SQL、代码、架构等多方面分析原因。</p>
<ul>
<li><strong>可用性分析</strong></li>
</ul>
<p>HTTP 请求的每条访问都会有相应的访问状态码，访问状态码标识了请求成功或失败的状态。通过 ELK 对访问日志按照状态码维度统计总访问量，可以很直观地展示当前网站的可用性比率。</p>
<ul>
<li><strong>访问统计分析</strong></li>
</ul>
<p>访问统计分析，可以让网站管理者最直观地了解网站被访问及用户的访问情况，常见的是 PV 及 UV 统计。</p>
<p>PV（Page View）即页面浏览量或点击量，可以让网站管理者清晰地了解当前网站的访问量；UV（Unique Visitor）即独立访客量，以每个同一 IP（remote_addr）、同一客户端类型（http_user_agent）可被识别为独立访客作为统计单位。</p>
<p>PV 体现了用户的访问量，UV 体现了访问当前网站的人数。URL 的访问数量统计，可以清晰地展示网站的哪些功能被大量使用，可以让网站管理者知道用户对网站功能的喜好，以便进行相关的产品优化。</p>
<hr>
<h3 id="访问日志配置"><a href="#访问日志配置" class="headerlink" title="访问日志配置"></a>访问日志配置</h3><p>Nginx 的访问日志主要记录用户客户端的请求信息（见下表）。用户的每次请求都会记录在访问日志中，access_log 指令可以设置日志的输出方式及引用的日志格式。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">访问日志指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">access_log</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、stream、server、location、if in location、limit except</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">logs&#x2F;access.log combined;</td>
</tr>
<tr>
<td align="left">指令值格式</td>
<td align="left">off 或 <code>path[format[buffer=size][gzip[=level]][flush=time][if=condition]];</code></td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置访问日志输出方式及引用的日志格式</td>
</tr>
</tbody></table>
<p>关于 access_log 指令有以下几点需要说明:</p>
<ul>
<li>在同一级别的指令域中，也可指定多个日志；</li>
<li>指令值中的第一个参数用于设置输出日志的方式，默认是输出到本地的文件中。该指令也支持输出到 syslog 或内存缓冲区中；</li>
<li>该指令在 stream 指令域中时，默认值为 off；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">access_log off;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 path，设置日志输出的文件路径或 syslog 服务器地址；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">access_log logs/access.log combined;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 format，设置关联 log_format 指令定义的日志格式名；</li>
<li>参数 buffer，设置日志文件缓冲区大小。当缓冲区日志数据超出该值时，缓冲区日志数据会被写到磁盘文件。默认缓冲区大小为 64KB；</li>
<li>参数 flush，设置日志缓冲区刷新的时间间隔，缓冲区日志的保护时间超过这个设定值时，缓冲区日志数据会被写到磁盘文件；</li>
<li>参数 gzip，设置缓冲区数据的压缩级别，缓冲区数据会被压缩后再写出到磁盘文件。压缩级别范围 1～9，级别越高压缩比越高，系统资源消耗也最大，默认级别为 1；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">access_log logs/log.gz combined gzip flush=5m;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 if，设置是否记录日志，当参数值的条件成立，即不为 0 或空时，才记录日志。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">map <span class="variable">$status</span> <span class="variable">$loggable</span> &#123;</span><br><span class="line">  ~^[23] 0;</span><br><span class="line">  default 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">access_log logs/access.log combined <span class="keyword">if</span>=<span class="variable">$loggable</span>;</span><br></pre></td></tr></table></figure>

<p>日志格式指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">日志格式指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">log_format</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、stream</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">combined”…”;</td>
</tr>
<tr>
<td align="left">指令值格式</td>
<td align="left">name[escape&#x3D;default 或 json 或 none]string…;</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置访问日志输出方式及输出日志格式</td>
</tr>
</tbody></table>
<p>关于 log_format 指令有以下几点需要说明:</p>
<ul>
<li>指令值参数 name 用于设置日志格式名。该名称全局唯一，可以被 access_log 引用；</li>
<li>指令值参数 escape 用于设置日志输出字符串编码格式，json 支持中文字符内容输出；</li>
<li>指令值参数 string 用于设置日志输出格式字符串。该字符串由 Nginx 公共变量和仅在日志写入时存在的变量组成。HTTP 常用变量如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">变量说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$time_iso8601</td>
<td align="left">ISO 8601 时间格式</td>
</tr>
<tr>
<td align="left">$time_local</td>
<td align="left">用户请求的时间和时区</td>
</tr>
<tr>
<td align="left">$msec</td>
<td align="left">毫秒级别的日志记录时间</td>
</tr>
<tr>
<td align="left">$remote_addr</td>
<td align="left">发起与 Nginx 建立连接的网络客户端的 IP，有时会是上层代理服务器的 IP</td>
</tr>
<tr>
<td align="left">$http_x_forwarded_for</td>
<td align="left">可以记录客户端 IP，通过代理服务器来记录客户端的 IP</td>
</tr>
<tr>
<td align="left">$remote_user</td>
<td align="left">用于记录远程客户端的用户名称</td>
</tr>
<tr>
<td align="left">$http_user_agent</td>
<td align="left">用户客户端浏览器标识</td>
</tr>
<tr>
<td align="left">$connection</td>
<td align="left">网络连接编号</td>
</tr>
<tr>
<td align="left">$connection_requests</td>
<td align="left">当前连接的请求数</td>
</tr>
<tr>
<td align="left">$request</td>
<td align="left">用户请求的 URI 及请求方法</td>
</tr>
<tr>
<td align="left">$request_method</td>
<td align="left">用户请求方法</td>
</tr>
<tr>
<td align="left">$request_uri</td>
<td align="left">用户请求的 URI 及请求方法</td>
</tr>
<tr>
<td align="left">$server_protocol</td>
<td align="left">请求协议</td>
</tr>
<tr>
<td align="left">$request_time</td>
<td align="left">请求时间</td>
</tr>
<tr>
<td align="left">$request_length</td>
<td align="left">请求数据大小</td>
</tr>
<tr>
<td align="left">$status</td>
<td align="left">用户请求响应状态码</td>
</tr>
<tr>
<td align="left">$bytes_sent</td>
<td align="left">发送到客户端响应数据的大小</td>
</tr>
<tr>
<td align="left">$body_bytes_sent</td>
<td align="left">用户请求返回的响应体字节数</td>
</tr>
<tr>
<td align="left">$http_referer</td>
<td align="left">HTTP 请求头中属性字段 referer</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通格式日志</span></span><br><span class="line">log_format  main  <span class="string">&#x27;$remote_addr - $connection - $remote_user [$time_local] &quot;$request&quot; - $upstream_addr&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;$status  - $body_bytes_sent - $request_time - &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;&quot;$http_user_agent&quot; - &quot;$http_x_forwarded_for&quot; - &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON格式日志</span></span><br><span class="line">log_format json <span class="string">&#x27;&#123;&quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;connection&quot;: &quot;$connection&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;remote_user&quot;: &quot;$remote_user&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;request_method&quot;: &quot;$request_method&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;request_uri&quot;: &quot;$request_uri&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;server_protocol&quot;: &quot;$server_protocol&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;status&quot;: &quot;$status&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;body_bytes_sent&quot;: &quot;$body_bytes_sent&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;http_referer&quot;: &quot;$http_referer&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;http_user_agent&quot;: &quot;$http_user_agent&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;http_x_forwarded_for&quot;: &quot;$http_x_forwarded_for&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;request_time&quot;: &quot;$request_time&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Nginx TCP&#x2F;UDP 的访问日志的变量与 HTTP 的访问日志的变量是不同的，TCP&#x2F;UDP 常见日志变量如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">变量说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$time_iso8601</td>
<td align="left">ISO 8601 时间格式</td>
</tr>
<tr>
<td align="left">$time_local</td>
<td align="left">用户请求的时间和时区</td>
</tr>
<tr>
<td align="left">$connection</td>
<td align="left">网络连接编号</td>
</tr>
<tr>
<td align="left">$remote_addr</td>
<td align="left">发起与 Nginx 建立连接的网络客户端的 IP，有时会是上层代理服务器的 IP</td>
</tr>
<tr>
<td align="left">$server_addr</td>
<td align="left">Nginx 服务器地址</td>
</tr>
<tr>
<td align="left">$server_port</td>
<td align="left">Nginx 服务器端口</td>
</tr>
<tr>
<td align="left">$status</td>
<td align="left">用户请求响应状态码</td>
</tr>
<tr>
<td align="left">$upstream_addr</td>
<td align="left">被代理服务器地址</td>
</tr>
<tr>
<td align="left">$bytes_received</td>
<td align="left">接收字节数</td>
</tr>
<tr>
<td align="left">$bytes_sent</td>
<td align="left">发送字节数</td>
</tr>
<tr>
<td align="left">$session_time</td>
<td align="left">连接会话时间</td>
</tr>
<tr>
<td align="left">$proxy_protocol_addr</td>
<td align="left">代理协议地址</td>
</tr>
<tr>
<td align="left">$proxy_protocol_port</td>
<td align="left">代理协议端口</td>
</tr>
</tbody></table>
<p>Nginx 的 TCP&#x2F;UDP 的日志处理是在连接处理阶段结束时才发生，所以 TCP&#x2F;UDP 代理的访问日志只在连接关闭时才被记录。访问日志格式配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通格式日志</span></span><br><span class="line">log_format  tcp  <span class="string">&#x27;$remote_addr - $connection - [$time_local] $server_addr: $server_port &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;- $status - $upstream_addr - $bytes_received - $bytes_sent - $session_time &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;- $proxy_protocol_addr:$proxy_protocol_port &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON格式日志</span></span><br><span class="line">log_format json <span class="string">&#x27;&#123;&quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;connection&quot;: &quot;$connection&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;server_addr&quot;: &quot;$server_addr:$server_port&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;status&quot;: &quot;$status&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;upstream_addr&quot;: &quot;$upstream_addr&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;bytes_received&quot;: &quot;$bytes_received&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;bytes_sent&quot;: &quot;$bytes_sent&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;session_time&quot;: &quot;$session_time&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;&quot;proxy_protocol_addr&quot;: &quot;$proxy_protocol_addr:$proxy_protocol_port&quot; &#x27;</span>&#125;<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>打开日志缓存指令见下表。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">打开日志缓存指令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">指令</td>
<td align="left">open_log_file_cache</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">http、stream、server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">off</td>
</tr>
<tr>
<td align="left">指令值格式</td>
<td align="left">off 或 max&#x3D;N [inactive&#x3D;time][min_uses&#x3D;N][valid&#x3D;time];</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置存储日志文件描述符（文件句柄）的缓存</td>
</tr>
</tbody></table>
<p>关于 open_log_file_cache 指令有以下几点需要说明:</p>
<ul>
<li>默认配置下，Nginx 每次将缓冲区日志数据保存到磁盘中，都需要先打开文件并获得文件描述符，然后向该文件描述符的文件中写入日志数据，最后关闭该文件描述符的文件。该指令把打开文件的文件描述符（文件句柄）存储在缓存中，进而提升写入日志的效率；</li>
<li>指令值 max 用于设置缓存中存储的文件描述符的最大数量，超过该值时，将按照 LRU 算法对缓存中文件描述符进行关闭；</li>
<li>指令值参数 inactive 用于设置缓存中每个文件描述符存活的时间，默认为 10s；</li>
<li>指令值参数 min_uses 用于设置可被缓存文件描述符的最小使用次数，默认为 1 次；</li>
<li>指令值参数 valid 用于设置缓存检查频率，默认为 60s；</li>
<li>指令值 off 用于关闭打开日志缓存的功能。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;</span><br><span class="line">logs/access.log combined;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="错误日志配置error-log"><a href="#错误日志配置error-log" class="headerlink" title="错误日志配置error_log"></a>错误日志配置error_log</h3><p>Nginx 的错误日志可以帮助用户及时判断 Nginx 配置及运行时出错的原因，错误日志也可以通过 Nginx 内置指令进行配置，但不支持格式定义。配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">说明</th>
<th align="left">错误日志指令组成</th>
</tr>
</thead>
<tbody><tr>
<td align="left">主指令</td>
<td align="left">error_log</td>
</tr>
<tr>
<td align="left">作用域</td>
<td align="left">main、http、mail、stream、server、location</td>
</tr>
<tr>
<td align="left">默认值</td>
<td align="left">logs&#x2F;error.log error;</td>
</tr>
<tr>
<td align="left">指令说明</td>
<td align="left">设置错误日志输出方式及输出日志级别</td>
</tr>
</tbody></table>
<p>关于 error_log 指令有以下几点需要说明:</p>
<ul>
<li>在同一级别的指令域中，也可指定多个日志；</li>
<li>指令值中的第一个参数是输出日志的方式，默认是输出到本地的文件中。该指令也支持输出到 syslog 或内存缓冲区中；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error_log syslog:server=192.168.2.109 error;</span><br><span class="line">error_log memory:32m debug;</span><br><span class="line">error_log /dev/null;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问文件不存在时，记入错误日志</span></span><br><span class="line">log_not_found on;</span><br></pre></td></tr></table></figure>

<p>指令值中第二个参数是输出日志的级别，指定的级别将包含自身及级别值比其小的所有级别日志，日志内容会保存到第一个参数设定的输出位置。</p>
<p>错误日志级别及相关说明如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">级别</th>
<th align="left">级别值</th>
<th align="left">级别说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">debug</td>
<td align="left">8</td>
<td align="left">代码中标记为 NGX_LOG_DEBUG 的输出，输出最为详细，配合调试使用</td>
</tr>
<tr>
<td align="left">info</td>
<td align="left">7</td>
<td align="left">代码中标记为 NGX_LOG_INFO 的输出，因包括除 debug 级别的所有输出，故同样会消耗大量磁盘 IO 资源</td>
</tr>
<tr>
<td align="left">notice</td>
<td align="left">6</td>
<td align="left">代码中标记为 NGX_LOG_NOTICE 的输出</td>
</tr>
<tr>
<td align="left">warn</td>
<td align="left">5</td>
<td align="left">代码中标记为 NGX_LOG_WARN 的输出</td>
</tr>
<tr>
<td align="left">error</td>
<td align="left">4</td>
<td align="left">代码中标记为 NGX_LOG_ERROR 的输出，实际生产环境中常用的输出级别</td>
</tr>
<tr>
<td align="left">crit</td>
<td align="left">3</td>
<td align="left">代码中标记为 NGX_LOG_CRIT 的输出</td>
</tr>
<tr>
<td align="left">alert</td>
<td align="left">2</td>
<td align="left">代码中标记为 NGX_LOG_ALERT 的输出</td>
</tr>
<tr>
<td align="left">emerg</td>
<td align="left">1</td>
<td align="left">代码中标记为 NGX_LOG_EMERG 的输出</td>
</tr>
</tbody></table>
<hr>
<h3 id="日志归档配置"><a href="#日志归档配置" class="headerlink" title="日志归档配置"></a>日志归档配置</h3><p><strong>Logrotate</strong></p>
<p>Nginx 日志存储为文件时，同一 access_log 指令设置的日志文件是以单文件形式存储的，在日常使用中为方便维护，通常需要将日志文件按日期进行归档。虽然 Nginx 本身并没有这一功能，但实现日志归档的方法仍有很多，此处推荐使用 Logrotate 实现日志归档管理。</p>
<p>Logrotate 是 CentOS 操作系统内置日志管理工具，该工具可对系统中生成的大量日志文件进行归档管理，其允许对日志文件实行压缩、删除或邮寄等操作。Logrotate 可以按照每天、周、月或达到某一大小的日志文件进行归档操作，Logrotate 基于 anacrontab 实现计划任务，只需在 &#x2F;etc&#x2F;logrotate.d 目录下编写相关日志管理配置文件，就可以无须人工干预使用自动化方式完成日志归档操作。</p>
<ul>
<li><strong>Logrotate 安装</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install logrotate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Logrotate 文件目录</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/logrotate.conf                     <span class="comment"># logrotate主配置文件</span></span><br><span class="line">/usr/sbin/logrotate                     <span class="comment"># logrotate二进制文件</span></span><br><span class="line">/etc/logrotate.d/                       <span class="comment"># 自定义logrotate配置文件</span></span><br><span class="line">/var/lib/logrotate/logrotate.status     <span class="comment"># logrotate管理日志执行记录的状态文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Logrotate 命令参数</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    -d, --debug                             <span class="comment"># 测试归档配置文件</span></span><br><span class="line">    -f, --force                             <span class="comment"># 立即执行归档操作</span></span><br><span class="line">    -m, --mail=<span class="built_in">command</span>                      <span class="comment"># 指定发送邮件的命令（默认为&#x27;/bin/mail&#x27;)</span></span><br><span class="line">    -s, --state=statefile                   <span class="comment"># 设置logrotate.status文件路径，可用于区分在同</span></span><br><span class="line">                                                <span class="comment"># 一系统下以不同用户身份运行的logrotate任务</span></span><br><span class="line">    -v, --verbose                           <span class="comment"># 显示配置详细信息</span></span><br><span class="line">    -l, --<span class="built_in">log</span>=STRING                        <span class="comment"># 将Logrotate执行的详情输出到指定的文件</span></span><br><span class="line"></span><br><span class="line">logrotate -v /etc/logrotate.conf                <span class="comment"># 显示配置文件详细信息</span></span><br><span class="line">logrotate -d /etc/logrotate.d/syslog -l /var/log/logrotate.log  <span class="comment"># 配置文件，执行测试</span></span><br><span class="line">logrotate -f /etc/logrotate.d/syslog    <span class="comment"># 立即执行当前配置文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Logrotate 配置指令</strong></li>
</ul>
<p>Logrotate 配置指令如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">指令说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">归档执行周期</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hourly</td>
<td align="left">日志归档周期为 1 小时，默认 Logrotate 的最小周期为 1 天，需额外调整该参数才可生效</td>
</tr>
<tr>
<td align="left">daily</td>
<td align="left">日志归档周期为 1 天</td>
</tr>
<tr>
<td align="left">weekly</td>
<td align="left">日志归档周期为 1 周</td>
</tr>
<tr>
<td align="left">monthly</td>
<td align="left">日志归档周期为 1 月，通常为每月的第一天</td>
</tr>
<tr>
<td align="left">归档执行条件</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">include</td>
<td align="left">读取外部参数文件</td>
</tr>
<tr>
<td align="left">missingok</td>
<td align="left">如果日志文件不存在，则不显示错误信息</td>
</tr>
<tr>
<td align="left">nomissingok</td>
<td align="left">如果日志文件不存在，则显示错误信息。默认配置</td>
</tr>
<tr>
<td align="left">size</td>
<td align="left">日志文件可被归档的最小值</td>
</tr>
<tr>
<td align="left">minsize</td>
<td align="left">日志文件可被归档的最小值，没到归档周期执行时间，不会执行归档操作</td>
</tr>
<tr>
<td align="left">maxsize</td>
<td align="left">日志文件超过设定值时，即使没到归档周期执行时间，也会执行归档操作</td>
</tr>
<tr>
<td align="left">ifempty</td>
<td align="left">即使日志文件为空，也执行归档操作</td>
</tr>
<tr>
<td align="left">notifempty</td>
<td align="left">如果日志文件为空，则不进行归档。默认设置</td>
</tr>
<tr>
<td align="left">tabooext</td>
<td align="left">不对设置扩展名的日志文件执行归档操作</td>
</tr>
<tr>
<td align="left">归档文件命名</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">start count</td>
<td align="left">使用日志文件归档次数作为归档文件扩展名，count 默认值为 1，默认配置</td>
</tr>
<tr>
<td align="left">dateext</td>
<td align="left">为归档文件名添加日期，默认追加到扩展名后</td>
</tr>
<tr>
<td align="left">dateformat</td>
<td align="left">设置归档文件名中的日期格式，使用”%Y%m%d%H”作为说明符，默认为-%Y%m%d</td>
</tr>
<tr>
<td align="left">dateyesterday</td>
<td align="left">使用前一天的日期而非创建归档文件时的日期作为归档文件的文件名中的日期</td>
</tr>
<tr>
<td align="left">extension</td>
<td align="left">指定日志的扩展名，并将其设置为归档文件的扩展名，启用压缩时，压缩的扩展名在最后</td>
</tr>
<tr>
<td align="left">compressext</td>
<td align="left">启用压缩时，自定义归档文件扩展名，如将”.gz”改为”.ddd”</td>
</tr>
<tr>
<td align="left">归档文件保存方式</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">compress</td>
<td align="left">对归档文件启用压缩，默认为 gzip 压缩</td>
</tr>
<tr>
<td align="left">nocompress</td>
<td align="left">不压缩归档文件。默认设置</td>
</tr>
<tr>
<td align="left">compresscmd</td>
<td align="left">指定压缩归档文件的命令，默认为 gzip 压缩</td>
</tr>
<tr>
<td align="left">uncompresscmd</td>
<td align="left">指定解压归档文件的命令，默认为 gunzip 解压</td>
</tr>
<tr>
<td align="left">compressoptions</td>
<td align="left">启用压缩时，设置压缩工具的命令选项</td>
</tr>
<tr>
<td align="left">delaycompress</td>
<td align="left">在下一个归档周期再对当前归档文件进行压缩</td>
</tr>
<tr>
<td align="left">nodelaycompress</td>
<td align="left">不延迟压缩。默认设置</td>
</tr>
<tr>
<td align="left">归档执行方式</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">copy</td>
<td align="left">为日志文件复制一个副本后再进行归档</td>
</tr>
<tr>
<td align="left">nocopy</td>
<td align="left">不复制源日志文件。默认配置</td>
</tr>
<tr>
<td align="left">copytruncate</td>
<td align="left">复制日志文件后清空日志文件的内容</td>
</tr>
<tr>
<td align="left">nocopytruncate</td>
<td align="left">复制源日志文件后，不清空源文件。默认设置</td>
</tr>
<tr>
<td align="left">create mode owner group, create owner group</td>
<td align="left">重命名日志文件，创建与日志文件同名的文件，默认 mode&#x3D;0644 uid&#x3D;0 gid&#x3D;0，与 copy 指令不能同时使用</td>
</tr>
<tr>
<td align="left">nocreate</td>
<td align="left">不创建与日志文件同名的文件。默认设置</td>
</tr>
<tr>
<td align="left">olddir</td>
<td align="left">设置归档文件保存目录</td>
</tr>
<tr>
<td align="left">noolddir</td>
<td align="left">归档文件与源文件在同一目录。默认设置</td>
</tr>
<tr>
<td align="left">createolddir mode owner group</td>
<td align="left">如果 olddir 参数指定的目录不存在，则创建目录并指定属组，默认 mode &#x3D; 0777 uid &#x3D; 0 gid &#x3D; 0</td>
</tr>
<tr>
<td align="left">nocreateolddir</td>
<td align="left">当 olddir 参数设定目录不存在时，不创建目录。默认设置</td>
</tr>
<tr>
<td align="left">prerotate … endscript</td>
<td align="left">归档执行之前执行脚本，日志文件名为传入的第一个参数</td>
</tr>
<tr>
<td align="left">postrotate … endscript</td>
<td align="left">归档执行之后执行脚本，日志文件名为传入的第一个参数</td>
</tr>
<tr>
<td align="left">firstaction … endscript</td>
<td align="left">prerotate 脚本之前，仅当第一个日志文件被开始执行归档操作时才执行脚本，日志文件名为传入的第一个参数</td>
</tr>
<tr>
<td align="left">lastaction … endscript</td>
<td align="left">postrotate 脚本之后，仅当最后一个日志文件执行归档操作结束时才执行脚本，日志文件名为传入的第一个参数</td>
</tr>
<tr>
<td align="left">preremove … endscript</td>
<td align="left">删除日志文件之前执行脚本，日志文件名为传入的第一个参数</td>
</tr>
<tr>
<td align="left">sharedscripts</td>
<td align="left">当匹配的日志文件为多个时，prerotate 和 postrotate 脚本会在每个日志文件执行归档操作时都执行一次，启用共享模式会让 prerotate 和 postrotate 脚本在全局只运行一次</td>
</tr>
<tr>
<td align="left">nosharedscripts</td>
<td align="left">当匹配的日志文件为多个时，prerotate 和 postrotate 脚本会在每个日志文件执行归档操作时都执行一次。默认设置</td>
</tr>
<tr>
<td align="left">su user group</td>
<td align="left">指定操作源文件执行归档操作的用户及属组</td>
</tr>
<tr>
<td align="left">归档文件清理</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mail</td>
<td align="left">设置接收归档文件的邮件地址</td>
</tr>
<tr>
<td align="left">nomail</td>
<td align="left">不将归档文件发送到任何邮件地址</td>
</tr>
<tr>
<td align="left">mailfirst</td>
<td align="left">将刚生成的归档文件发送到设置的邮箱</td>
</tr>
<tr>
<td align="left">maillast</td>
<td align="left">将要超过 maxage 设置时间的归档文件发送到设置的邮箱</td>
</tr>
<tr>
<td align="left">mахage</td>
<td align="left">设置过期归档文件的天数</td>
</tr>
<tr>
<td align="left">rotate</td>
<td align="left">保留归档文件数，默认为 0</td>
</tr>
<tr>
<td align="left">shred</td>
<td align="left">彻底删除</td>
</tr>
<tr>
<td align="left">shredcycles count</td>
<td align="left">彻底删除时，覆盖文件的次数，默认为 3</td>
</tr>
<tr>
<td align="left">noshred</td>
<td align="left">不彻底删除</td>
</tr>
</tbody></table>
<p>关于上表有以下几点需要说明:</p>
<ol>
<li><p>copy 与 create 是两种互斥的归档执行方式；</p>
</li>
<li><p>copy 方式是将日志文件复制一份后清空原日志文件的内容，并对复制的文件进行归档操作，应用程序继续向原日志文件输出日志。因日志文件复制与清空操作存在时间间隔，所以切割操作会因日志量的大小及实时产生的频率存在丢失的情况；</p>
</li>
<li><p>create 方式是将日志文件重命名，因日志文件的 inode 编号不变，应用程序会向新命名的文件输出日志。Logrotate 新创建原日志文件名的文件后执行重启或以信号机制通知应用程序重新向新日志文件输出日志内容，完成切割操作；</p>
</li>
<li><p>当与同一自定义配置匹配的日志文件为多个时，会并发执行归档操作。</p>
</li>
</ol>
<ul>
<li><strong>Logrotate 管理 Nginx 日志</strong></li>
</ul>
<p>根据 Logrotate 的功能特点，建议选择 create 方式进行日志归档管理，配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/logrotate.d/nginx</span><br><span class="line">/usr/local/nginx/logs/*.<span class="built_in">log</span> &#123;</span><br><span class="line">    daily                                   <span class="comment"># 日志归档周期为1天</span></span><br><span class="line">    size 1                                  <span class="comment"># 日志文件最小为1字节时才执行归档</span></span><br><span class="line">    minsize 1                               <span class="comment"># 日志文件最小为1字节时才执行归档</span></span><br><span class="line">    notifempty                              <span class="comment"># 日志文件不为空时才执行归档</span></span><br><span class="line">    dateext                                 <span class="comment"># 归档文件名添加时间字符串</span></span><br><span class="line">    dateformat -%Y%m%d%H                    <span class="comment"># 归档文件名时间字符串格式为-%Y%m%d%H</span></span><br><span class="line">    dateyesterday                           <span class="comment"># 归档文件名时间字符串以归档操作的前一天为时间戳</span></span><br><span class="line">    extension .<span class="built_in">log</span>                          <span class="comment"># 归档文件名中保留日志的扩展名</span></span><br><span class="line">    compress                                <span class="comment"># 归档文件执行压缩</span></span><br><span class="line">    delaycompress                           <span class="comment"># 在归档执行的下个周期再进行压缩</span></span><br><span class="line">    create                                  <span class="comment"># 以创建新文件方式实现日志归档</span></span><br><span class="line">    olddir /data/backup/nginx_logs          <span class="comment"># 归档文件存储目录</span></span><br><span class="line">    createolddir                            <span class="comment"># 归档文件存储目录不存在时自动创建</span></span><br><span class="line">    postrotate                              <span class="comment"># 归档执行后执行脚本</span></span><br><span class="line">        /usr/local/nginx/sbin/nginx -s reopen -g <span class="string">&quot;pid /run/nginx.pid;&quot;</span></span><br><span class="line">                                                <span class="comment"># 通知Nginx重新打开日志文件</span></span><br><span class="line">    endscript</span><br><span class="line">    sharedscripts                           <span class="comment"># 启用脚本共享模式</span></span><br><span class="line">    maxage 7                                <span class="comment"># 归档文件最多保留7天</span></span><br><span class="line">    rotate 7                                <span class="comment"># 归档文件最多保留7份</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="日志分析工具（ELK）配置"><a href="#日志分析工具（ELK）配置" class="headerlink" title="日志分析工具（ELK）配置"></a>日志分析工具（ELK）配置</h3><p>Nginx 的访问日志中可以记录用户的 IP、访问方法、访问 URI、响应状态及响应数据大小等 HTTP 请求处理中会涉及的各种信息，通过这些信息可以实现访问用户来源分布、用户请求 URI 排行、响应数据大小及并发连接的分析和统计。</p>
<h4 id="ELK-简介"><a href="#ELK-简介" class="headerlink" title="ELK 简介"></a>ELK 简介</h4><p>ELK（Elasticsearch、Logstash、Kibana）是开源的实时日志收集分析解决方案。ELK 访问逻辑如下图所示，是由 Elasticsearch、Logstash、Kibana 这三款软件和数据采集客户端（如 Filebeat）等实现日志采集、储存、搜索分析等操作。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZZ91153130.gif" alt="ELK 访问逻辑"></p>
<ul>
<li>Elasticsearch 是一款用 Java 语言开发的，基于 Lucene 的开源搜索引擎，它提供了分布式多用户的全文搜索、分析、存储能力。Elasticsearch 的常见关键词如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">关键词</th>
<th align="left">名称</th>
<th align="left">关键词说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cluster</td>
<td align="left">集群</td>
<td align="left">集群由一个主节点和多个从节点组成，主节点是通过内部选举产生的。Elastic-search 集群是一个去中心化的分布式架构，对于外部用户来讲，Elasticsearch 集群是个整体，与其中任何一个节点通信获取内容都是一致的</td>
</tr>
<tr>
<td align="left">index</td>
<td align="left">索引</td>
<td align="left">Elasticsearch 是面向文档的数据库，一条数据就是一个文档，文档内容为包含多个 key，value 格式字段数据。Elasticsearch 集群可以包括多个索引，每个索引下包含多个类型，每个类型下包含多个文档。索引相当于关系型数据库中的库，类型相当于关系型数据库中的表</td>
</tr>
<tr>
<td align="left">shards</td>
<td align="left">索引分片</td>
<td align="left">Elasticsearch 可以把一个完整的索引分成多个分片，该方式可以把一个大的索引拆分成多个，并分布到不同的节点，实现分布式搜索</td>
</tr>
<tr>
<td align="left">replicas</td>
<td align="left">索引副本</td>
<td align="left">Elasticsearch 可以为索引设置多个副本，当集群中某个节点或某个索引的分片损坏或丢失时，可以通过副本进行恢复，同时可以为搜索请求提供负载均衡，以提高查询效率</td>
</tr>
<tr>
<td align="left">recovery</td>
<td align="left">数据分配与恢复</td>
<td align="left">Elasticsearch 集群在有节点加入或退出时，会根据节点的数量变化对索引分片进行重新分配，当挂掉的节点重启后也会进行数据分配与恢复</td>
</tr>
<tr>
<td align="left">gateway</td>
<td align="left">存储方式</td>
<td align="left">Elasticsearch 存储方式，Elasticsearch 会先把索引存放到内存中，当内存满了时再持久化到 gateway 配置的目标存储中。默认 gateway 配置为本地硬盘，也支持其他分布式文件系统，如 Hadoop 的 HDFS 和 Amazon 的 s3 云存储服务等</td>
</tr>
</tbody></table>
<ul>
<li>Logstash 是基于 C&#x2F;S 架构，对日志进行收集、过滤、转发的日志收集引擎，它可以同时从多个源获取数据，动态地将客户端采集的数据进行分拣、过滤，并转发到不同存储服务器。</li>
</ul>
<p>Logstash 是以 pipeline 方式处理每条日志信息的，在每个 pipeline 中都有输入（INPUTS）、过滤（FILTERS）、输出（OUTPUTS）3 个处理动作。每个处理动作可由一个或多个插件实现复杂的功能。输入处理是获取日志数据；过滤处理可以对日志进行分拣、修改；输出处理则是将日志数据发送给目标存储服务器。</p>
<p>Logstash 工作原理如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZZ91229195.gif" alt="Logstash 原理"></p>
<ul>
<li>Kibana 是 Elasticsearch 的 Web 管理工具，它提供了友好的界面化操作方式和统计分析的 Dashboard 工具，让使用者只需简单点击就可完成基本的数据搜索、分析等工作。</li>
<li>Filebeat 隶属于 Beats 工具包，是负责文件数据采集的客户端工具。Filebeat 由 pro-spector 和 harvester 两个主要组件组成。prospector 目前只支持 log 文件和 stdin 两个输入类型，是 harvester 的管理进程，负责按照配置参数 paths 的内容查找日志文件，并为每个日志文件分配一个 harvester。</li>
</ul>
<p>harvester 负责实时读取单个日志文件，harvester 将日志内容发送给底层的 libbeat，libbeat 将日志数据发送给配置文件中指定的输出目标。Filebeat 工作原理如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200ZZ91244125.gif" alt="Filebeat 原理"></p>
<h4 id="ELK-安装"><a href="#ELK-安装" class="headerlink" title="ELK 安装"></a><a href="https://www.w3ccoo.com/nginx/nginx_log_elk.html">ELK 安装</a></h4><hr>
<h3 id="监控工具配置"><a href="#监控工具配置" class="headerlink" title="监控工具配置"></a>监控工具配置</h3><p><strong>（Prometheus）</strong></p>
<p>Nginx 的 ngx_http_stub_status_module 模块及第三方的主机状态监控模块都提供了自身状态数据的统计和输出功能，但作为监控管理，仍需要进一步实现对各种状态数据的收集、存储、统计展示、阈值报警等工作。为实现监控管理的完整性，需要使用更专业的监控工具来实现后续的工作。</p>
<h4 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h4><p>Prometheus 是由 SoundCloud 开源的监控告警解决方案，其在 GitHub 上的 Star 数已经超过 3.1 万，已成为很多大公司首选的监控解决方案。Prometheus 由 Prometheus Server、PushGateway、Alertmanager、Exporter 等 4 个组件共同组成。</p>
<p>其中，Exporter 可以由用户自行开发，只需输出符合 Prometheus 的规范数据即可；Prometheus Server 提供了 api 接口并支持自定义的 PromQL 查询语言对外实现监控数据查询输出，结合 Grafana 强大的图形模板功能，可以非常直观地以监控数据统计图表的形式进行展示。Prometheus 结构如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9131Q5338.gif" alt="Prometheus结构"></p>
<p>关于上图有以下几点需要说明。</p>
<ul>
<li>Prometheus Server:Prometheus 的基础服务，其从配置文件中 job 配置的 tagrets 目标服务器拉取监控数据，拉取数据周期由配置参数 scrape_interval 设置，同时开放 api 接口提供监控数据的对外查询和聚合分析功能；</li>
<li>PushGateway:Prometheus 的推送网关服务。Prometheus 默认都是从被监控服务器上拉取监控数据的，但由于网络原因无法直接访问目标服务器时，可在被监控服务器上通过脚本或工具采集监控数据，然后推送给推送网关服务（PushGateway），Prometheus 的基础服务则实时地从推送网关服务提供的端口 9091 拉取监控数据，完成监控操作；</li>
<li>Alertmanager:Prometheus 的告警服务，其对外开放端口 9093 接收 Prometheus Server 发送的告警信息，并按照告警规则将告警信息发送给接收目标；</li>
<li>Exporter:监控数据采集接口服务，该服务可由用户按照 Prometheus 的数据规范自行开发，只需提供对外访问接口，并能输出 Prometheus 数据格式的监控数据即可。</li>
</ul>
<h4 id="Prometheus部署"><a href="#Prometheus部署" class="headerlink" title="Prometheus部署"></a><a href="https://www.w3ccoo.com/nginx/nginx_log_prometheus.html">Prometheus部署</a></h4><p>Prometheus 支持多种方式部署，鉴于 Docker 化部署的便捷性，此处选择基于 docker-compose 脚本部署 Docker 化的 Prometheus 环境，部署示意如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9131S43E.gif" alt="Prometheus 部署"><br>在服务器 10.10.4.38 上部署 Prometheus 的基础服务和 Grafana 服务；在服务器 10.10.4.39 上部署 Prometheus 的推送网关服务和 Prometheus 的告警服务。</p>
<h4 id="监控HTTP主机状态"><a href="#监控HTTP主机状态" class="headerlink" title="监控HTTP主机状态"></a><a href="https://www.w3ccoo.com/nginx/nginx_log_prometheus.html">监控HTTP主机状态</a></h4><p>Prometheus 针对被监控主机，是通过轮询 Exporter 接口的形式获取监控数据的，nginx-module-vts 模块虽然也提供 Prometheus 数据格式输出，但数据并不详细，推荐使用 nginx-vts-exporter 实现 Prometheus 数据输出。nginx-vts-exporter 是由Go语言开发的，不仅提供了针对信息的监控数据，还提供了配套的 Grafana 模板。</p>
<h4 id="监控TCP-UDP主机状态"><a href="#监控TCP-UDP主机状态" class="headerlink" title="监控TCP&#x2F;UDP主机状态"></a><a href="https://www.w3ccoo.com/nginx/nginx_log_prometheus.html">监控TCP&#x2F;UDP主机状态</a></h4><p>TCP&#x2F;UDP 主机状态模块 nginx-module-sts 虽然也提供了 Prometheus 格式数据输出，但仍然不够详细，同时也没有可用的开源 Exporter。为实现 Nginx TCP&#x2F;UDP 主机状态数据的采集，可以按照 Prometheus 的数据规范编写一个 Exporter。</p>
<h4 id="Prometheus监控告警"><a href="#Prometheus监控告警" class="headerlink" title="Prometheus监控告警"></a><a href="https://www.w3ccoo.com/nginx/nginx_log_prometheus.html">Prometheus监控告警</a></h4><hr>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="Linux虚拟服务器简介"><a href="#Linux虚拟服务器简介" class="headerlink" title="Linux虚拟服务器简介"></a>Linux虚拟服务器简介</h3><p>LVS（Linux Virtual Server）是一个开源的负载均衡项目，是国内最早出现的开源项目之一，目前已被集成到 Linux 内核模块中。该项目在 Linux 内核中实现了基于 TCP 层的 IP 数据负载均衡分发，其工作在内核空间且仅做负载均衡分发处理，所以稳定性相对较好，性能相对较强，对内存及 CPU 资源的消耗也最低。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9151011T8.gif" alt="多层负载均衡网络架构"></p>
<h4 id="LVS术语"><a href="#LVS术语" class="headerlink" title="LVS术语"></a>LVS术语</h4><p>LVS 相关术语说明如下。</p>
<ul>
<li>DS（Director Server）:控制器服务器，部署 LVS 软件的服务器；</li>
<li>RS（Real Server）:真实服务器，被负载的后端服务器；</li>
<li>VIP（Virtual IP）:虚拟 IP，对外提供用户访问的 IP 地址；</li>
<li>DIP（Director Server IP）:控制器服务器 IP，控制器服务器的 IP 地址；</li>
<li>RIP（Real Server IP）:真实服务器 IP，真实服务器的 IP 地址；</li>
<li>CIP（Client IP）:客户端 IP，客户端的 IP 地址；</li>
<li>IPVS（IP Virtual Server）:LVS 的核心代码，工作于内核空间，主要有 IP 包处理、负载均衡算法、系统配置管理及网络链表处理等功能；</li>
<li>ipvsadm:IPVS 的管理器，工作于用户空间，负责 IPVS 运行规则的配置。</li>
</ul>
<h4 id="LVS工作原理"><a href="#LVS工作原理" class="headerlink" title="LVS工作原理"></a>LVS工作原理</h4><p>IPVS 是基于 Linux 的 Netfilter 框架实现的，其以数据包的网络检测链为挂载点完成数据的负载均衡及转发处理。其工作原理如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9150J6392.gif" alt="LVS 工作原理"><br>图:LVS 工作原理</p>
<p>客户访问虚拟 IP（VIP）时，数据包先在主机内核空间被 PREROUTING 链检测，根据数据包的目标地址进行路由判断，若目标地址是本地，则交由 INPUT 链进行处理。</p>
<p>IPVS 工作于 INPUT 链，当数据包到达 INPUT 链时，会先由 IPVS 进行检查，并根据负载均衡算法选出真实服务器 IP。</p>
<p>IPVS 转发模式为 NAT 模式时，将数据包由 FORWARD 链进行处理后由 POST-ROUTING 链发送给真实服务器。</p>
<p>IPVS 转发模式为非 NAT 模式时，则将数据包由 POSTROUTING 链发送给真实服务器。</p>
<h4 id="LVS转发模式"><a href="#LVS转发模式" class="headerlink" title="LVS转发模式"></a>LVS转发模式</h4><p>LVS 支持多种网络部署结构，官方版本提供了 NAT、TUN 及 DR 这 3 种标准转发模式，另阿里巴巴工程师根据自身需求进行扩展，实现了 FullNAT 转发模式。</p>
<ul>
<li><strong>LVS标准转发模式如下:</strong></li>
</ul>
<p>NAT，该模式需要真实服务器的网关指向 DS，客户端的请求包和返回包都要经过 DS，该模式对 DS 的硬件性能的要求相对较高。</p>
<p>TUN，该模式是将客户端的请求包通过 IPIP 方式封装后分发给真实服务器，客户端的返回包则由真实服务器的本地路由自行处理，源 IP 地址还是 VIP 地址（真实服务器需要在本地回环接口配置 VIP）。因 DS 只负责请求包转发，其处理性能比 NAT 模式要高，但需要真实服务器支持 IPIP 协议。</p>
<p>DR，该模式是将客户端的请求包通过修改 MAC 地址为真实服务器的 MAC 地址后将数据包分发给真实服务器，客户端的返回包则由真实服务器的本地路由自行处理，源 IP 地址还是 VIP 地址（真实服务器需要在本地回环接口配置 VIP）。</p>
<p>因 DS 只负责请求包转发，且与真实服务器间进行基于二层的数据分发，所以处理性能最高，但要求 DS 与真实服务器在同一 MAC 广播域内。</p>
<ul>
<li><strong>阿里扩展版本转发模式如下:</strong></li>
</ul>
<p>FullNAT，该模式是客户端的请求包和返回包都要经过 DS，但真实服务器可以在网络中的任意位置，且无须将网关配置为 DS 的 IP 地址，该方式虽然对 DS 的性能要求较高，但始终由 DS 面对客户端，有效保护了真实服务器的安全。</p>
<p>阿里扩展版本还针对 LVS 官方版本在安全方面进行了增强，提供了 SYNPROXY 功能支持，该功能在 LVS 上增加了一层 foold 类型的攻击包防护，实现了 UDP&#x2F;IP FRAG DDOS 攻击防护。</p>
<h4 id="LVS负载均衡算法"><a href="#LVS负载均衡算法" class="headerlink" title="LVS负载均衡算法"></a>LVS负载均衡算法</h4><p>LVS 实现了 10 种负载均衡算法，负载均衡算法及其功能介绍如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">算法名称</th>
<th align="left">英文名称</th>
<th align="left">配置简称</th>
<th align="left">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">轮询调度</td>
<td align="left">Round Robin</td>
<td align="left">rr</td>
<td align="left">将请求依次循环分发给负载的真实服务器</td>
</tr>
<tr>
<td align="left">加权轮询调度</td>
<td align="left">Weight Round Robin</td>
<td align="left">wrr</td>
<td align="left">按照配置的权重比例将请求分发给真实服务器，权重越高，分配的请求越多</td>
</tr>
<tr>
<td align="left">目标地址散列调度</td>
<td align="left">Destination Hashing</td>
<td align="left">dh</td>
<td align="left">该算法将目标地址作为散列键（Hash Key），从散列表中找出对应的真实服务器进行请求分发</td>
</tr>
<tr>
<td align="left">源地址散列调度</td>
<td align="left">Source Hashing</td>
<td align="left">sh</td>
<td align="left">该算法根据源地址作为散列键（Hash Key）从散列表中找出对应的真实服务器进行请求分发</td>
</tr>
<tr>
<td align="left">最小连接调度</td>
<td align="left">Least Connections</td>
<td align="left">lc</td>
<td align="left">将新的请求分发给当前连接数最小的服务器，其通过每个真实服务器当前连接数进行统计判断</td>
</tr>
<tr>
<td align="left">加权最小连接调度</td>
<td align="left">Weight Least Connec-tions</td>
<td align="left">wlc</td>
<td align="left">按照配置的权重，将新请求分发给当前连接数最小的服务器</td>
</tr>
<tr>
<td align="left">最短延迟调度</td>
<td align="left">Shortest Expected Delay</td>
<td align="left">sed</td>
<td align="left">该算法在 WLC 算法的基础上增加了基于活动连接的筛选算法，并把请求分发给算法值最小的真实服务器，该算法避免了 WLC 算法中权重小的空闲服务器无法被分发到连接的情况</td>
</tr>
<tr>
<td align="left">最少队列调度</td>
<td align="left">Never Queue</td>
<td align="left">nq</td>
<td align="left">若有真实服务器的连接数为空，直接分发请求给该真实服务器，如果所有服务器都处于有连接状态，则使用 SED 算法进行调度</td>
</tr>
<tr>
<td align="left">基于局部的最少连接</td>
<td align="left">Locality-Based Least Connections</td>
<td align="left">lblc</td>
<td align="left">该算法将目标地址相同的请求尽可能地分发到上次被分发的真实服务器，真实服务器若超载或不可用则使用最少连接算法进行分发。该方法常用在真实服务器为缓存服务器时，以提高缓存的命中率</td>
</tr>
<tr>
<td align="left">带复制的基于局部性的最少连接</td>
<td align="left">Locality-Based Least Connections with Replication</td>
<td align="left">lblcr</td>
<td align="left">该算法维护一组被分发相同目标地址请求的真实服务器列表，按照最小连接算法创建和添加组成员，并在一定条件下将组内最繁忙的成员移除。目标地址相同的请求将被分发到该组列表中最少连接的成员。该方法常用在真实服务器为缓存服务器时，以提高缓存的命中率</td>
</tr>
</tbody></table>
<h4 id="IPVS的管理器ipvsadm"><a href="#IPVS的管理器ipvsadm" class="headerlink" title="IPVS的管理器ipvsadm"></a>IPVS的管理器ipvsadm</h4><p>ipvsadm 1.2.1 版本命令的常用场景分为虚拟服务管理和真实服务器管理两类。</p>
<ul>
<li><strong>虚拟服务管理</strong></li>
</ul>
<p>在 LVS 配置管理中，每个 VIP 与端口组成一个虚拟服务。虚拟服务管理命令参数格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -A [-t|u|f] [vip_addr:port] [-s:负载算法]</span><br></pre></td></tr></table></figure>

<p>虚拟服务管理命令参数如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">参数选项</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-A</td>
<td align="left"></td>
<td align="left">添加虚拟服务，为虚拟服务绑定 VIP 地址及端口</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-t</td>
<td align="left">虚拟服务协议为 TCP 协议</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-u</td>
<td align="left">虚拟服务协议为 UDP 协议</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-s</td>
<td align="left">虚拟服务负载均衡算法</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-p</td>
<td align="left">虚拟服务负载均衡保持连接的超时时间，默认超时时间为 360s。LVS 会把同一个客户端的请求信息记录到 LVS 的 hash 表里，该参数设置了记录的保存时间，设定时间内的客户端连接会被转发到同一真实服务器</td>
</tr>
<tr>
<td align="left">-D</td>
<td align="left"></td>
<td align="left">删除虚拟服务记录</td>
</tr>
<tr>
<td align="left">-E</td>
<td align="left"></td>
<td align="left">修改虚拟服务记录</td>
</tr>
<tr>
<td align="left">-С</td>
<td align="left"></td>
<td align="left">清空所有虚拟服务记录</td>
</tr>
</tbody></table>
<p>命令样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加虚拟服务，VIP地址为192.168.2.100:80，协议为TCP，负载均衡算法为轮询算法（rr），启用保持</span></span><br><span class="line"><span class="comment"># 连接支持，默认超时时间为300s</span></span><br><span class="line">ipvsadm -A -t 192.168.2.100:80 -s rr -p</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>真实服务器管理</strong></li>
</ul>
<p>真实服务器管理命令参数格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -a [-t|u|f] [vip_addr:port] [-r ip_addr] [-g|i|m] [-w指定权重]</span><br></pre></td></tr></table></figure>

<p>真实服务器管理命令参数如下图所示。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">参数选项</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left"></td>
<td align="left">添加真实服务器</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-t</td>
<td align="left">与真实服务器用 TCP 协议建立连接</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-u</td>
<td align="left">与真实服务器用 UDP 协议建立连接</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-r</td>
<td align="left">真服务器 IP</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-g</td>
<td align="left">与真实服务器的转发模式为 DR 模式</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-i</td>
<td align="left">与真实服务器的转发模式为 TUN 模式</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-m</td>
<td align="left">与真实服务器的转发模式为 NAT 模式</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">-w</td>
<td align="left">指定真实服务器的权重</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left"></td>
<td align="left">删除真实服务器记录</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left"></td>
<td align="left">修改真实服务器记录</td>
</tr>
</tbody></table>
<p>命令样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在虚拟服务192.168.2.100:80中添加真实服务器192.168.10.3:80，转发模式为NAT模式</span></span><br><span class="line">ipvsadm -a -t 192.168.2.100:80 -r 192.168.10.3:80 -m</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>其他常用命令参数</strong></li>
</ul>
<p>其他常用命令参数格式如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看IPVS配置</span></span><br><span class="line">ipvsadm -<span class="built_in">ln</span></span><br></pre></td></tr></table></figure>

<p>更多命令参数可以通过 man 命令查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man ipvsadm</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Keepalived配置简述"><a href="#Keepalived配置简述" class="headerlink" title="Keepalived配置简述"></a>Keepalived配置简述</h3><p>Keepalived 是一款用C语言编写的开源路由软件，目前仍处于活跃开发的状态，其主要目标是基于 Linux 系统提供一款配置简单且功能强大的负载均衡和高可用的软件应用。负载均衡是基于 LVS（IPVS）实现的，Keepalived 在 LVS 的基础上增加了多种主动健康检测机制，可以根据后端真实服务器的运行状态，自动对虚拟服务器负载的真实服务器进行维护和管理。</p>
<p>高可用性是通过虚拟冗余路由协议（Virtual Reduntant Routing Protocol，VRRP）实现的。VRRP 是工作在网络层的一种路由容错协议，通过组播的通告机制进行网络路由快速转移，以实现网络设备的高可用。</p>
<h4 id="Keepalived相关术语"><a href="#Keepalived相关术语" class="headerlink" title="Keepalived相关术语"></a>Keepalived相关术语</h4><ul>
<li>虚拟 IP（VIP）:对外提供用户访问的 IP 地址，与 LVS 的 VIP 概念相同；</li>
<li>真实服务器（Real Server）:被负载的后端服务器；</li>
<li>服务器池（Server Pool）:同一虚拟 IP 及端口的一组真实服务器；</li>
<li>虚拟服务器（Virtual Server）:服务器池的外部访问点，每个虚拟 IP 和端口组成一个虚拟服务器；</li>
<li>虚拟服务（Virtual Service）:与 VIP 关联的 TCP&#x2F;UDP 服务；</li>
<li>VRRP:Keepalived 实现高可用的虚拟路由器冗余协议；</li>
<li>VRRP 路由器（VRRP Router）:运行 VRRP 协议的路由器设备；</li>
<li>虚拟路由器（Virtual Router）:一个抽象对象，一组具有相同 VRID（虚拟路由器标识符）的多个 VRRP 路由器集合；</li>
<li>MASTER 状态:主路由状态，是 VIP 地址的拥有者，负责转发到达虚拟路由的三层数据包，负责对虚拟 IP 地址的 ARP 请求进行响应；</li>
<li>BACKUP 状态:备份路由状态，当主路由状态设备故障时，负责接管数据包转发及ARP请求响应。</li>
</ul>
<h4 id="Keepalived的工作模式"><a href="#Keepalived的工作模式" class="headerlink" title="Keepalived的工作模式"></a>Keepalived的工作模式</h4><p>Keepalived 为 LVS 提供了文件形式的配置方式，并为真实服务器提供了多种主动健康检测机制，通过 VRRP 协议为 LVS 提供了高可用的负载集群解决方案。Keepalived 的工作模式如下图所示。</p>
<ul>
<li>处于 MASTER 状态的 Keepalived 主机是 VIP 的拥有者，负责上层路由 VIP 的 ARP 查询响应和数据包转发；</li>
<li>处于 MASTER 状态的 Keepalived 主机通过 VRRP 协议在局域网内组播 VRRP 通告信息；</li>
<li>处于 MASTER 状态的 Keepalived 主机通过配置的健康检测机制主动检查服务器池中真实服务器的状态；</li>
<li>处于 BACKUP 状态的 Keepalived 主机接收 VRRP 通告信息，并根据通告信息判断本机状态是否变更；</li>
<li>当处于 MASTER 状态的路由发生故障时，处于 BACKUP 状态的路由确认主路由状态的 VRRP 通告超时时，则改变自身状态为 MASTER 状态，负责上层路由 IP 地址的 ARP 请求响应，并对外组播 VRRP 通告。</li>
</ul>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9160411W7.gif" alt="Keepalived 的工作模式示意图"><br>图:Keepalived 的工作模式示意图</p>
<h4 id="健康检测"><a href="#健康检测" class="headerlink" title="健康检测"></a>健康检测</h4><p>Keepalived 设计了多种主动健康检测机制，每个健康检测机制都注册在全局调度框架中，通过检测真实服务器的运行状态，自动对服务池中的真实服务器进行维护和管理。常用的健康检测机制有以下 4 种。</p>
<ul>
<li>TCP 检测。通过非阻塞式 TCP 连接超时检查机制检查真实服务器的状态，当真实服务器不响应请求或响应超时时，则确认为检测失败，并将该真实服务器从服务池中移除。</li>
<li>HTTP 检测。通过 HTTP GET 方法访问指定的 URL 并对返回结果进行 MD5 算法求值，如果与配置文件中的预设值不匹配，则确认为检测失败，并将该真实服务器从服务池中移除。该机制支持同一服务器的多 URL 获取检测。</li>
<li>SSL 检测。对 HTTP 检测增加了 SSL 支持。</li>
<li>自定义脚本。允许用户自定义检测脚本进行检测判断，支持脚本外部传递参数，执行的结果必须是 0 或 1。0 表示检测成功，1 表示检测失败。</li>
</ul>
<h4 id="配置关键字"><a href="#配置关键字" class="headerlink" title="配置关键字"></a>配置关键字</h4><p>Keepalived 配置文件可以分为 3 个部分，分别为全局配置、VRRP 配置和虚拟服务配置。各部分的常用配置关键字及其功能如下。</p>
<ul>
<li><strong>全局配置</strong></li>
</ul>
<p>Keepalived 全局配置关键字实现邮件告警的 SMTP 配置及自身 VRRP 路由相关的全局配置，配置关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">global_defs</td>
<td align="left">全局配置区域标识</td>
</tr>
<tr>
<td align="left">notification_email</td>
<td align="left">设置接收告警邮件的地址列表</td>
</tr>
<tr>
<td align="left">notification_email_from</td>
<td align="left">设置发送邮件的地址列表</td>
</tr>
<tr>
<td align="left">smtp_server</td>
<td align="left">设置用于发送邮件的 SMTP 服务器地址</td>
</tr>
<tr>
<td align="left">smtp_connection_timeout</td>
<td align="left">设置 SMTP 服务器连接超时时间</td>
</tr>
<tr>
<td align="left">router_id</td>
<td align="left">设置当前设备的路由 ID，每个设备均不相同</td>
</tr>
<tr>
<td align="left">vrrp_version</td>
<td align="left">VRRP 协议版本</td>
</tr>
<tr>
<td align="left">nopreempt</td>
<td align="left">是否启用非抢占模式，即不参与 MASTER 的选举，默认为抢占模式</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs&#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">        monitor@nginxbar.org        <span class="comment"># 接收邮件的邮箱为monitor@nginxbar.org</span></span><br><span class="line">    &#125;</span><br><span class="line">    smtp_server smtp.nginxbar.org   <span class="comment"># SMTP服务器地址为smtp.nginxbar.org</span></span><br><span class="line">    smtp_connect_timeout 30         <span class="comment"># SMTP服务器连接超时时间为30秒</span></span><br><span class="line">    router_id LVS_Nginx1            <span class="comment"># 当前设备路由ID为LVS_Nginx1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>VRRP配置</strong></li>
</ul>
<p>Keepalived 的 VRRP 配置关键字用于创建 VRRP 路由器，并为其配置运行参数。配置文件中可以创建多个不同名称的 VRRP 路由器实例，每个 VRRP 路由器实例都需要通过设定虚拟路由 ID 加入虚拟路由器中。VRRP 路由器接收组播的 VRRP 通告，并根据 VRRP 通告切换自身状态。当切换状态时会触发配置中对应状态的 shell 脚本，并根据配置参数判断是否发送告警邮件。VRRP 配置关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">vrrp_instance</td>
<td align="left">VRRP 实例配置区域标识</td>
</tr>
<tr>
<td align="left">state</td>
<td align="left">设置当前 VRRP 路由的初始状态</td>
</tr>
<tr>
<td align="left">interface</td>
<td align="left">设置 VRRP 绑定的设备网络接口</td>
</tr>
<tr>
<td align="left">virtual_router_id</td>
<td align="left">设置当前设备所属的虚拟路由 ID</td>
</tr>
<tr>
<td align="left">priority</td>
<td align="left">设置当前 VRRP 路由的初始优先级，优先级最高的会被选举为 MASTER，优先级取值范围为 1~254</td>
</tr>
<tr>
<td align="left">advert_int</td>
<td align="left">发送组播包的间隔时间，默认为 1 秒</td>
</tr>
<tr>
<td align="left">nopreempt</td>
<td align="left">是否启用非抢占模式，即不参与 MASTER 的选举，默认为抢占模式</td>
</tr>
<tr>
<td align="left">preempt_delay</td>
<td align="left">设置抢占延时，取值范围为 0~1000，默认为 0，单位为秒。即等待多少秒才参与 MASTER 选举</td>
</tr>
<tr>
<td align="left">authentication</td>
<td align="left">VRRP 通信认证配置区域标识</td>
</tr>
<tr>
<td align="left">auth_type</td>
<td align="left">指定 VRRP 通信的认证类型，有 PASS 简单密码认证和 AH:IPSEC 认证两种类型</td>
</tr>
<tr>
<td align="left">auth_pass</td>
<td align="left">指定 VRRP 通信密码字符串，最大为 8 位</td>
</tr>
<tr>
<td align="left">virtual_ipaddress</td>
<td align="left">VIP 地址配置区域标识</td>
</tr>
<tr>
<td align="left">notify_master</td>
<td align="left">指定一个转换为 MASTER 状态后执行的 shell 脚本</td>
</tr>
<tr>
<td align="left">notify_backup</td>
<td align="left">指定一个转换为 BACKUP 状态后执行的 shell 脚本</td>
</tr>
<tr>
<td align="left">notify_fault</td>
<td align="left">指定一个转换为 FAULT 状态后执行的 shell 脚本</td>
</tr>
<tr>
<td align="left">smtp_alert</td>
<td align="left">使用 SMTP 的配置发送邮件告警通知</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER            <span class="comment"># 初始路由状态为MASTER</span></span><br><span class="line">    interface eth0          <span class="comment"># VRRP绑定接口为eth0</span></span><br><span class="line">    virtual_router_id 51    <span class="comment"># 虚拟路由器的VRID为51</span></span><br><span class="line">    priority 100            <span class="comment"># 当前设备的优先级是100</span></span><br><span class="line">    nopreempt               <span class="comment"># 不参与MASTER的选举</span></span><br><span class="line">    advert_int 5            <span class="comment"># VRRP组播的间隔时间是5秒</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS      <span class="comment"># 认证类型为PASS</span></span><br><span class="line">        auth_pass 2222      <span class="comment"># 认证密码为2222</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.155       <span class="comment"># 虚拟服务器的VIP是192.168.2.155</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VRRP 本身是通过 VRRP 通告机制实现路由器状态切换判断的，但在实际的应用场景中会存在因网络抖动等原因影响 VRRP 的通告传递的情况，为提高状态切换的准确性，Keepalived 还提供了一种脚本检测机制，可以让用户通过自定义脚本更精准地进行路由状态切换。相关配置关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">vrrp_script</td>
<td align="left">VRRP 脚本配置区域标识</td>
</tr>
<tr>
<td align="left">scrip</td>
<td align="left">指定要执行的脚本路径</td>
</tr>
<tr>
<td align="left">weight</td>
<td align="left">用于调整 VRRP 路由器优先级的权重值，如果脚本执行成功且 weight 为正时，则优先级增力相应值；如果脚本执行失败且 weight 为负，则优先级减少相应值。优先级的取值范围为 1~254</td>
</tr>
<tr>
<td align="left">interval</td>
<td align="left">设置检测脚本的执行间隔。单位是 s。默认为 1s</td>
</tr>
<tr>
<td align="left">timeout</td>
<td align="left">脚本执行返回结果超时时间，超过指定时间则认为检测失败</td>
</tr>
<tr>
<td align="left">rise</td>
<td align="left">连续检测成功次数为设定值时才确认为成功状态</td>
</tr>
<tr>
<td align="left">fall</td>
<td align="left">连续检测失败次数为设定值时才确认为失败状态</td>
</tr>
<tr>
<td align="left">init_fail</td>
<td align="left">设置脚本初始检测状态为失败状态</td>
</tr>
</tbody></table>
<p>Keepalived 通过 VRRP 通告判断虚拟路由器中其他 VRRP 路由状态并确保路由的转移，对于业务层的高可用，则需要用户单独对应用进程进行同步检测。例如，Nginx 与 Keepalived 部署在同一台设备上，可以通过脚本检测 Nginx 进程的状态，如果 Nginx 检测失败并无法自动恢复，则降低 VRRP 的优先级。要尽量避免在切换为 MASTER 状态时，因自身业务层故障导致业务高可用切换失败。也可用多个脚本组合实现 VRRP 路由优先级的动态调整。配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vrrp_script checknginx &#123;</span><br><span class="line">    script <span class="string">&quot;/opt/data/scripts/checknginx.sh&quot;</span></span><br><span class="line">    interval 3      <span class="comment"># 检测脚本执行时间间隔</span></span><br><span class="line">    weight -20      <span class="comment"># 当检测失败时，VRRP路由优先级降低20</span></span><br><span class="line">    rise 3          <span class="comment"># 连续监测3次成功才确认为成功</span></span><br><span class="line">    fall 3          <span class="comment"># 连续监测3次失败才确认为失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检测脚本内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 检测脚本查询Nginx进程是否存在，若存在则返回0，若检测失败则返回1</span></span><br><span class="line">check = `ps aux | grep -v grep | grep nginx | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$check</span> &gt; 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    systemctl start nginx</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>虚拟服务器配置</strong></li>
</ul>
<p>Keepalived 的虚拟服务器是负载均衡的外部访问点，通过配置关键字实现对 LVS 运行参数的配置，配置文件中可以为 VIP 绑定不同的端口创建多个虚拟服务器。虚拟服务器配置关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">virtual_server</td>
<td align="left">虚拟服务器配置区域标识</td>
</tr>
<tr>
<td align="left">delay_loop</td>
<td align="left">设置健康检测的间隔时间</td>
</tr>
<tr>
<td align="left">lb_algo</td>
<td align="left">LVS 调度算法</td>
</tr>
<tr>
<td align="left">lb_kind</td>
<td align="left">LVS 转模式（NAT、DR、TUN）</td>
</tr>
<tr>
<td align="left">persistence_timeout</td>
<td align="left">设置保持连接的超时时间，在设定时间内会把同一个客户端的连接全部转发给同一真实服务器</td>
</tr>
<tr>
<td align="left">persistence_granularity</td>
<td align="left">对启用保持连接的客户端 IP 进行掩码调整，当 IP 为 255.255.255.255 时，则仅限这个 IP 的客户端；当 IP 为 255.255.255.0 时，则为这个客户端所在子网网段内 IP 的所有客户端</td>
</tr>
<tr>
<td align="left">virtualhost</td>
<td align="left">为 HTTP_GET 或 SSL_GET 设置执行要检测的虚拟主机</td>
</tr>
<tr>
<td align="left">protocol</td>
<td align="left">转发协议类型（TCP、UDP、SCTP）</td>
</tr>
<tr>
<td align="left">sorry_server</td>
<td align="left">设置一个服务池中所有真实服务器都无法访问时的备用服务器</td>
</tr>
</tbody></table>
<p>真实服务器相关关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">real_server</td>
<td align="left">配置真实服务器 IP 及端口</td>
</tr>
<tr>
<td align="left">weight</td>
<td align="left">设置真实服务器的权重，默认为 1</td>
</tr>
<tr>
<td align="left">inhibit_on_failure</td>
<td align="left">当健康检测失败时，将当前服务器权重设置为 0，而不将其从服务器池中移除</td>
</tr>
<tr>
<td align="left">notify_up</td>
<td align="left">当前服务器健康检查成功时执行的脚本</td>
</tr>
<tr>
<td align="left">notify_down</td>
<td align="left">当前服务器健康检查失败时执行的脚本</td>
</tr>
<tr>
<td align="left">uthreshold</td>
<td align="left">当前服务器的最大连接数</td>
</tr>
<tr>
<td align="left">lthreshold</td>
<td align="left">当前服务器的最小连接数</td>
</tr>
<tr>
<td align="left">TCP_CHECK</td>
<td align="left">TCP 检测设置区域标识</td>
</tr>
<tr>
<td align="left">MISC_CHECK</td>
<td align="left">自定义检测脚本设置区域标识</td>
</tr>
<tr>
<td align="left">HTTP_GET</td>
<td align="left">HTTP 检测设置区域标识</td>
</tr>
<tr>
<td align="left">SSL_GET</td>
<td align="left">SSL HTTP 检测设置区域标识</td>
</tr>
</tbody></table>
<p>通过 Keepalived 为真实服务器配置关键字不仅可以实现 LVS 真实服务器的运行参数配置，还可以对自身增加的真实服务器的主动健康检测进行配置。真实服务器健康检测配置关键字如下表所示。</p>
<table>
<thead>
<tr>
<th align="left">配置关键字</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">url</td>
<td align="left">HTTP_GET 和 SSL_GET 的 URL 检测标识</td>
</tr>
<tr>
<td align="left">path</td>
<td align="left">HTTP_GET 和 SSL_GET 的 URL 检测路径</td>
</tr>
<tr>
<td align="left">digest</td>
<td align="left">HTTP_GET 和 SSL_GET 的返回结果的 MD5 计算值</td>
</tr>
<tr>
<td align="left">status_code</td>
<td align="left">HTTP_GET 和 SSL_GET 的健康检测返回状态码</td>
</tr>
<tr>
<td align="left">connect_ip</td>
<td align="left">检测的 IP 地址，默认为真实服务器的 IP 地址</td>
</tr>
<tr>
<td align="left">connect_port</td>
<td align="left">检测的端口，默认为真实服务器的端口</td>
</tr>
<tr>
<td align="left">bindto</td>
<td align="left">发起检测连接的接口地址，默认为本地 IP 地址</td>
</tr>
<tr>
<td align="left">bind_port</td>
<td align="left">发起检测连接的源端口，默认为随机端口</td>
</tr>
<tr>
<td align="left">connect_timeout</td>
<td align="left">检测连接的超时时间，默认为 5s</td>
</tr>
<tr>
<td align="left">fwmark</td>
<td align="left">使用 fwmark 对所有发出去的检查数据包进行标记</td>
</tr>
<tr>
<td align="left">warmup</td>
<td align="left">指定一个随机延迟时间用于防止网络阻塞，如果为 0，则表示关闭该功能</td>
</tr>
<tr>
<td align="left">nb_get_retry</td>
<td align="left">GET 尝试次数，仅 HTTP_GET 和 SSL_GET 有效</td>
</tr>
<tr>
<td align="left">retry</td>
<td align="left">重试次数，默认是 1 次，仅 TCP_CHECK 有效</td>
</tr>
<tr>
<td align="left">delay_before_retry</td>
<td align="left">设置在重试之前延迟的秒数</td>
</tr>
</tbody></table>
<p>配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtual_server 192.168.2.155 80 &#123;           <span class="comment"># 虚拟服务器IP及端口</span></span><br><span class="line">    delay_loop 6                            <span class="comment"># 健康检测间隔时间为6s</span></span><br><span class="line">    lb_algo wrr                             <span class="comment"># 负载均衡调度算法为加权轮询</span></span><br><span class="line">    lb_kind DR                              <span class="comment"># 转发模式为DR</span></span><br><span class="line">    persistence_timeout 60                  <span class="comment"># 保持连接的超时时间为60s</span></span><br><span class="line">    protocol TCP                            <span class="comment"># 负载均衡转发协议为TCP</span></span><br><span class="line">    real_server 192.168.2.109 80 &#123;                  <span class="comment"># 真实服务器IP及端口</span></span><br><span class="line">        weight 100                                  <span class="comment"># 真实服务器权重为100</span></span><br><span class="line">        notify_down /etc/keepalived/scripts/stop.sh <span class="comment"># 当真实服务器健康检测失败时执</span></span><br><span class="line">                                                                <span class="comment"># 行stop.sh脚本</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="string">&quot;/healthcheck&quot;</span>                         <span class="comment"># 指定要检查的URL的路径</span></span><br><span class="line">                digest bfaa324fdd71444e43eca3b7a1679a1a     <span class="comment"># 检测URL返回值的MD5计算值</span></span><br><span class="line">                status_code 200                             <span class="comment"># 健康检测返回状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 10                      <span class="comment"># 连接超时时间为10s</span></span><br><span class="line">            nb_get_retry 3                          <span class="comment"># 重试3次确认失败</span></span><br><span class="line">            delay_before_retry 3                    <span class="comment"># 失败重试的时间间隔为3s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># digest值的计算方法</span></span><br><span class="line">genhash -s 192.168.2.109 -p 80 -u /healthcheck</span><br></pre></td></tr></table></figure>

<p>Keepalived 的其他配置关键字此处并未列出，更多配置关键字可以通过 man 命令获取。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man keepalived.conf</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="集群负载（基于LVS和Keepalived）搭建"><a href="#集群负载（基于LVS和Keepalived）搭建" class="headerlink" title="集群负载（基于LVS和Keepalived）搭建"></a>集群负载（基于LVS和Keepalived）搭建</h3><p>基于 LVS 和 Keepalived 的 Nginx 集群负载是使用 LVS 做传输层的负载均衡设备，将客户端请求从传输层负载到后端的多组 Nginx 集群，并由 Nginx 集群实现应用层负载均衡处理的多层负载均衡网络架构。Keepalived 通过文件配置的方式实现 LVS 的运行管理，并通过 VRRP 机制实现传输层负载的高可用，为 Nginx 集群提供高性能、高可用的负载应用。</p>
<p>Nginx 集群负载部署图如下图所示。</p>
<ul>
<li>LVS 作为传输层负载均衡与接入路由对接，负责把数据包转发给后端的 Nginx 服务器。</li>
<li>LVS 选用 DR 转发模式，网络数据包在传输层被分发到 Nginx 服务器，并由 Nginx 经过本地路由返回给客户端。</li>
<li>LVS 对后端 Nginx 服务器集群选用加权轮询（wrr）的负载均衡调度策略。</li>
<li>Keepalived 通过 VRRP 协议组播通告状态信息，确保两台 LVS 服务器的高可用。</li>
<li>当处于 MASTER 状态的 Keepalived 发生故障时，处于 BACKUP 状态的 Keepalived 切换为 MASTER 状态，负责与接入路由对接，把数据包转发给后端的 Nginx 服务器。</li>
<li>Keepalived 通过健康检测机制检测 Nginx 集群内每台 Nginx 服务器的健康状态。</li>
<li>Nginx 负责应用层负载均衡，完成客户端请求的负载、路由分流、过滤等操作。</li>
</ul>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z9163540624.gif" alt="Nginx 集群负载部署图"></p>
<ul>
<li><strong>Keepalived安装</strong></li>
</ul>
<p>Keepalived 在 CentOS 7 系统下使用 yum 安装即可。在 CentOS 7 系统下，LVS 已被集成到内核中，无须单独安装。</p>
<p>yum -y install keepalived</p>
<p>systemctl enable keepalived</p>
<ul>
<li><strong>Keepalived配置</strong></li>
</ul>
<p>Keepalived 需要分别在两台 LVS 服务器上进行配置，主服务器上的 Keepalived 配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">      monitor@nginxbar.org                          <span class="comment"># 发生故障时发送邮件告警通知的邮箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from admin@nginxbar.org      <span class="comment"># 使用哪个邮箱发送</span></span><br><span class="line">    smtp_server mail.nginxbar.org                   <span class="comment"># 发件服务器</span></span><br><span class="line">    smtp_connect_timeout 30</span><br><span class="line">    router_id LVS_01                                <span class="comment"># 当前设备路由ID为LVS_01</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER                                    <span class="comment"># 初始路由状态为MASTER</span></span><br><span class="line">    interface eth0                                  <span class="comment"># VRRP绑定的本地网卡接口为eth0</span></span><br><span class="line">    virtual_router_id 51                            <span class="comment"># 虚拟路由器的VRID为51</span></span><br><span class="line">    priority 100                                    <span class="comment"># 当前设备的优先级是100</span></span><br><span class="line">    advert_int 5                                    <span class="comment"># VRRP组播的间隔时间是5s</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS                                      <span class="comment"># 认证类型为PASS</span></span><br><span class="line">        auth_pass 2222                                      <span class="comment"># 认证密码为2222</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.21.155                                      <span class="comment"># 虚拟服务器的VIP是192.168.21.155</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.21.155 80 &#123;                      <span class="comment"># 虚拟服务器IP及端口</span></span><br><span class="line">    delay_loop 6                                            <span class="comment"># 健康检测间隔时间为6s</span></span><br><span class="line">    lb_algo wrr                                             <span class="comment"># 负载均衡调度算法为加权轮询</span></span><br><span class="line">    lb_kind DR                                              <span class="comment"># 转发模式为DR</span></span><br><span class="line">    persistence_timeout 60                                  <span class="comment"># 保持连接的超时时间为60s</span></span><br><span class="line">    protocol TCP                                            <span class="comment"># 负载均衡转发协议为TCP</span></span><br><span class="line">    real_server 192.168.2.108 80 &#123;                          <span class="comment"># 真实服务器IP及端口</span></span><br><span class="line">        weight 100                                          <span class="comment"># 真实服务器权重为100</span></span><br><span class="line">        notify_down /etc/keepalived/scripts/stop.sh         <span class="comment"># 当真实服务器健康检测失败时执</span></span><br><span class="line">                                                                <span class="comment"># 行stop.sh脚本</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="string">&quot;/healthcheck&quot;</span>                         <span class="comment"># 指定要检查的URL的路径</span></span><br><span class="line">                digest bfaa324fdd71444e43eca3b7a1679a1a     <span class="comment"># 检测URL返回值的MD5计算值</span></span><br><span class="line">                status_code 200                             <span class="comment"># 健康检测返回状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 10                      <span class="comment"># 连接超时时间为10s</span></span><br><span class="line">            nb_get_retry 3                          <span class="comment"># 重试3次确认失败</span></span><br><span class="line">            delay_before_retry 3                    <span class="comment"># 失败重试的时间间隔为3s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.2.109 80 &#123;                  <span class="comment"># 真实服务器IP及端口</span></span><br><span class="line">        weight 100                                  <span class="comment"># 真实服务器权重为100</span></span><br><span class="line">        notify_down /etc/keepalived/scripts/stop.sh <span class="comment"># 当真实服务器健康检测失败时执</span></span><br><span class="line">                                                                <span class="comment"># 行stop.sh脚本</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="string">&quot;/healthcheck&quot;</span>                         <span class="comment"># 指定要检查的URL的路径</span></span><br><span class="line">                digest bfaa324fdd71444e43eca3b7a1679a1a     <span class="comment"># 检测URL返回值的MD5计算值</span></span><br><span class="line">                status_code 200                             <span class="comment"># 健康检测返回状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 10                              <span class="comment"># 连接超时时间为10s</span></span><br><span class="line">            nb_get_retry 3                          <span class="comment"># 重试3次确认失败</span></span><br><span class="line">            delay_before_retry 3                    <span class="comment"># 失败重试的时间间隔为3s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备份服务器上的 Keepalived 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">      monitor@nginxbar.org                          <span class="comment"># 发生故障时发送邮件告警通知</span></span><br><span class="line">                                                                <span class="comment"># 的邮箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from admin@nginxbar.org              <span class="comment"># 使用哪个邮箱发送</span></span><br><span class="line">    smtp_server mail.nginxbar.org                   <span class="comment"># 发件服务器</span></span><br><span class="line">    smtp_connect_timeout 30</span><br><span class="line">    router_id LVS_02                                <span class="comment"># 当前设备路由ID为LVS_02，此</span></span><br><span class="line">                                                                <span class="comment"># 处与主服务器配置不同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP                                    <span class="comment"># 初始路由状态为BACKUP，此处</span></span><br><span class="line">                                                                <span class="comment"># 与主服务器配置不同</span></span><br><span class="line">    interface eth0                                  <span class="comment"># VRRP绑定的本地网卡接口为eth0</span></span><br><span class="line">    virtual_router_id 51                            <span class="comment"># 虚拟路由器的VRID为51</span></span><br><span class="line">    priority 99                                     <span class="comment"># 当前设备的优先级是99，此处</span></span><br><span class="line">                                                                <span class="comment"># 与主服务器配置不同</span></span><br><span class="line">    advert_int 5                                    <span class="comment"># VRRP组播的间隔时间是5s</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS                                      <span class="comment"># 认证类型为PASS</span></span><br><span class="line">        auth_pass 2222                                      <span class="comment"># 认证密码为2222</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.21.155                              <span class="comment"># 虚拟服务器的VIP是192.168.21.155</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.21.155 80 &#123;                      <span class="comment"># 虚拟服务器IP及端口</span></span><br><span class="line">    delay_loop 6                                            <span class="comment"># 健康检测间隔时间为6s</span></span><br><span class="line">    lb_algo wrr                                             <span class="comment"># 负载均衡调度算法为加权轮询</span></span><br><span class="line">    lb_kind DR                                              <span class="comment"># 转发模式为DR</span></span><br><span class="line">    persistence_timeout 60                                  <span class="comment"># 保持连接的超时时间为60s</span></span><br><span class="line">    protocol TCP                                            <span class="comment"># 负载均衡转发协议为TCP</span></span><br><span class="line">    real_server 192.168.2.108 80 &#123;                          <span class="comment"># 真实服务器IP及端口</span></span><br><span class="line">        weight 100                                  <span class="comment"># 真实服务器权重为100</span></span><br><span class="line">        notify_down /etc/keepalived/scripts/stop.sh <span class="comment"># 当真实服务器健康检测失败时执</span></span><br><span class="line">                                                                <span class="comment"># 行stop.sh脚本</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="string">&quot;/healthcheck&quot;</span>                         <span class="comment"># 指定要检查的URL的路径</span></span><br><span class="line">                digest bfaa324fdd71444e43eca3b7a1679a1a     <span class="comment"># 检测URL返回值的MD5计算值</span></span><br><span class="line">                status_code 200                             <span class="comment"># 健康检测返回状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 10                              <span class="comment"># 连接超时时间为10s</span></span><br><span class="line">            nb_get_retry 3                                  <span class="comment"># 重试3次确认失败</span></span><br><span class="line">            delay_before_retry 3                            <span class="comment"># 失败重试的时间间隔为3s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.2.109 80 &#123;                          <span class="comment"># 真实服务器IP及端口</span></span><br><span class="line">        weight 100                                          <span class="comment"># 真实服务器权重为100</span></span><br><span class="line">        notify_down /etc/keepalived/scripts/stop.sh <span class="comment"># 当真实服务器健康检测失败时执</span></span><br><span class="line">                                                                <span class="comment"># 行stop.sh脚本</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="string">&quot;/healthcheck&quot;</span>                         <span class="comment"># 指定要检查的URL的路径</span></span><br><span class="line">                digest bfaa324fdd71444e43eca3b7a1679a1a     <span class="comment"># 检测URL返回值的MD5计算值</span></span><br><span class="line">                status_code 200                             <span class="comment"># 健康检测返回状态码</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 10                              <span class="comment"># 连接超时时间为10s</span></span><br><span class="line">            nb_get_retry 3                                  <span class="comment"># 重试3次确认失败</span></span><br><span class="line">            delay_before_retry 3                            <span class="comment"># 失败重试的时间间隔为3s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，高可用的 LVS 负载均衡就配置完成了。当主 LVS 服务器出现故障时，备份 LVS 服务器可以快速接管传输层网络数据的负载均衡工作，将数据包分发给后端的 Nginx 服务器集群。</p>
<hr>
<h3 id="集群配置管理规划"><a href="#集群配置管理规划" class="headerlink" title="集群配置管理规划"></a>集群配置管理规划</h3><p>Nginx 的配置是以文件形式存在的，配置指令会在启动时一次性加载并生效，采用这种方式除 upstream 的配置可动态变更（商业版本支持 API 变更，开源版本依赖第三方模块动态修改）外，其他配置的修改均需要重启或热加载 Nginx 进程才可生效。为实现便捷的 Nginx 配置变更管理，需要从以下几个方面进行规划。</p>
<h4 id="配置目录结构"><a href="#配置目录结构" class="headerlink" title="配置目录结构"></a>配置目录结构</h4><p>Nginx 默认所有配置文件均存放在其安装目录的 conf 目录下，为防止配置文件不方便阅读和管理，可以按照虚拟主机（具有独立主机名或网络端口）进行拆分，每个虚拟主机一个配置文件，并存放在统一的目录下。对功能固定、全局的配置指令以固定文件的形式存放在配置文件目录的根目录下。所有的配置文件都以 nginx.conf 为统一入口，并使用配置指令 include 按需引入。</p>
<p>Nginx 的目录结构规划样例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conf/</span><br><span class="line"> ├── conf.d</span><br><span class="line"> │  ├── mysql_apps.ream</span><br><span class="line"> │  ├── www.nginxbar.com.conf</span><br><span class="line"> │  └── www.nginxbar.org.conf</span><br><span class="line"> ├── fastcgi.conf</span><br><span class="line"> ├── fastcgi_params</span><br><span class="line"> ├── fscgi.conf</span><br><span class="line"> ├── gzip.conf</span><br><span class="line"> ├── mime.types</span><br><span class="line"> ├── nginx.conf</span><br><span class="line"> ├── proxy.conf</span><br><span class="line"> ├── scgi_params</span><br><span class="line"> ├── ssl</span><br><span class="line"> │  ├── www_nginxbar_org.csr</span><br><span class="line"> │  ├── www_nginxbar_org.key</span><br><span class="line"> │  └── www_nginxbar_org.pem</span><br><span class="line"> └── uwsgi_params</span><br></pre></td></tr></table></figure>

<p>目录说明如下:</p>
<ul>
<li>conf.d 为自建目录，是存放虚拟主机配置文件的目录。</li>
<li>mysql_apps.ream 是自定义应用 apps 的 MySQL 集群代理配置文件。</li>
<li><a href="http://www.nginxbar.com.conf/">www.nginxbar.com.conf</a> 是域名 <a href="http://www.nginxbar.com/">www.nginxbar.com</a> (<a href="http://www.nginxbar.com/">http://www.nginxbar.com</a>) 对应的虚拟主机配置文件。</li>
<li><a href="http://www.nginxbar.org.conf/">www.nginxbar.org.conf</a> 是域名 <a href="http://www.nginxbar.org/">www.nginxbar.org</a> (<a href="http://www.nginxbar.org/">http://www.nginxbar.org</a>) 对应的虚拟主机配置文件。</li>
<li>fscgi.conf 是自定义 FastCGI 代理配置文件。</li>
<li>gzip.conf 是自定义响应数据 gzip 压缩配置指令文件。</li>
<li>proxy.conf 是自定义 HTTP 代理配置指令文件。</li>
<li>ssl 是自建目录，用于存放虚拟主机的 SSL 证书文件。</li>
</ul>
<p>nginx.conf 配置样例如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择加载动态模块</span></span><br><span class="line">load_module <span class="string">&quot;modules/ngx_http_geoip_module.so&quot;</span>;</span><br><span class="line">load_module <span class="string">&quot;modules/ngx_http_image_filter_module.so&quot;</span>;</span><br><span class="line">load_module <span class="string">&quot;modules/ngx_http_xslt_filter_module.so&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作进程及事件配置</span></span><br><span class="line">worker_processes auto;                  <span class="comment"># 启动与CPU核数一致的工作进程</span></span><br><span class="line">worker_priority -5;                     <span class="comment"># 工作进程在linux系统中的优先级为-5</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  65535;              <span class="comment"># 每个工作进程的最大连接数</span></span><br><span class="line">    multi_accept on;                        <span class="comment"># 每个工作进程每次都可以接收多个连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP/UDP代理配置</span></span><br><span class="line">stream &#123;</span><br><span class="line">    <span class="comment"># 配置TCP/UDP代理的日志格式模板，模板名为tcp</span></span><br><span class="line">    log_format  tcp  <span class="string">&#x27;$remote_addr - $connection - [$time_local] $server_addr:$server_port - $protocol&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;- $status - $upstream_addr - $bytes_received - $bytes_sent - $session_time &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;- $proxy_protocol_addr:$proxy_protocol_port &#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置TCP/UDP代理的错误日志输出位置，错误级别为error</span></span><br><span class="line">    error_log logs/tcp_error.log error;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 引入conf.d目录下所有后缀名为ream的配置文件</span></span><br><span class="line">    include conf.d/*.ream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP配置</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;               <span class="comment"># 引入MIME类型映射表文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置HTTP的错误日志输出位置，错误级别为error</span></span><br><span class="line">    error_log logs/error.log error;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置HTTP的日志格式，模板名为main</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $connection - $remote_user [$time_local] &quot;$request&quot; - $upstream_addr &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status  - $body_bytes_sent - $request_time - &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; - &quot;$http_x_forwarded_for&quot; - &#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置全局访问日志输出位置，并以模板main的日志格式输出</span></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    charset  utf-8;                         <span class="comment"># 字符编码为utf-8</span></span><br><span class="line">    variables_hash_max_size 2048;           <span class="comment"># 变量哈希表最大值为2048B</span></span><br><span class="line">    variables_hash_bucket_size 128;         <span class="comment"># 变量哈希桶最大值为128B</span></span><br><span class="line">    server_names_hash_bucket_size 256;      <span class="comment"># 服务主机名哈希桶大小为256B</span></span><br><span class="line">    client_header_buffer_size 32k;          <span class="comment"># 请求头缓冲区大小为32KB</span></span><br><span class="line">    large_client_header_buffers 4 128k;     <span class="comment"># 最大缓存为4个128KB</span></span><br><span class="line">    client_max_body_size 20m;               <span class="comment"># 允许客户端请求的最大单个文件字节数为20MB</span></span><br><span class="line">    sendfile on;                            <span class="comment"># 开启零复制机制</span></span><br><span class="line">    tcp_nopush on;                          <span class="comment"># 启用在零复制时数据包最小传输的限制机制</span></span><br><span class="line">    tcp_nodelay on;                         <span class="comment"># 当处于保持连接状态时以最快的方式发送数据包</span></span><br><span class="line">    keepalive_timeout  60;                  <span class="comment"># 保持连接超时时间为60s</span></span><br><span class="line">    client_header_timeout 10;               <span class="comment"># 读取客户请求头的超时时间是10s</span></span><br><span class="line">    client_body_timeout 10;                 <span class="comment"># 请求体接收超时时间为10s</span></span><br><span class="line">    server_tokens on;                       <span class="comment"># 不显示Nginx版本信息</span></span><br><span class="line">    include gzip.conf;                      <span class="comment"># HTTP gzip的配置文件</span></span><br><span class="line">    include proxy.conf;                     <span class="comment"># HTTP代理配置</span></span><br><span class="line">    include conf.d/*.conf;                  <span class="comment"># 引入HTTP虚拟主机配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx.conf 中编辑在全局区域的配置指令均可按照 Nginx 配置指令规范在 server、location 指令域中被同名的配置指令覆盖。</p>
<h4 id="配置归档"><a href="#配置归档" class="headerlink" title="配置归档"></a>配置归档</h4><p>Nginx 作为负载均衡应用时，是业务应用的入口，Nginx 服务器的可用性决定了其所负责的所有被代理业务的可用性。所以 Nginx 进行配置变更时要及时做好归档和版本控制，因为 Nginx 配置是以文件方式存在的，所以可以将每次修改的文件以 Git 标签的方式在 Git 仓库中进行存档和版本控制。</p>
<h4 id="配置变更"><a href="#配置变更" class="headerlink" title="配置变更"></a>配置变更</h4><p>可以使用对应的配置模板进行 Nginx 配置内容的修改、配置部分的标准化及通用性约定，以便进行自动化操作。开源软件 Ansible 提供了自定义模板的功能，使用户可以按照预期设计更加严谨、规范地配置变更。Ansible 支持批量操作，可以快速完成多台 Nginx 服务器配置文件的同步和加载。</p>
<h4 id="配置发布"><a href="#配置发布" class="headerlink" title="配置发布"></a>配置发布</h4><p>Ansible 虽然提供了命令行的操作能力，但是用户权限、操作日志及快速回滚等操作仍不够便捷。Jenkins 是一款 Web 化的持续集成发布工具，被广泛应用于业务应用的发布，拥有超过 1000 个插件，用户无须额外开发就可快速完成代码从代码仓库到运行部署的整个流程，同时还支持用户权限、操作日志及快速回滚等操作。</p>
<p>根据上述 4 个方面的规划，通过 Jenkins 与 GitLab 及 Ansible 的配合使用，无须复杂编程就可以快速搭建一套 Web 化的 Nginx 配置管理系统。应用架构如下图所示。</p>
<p><img src="https://www.w3ccoo.com/wp-content/uploads/nginx/8-200Z91F25X32.gif" alt="应用架构图"></p>
<p>关于上图，有以下几点需要说明:</p>
<ul>
<li>Jenkins 通过 GitLab 获取 Git 仓库中的 Nginx 文件。</li>
<li>Ansible 根据 Jenkins Web 界面输入的参数与对应配置模板生成配置文件，更新本地的 Nginx 配置文件。</li>
<li>Ansible 将更新后的配置文件同步到 Nginx 集群的所有 Nginx 服务器，并对 Nginx 进程执行 reload 操作，以加载更新后的配置。</li>
<li>Jenkins 将更新后的 Nginx 配置文件以 Git 标签的方式进行归档。</li>
<li>用户可以通过 Jenkins 获取对应 Git 仓库的所有 Git 标签，并根据需求选择对应的 Git 标签代码执行回滚操作。</li>
</ul>
<hr>
<h3 id="GitLab（配置归档工具）配置"><a href="#GitLab（配置归档工具）配置" class="headerlink" title="GitLab（配置归档工具）配置"></a><a href="https://www.w3ccoo.com/nginx/nginx_cluster_gitlab.html">GitLab（配置归档工具）配置</a></h3><p>GitLab 是使用 Ruby 语言编写的 Git 仓库管理工具，以 Git 作为代码管理工具，并提供了 Web 管理、WIKI 及 Issue 等功能。GitLab 是按照 MIT 许可证分发的开源软件，已被很多知名公司使用，目前由 GitLabInc. 开发维护。</p>
<p>GitLab 可以搭建在私有服务器上，被授权的用户可以创建自己的代码仓库，并可授权给多人协作进行维护。GitLab 拥有与 GitHub 类似的功能，可以通过 Web 浏览器浏览代码、管理缺陷和注释。通过 GitLab 管理 Nginx 配置文件可以从 Web 浏览器中非常方便地浏览到提交过的历史变更，也可以利用 Git 相关命令实现 Nginx 配置的快速回滚操作。</p>
<p>GitLab 同样支持以 Docker 方式部署，官方在 Docker Hub 中也提供了可直接使用的镜像，通过编写相应的 docker-compose 脚本，可以快速搭建 GitLab 服务器。</p>
<hr>
<h3 id="配置修改工具Ansible"><a href="#配置修改工具Ansible" class="headerlink" title="配置修改工具Ansible"></a><a href="https://www.w3ccoo.com/nginx/nginx_cluster_ansible.html">配置修改工具Ansible</a></h3><p>Ansible 是一款自动化的运维工具，是基于 Python 开发的。Ansible 提供了一种自动化执行框架，其可以按照用户设计的剧本自动化执行相关操作。Ansible 是基于模块工作的，其可以实现使用各种模块，并按照设计的剧本，批量对多个目标执行相同的操作。Ansible 集合了众多运维工具的优点，配置更加简单方便。</p>
<hr>
<h3 id="Jenkins安装与配置简述"><a href="#Jenkins安装与配置简述" class="headerlink" title="Jenkins安装与配置简述"></a><a href="https://www.w3ccoo.com/nginx/nginx_cluster_jenkins.html">Jenkins安装与配置简述</a></h3><p>Jenkins 是基于 Java 开发的一个开源的持续集成项目，其提供了一个可扩展的可对代码持续集成、发布（代码编译、打包、部署）及交付的 Web 化操作平台。Jenkins 拥有超过 1000 个插件，使其支持包括 SVN、Git 等多种版本的管理工具（SCM）的代码管理，也可以快速实现 Java、Node.js、.Net 等语言项目的编译构建，并支持包括 Docker 在内的多种形式的部署交付。通过 Jenkins 的 Web 化管理界面，依赖各种强大的插件功能，可以使 Nginx 的配置变更管理变得更加便捷和安全。</p>
<hr>
<h3 id="集群配置管理实例"><a href="#集群配置管理实例" class="headerlink" title="集群配置管理实例"></a><a href="https://www.w3ccoo.com/nginx/nginx_cluster_example.html">集群配置管理实例</a></h3>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>计算机操作系统</title>
    <url>/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li><p>计算机系统上配置操作系统，主要目标是：方便性、有效性、可扩充性、开放性。</p>
</li>
<li><p>操作系统作用：①用户与硬件交互；②资源管理者；③资源的抽象。</p>
</li>
<li><p>发展过程：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特性</th>
<th>优点</th>
<th>缺点</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>未配置操作系统的计算机系统</td>
<td></td>
<td></td>
<td></td>
<td>人工（纸带）、脱机IO（磁带）</td>
</tr>
<tr>
<td>单道批处理系统</td>
<td>单道性、顺序性、自动性</td>
<td></td>
<td>不能充分利用资源</td>
<td></td>
</tr>
<tr>
<td>多道批处理系统</td>
<td>多道性、无序性、调度性</td>
<td>能提高整个系统的性能，吞吐量大，利用率高</td>
<td>资源竞争问题，不能提高任何单个进程的性能。</td>
<td></td>
</tr>
<tr>
<td>分时系统</td>
<td>单主机、多用户、（多路、独立、及时、交互）</td>
<td>可靠、交互性强、响应快</td>
<td></td>
<td>多路卡64位，缓冲区、内存、轮转运行（时间片）</td>
</tr>
<tr>
<td>实时系统</td>
<td>工业化、信息查询、多媒体、嵌入式</td>
<td>高可靠性，交互性仅对特定服务</td>
<td></td>
<td>①周期、非周期</br>②硬实时，软实时</br>③截止时间（最后期限）</td>
</tr>
<tr>
<td>微机系统</td>
<td></td>
<td></td>
<td></td>
<td>Windows</td>
</tr>
</tbody></table>
<span id="more"></span></li>
</ol>
<h3 id="二、特性（多道、分时、实时）"><a href="#二、特性（多道、分时、实时）" class="headerlink" title="二、特性（多道、分时、实时）"></a>二、特性（多道、分时、实时）</h3><ol>
<li><p>最基本特性：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>并发</td>
<td>并行与并发、进程</td>
</tr>
<tr>
<td>共享</td>
<td>资源共享或复用、互斥（只允许一个）（临界资源）（栈、变量）</td>
</tr>
<tr>
<td>虚拟</td>
<td>时分复用、空分复用</td>
</tr>
<tr>
<td>异步</td>
<td>进程的不可预知性</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="三、功能"><a href="#三、功能" class="headerlink" title="三、功能"></a>三、功能</h3><table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>处理机</td>
<td>进程控制、进程同步、进程通信、调度</td>
</tr>
<tr>
<td>存储器</td>
<td>内存分配、内存保护、地址映射、内存扩充</td>
</tr>
<tr>
<td>设备</td>
<td>缓存管理、设备分配、设备处理</td>
</tr>
<tr>
<td>文件</td>
<td>文件存储空间、目录管理、文件的读&#x2F;写管理和保护</td>
</tr>
<tr>
<td>操作系统与用户之间的接口</td>
<td>用户接口、程序接口</td>
</tr>
<tr>
<td>现代操作系统的新功能</td>
<td>系统安全、网络的功能和服务、支持多媒体</td>
</tr>
</tbody></table>
<h3 id="四、结构"><a href="#四、结构" class="headerlink" title="四、结构"></a>四、结构</h3><table>
<thead>
<tr>
<th>类型</th>
<th>包含</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>传统结构OS</td>
<td>无结构OS、模块化OS（高内聚低耦合）、分层式OS</td>
<td></td>
</tr>
<tr>
<td>现代结构OS</td>
<td>微内核</td>
<td></td>
</tr>
<tr>
<td>C&#x2F;S</td>
<td>客户端&#x2F;服务端</td>
<td></td>
</tr>
</tbody></table>
<h3 id="五、进程"><a href="#五、进程" class="headerlink" title="五、进程"></a>五、进程</h3><ol>
<li><p>概念：前趋图（有向无循环）记为：DAG（类似于拓扑图）,</p>
<p>前趋图中不允许有玄幻，所以是<strong>单向的</strong>。</p>
<p>pi—weight权—&gt;pj；pi是pj的直接前趋，pj是pi的直接后继</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/DAG.png"></p>
</li>
<li><p>程序执行：</p>
<p>①顺序：</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B1.png"></p>
<p>特性：顺序性（严格一个接一个）、封闭性（独占资源）、可再现性（条件不改变，结果总相同）</p>
<p>②并发：（不存在前趋关系）</p>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B2.png"></p>
<p>特性：间断性、失去封闭性、不可再现性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>进程定义：</p>
<p>①进程控制块PCB:记录了OS所需要的，用于描述进程的当前情况以及管理进程运行的全部信息。</p>
<p>②程序段</p>
<p>③相关数据段</p>
<p>特征：动态性、并发性、独立性、异步性</p>
</li>
<li><p>进程形态：</p>
<p>就绪Ready、执行Running、阻塞Block、创建、终止、挂起Suspend、激活Active</p>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.png"></p>
<ol start="5">
<li><p>进程控制块PCB：</p>
<p>包含信息：进程标识符、处理机状态、进程调度信息、进程控制信息</p>
<p>组织方式：线性方式（线性表）、链接方式（队列）、索引方式（索引表）</p>
</li>
<li><p>进程控制</p>
<p>（1）OS内核：</p>
<p>&emsp;&emsp;&emsp;&emsp;①支撑功能：中断处理、时钟管理、原语操作（完成一定功能的若干条指令）</p>
<p>&emsp;&emsp;&emsp;&emsp;②资源管理功能：进程管理、存储器管理、设备管理。</p>
<p>（2）进程的层次结构：</p>
<p>&emsp;&emsp;&emsp;&emsp;UNIX存在层次结构，Windows不存在层次结构，所有进程都有相同的地位。</p>
<p>&emsp;&emsp;&emsp;&emsp;进程图：树型结构。</p>
<p>（3）引起进程创建的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;用户登录、作业调度、提供服务、应用请求</p>
<p>（4）进程的创建：</p>
<p>&emsp;&emsp;&emsp;&emsp;①申请空白PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;②分配资源</p>
<p>&emsp;&emsp;&emsp;&emsp;③初始化PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;④就绪队列</p>
<p>（5）引起进程终止的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;正常结束、异常结束、外界干预</p>
<p>（6）进程的终止：</p>
<p>&emsp;&emsp;&emsp;&emsp;①根据终止标识符检查PCB</p>
<p>&emsp;&emsp;&emsp;&emsp;②处于执行状态的进程——&gt;终止</p>
<p>&emsp;&emsp;&emsp;&emsp;③子孙进程——&gt;终止</p>
<p>&emsp;&emsp;&emsp;&emsp;④归还资源</p>
<p>&emsp;&emsp;&emsp;&emsp;⑤将终止PCB移除所在队列或链表</p>
<p>（7）引起进程阻塞和唤醒的事件：</p>
<p>&emsp;&emsp;&emsp;&emsp;请求共享资源失败、等待操作完成、新数据尚未到达、等待新任务的到达。</p>
<p>（8）进程同步：</p>
<p>&emsp;&emsp;&emsp;&emsp;原则：空闲让进、忙则等待、有限等待、让权等待。</p>
<p>&emsp;&emsp;&emsp;临界资源：打印机、磁带。</p>
<p>&emsp;&emsp;&emsp;临界区：临界资源所在的区域</p>
</li>
<li><p><font color="red">信号量机制：PV操作</font></p>
<p>wait()；申请资源</p>
<p>signal()；释放资源</p>
<p>典型问题：生产者-消费者问题</p>
</li>
<li><p>进程和管程：</p>
<table>
<thead>
<tr>
<th></th>
<th>类型</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>进程</td>
<td>私有数据结构PCB</td>
<td>顺序执行、并发、主动</td>
</tr>
<tr>
<td>管程</td>
<td>公共数据结构</td>
<td>同步、初始化、互斥、被动</td>
</tr>
</tbody></table>
</li>
<li><p>进程通信：</p>
<p>类型：共享存储器系统、管道pipe通信系统、消息传递系统、客户机-服务器系统</p>
<p>实现方式：直接消息传递系统、信箱通信</p>
</li>
<li><p>线程：提高程序并发执行的程度。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>进程</td>
<td>可拥有资源的独立单位，可独立调度和分派的基本单位（传统OS）</td>
<td>PCB、拥有系统资源、开销大</td>
</tr>
<tr>
<td>线程</td>
<td>可独立调度和分派的基本单位（引入线程的OS）</td>
<td>TCB、不拥有系统资源，仅拥有控制线程运行的TCB、共享进程资源、开销小</td>
</tr>
</tbody></table>
</li>
<li><p>线程的实现：</p>
<p>（1）分类：</p>
<p>&emsp;&emsp;&emsp;内核支持线程KST：阻塞在线程一级；</p>
<p>&emsp;&emsp;&emsp;用户级线程ULT：阻塞在用户进程</p>
<p>（2）实现：内核支持、用户级</p>
</li>
</ol>
<h3 id="六、处理及调度与死锁"><a href="#六、处理及调度与死锁" class="headerlink" title="六、处理及调度与死锁"></a>六、处理及调度与死锁</h3><ol>
<li><p>处理机调度的层次：</p>
<table>
<thead>
<tr>
<th>层次</th>
<th>调度对象</th>
<th>目的</th>
<th>应用于</th>
<th>调度算法（看下）</th>
</tr>
</thead>
<tbody><tr>
<td>高级调度（长程调度、作业调度）</td>
<td>作业</td>
<td>外存调入内存</td>
<td>多道批处理系统</td>
<td></td>
</tr>
<tr>
<td>低级调度（短程调度、进程调度）</td>
<td>进程</td>
<td>决定哪个进程获得处理机</td>
<td>多道批、分时、实时系统</td>
<td></td>
</tr>
<tr>
<td>中级调度（内存调度）</td>
<td>内外存交互</td>
<td>将暂时不能运行的进程从内存调至外存</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>处理机调度算法目标：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>目标</th>
</tr>
</thead>
<tbody><tr>
<td>处理机调度</td>
<td>资源利用率、公平、平衡、策略强制执行</td>
</tr>
<tr>
<td>批处理系统</td>
<td>平均周转时间短、系统吞吐量高、处理机利用率高</td>
</tr>
<tr>
<td>分时系统</td>
<td>响应时间快、均衡</td>
</tr>
<tr>
<td>实时系统</td>
<td>截止时间的保证、可预测</td>
</tr>
</tbody></table>
</li>
<li><p><strong>作业调度算法：</strong></p>
<p>（1）作业、作业步、作业控制块JCB</p>
<p>（2）状态：收容阶段（后备状态）、运行阶段（运行状态）、完成阶段（完成状态）</p>
<p>（3）算法：</p>
<p>&emsp;&emsp;①先来先服务FCFS</p>
<p>&emsp;&emsp;②短作业优先SJF</p>
<p>&emsp;&emsp;③优先级调度PSA</p>
<p>&emsp;&emsp;④高响应比优先调度HRRN：</p>
<p>&emsp;&emsp;&emsp;&emsp;优先权&#x3D;（等待时间+要求服务时间）&#x2F;要求服务时间&#x3D;1+（等待时间&#x2F;要求服务时间）</p>
<p>完成时刻&#x3D;开始时刻+运行时间</p>
<p>周转时间&#x3D;完成时刻-进入时刻</p>
<p>带权周转时间&#x3D;周转时间&#x2F;运行时间</p>
<p>平均等待时间&#x3D;Σ（周转时间-运行时间）÷ n</p>
<p>平均带权周转时间&#x3D;带权周转时间&#x2F;作业个数</p>
</li>
<li><p><strong>进程调度算法：</strong></p>
<p>调度方式：</p>
<p>&emsp;&emsp;非抢占方式：</p>
<p>&emsp;&emsp;抢占方式：优先权原则、短进程优先原则、时间片原则</p>
<p>算法：</p>
<p>（1）轮转调度算法RR（round robin）</p>
<p>（2）优先级调度算法：分为：非抢占式和抢占式。</p>
<p>&emsp;&emsp;优先级类型：静态、动态（每次调度都要计算响应比增加系统开销）</p>
<p>（3）多队列调度算法</p>
<p>（4）多级反馈队列调度算法（multileved feedback queue）</p>
<p>（5）基于公平原则的调度算法</p>
</li>
<li><p><strong>实时调度算法：</strong></p>
<p>调度方式：</p>
<p>&emsp;&emsp;非抢占方式：轮转、优先级</p>
<p>&emsp;&emsp;抢占方式：时钟中断、立即抢占的优先级</p>
<p>算法：</p>
<p>（1）最早截止时间优先EDF（Earliest Deadline First）:分为抢占式和非抢占式</p>
<p>（2）最低松弛度优先LLF（Least Laxity First）：松弛度越高任务越紧急</p>
<p>&emsp;&emsp;松弛度&#x3D;必须完成时间-其本身的运行时间-当前时间</p>
<p>（3）优先级倒置（priority inversion problem）</p>
<p>参考： <a href="https://blog.csdn.net/m0_48241022/article/details/142188201">链接</a></p>
</li>
<li><p>死锁：</p>
<p>（1）类型：</p>
<p>&emsp;&emsp;①竞争不可抢占资源</p>
<p>&emsp;&emsp;②竞争可消耗资源</p>
<p>&emsp;&emsp;③进程推进顺序不当</p>
<p>（2）定义：</p>
<p>&emsp;&emsp;进程A一直等待进程B所占有的资源。</p>
<p>（3）发生必要条件：</p>
<p>&emsp;&emsp;①互斥</p>
<p>&emsp;&emsp;②请求和保持</p>
<p>&emsp;&emsp;③不可抢占</p>
<p>&emsp;&emsp;④循环等待</p>
<p>（4）处理方法：</p>
<table>
<thead>
<tr>
<th>方法类型</th>
<th>是否允许死锁</th>
<th>破坏条件</th>
</tr>
</thead>
<tbody><tr>
<td>预防死锁</td>
<td>不允许</td>
<td>（1）两种协议：<br>①一次性申请全部资源<br>②仅获取运行初期资源<br>（2）破坏不可抢占条件<br>破坏循环等待条件</td>
</tr>
<tr>
<td>避免死锁</td>
<td>不允许</td>
<td>安全态&#x3D;可避免发生死锁；<br>不安全态，可能进入死锁<br>安全态-&gt;不安全态<br>银行家算法、安全性算法</td>
</tr>
<tr>
<td>检测死锁</td>
<td>允许</td>
<td></td>
</tr>
<tr>
<td>解除死锁</td>
<td>允许</td>
<td></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;①<strong>银行家算法：</strong>（确定Request过程）</p>
<p>&emsp;&emsp;&emsp;系统中有五个进程{P0,P1,P2,P3,P4}和三类资源{A,B,C}，各种资源的数量分别为10，5，7，在<strong>T0</strong>时刻的资源分配情况为：</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Max（总共需要资源）</th>
<th>Allocation（已匹配）</th>
<th>Need（ 还需要）</th>
<th>Available（现在可用）</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
<td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td>
</tr>
<tr>
<td>P0</td>
<td>&emsp;7&emsp;&emsp;5&emsp;&emsp;3</td>
<td>&emsp;0&emsp;&emsp;1&emsp;&emsp;0</td>
<td>&emsp;7&emsp;&emsp;4&emsp;&emsp;3</td>
<td>&emsp;3&emsp;&emsp;3&emsp;&emsp;2</td>
</tr>
<tr>
<td>P1</td>
<td>&emsp;3&emsp;&emsp;2&emsp;&emsp;2</td>
<td>&emsp;2&emsp;&emsp;0&emsp;&emsp;0</td>
<td>&emsp;1&emsp;&emsp;2&emsp;&emsp;2</td>
<td></td>
</tr>
<tr>
<td>P2</td>
<td>&emsp;9&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;3&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;6&emsp;&emsp;0&emsp;&emsp;0</td>
<td></td>
</tr>
<tr>
<td>P3</td>
<td>&emsp;2&emsp;&emsp;2&emsp;&emsp;2</td>
<td>&emsp;2&emsp;&emsp;1&emsp;&emsp;1</td>
<td>&emsp;0&emsp;&emsp;1&emsp;&emsp;1</td>
<td></td>
</tr>
<tr>
<td>P4</td>
<td>&emsp;4&emsp;&emsp;3&emsp;&emsp;3</td>
<td>&emsp;0&emsp;&emsp;0&emsp;&emsp;2</td>
<td>&emsp;4&emsp;&emsp;3&emsp;&emsp;1</td>
<td></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;②<strong>安全性算法：</strong>（确定安全序列）</p>
<p>&emsp;&emsp;（起始）Work&#x3D;Available</p>
<p>&emsp;&emsp;（后续）Work&#x3D;Work+Allocation</p>
<p>&emsp;&emsp;<strong>（安全性判定）Need≤Work（这是一个全程操作，每进行一次请求(Request)都要进行安全检查）</strong></p>
<p>&emsp;借助于该安全性算法，可以<strong>确定安全序列</strong>，如下：</p>
<p>&emsp;推断<strong>T0</strong>时刻的安全序列：</p>
<p>&emsp;此时Available&#x3D;3 3 2，<strong>Work1</strong>&#x3D;3 3 2</p>
<p>&emsp;P1的Need&#x3D;1 2 2&lt;<strong>Work1</strong>&#x3D;3 3 2安全，释放P1的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work2</strong>&#x3D;Work1+P1的Allocation&#x3D;3 3 2+2 0 0&#x3D;5 3 2</font></p>
<p>&emsp;P2的Need&#x3D;6 0 0&gt;<strong>Work2</strong>&#x3D;5 3 2不安全，舍去；</p>
<p>&emsp;P3的Need&#x3D;0 1 1&lt;<strong>Work2</strong>&#x3D;5 3 2安全，释放P3的Allocation资源，<br>&emsp;&emsp;&emsp;<font color="red"><strong>Work3</strong>&#x3D;Work2+P3的Allocation&#x3D;5 3 2+2 1 1&#x3D;7 4 3</font></p>
<p>&emsp;P4的Need&#x3D;4 3 1&lt;<strong>Work3</strong>&#x3D;7 4 3安全，释放P4的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work4</strong>&#x3D;Work3+P4的Allocation&#x3D;7 4 3+0 0 2&#x3D;7 4 5</font></p>
<p>&emsp;P2的Need&#x3D;6 0 0&lt;<strong>Work4</strong>&#x3D;7 4 5安全，释放P2的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work5</strong>&#x3D;Work4+P2的Allocation&#x3D;7 4 5+3 0 2&#x3D;10 4 7</font></p>
<p>&emsp;P0的Need&#x3D;7 4 3&lt;<strong>Work5</strong>&#x3D;10 4 7安全，释放P0的Allocation资源，</p>
<p>&emsp;&emsp;&emsp;<font color="red"><strong>Work6</strong>&#x3D;Work5+P0的Allocation&#x3D;10 4 7+0 1 0&#x3D;10 5 7</font></p>
<p>&emsp;&emsp;&emsp;到此资源全部释放。</p>
<p>&emsp;得到安全序列为：{P1,P3,P4,P2,P0}。</p>
<p>&emsp;如果不存在安全序列，则该系统不安全。</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（工作向量）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><font color="red">3     3     2</font></td>
<td>1     2     2</td>
<td>2     0     0</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="orange">7     4     5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="purple">10     4     7</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="purple">10     4     7</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;③银行家算法续：</p>
<p>&emsp;&emsp;对Pi发出Request请求后，启用Request去比较对Pi得分Need[i]和Available[i]，</p>
<p>&emsp;&emsp;&emsp;&emsp;如果Request&lt;Need[i]，则继续比较Request&lt;Available[i]；否则报错。</p>
<p>&emsp;&emsp;&emsp;&emsp;当Request&lt;Available[i]时，Available[i]&#x3D;Available[i]-Request；</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Allocation[i]&#x3D;Allocation[i]+Request；</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Need[i]&#x3D;Need[i]-Request；</p>
<p>&emsp;&emsp;再次确认安全序列；</p>
<p>&emsp;&emsp;进行下一轮Request。</p>
<p>&emsp;&emsp;例1：当前安全序列为{P1,P3,P4,P2,P0}：P1发出请求Request(1，0，2)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Need[1]&#x3D;1，2，2</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Available(3，3，2)</p>
<p>&emsp;&emsp;&emsp;&emsp;<strong>Available[1]</strong>&#x3D;Available[1]-Request(1，0，2)&#x3D;3 3 2 - 1 0 2 &#x3D; <font color="red"><strong>2，3，0</strong>；</font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[1]&#x3D;Allocation[1]+Request(1，0，2)&#x3D;2 0 0 + 1 0 2 &#x3D; 3，0，2；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[1]&#x3D;Need[1]-Request(1，0，2)&#x3D;1 2 2 - 1 0 2 &#x3D; 0，2，0；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 3 0</font></strong></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
</tbody></table>
<p>根据目前的安全序列{P1,P3,P4,P2,P0}进行安全检查：</p>
<p>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）初始</th>
<th>Allocation（已匹配）初始</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 3 0</font></strong></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="orange">7     4     5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="purple">10 4 7</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="purple">10 4 7</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>得到安全序列1{P1,P3,P4,P2,P0}，或者：</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）初始</th>
<th>Allocation（已匹配）初始</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><font color="red">2 3 0</font></td>
<td>0     2     0</td>
<td>3     0     2</td>
<td><font color="blue">5     3     2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5     3     2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7     4     3</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="green">7     4     3</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td><font color="orange">7     4     5</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="orange">7     4     5</font></td>
<td>7     4     3</td>
<td>0     1     0</td>
<td><font color="purple">7 5 5</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="purple">7 5 5</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="red">10     5     7</font></td>
</tr>
</tbody></table>
<p>得到安全序列2{P1,P3,P4,P0,P2}。</p>
<p>&emsp;&emsp;例2：继P1发出Request(1，0，2)请求后，P0发出请求Request(0，2，0)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Need[0]&#x3D;7，4，3</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Available(<strong>2，3，0</strong>)</p>
<p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，2，0)&#x3D;2 3 0 - 0 2 0 &#x3D; <font color="red"><strong>2，1，0；</strong></font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，2，0)&#x3D;0 1 0 + 0 2 0&#x3D; 0，3，0；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，2，0)&#x3D;7 4 3 - 0 2 0 &#x3D; 7，2，3；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P0</td>
<td><strong><font color="red">2 1 0</font></strong></td>
<td>7     2     3</td>
<td>0     3     0</td>
<td><font color="blue">2 4 0</font></td>
</tr>
<tr>
<td>P1</td>
<td></td>
<td>1 2 2-&gt;0 2 0<br>这里是因为例1的P1请求(Request)引得变化</td>
<td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td>
<td></td>
</tr>
<tr>
<td>P2</td>
<td></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td></td>
</tr>
<tr>
<td>P3</td>
<td></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td></td>
</tr>
<tr>
<td>P4</td>
<td></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td></td>
</tr>
</tbody></table>
<p>此时的Work1+available&#x3D;210已经不能满足剩下的进程Need，所以此时系统进入不安全状态，此时系统不分配资源。</p>
<p>&emsp;&emsp;例3：当P0发出请求Request(0，1，0)，采用银行家算法进行检查：</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Need[0]&#x3D;7，4，3</p>
<p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Available(<strong>2，3，0</strong>)</p>
<p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，1，0)&#x3D;2 3 0 - 0 1 0 &#x3D;<font color="red"> <strong>2，2，0</strong>；</font></p>
<p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，1，0)&#x3D;0 1 0 + 0 1 0&#x3D; 0，2，0；</p>
<p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，1，0)&#x3D;7 4 3 - 0 1 0 &#x3D; 7，3，3；</p>
<table>
<thead>
<tr>
<th>进程\资源情况</th>
<th>Work（Work1&#x3D;Available）</th>
<th>Need（ 还需要）</th>
<th>Allocation（已匹配）</th>
<th>Work+Allocation</th>
</tr>
</thead>
<tbody><tr>
<td>P1</td>
<td><strong><font color="red">2 2 0</font></strong></td>
<td>1 2 2-&gt;<strong>0 2 0</strong><br/>这里是因为例1的P1请求(Request)引得变化</td>
<td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td>
<td><font color="blue">5 2 2</font></td>
</tr>
<tr>
<td>P3</td>
<td><font color="blue">5 2 2</font></td>
<td>0     1     1</td>
<td>2     1     1</td>
<td><font color="green">7 3 3</font></td>
</tr>
<tr>
<td>P2</td>
<td><font color="green">7 3 3</font></td>
<td>6     0     0</td>
<td>3     0     2</td>
<td><font color="orange">10 3 5</font></td>
</tr>
<tr>
<td>P0</td>
<td><font color="orange">10 3 5</font></td>
<td>7     3     3</td>
<td>0     2     0</td>
<td><font color="purple">10 5 5</font></td>
</tr>
<tr>
<td>P4</td>
<td><font color="purple">10 5 5</font></td>
<td>4     3     1</td>
<td>0     0     2</td>
<td>10 5 7</td>
</tr>
</tbody></table>
<p>得到安全序列：{P1,P3,P2,P0,P4}</p>
<p>（5）死锁检测：</p>
<p>&emsp;&emsp;死锁定理：进程处于死锁状态的充分条件是当且仅当该进程的资源分布图是不可简化的。</p>
<p>&emsp;&emsp;资源分布图的简化：P1释放资源后，便可使P2获得资源而继续运行，在进行一些的简化后，若能消除途中所有的边，使所有的的进程节点都成为孤立结点，则称该图是可完全简化的。</p>
<p>（6）死锁解除：</p>
<p>&emsp;&emsp;抢占资源、终止或撤销进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格七、存储器管理</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="七、存储器管理"><a href="#七、存储器管理" class="headerlink" title="七、存储器管理"></a>七、存储器管理</h3><ol>
<li><p>程序的接入：</p>
<table>
<thead>
<tr>
<th>内存接入情况</th>
<th>适用于</th>
</tr>
</thead>
<tbody><tr>
<td>绝对接入方式</td>
<td>单道程序环境</td>
</tr>
<tr>
<td>可重定位装入方式</td>
<td>单道程序环境</td>
</tr>
<tr>
<td>动态运行时的装入方式</td>
<td>多道程序环境</td>
</tr>
</tbody></table>
</li>
<li><p>程序的链接：</p>
<p>静态链接方式、装入时动态链接、运行时动态链接。</p>
</li>
<li><p>连续分配存储器管理方式：</p>
<p>（1）单一连续分配：程序独占空间。</p>
<p>（2）固定分区分配：每个分区装入一道作业。</p>
<p>&emsp;&emsp;&emsp;划分分区方法：①分区大小相等；②分区大小不等。</p>
<p>&emsp;&emsp;&emsp;内存分配：分区表（分区的起始地址、大小、状态）</p>
<p>&emsp;&emsp;&emsp;&emsp;外碎片：在分区外未使用。内碎片：在分区内未使用。</p>
<p>（3）动态分区分配：</p>
<p>&emsp;&emsp;&emsp;①基于顺序搜索的动态分区分配算法：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;首次适应算法First fit(FF)、循环首次适应算法Next fit(NF)、最佳适应算法Best fit(BF)、</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;最坏适应算法Worst fit(WF)</p>
<p>&emsp;&emsp;&emsp;②基于索引搜索的动态分区分配算法：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;快速适应算法Quick fit、伙伴系统Buddy system、哈希算法</p>
<p>（4）动态可重定位分区分配：紧凑、动态重定位</p>
</li>
<li><p>对换：将内存中暂时无法运行或不用的程序和数据换出到外存上，以便腾出足够的内存空间，再把需要运行的换入内存。</p>
<p>类型：整体对换、页面（分段）对换</p>
</li>
<li><p>分页存储管理方式：</p>
<p>页块、物理块、地址结构（页号|位偏移）、页表、多级页表、反置页表</p>
</li>
<li><p>分段存储管理方式：</p>
<p>地址结构（段号|段内地址）、段表、信息共享、越界</p>
<p>分页与分段区别：页是信息的物理单位、页的大小固定且由系统决定、分页的用户程序地址空间是一位的</p>
</li>
<li><p>段页式存储管理方式：</p>
<p>用户程序——&gt;若干段——&gt;若干页；</p>
<p>地址变换过程：</p>
<p>&emsp;&emsp;访问数据需要3次内存调用：第1次：内存段表，第2次：内存页表，第3次：数据</p>
<p>&emsp;&emsp;高速缓冲寄存器的设定便是为了提升该3次内存调用速度</p>
</li>
</ol>
<h3 id="八、虚拟存储器"><a href="#八、虚拟存储器" class="headerlink" title="八、虚拟存储器"></a>八、虚拟存储器</h3><ol>
<li><p>实现方式：请求分页系统、请求分段系统</p>
</li>
<li><p>请求分页系统：缺页中断</p>
</li>
<li><p>页面置换算法：</p>
<p>①最佳置换算法Optimal</p>
<p>②先进先出页面置换算法FIFO</p>
<p>③最近最久未使用置换算法LRU</p>
<p>④最少使用置换算法LFU</p>
<p>⑤Clock置换算法</p>
<p>⑥页面缓冲算法PBA（Page Buffering Algorithm）</p>
<p>缺页次数&#x3D;缺页中断：即当所要访问的页面不在内存中时，便产生缺页中断。</p>
<p>缺页率&#x3D;缺页次数&#x2F;总页数（总访问次数）</p>
<p>例：LRU</p>
<table>
<thead>
<tr>
<th></th>
<th>7</th>
<th></th>
<th>0</th>
<th></th>
<th>1</th>
<th></th>
<th>2</th>
<th></th>
<th>0</th>
<th>3</th>
<th></th>
<th>0</th>
<th>4</th>
<th></th>
<th>2</th>
<th></th>
<th>3</th>
<th></th>
<th>0</th>
<th></th>
<th>3</th>
<th>2</th>
<th>1</th>
<th></th>
<th>2</th>
<th>0</th>
<th></th>
<th>1</th>
<th>7</th>
<th></th>
<th>0</th>
<th>1</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td>7</td>
<td></td>
<td>7</td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>4</td>
<td></td>
<td>4</td>
<td></td>
<td>4</td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td>0</td>
<td></td>
<td>3</td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td></td>
<td>1</td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td></td>
<td>3</td>
<td></td>
<td>2</td>
<td></td>
<td>2</td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>2</td>
<td></td>
<td></td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺页中断：</td>
<td></td>
<td>1次</td>
<td></td>
<td>2</td>
<td></td>
<td>3</td>
<td></td>
<td>4</td>
<td></td>
<td></td>
<td>5</td>
<td></td>
<td></td>
<td>6</td>
<td></td>
<td>7</td>
<td></td>
<td>8</td>
<td></td>
<td>9</td>
<td></td>
<td></td>
<td></td>
<td>10</td>
<td></td>
<td></td>
<td>11</td>
<td></td>
<td></td>
<td>12</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>缺页率为：12&#x2F;20&#x3D;60%</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>练习题</title>
    <url>/blog2025.github.io/2025/03/22/%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h3 id="一、概念题："><a href="#一、概念题：" class="headerlink" title="一、概念题："></a>一、概念题：</h3><ol>
<li>在软件项目工程中为什么不能用单纯增加人数的方法缩短开发时间？</li>
</ol>
<p>   答：沟通成本激增、新人适配期长、 管理复杂度上升、任务不可分割性</p>
<ol start="2">
<li><p>为学校图书馆管理系统提供五条系统需求？</p>
<p>答：多角色权限管理、自动化借阅与逾期处理、预约与续借功能、数据统计与可视化报表、图书全生命周期管理。</p>
</li>
<li><p>存取款流程图设计？</p>
<p>答：插卡—&gt;输入密码—&gt;选择存款—&gt;放入现金—&gt;系统读取存款数目存入卡内—&gt;用户退出，取卡</p>
<p>插卡—&gt;输入密码—&gt;选择取款—&gt;输入取款数目—&gt;系统判断余额是否充足，充足则出钱—&gt;用户退出，取卡</p>
<span id="more"></span>
</li>
<li><p>比较面向对象法和结构化法的特点，并说明为啥面向对象法更加优越?</p>
<p>结构化方法：模块化开发（函数&#x2F;过程划分模块）</p>
<p>&emsp;&emsp;&emsp;以“过程”为核心、数据和处理过程独立、适用于小型系统；</p>
<p>&emsp;&emsp;&emsp;数据与函数分离；</p>
<p>&emsp;&emsp;&emsp;通过函数复用，维护复杂。</p>
<p>面向对象法：模块化开发（类&#x2F;对象划分模块）（封装，继承，多态）</p>
<p>​    &emsp;&emsp;以对象为核心、容易理解，扩展性和复用性强、适用于大型系统；</p>
<p>&emsp;&emsp;&emsp;数据封装在对象内；</p>
<p>&emsp;&emsp;&emsp;通过继承&#x2F;组合复用，利用多态扩展行为，高内聚低耦合设计，维护简单。</p>
<p>‌<strong>总结</strong>‌：结构化适合小型&#x2F;性能敏感场景，面向对象在复杂系统、高扩展性需求中优势显著。</p>
<p>结构性程序的优点：</p>
<p>&emsp;<strong>模块化</strong>‌：功能拆分明确，便于复用和维护；</p>
<p><strong>&emsp;可读性强</strong>‌：逻辑清晰（顺序&#x2F;分支&#x2F;循环），降低理解成本；</p>
<p>‌&emsp;<strong>易调试</strong>‌：减少goto等混乱跳转，错误定位更精准；</p>
<p>&emsp;‌<strong>可扩展性</strong>‌：分层结构方便功能增删改。</p>
</li>
<li><p>解释一下软件技术和软件安全技术的不同之处？</p>
<p><strong>软件技术</strong>‌：侧重系统开发全生命周期（设计、编码、测试等），实现功能与性能目标。</p>
<p><strong>软件安全技术</strong>‌：专注在开发中预防漏洞（如加密、权限控制）、防御攻击（渗透测试、漏洞修复），保障系统抗风险能力。</p>
</li>
<li><p>软件工程的意义是什么？</p>
<p>①解决软件危机，保障开发可控性、②提升软件质量与可维护性、③优化资源利用与成本控制。</p>
</li>
<li><p>类和对象的区别是什么？</p>
<p><strong>类</strong>‌：抽象模板，加载到内存中仅一次，class关键字</p>
<p><strong>对象</strong>‌：类的具体实例，可创建多个实例，new动态实例化</p>
</li>
<li><p>两种测试方法？</p>
<p>‌<strong>单元测试</strong>：白盒测试为主、发现编码错误和设计缺陷</p>
<p><strong>集成测试</strong>：黑盒与灰盒（需要关心模块与模块之间的交互。）结合、接口交互和数据传递的可靠性</p>
</li>
<li><p>什么是软件工程增量模型？</p>
<p>答：将系统拆分为多个功能模块（增量），分阶段开发、集成并交付‌。</p>
</li>
<li><p>什么是回归测试？</p>
<p>答：修改代码后重新测试，确保原有功能正常。防止代码改动引发意外错误（如修复A功能导致B功能异常）</p>
</li>
<li><p>什么是指针？</p>
<p>答：指针是存储变量内存地址的变量（如 int *p 指向整型变量地址）</p>
<p>&emsp;&emsp;取地址（&amp;a 获取变量a的地址）；解引用（*p 访问指针指向的值）。</p>
</li>
<li><p>白盒测试、黑盒测试名词解释</p>
<p><strong>白盒测试</strong>‌：基于代码内部结构的测试, 需了解程序逻辑.</p>
<p><strong>黑盒测试</strong>‌：基于功能需求的测试, 无需了解代码.</p>
</li>
<li><p>软件工程导论生命周期</p>
<p><strong>软件定义时期</strong>‌：问题定义‌、可行性研究‌、需求分析</p>
<p><strong>软件开发时期</strong>‌：总体设计、详细设计、编码‌、测试</p>
<p><strong>运行维护时期</strong>‌：维护‌</p>
</li>
<li><p>需求分析是什么，主要任务是什么</p>
<p><strong>定义‌</strong>：确定用户与系统目标，明确软件应实现的功能和约束条件。<br><strong>‌主要任务‌</strong>：</p>
<p>&emsp;‌收集需求‌：通过访谈、问卷等方式获取用户&#x2F;业务需求。</p>
<p>‌&emsp;分类整理‌：区分‌功能需求‌（如登录功能）与‌非功能需求‌（如响应速度≤1秒）。</p>
<p>‌&emsp;验证可行性‌：评估技术、成本与时间是否可实现。</p>
<p>&emsp;‌文档化‌：编写‌需求规格说明书（SRS）‌，作为开发基准。</p>
<p>&emsp;‌管理变更‌：跟踪需求变动，避免范围蔓延（Scope Creep）。<br><strong>‌核心目的‌</strong>：确保开发方向与用户期望一致，减少后期返工风险。</p>
</li>
<li><p>软件维护</p>
<p>答：软件生命周期的最终阶段，指软件交付使用后为修正错误、适应环境或扩展功能而进行的持续修改过程，贯穿软件运行的整个生命周期‌。</p>
<p><strong>改正性维护</strong>：修复运行中的错误。</p>
<p><strong>适应性维护</strong>：适配环境变化（如系统升级）。</p>
<p><strong>完善性维护</strong>：新增功能或优化性能。</p>
<p><strong>预防性维护</strong>：重构代码以降低未来维护成本。</p>
<p><strong>核心目标</strong>‌：延长软件生命周期，确保稳定性和用户需求匹配。</p>
</li>
<li><p>MVC解释？</p>
<p>答：数据管理、用户界面和控制逻辑，提升代码的可维护性与扩展性‌。</p>
<p><strong>模型（Model）</strong>：管理数据与业务逻辑</p>
<p><strong>视图（View）</strong>：呈现数据给用户，接收用户输入</p>
<p><strong>控制器（Controller）</strong>：协调模型与视图，处理用户请求并更新两者</p>
</li>
<li><p>Spring MVC流程：</p>
<p>答：用户请求—&gt;Servlet接受请求—&gt;Mapper解析请求—&gt;Controller处理业务—&gt;ModelAndView返回数据与视图—&gt;ViewResolver解析视图—&gt;渲染视图—&gt;响应。</p>
</li>
<li><p>JAVA中JDBC运行过程</p>
<p><strong>加载驱动</strong>‌：注册数据库驱动（如Class.forName(“com.mysql.jdbc.Driver”)）。</p>
<p><strong>建立连接</strong>‌：通过DriverManager.getConnection(url,     user, password)获取连接。</p>
<p><strong>创建Statement</strong>：使用Connection生成Statement或PreparedStatement。</p>
<p>‌<strong>执行SQL</strong>‌：调用executeQuery()（查询）或executeUpdate()（增删改）。</p>
<p><strong>处理结果</strong>‌：遍历ResultSet（查询）或获取影响行数（更新）。</p>
<p>‌<strong>关闭资源</strong>‌：依次关闭ResultSet、Statement、Connection。</p>
<p><strong>核心点</strong>‌：驱动→连接→执行→结果→关闭，全程需处理SQLException</p>
</li>
<li><p>一个员工可以查看员工的总工资和他个人的工资，但是有一个问题是，如果部门里面只有两个人的话，那么一个人就能通过这两个信息来间接查询到另一个人的工资，如何解决这个问题？</p>
<p>①<strong>调整薪资披露范围</strong>、②<strong>复杂化薪资结构</strong>‌、③<strong>增设保密协议</strong></p>
<p><strong>核心原则</strong>‌：保障员工对自身工资的知情权‌，同时通过管理手段规避隐私泄露风险。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>人机交互界面的设计原则以及命令行交互需要注意什么？</p>
<p><strong>直观性</strong>‌：操作逻辑清晰，减少学习成本。</p>
<p>‌<strong>一致性</strong>‌：界面风格、交互流程统一。</p>
<p>‌<strong>反馈机制</strong>‌：实时反馈操作结果（如加载状态、成功&#x2F;失败提示）。</p>
<p>‌<strong>容错性</strong>‌：提供撤销&#x2F;重做功能，避免误操作导致严重问题。</p>
<p>‌<strong>简洁性</strong>‌：避免冗余信息，聚焦核心功能。</p>
</li>
<li><p>做一个密码检验，第一个条件是长度是8-16位，第二个条件是必须在提供的码表内，大小写字母，数字，一些符号。</p>
<p><strong>长度校验</strong>‌：检查密码长度是否在8-16位之间。</p>
<p><strong>字符范围校验</strong>‌：遍历每个字符，确认是否在预设码表内</p>
</li>
<li><p>面向对象继承的题，类似于解决系统升级如何用以前的功能</p>
<p>答：<strong>基类保留旧功能</strong>‌、<strong>子类继承并扩展</strong>‌；<strong>原则</strong>‌：开闭原则（扩展开放，修改关闭）。</p>
</li>
<li><p>什么是面向对象方法学?它有哪些优点? </p>
<p>面向对象方法是一种运用对象、类、继承、封装、聚合、消息、多态等概念来构造系统的软件开发方法。 </p>
<p>面向对象方法的优点是：符合人们习惯的思维方式、稳定性好、可重用性好、可维护性好、容易开发大型的软件产品。</p>
</li>
<li><p>什么是对象模型？建立对象模型时主要使用那些图形符号？这些符号的含义是什么？ </p>
<p><strong>对象模型</strong>‌：描述系统中类、对象及其关系的静态结构模型，聚焦属性、方法及交互。</p>
<p><strong>常用图形符号</strong>‌（以UML类图为例）：</p>
<p>&emsp;‌①<strong>类</strong>‌（矩形）：分三栏（类名、属性、方法），如 类名 | -属性: 类型 | +方法。</p>
<p>&emsp;‌②<strong>关联</strong>‌（实线箭头）：类间引用关系（如 用户→订单），可标注角色名或多重性。</p>
<p>&emsp;‌③<strong>继承</strong>‌（空心三角箭头）：子类继承父类（如 猫→动物）。</p>
<p>&emsp;④<strong>组合&#x2F;聚合</strong>（实心&#x2F;空心菱形）：整体与部分关系（组合强，聚合弱，如 汽车◉发动机）。</p>
<p>‌<strong>含义</strong>‌：通过类与关系抽象系统结构，明确职责与协作逻辑。</p>
</li>
<li><p>什么是动态模型？建立功能模型时主要使用哪些图形符号？这些符号的含义是什么？ </p>
<p><strong>动态模型</strong>‌：描述系统行为或状态<strong>变化</strong>的模型（如交互流程、实时响应）。</p>
<p><strong>常用图形符号</strong>‌（以数据流图为例）：</p>
<p>&emsp;①<strong>外部实体</strong>‌（矩形）：系统输入&#x2F;输出的来源或终点（如用户、设备）。</p>
<p>&emsp;②<strong>过程</strong>‌（圆角矩形）：数据处理功能（如“计算订单”）。</p>
<p>&emsp;③<strong>数据存储</strong>‌（横线或开口矩形）：数据持久化位置（如数据库、文件）。</p>
<p>&emsp;④<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“订单信息”）。</p>
<p>‌<strong>含义</strong>‌：通过符号组合清晰表达系统功能的数据输入、处理、存储与输出逻辑。 </p>
</li>
<li><p>什么是功能模型？建立功能模型时主要使用哪些图形符号？</p>
<p><strong>功能模型</strong>‌：描述系统数据处理<strong>逻辑</strong>的模型，明确输入、输出及内部功能转换。</p>
<p>‌<strong>常用图形符号</strong>‌（以数据流图为主）：</p>
<p>&emsp;①<strong>外部实体</strong>‌（矩形）：数据源或终点（如用户、外部系统）。</p>
<p>‌&emsp;②<strong>处理过程</strong>‌（圆角矩形）：数据变换或计算（如“验证登录”）。</p>
<p>&emsp;③<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“请求信号”）。</p>
<p>&emsp;‌④<strong>数据存储</strong>‌（横线&#x2F;开口矩形）：数据持久化位置（如数据库、缓存）。</p>
<p>‌<strong>作用</strong>‌：通过符号组合直观展现数据如何被系统功能处理、存储与传递。</p>
</li>
<li><p>面向对象设计应该遵循哪些准则?简述每条准则的内容，并说明遵循这条准则的必要性。 </p>
<p>答: 模块化、抽象、信息隐藏、弱耦合、强内聚、可重用</p>
</li>
<li><p>简述有助于提高面向对象设计质量的每条主要启发规则的内容和必要性</p>
<p><strong>提高面向对象设计质量的主要启发规则</strong>‌：</p>
<p>单一职责原则（SRP）‌<br>&emsp;o    ‌内容‌：一个类只承担一个职责。<br>&emsp;o    ‌必要性‌：降低复杂度，提升可维护性和复用性。</p>
<p>‌开闭原则（OCP）‌<br>&emsp;o    ‌内容‌：对扩展开放，对修改关闭。<br>&emsp;o    ‌必要性‌：通过扩展而非修改适应变化，减少风险。</p>
<p>‌里氏替换原则（LSP）‌<br>&emsp;o    ‌内容‌：子类必须能完全替代父类。<br>&emsp;o    ‌必要性‌：确保继承体系的逻辑正确性。</p>
<p>‌接口隔离原则（ISP）‌<br>&emsp;o    ‌内容‌：客户端不应依赖不需要的接口。<br>&emsp;o    ‌必要性‌：避免接口臃肿，降低耦合。</p>
<p>‌依赖倒置原则（DIP）‌<br>&emsp;o    ‌内容‌：依赖抽象而非具体实现。<br>&emsp;o    ‌必要性‌：提高灵活性，支持模块解耦。</p>
<p>‌组合优于继承‌<br>&emsp;o    ‌内容‌：优先用组合实现功能复用。<br>&emsp;o    ‌必要性‌：减少继承的强耦合，增强扩展性。</p>
<p>迪米特法则（Law of Demeter）‌<br>&emsp;o    ‌内容‌：对象仅与直接关联的类交互。<br>&emsp;o    ‌必要性‌：减少依赖链，提高模块独立性。</p>
<p>‌高内聚低耦合‌<br>&emsp;o    ‌内容‌：模块内部紧密相关，模块间依赖最小化。<br>&emsp;o    ‌必要性‌：增强可维护性和可测试性。</p>
<p>‌封装变化点‌<br>&emsp;o    ‌内容‌：将易变逻辑隔离到独立模块。<br>&emsp;o    ‌必要性‌：降低修改影响，提升系统稳定性。</p>
<p>‌避免重复（DRY）‌<br>&emsp;o    内容‌：相同逻辑仅出现一次。<br>&emsp;o    ‌必要性‌：减少维护成本，保证一致性。</p>
<p>‌<strong>总结</strong>‌：通过遵循这些规则，可构建更清晰、灵活、可扩展的系统，降低开发与维护成本。</p>
</li>
<li><p>面向对象程序设计语言主要有哪些技术特点？</p>
<p><strong>面向对象程序设计语言的主要技术特点</strong>‌：</p>
<p>&emsp;‌<strong>封装</strong>‌：将数据与操作绑定在类中，隐藏实现细节，提供安全性和模块化。</p>
<p><strong>&emsp;继承</strong>‌：子类复用父类属性和方法，支持层次化设计与代码复用。</p>
<p>&emsp;‌<strong>多态</strong>‌：同一操作在不同对象中表现不同行为（如重载、覆盖），增强灵活性。</p>
<p><strong>&emsp;抽象化</strong>‌：通过接口&#x2F;抽象类定义规范，分离“做什么”与“怎么做”。</p>
<p><strong>&emsp;动态绑定</strong>‌：运行时根据对象类型确定调用方法，支持多态行为。</p>
<p>&emsp;<strong>消息传递</strong>‌：对象间通过方法调用通信，降低耦合。</p>
<p><strong>&emsp;组合与聚合</strong>‌：通过对象组合实现复杂功能，替代继承的强依赖。</p>
<p>&emsp;‌<strong>类与对象</strong>‌：以类为模板创建对象，实例化具体实体，封装状态与行为。</p>
<p>‌<strong>核心作用</strong>‌：提升代码复用性、扩展性、维护性，贴近现实问题建模。</p>
</li>
<li><p>选择面向对象程序设计语言时主要应该考虑哪些因素？</p>
<p>&emsp;<strong>语法简洁性</strong>‌：是否易于理解与开发（如Python vs C++）。</p>
<p>‌&emsp;<strong>性能需求</strong>‌：对执行效率要求高时选编译型语言（如C++&#x2F;C#）。</p>
<p>‌&emsp;<strong>跨平台能力</strong>‌：是否需支持多平台运行（如Java&#x2F;Kotlin）。</p>
<p>&emsp;‌<strong>生态系统</strong>‌：社区活跃度、框架&#x2F;库丰富性（如Java的Spring）。</p>
<p>&emsp;‌<strong>团队熟悉度</strong>‌：开发者对语言的熟练程度，降低学习成本。</p>
<p><strong>&emsp;行业标准</strong>‌：特定领域的主流语言（如游戏开发常用C#）。</p>
<p>&emsp;<strong>工具链支持</strong>‌：IDE、调试器、测试工具的成熟度。</p>
<p>&emsp;‌<strong>安全性与维护性</strong>‌：内存管理、类型系统严格性（如C#强类型）。</p>
<p>‌&emsp;<strong>项目规模</strong>‌：大型系统倾向静态语言（如Java），小型项目可选动态语言（如Python）。</p>
<p>‌<strong>核心目标</strong>‌：平衡开发效率、运行性能、长期维护成本与应用场景适配性。</p>
</li>
<li><p>工厂模式：</p>
<p><strong>一种‌创建型设计模式</strong>‌，封装对象实例化过程，通过接口统一创建逻辑，客户端无需关心具体类。</p>
<p>‌<strong>核心作用</strong>‌：</p>
<p>‌&emsp;<strong>解耦</strong>‌：分离对象创建与使用，避免代码依赖具体类。</p>
<p><strong>&emsp;扩展性</strong>‌：新增产品类型时，无需修改客户端代码（如支持MySQL&#x2F;Oracle数据库切换）。</p>
<p>‌&emsp;<strong>统一入口</strong>‌：集中管理创建逻辑（如根据配置生成不同文件解析器）。</p>
<p>‌<strong>典型实现</strong>‌：</p>
<ul>
<li>‌<strong>简单工厂</strong>‌：单一方法根据参数返回不同对象。</li>
<li>‌<strong>工厂方法</strong>‌：子类重写工厂方法，决定实例化目标类。</li>
<li>‌<strong>抽象工厂</strong>‌：创建产品族（如跨平台UI组件库）。</li>
</ul>
<p>‌<strong>适用场景</strong>‌：对象类型频繁变化、创建逻辑复杂或需全局统一控制（如依赖注入框架）</p>
</li>
<li><p>计算机软件的分类，各个分类分别介绍</p>
<p>**系统软件：**操作系统‌、‌语言处理程序、数据库管理系统、驱动程序‌</p>
<p>**应用软件：**通用软件（Web）、专用软件（Ps）、网络软件（微信）</p>
<p>**其他分类：**单机游戏、服务器软件等</p>
</li>
<li><p>静态测试和动态测试的定义</p>
<p><strong>静态测试</strong></p>
<ul>
<li>‌<strong>定义</strong>‌：不运行程序，通过检查文档、代码或设计来发现缺陷。</li>
<li>‌<strong>方法</strong>‌：代码审查、需求走查、设计评审、检查清单。</li>
</ul>
<p><strong>动态测试</strong></p>
<ul>
<li>‌<strong>定义</strong>‌：通过运行程序验证其行为是否符合预期，检查输入输出的正确性。</li>
<li>‌<strong>方法</strong>‌：单元测试、集成测试、系统测试（如功能测试、性能测试）。</li>
</ul>
<p>‌<strong>核心区别</strong>‌：静态测试基于静态分析，动态测试依赖代码执行。</p>
</li>
<li><p>时间复杂度概念</p>
<p>答：<strong>时间复杂度</strong>‌：衡量算法执行时间随‌数据规模增长的趋势，用大O符号表示。</p>
<p>‌<strong>常见阶</strong>‌：O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²)。</p>
</li>
<li><p>区分静态测试和动态测试，并分别举例</p>
<p><strong>静态测试</strong>‌：不运行代码，检查代码结构&#x2F;设计（例：代码审查、静态分析工具）。<br><strong>动态测试</strong>‌：运行程序，验证实际输出（例：单元测试（JUnit）、功能测试）。</p>
</li>
<li><p>Springboot原理：</p>
<p><strong>启动入口</strong>‌：@SpringBootApplication</p>
<p><strong>加载配置</strong>‌：读取 spring.factories 中的自动配置类，按条件初始化 Bean。</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;Bean 的作用也就是把一组数据组合成一个特殊的类便于传输。（getter、setter）</p>
<p>‌<strong>运行应用</strong>‌：启动内嵌服务器，处理请求</p>
</li>
</ol>
<p>二、编程题目：</p>
<ol>
<li>x小于0时y等于-1，x大于0时y等于1，x等于0时，y等于0。</li>
</ol>
<p>   Java：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt; <span class="number">0</span>) ? <span class="number">1</span> : (x &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>   C：</p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt; <span class="number">0</span>) - (x &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>3*3矩阵倒置行列互换写程序：</p>
<p>伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="type">int</span>[][] result=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]<span class="comment">//逆转的矩阵；</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixTranspose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(matrix);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] transposed = transpose(matrix);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n转置后矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(transposed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵转置方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>给了15个（A,B,C），键盘输入（a,b,c），然后计算之间的距离那个最短，题中会给出计算公式，用函数判断最小距离。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortDistance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] points = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>; i &lt; <span class="number">15</span>; x = ++i %<span class="number">5</span>, y = i /<span class="number">5</span>)</span><br><span class="line">            points[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;输入三个点（如A B C）: &quot;</span>);</span><br><span class="line">        String[] input = sc.nextLine().toUpperCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] selected = &#123;</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Math.hypot(selected[i]-selected[j], selected[i]-selected[j]);</span><br><span class="line">                <span class="keyword">if</span> (d &lt; min) &#123;</span><br><span class="line">                    min = d;</span><br><span class="line">                    pair = input[i] + <span class="string">&quot;-&quot;</span> + input[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;最短距离：%.2f (%s)&quot;</span>, min, pair);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Scanner类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串”);</span></span><br><span class="line"><span class="string">String a = input.nextLine();</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>求一个数的平方，且平方值的数两两相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AABBSquare</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历四位数平方的范围（32²=1024 到 99²=9801）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">32</span>; n &lt;= <span class="number">99</span>; n++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">square</span> <span class="operator">=</span> n * n;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(square);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否为四位数且符合AABB模式</span></span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">4</span> </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">0</span>) == s.charAt(<span class="number">1</span>) </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">2</span>) == s.charAt(<span class="number">3</span>)) &#123;</span><br><span class="line">                System.out.println(n + <span class="string">&quot;² = &quot;</span> + square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：88² = 7744</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编程输入十个数，将最小的与第一个数互换，最大的与第十个数互换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>;  <span class="comment">// 输入10个数存入数组  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>, maxIndex = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找最小值和最大值的索引  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) minIndex = i;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) maxIndex = i;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最小值和第一个数  </span></span><br><span class="line">swap(arr, <span class="number">0</span>, minIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 若原最大值是第一个数，更新maxIndex（因第一个数已被交换）  </span></span><br><span class="line"><span class="keyword">if</span> (maxIndex == <span class="number">0</span>) maxIndex = minIndex;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最大值和第十个数  </span></span><br><span class="line">swap(arr, <span class="number">9</span>, maxIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编程输入一个字符串，字符串中大写字母转换为小写字母，小写字母转换为大写字母</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> ...;  <span class="comment">// 获取输入字符串  </span></span><br><span class="line"><span class="type">char</span>[] chars = input.toCharArray();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (Character.isUpperCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toLowerCase(chars[i]);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toUpperCase(chars[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);  <span class="comment">// 输出result  </span></span><br><span class="line">利用Character类方法直接翻转字母大小写，非字母字符保持原样</span><br></pre></td></tr></table></figure>
</li>
<li><p>转换进制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入：num(十进制整数), base(目标进制，范围2-36)</span></span><br><span class="line"><span class="comment">// 输出：目标进制的字符串形式</span></span><br><span class="line">String <span class="title function_">convertBase</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;  <span class="comment">// 边界情况：输入为0</span></span><br><span class="line">    <span class="keyword">if</span> (base &lt; <span class="number">2</span> || base &gt; <span class="number">36</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 进制不合法</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] digits = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNegative</span> <span class="operator">=</span> num &lt; <span class="number">0</span>;</span><br><span class="line">    num = abs(num);  <span class="comment">// 处理负数</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> num % base;  <span class="comment">// 取余数</span></span><br><span class="line">        result.append(digits[remainder]);  <span class="comment">// 映射字符</span></span><br><span class="line">        num = num / base;  <span class="comment">// 更新num</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isNegative) result.append(<span class="string">&#x27;-&#x27;</span>);  <span class="comment">// 还原负号</span></span><br><span class="line">    <span class="keyword">return</span> result.reverse().toString();  <span class="comment">// 反转余数序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给定两个数组，将一组数据从一个数组替换到另一个数组，时间复杂度为n。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReplacer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span>[] source, <span class="type">int</span>[] target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.min(source.length, target.length);</span><br><span class="line">        System.arraycopy(source, <span class="number">0</span>, target, <span class="number">0</span>, n); <span class="comment">// O(n) 时间复制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>经典算法（01背包等）动态规划问题</p>
<p><strong>背包问题描述：</strong></p>
<ul>
<li>‌<strong>给定</strong>‌：物品重量数组 weight[]，价值数组 value[]，背包容量 capacity</li>
<li>‌<strong>要求</strong>‌：在不超过背包容量的前提下，求能装入物品的最大总价值</li>
<li>‌<strong>限制</strong>‌：每个物品只能选一次（0-1选择）</li>
</ul>
<p><strong>‌动态规划解法：</strong></p>
<p>&emsp;①<strong>状态定义</strong></p>
<p>&emsp;&emsp;dp[j]：容量为 j 的背包能装的最大价值。</p>
<p>&emsp;②<strong>状态转移方程‌</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</span><br></pre></td></tr></table></figure>

<p>&emsp;③<strong>初始化‌</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">0.</span>..capacity] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>&emsp;④<strong>遍历顺序‌</strong></p>
<ul>
<li><strong>外层循环</strong>‌：遍历每个物品（保证每个物品只选一次）</li>
<li>‌<strong>内层循环</strong>‌：‌倒序遍历背包容量（防止重复选择）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knapsack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01</span><span class="params">(<span class="type">int</span>[] weight, <span class="type">int</span>[] value, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weight.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 必须倒序遍历容量，避免重复选择</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> capacity; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weight = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;    <span class="comment">// 物品重量</span></span><br><span class="line">        <span class="type">int</span>[] value = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;     <span class="comment">// 物品价值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">8</span>;               <span class="comment">// 背包容量</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> knapsack01(weight, value, capacity);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大价值: &quot;</span> + maxValue);  <span class="comment">// 输出: 10（选物品0、1、3）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h3><ol>
<li><p>冯·诺依曼计算机</p>
<p>组成：</p>
<p>运算器、存储器、控制器（控制、指挥程序和数据的输入运行及处理结果）、输入设备、输出设备；</p>
<p>特点：</p>
<p>指令和数据以同等地位存放于存储器内，可按地址寻访；</p>
<p>指令和数据均用二进制数表示；</p>
<p>指令由操作码（操作）和地址码（操作数在存储器中的位置）组成；</p>
<p>指令在存储器中是顺序存储的。</p>
<p>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成。</p>
<span id="more"></span>
</li>
<li><p>现代计算机组成：</p>
<p>CPU、存储器、IO设备</p>
<p>运算器：至少3个寄存器和1个算术逻辑单元ALU，ACC为累加器，MQ为乘商寄存器，累加寄存器AC</p>
<p>主寄存器（主存&#x2F;内存）：<strong>主存地址寄存器MAR</strong>、<strong>主存数据寄存器MDR</strong></p>
<p>控制器：神经中枢，由<strong>程序计数器PC</strong>（存放下一条指令的地址）、<strong>指令寄存器IR</strong>（存放当前正在执行的指令）、<strong>控制单元CU</strong>组成</p>
<p>关系：<img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1.png"></p>
</li>
<li><p>机器指令格式：</p>
<table>
<thead>
<tr>
<th>操作码（取数、存数、加、减、乘、除、停机、打印等）</th>
<th>地址码（操作数在存储器中的位置）</th>
</tr>
</thead>
<tbody><tr>
<td>6位</td>
<td>10位</td>
</tr>
</tbody></table>
</li>
<li><p>计算机硬件的主要技术指标：</p>
<p>机器字长：CPU一次能处理数据的位数（字长越长，数的表示范围越大，精度越高）</p>
<p>存储容量：主存容量和辅存容量</p>
<p>运算速度：吉普森（Gibson）法衡量运算速度（每条指令的执行时间以及他们在全部操作中所占的百分比）</p>
<p>或采用MIPS（百万条指令每秒）作为计量单位，或采用CPI（执行一条指令所需要的时钟周期（机器主频的倒数））</p>
</li>
<li><p>DMA技术：直接访问内存，无需 CPU 干预直接读写内存</p>
</li>
</ol>
<h3 id="二、系统总线：（可看可不看）"><a href="#二、系统总线：（可看可不看）" class="headerlink" title="二、系统总线：（可看可不看）"></a>二、系统总线：（可看可不看）</h3><ol>
<li><p>总线连接：将各部件连到<strong>一组</strong>公共信息传输线上。</p>
</li>
<li><p>分散连接：各部件之间使用单独的连线。</p>
</li>
<li><p>总线分类：</p>
<table>
<thead>
<tr>
<th>片内总线（芯片内部）</th>
<th>系统总线（CPU、主存、IO设备各大部件之间的信息传输线）</th>
<th>通信总线</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>数据总线</td>
<td></td>
</tr>
<tr>
<td></td>
<td>地址总线</td>
<td></td>
</tr>
<tr>
<td></td>
<td>控制总线</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>总线特性：</p>
<p>机械（插座标准）、电气（每一根传输线上信号的传递方向与有效的电平范围）</p>
</li>
<li><p>总线性能指标：</p>
<p>宽度、带宽、时钟同步&#x2F;异步、复用、信号线数、控制方式、负载、电源电压</p>
</li>
<li><p>总线标准：</p>
<p>ISA、EISA、VESA、PCI、AGP、RS-232C、USB</p>
</li>
<li><p>总线结构：</p>
<p>单总线、多总线</p>
</li>
<li><p>总线控制：</p>
<p>总线判优控制：</p>
<table>
<thead>
<tr>
<th>集中式（将控制逻辑集中在一处，如CPU）</th>
<th>分布式（将控制逻辑分散在与总线连接的各个部件或设备上）</th>
</tr>
</thead>
<tbody><tr>
<td>链式查询</td>
<td></td>
</tr>
<tr>
<td>计数器定时查询</td>
<td></td>
</tr>
<tr>
<td>独立请求查询</td>
<td></td>
</tr>
</tbody></table>
<p>总线通信控制：（总线周期4步）</p>
<p>&emsp;申请分配阶段、寻址阶段、传数阶段、结束阶段</p>
</li>
</ol>
<p>​		&emsp;四种通信控制方式：同步、异步、半同步、分离式</p>
<h3 id="三、存储器"><a href="#三、存储器" class="headerlink" title="三、存储器"></a>三、存储器</h3><ol>
<li><p>分类：</p>
<table>
<thead>
<tr>
<th>存储介质</th>
<th>存取方式</th>
<th>在计算机中的作用</th>
</tr>
</thead>
<tbody><tr>
<td>半导体存储器（TTL半导体）（MOS半导体）</td>
<td>随机存储器RAM</td>
<td>主存储器（RAM、ROM）</td>
</tr>
<tr>
<td>磁表面存储器</td>
<td>只读存储器ROM（只能读不能重写）<br>包含：可编程只读PROM、紫外线擦除可编程EPROM、电擦除可编程EEPROM</td>
<td>辅助存储器（光盘、磁带、磁盘）</td>
</tr>
<tr>
<td>磁芯存储器</td>
<td>串行访问</td>
<td>缓冲存储器Cache</td>
</tr>
<tr>
<td>光盘存储器</td>
<td></td>
<td>闪速存储器</td>
</tr>
</tbody></table>
</li>
<li><p>存储器层次结构：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2.png"></p>
<p>缓存-主存层次（解决CPU和主存速度不匹配问题）</p>
<p>主存-辅存层次（解决存储系统的容量问题）（数据调动是由硬件自动完成，程序员看不见）：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/3.png"></p>
</li>
<li><p>主存储器：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4.png"></p>
<p>（1）主存中存储单元地址的分配：</p>
<p>​    高位字节地址为字地址：0 4 8</p>
<table>
<thead>
<tr>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>​    低位字节为字地址：0 2 4</p>
<table>
<thead>
<tr>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>（2）技术指标：</p>
<p>​    存储容量、储速度（存取时间和存取周期）、存储器带宽（衡量数据传输率的重要技术指标）</p>
</li>
<li><p>半导体存储芯片：</p>
<p>（1）基本结构：</p>
<p><img src="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5.png"></p>
<p>&emsp;存储芯片通过地址总线、数据总线和控制总线与外部连接。</p>
<p>&emsp;地址线是单向输入、其位数与芯片容量有关。</p>
<p>&emsp;数据线是双向的</p>
<p>（2）译码驱动方式：</p>
<p>&emsp;线选法、重合法</p>
</li>
<li><p>随机存取存储器</p>
<p>静态RAM、动态RAM</p>
<p>动态刷新RAM的刷新：</p>
<p>​        刷新的过程实质上是先将原存信息读出，再由刷新放大器形成原信息并重新写入的再生过程。</p>
<p>&emsp;&emsp;包含集中刷新、分散刷新、异步刷新。</p>
<p>动态RAM和静态RAM的比较：</p>
<table>
<thead>
<tr>
<th></th>
<th>动态RAM（电容）</th>
<th>静态RAM</th>
</tr>
</thead>
<tbody><tr>
<td>集成度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>功耗</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>价格</td>
<td>便宜</td>
<td>贵</td>
</tr>
<tr>
<td>容量</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>存取周期</td>
<td>慢（唯一缺点）</td>
<td>快</td>
</tr>
</tbody></table>
</li>
<li><p>只读存储器</p>
<p>&emsp;看上述的分类表格</p>
</li>
<li><p>存储器和CPU的连接<font color="red">（<strong>画图</strong>）</font></p>
<p>（1）存储容量的扩展：</p>
<p>&emsp;位扩展（增加存储字长）</p>
<p>&emsp;字扩展（增加存储字的数量）</p>
<p>&emsp;字、位扩展（既增加存储字的数量、又增加存储字长）</p>
<p>（2）存储器与CPU的连接：</p>
<p>&emsp;①地址线的连接：存储芯片的容量不同，其地址线数也不同，CPU的地址线数目&gt;存储芯片的。</p>
<p>&emsp;&emsp;通常将CPU地址线的低位与存储芯片的地址线相连。</p>
<p>&emsp;&emsp;而CPU地址线的高位要么在存储芯片扩充时用，要么在其他用途。</p>
<p>&emsp;②数据线的连接：必须保证CPU的数据线数与存储芯片的数据位数相等。</p>
<p>&emsp;③读、写命令线的连接：高电平为读、低电平为写</p>
<p>&emsp;④片选线的连接：CPU与存储芯片正确工作的关键</p>
<p>&emsp;⑤合理选择存储芯片：类型RAM或ROM，数量的选择。</p>
</li>
<li><p>存储器的校验：<font color="red">（<strong>检错计算</strong>）</font></p>
<p>定义：检测到存储过程中可能出现的差错，并及时纠正。通常可将原数据配成<font color="red"><strong>汉明编码</strong></font></p>
<p><strong>汉明码</strong>：一位纠错能力。</p>
<p>n+k：欲检测的二进制代码为n位，需要增加k位检测位实现纠错能力。</p>
<p><strong>汉明码编码过程：</strong></p>
<p>①判定检验位个数：公式为：2^k≥n+k+1</p>
<p>②确定检验位的位置：校验位固定在第2^n次处，即第1 2 4 8 …处；</p>
<p>③检验位”_”的取值：（配偶原则）异或运算</p>
<p>第一位C1包含<strong>1</strong>，3，5，7，9，11…（取一个隔一个）</p>
<p>第二位C2包含<strong>2，3</strong>，6，7，10，11，14，15…（取二个隔二个）</p>
<p>第三位C4包含<strong>4，5，6，7</strong>，12，13，14，15…（取四个隔四个）</p>
<p>第四位C8包含**8，9，10，11，12，13，14，15，**24…（取八个隔八个）</p>
<p>C1&#x3D;1位㊉3位㊉5位㊉7位㊉…</p>
<p>C2&#x3D;2位㊉3位㊉6位㊉7位㊉…</p>
<p>C4&#x3D;4位㊉5位㊉6位㊉7位㊉…</p>
<p>C8&#x3D;8位㊉9位㊉10位㊉11位㊉…</p>
<p>例题：</p>
<hr>
<p>以10101编码为例，创建一个汉明码编码的空间，并且把源码填入编码的对应位中中，_ _ 1 _ 0 10 _ 1，并留出校验码位（校验位先设为0）。（因为2^4 - 1&gt;&#x3D; 5+4 &amp;&amp; 2^3 - 1 &lt; 5+ 3所以需要4位校验码）</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody><tr>
<td>C1</td>
<td>C2</td>
<td>1</td>
<td>C4</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>C8</td>
<td>1</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><p>计算校验码的第一位C1（1,3,5,7,9进行异或）: 空㊉1㊉0㊉0㊉1&#x3D;0</p>
<p>结果为0，所以汉明码第2^0位为0，结果为0 _ 1 _ 0 10 _ 1</p>
</li>
<li><p>计算校验码的第二位C2（2,3,6,7进行异或）: 空㊉1㊉1㊉0&#x3D;0</p>
<p>结果为0，所以汉明码第2^1位为0，结果为001 _ 0 10 _ 1</p>
</li>
<li><p>计算校验码的第三位C4（4,5,6,7进行异或）: 空㊉0㊉1㊉0&#x3D;1</p>
<p>结果为1，所以汉明码第2^2位为0，结果为0011 0 10 _ 1</p>
</li>
<li><p>计算校验码的第四位C8（8, 9进行异或）: 空㊉1&#x3D;0</p>
<p>结果为0，所以汉明码第2^3位为0，结果为0011 0100 1</p>
</li>
<li><p>所以最终编码为001101001.</p>
</li>
</ul>
</blockquote>
<p>参考：<a href="https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html">https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html</a></p>
<p>1 ⊕ 1 &#x3D; 0</p>
<p>0 ⊕ 0 &#x3D; 0</p>
<p>1 ⊕ 0 &#x3D; 1</p>
<p>0 ⊕ 1 &#x3D; 1</p>
<p>同为 0，异为 1</p>
<p><strong>汉明码的纠错过程：</strong></p>
<p>①对接收到的错误汉明码进行异或运算即可。</p>
<p>②异或运算结果为0，则没有错误；运算结果为1，则存在错误。</p>
<p>③根据错误去判断错在哪个位置。（抑或结果反着排列，在转换为十进制即得错误位置）</p>
<p>例题：</p>
<p>假设我们现在收到的编码为001101001，我们可以发现汉明码的第8位与原来的汉明码001101011不同，那我们怎么找出这个第8位的错误编码呢？</p>
<p>​                       123456789</p>
<p>对错误汉明码001101001进行异或运算</p>
<blockquote>
<ul>
<li><p>P1&#x3D;0㊉1㊉0㊉0㊉1&#x3D;0（1,3,5,7,9进行异或），</p>
</li>
<li><p>P2&#x3D;0㊉1㊉1㊉0&#x3D;0（2,3,6,7进行异或），</p>
</li>
<li><p>P4&#x3D;1㊉0㊉1㊉0&#x3D;0（4,5,6,7进行异或）</p>
</li>
<li><p>P8&#x3D;0㊉1&#x3D;1（8, 9进行异或），</p>
<p>将上述结果反着排列得到1000转换为十进制即8，所以错误位置为8</p>
<p><strong>0</strong>×2^0 + <strong>0</strong>×2^1 + <strong>0</strong>×2^2 + <strong>1</strong>×2^3 &#x3D; 8</p>
</li>
</ul>
</blockquote>
</li>
<li><p>提高访存速度的措施</p>
<p>寻找高速元件、采用层次结构、调整主存的结构（单体多字系统（先取多条指令，再一条一条送至CPU执行）、多体并行系统（多体模块组成的寄存器，并行工作）、高性能存储芯片）</p>
</li>
<li><p>高速缓冲存储器：（时间和空间局限性导致出现）</p>
</li>
</ol>
<p>   （1）命中：主存块已调入缓存块，建立对应关系。</p>
<p>   &emsp;&emsp;未命中：为建立对应关系。</p>
<p>   （2）Cache的容量和块长是影响Cache效率的重要因素。</p>
<p>   （3）Cache的组成：</p>
<p>   &emsp;&emsp;Cache存储体、地址映射变换机构、替换机构、Cache的读写操作（写：写直达法、写回法）</p>
<p>   （4）Cache的改进：多级缓存（片内缓存、片外缓存）、统一缓存（数据和指令都在一起）和分立缓存（数据和指令分别存放）</p>
<p>   （5）Cache—主存地址映射</p>
<p>   &emsp;&emsp;地址映射：主存地址映射到Cache地址；</p>
<p>   &emsp;&emsp;地址映射方式：直接映射（固定）、全相联映射（灵活性大）、组相联映射（折中）</p>
<table>
<thead>
<tr>
<th>直接映射</th>
<th>全相联映射</th>
<th>组相联映射</th>
</tr>
</thead>
<tbody><tr>
<td>每个主存块只与一个缓存块相对应。</td>
<td>主存中每一字块映射到Cache中的任意位置。</td>
<td>主存的某一字块可以按模映射到Cache的任一字块中。</td>
</tr>
<tr>
<td>实现简单，直接可判断字块是否在缓存中</td>
<td>逻辑复杂、成本高</td>
<td>介于前两者之间</td>
</tr>
</tbody></table>
<p>   （6）替换策略：</p>
<p>   &emsp;&emsp;先进先出FIFO、近期最少使用LRU、随机法</p>
<p>   （7）辅助存储器（外存）：</p>
<p>   &emsp;&emsp;特点：容量大、速度慢、价格低、可脱机保存信息。</p>
<p>   &emsp;&emsp;光&#x2F;磁盘：记录密度（道密度、位密度、线密度）、存储容量、平均寻址时间、数据传输率、误码率</p>
<h3 id="四、输入输出系统"><a href="#四、输入输出系统" class="headerlink" title="四、输入输出系统"></a>四、输入输出系统</h3><ol>
<li><p>IO设备与主机的传送方式：</p>
<p>并行和串行</p>
</li>
<li><p>IO设备与主机的联络方式：</p>
<p>立即响应方式、异步工作采用应答信号联系。</p>
</li>
<li><p>IO设备与主机的连接方式：</p>
<p>辐射式、总线式</p>
</li>
<li><p>IO接口：</p>
<p>设置接口的原因：一台机器常配备多台IO设备、IO设备种类繁多，速度不一、IO设备传送方式不同、IO设备电平不同、CPU向IO设备发送各种控制信号、IO设备的状态需要及时向CPU汇报。</p>
</li>
<li><p>IO中断：</p>
<p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p>
</li>
<li><p>DMA技术：</p>
<p>主存和设备交换信息时，无需 CPU 干预。省去了保护现场和恢复现场。</p>
<table>
<thead>
<tr>
<th></th>
<th>程序中断</th>
<th>DMA</th>
</tr>
</thead>
<tbody><tr>
<td>数据传送依靠</td>
<td>程序</td>
<td>硬件</td>
</tr>
<tr>
<td>CPU响应时间</td>
<td>一条指令执行结束时响应</td>
<td>指令周期内的任一存取周期结束时响应</td>
</tr>
<tr>
<td>处理异常事件的能力</td>
<td>有处理异常事件的能力</td>
<td>无</td>
</tr>
<tr>
<td>是否需要保护现场</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>优先级</td>
<td>低</td>
<td>高</td>
</tr>
</tbody></table>
<p>DMA接口的类型：</p>
<p>选择性DMA接口、多路型DMA接口</p>
</li>
</ol>
<h3 id="五、计算机的运算（正数的原码、反码、补码都一致）"><a href="#五、计算机的运算（正数的原码、反码、补码都一致）" class="headerlink" title="五、计算机的运算（正数的原码、反码、补码都一致）"></a>五、计算机的运算（<strong>正数的原码、反码、补码都一致</strong>）</h3><ol>
<li><p>符号：0正1负</p>
</li>
<li><p>原码：带符号的绝对值表示</p>
<p>例：</p>
<p>（1）x&#x3D;+1100，x原&#x3D;0，1100</p>
<p>&emsp;&emsp;x&#x3D;-1100，x原&#x3D;1，1100</p>
<p>&emsp;&emsp;x&#x3D;0.1101，x原&#x3D;0.1101</p>
<p>&emsp;&emsp;x&#x3D;-0.1101，x原&#x3D;1-（-0.1101）&#x3D;1.1101</p>
<p>（2）x&#x3D;+0，x原&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x原&#x3D;1.0000</p>
<p>&emsp;&emsp;<strong>所以0的原码有两种表示方式，</strong></p>
</li>
<li><p>补码：<strong>负数的补码等于反码+1</strong>。</p>
<p>正数相对于模的补数就是模本身。</p>
<p>（1）例：+7≡-7</p>
<p>&emsp;&emsp;&emsp;-3≡+7（mod10）</p>
<p>（2）补码详解：</p>
<p>&emsp;&emsp;例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;+1010，x补&#x3D;0，1010</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，x补&#x3D;2^(n+1)+x&#x3D;100000-1101&#x3D;1，0011</p>
<p><font color="red"><strong>快捷方式：在原码的基础上，符号位不变，其余各位取反，最后+1；</strong></font></p>
<p>或者说，在原码的基础上，符号位不变，数值位从右向左找第一个1，1右边的不变，1左面的取反。</p>
<p>（1）例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p>
<p>&emsp;&emsp;&emsp;①x原&#x3D;1，1101</p>
<p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1，0010</p>
<p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1，0011</p>
<p>（2）x&#x3D;-0.0110</p>
<p>&emsp;&emsp;&emsp;①x原&#x3D;1.0110</p>
<p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1.1001</p>
<p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1.1010（进了一位1+1&#x3D;0）</p>
<p>（3）x&#x3D;+0，x补&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x补&#x3D;0.0000</p>
<p>&emsp;&emsp;<strong>所以0的补码有一种表示方式，</strong></p>
</li>
<li><p>反码：</p>
<p>在原码的基础上，符号位不变，其余各位取反即可。</p>
<p>（1）例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p>
<p>&emsp;&emsp;&emsp;x原&#x3D;1，1101</p>
<p>&emsp;&emsp;&emsp;x反&#x3D;1，0010</p>
<p>（2）再例：</p>
<p>&emsp;&emsp;&emsp;x&#x3D;-0.0110</p>
<p>&emsp;&emsp;&emsp;x原&#x3D;1.0110</p>
<p>&emsp;&emsp;&emsp;x反&#x3D;1.1001</p>
<p>（3）x&#x3D;+0，x反&#x3D;0.0000</p>
<p>&emsp;&emsp;x&#x3D;-0，x反&#x3D;1.1111</p>
<p>&emsp;&emsp;<strong>所以0的反码有两种表示方式，</strong></p>
</li>
<li><p>移码：</p>
<p>补码的符号位从0变为1，或者从1变为0，即得到移码</p>
<p>如：</p>
<p>x&#x3D;-10101</p>
<p>x原&#x3D;1，10101</p>
<p>x补&#x3D;1，01010+1&#x3D;1，01011</p>
<p>x移&#x3D;0，01011</p>
<p><strong>所以0的移码有一种表示方式，</strong></p>
</li>
<li><p>数的定点表示和浮点表示</p>
<p>定点溢出（数符+数值），浮点阶码（阶码+数值+数符+尾数值）</p>
</li>
<li><p>定点运算</p>
<p>移位运算、加减运算、乘法运算、除法运算</p>
</li>
<li><p>浮点运算</p>
<p>加减运算、乘除运算、</p>
</li>
</ol>
<h3 id="六、指令系统"><a href="#六、指令系统" class="headerlink" title="六、指令系统"></a>六、指令系统</h3><ol>
<li><p>格式：操作码OP字段（固定或变化）+地址码字段（该指令的源地址、结果地址、下一条指令地址）</p>
<p>地址码字段：四地址、三地址、二地址、一地址指令。</p>
</li>
<li><p>指令字长：</p>
<p>取决于操作码的长度、操作数地址的长度、操作数地址的个数。</p>
</li>
<li><p>操作数类型：</p>
<p>地址、数字、字符、逻辑数据</p>
</li>
<li><p>存放方式：</p>
<p>对准边界、不对准边界</p>
</li>
<li><p>操作类型：</p>
<p>数据传送、算术逻辑操作、移位、转移、输入输出、其他</p>
</li>
<li><p>寻址方式：</p>
<p>指令寻址（顺序寻址、跳跃寻址）、数据寻址（立即寻址、直接<del>、隐含</del>、寄存器<del>、间接</del>、寄存器间接<del>、基址</del>、变址<del>、相对</del>）</p>
</li>
<li><p>RISC，精简指令系统计算机，目的就是继承、简化指令，提升效率和正确性</p>
<p>CISC，复杂指令系统计算机</p>
<table>
<thead>
<tr>
<th></th>
<th>RISC</th>
<th>CISC</th>
</tr>
</thead>
<tbody><tr>
<td>指令复杂程度</td>
<td>简单</td>
<td>复杂</td>
</tr>
<tr>
<td>指令字长是否固定</td>
<td>固定</td>
<td>不固定</td>
</tr>
<tr>
<td>指令格式种类</td>
<td>少</td>
<td>多</td>
</tr>
<tr>
<td>寻址方式</td>
<td>少</td>
<td>多</td>
</tr>
<tr>
<td>CPU设有寄存器</td>
<td>多个</td>
<td>专用</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="七、CPU结构和功能"><a href="#七、CPU结构和功能" class="headerlink" title="七、CPU结构和功能"></a>七、CPU结构和功能</h3><ol>
<li><p>CPU组成部分：</p>
<p>寄存器、终端系统、运算ALU、指令控制部件CU</p>
</li>
<li><p>寄存器类型：</p>
<p>通用、数据、地址、条件码</p>
</li>
<li><p>指令周期：</p>
<p>CPU去除并执行一条指令所需的全部时间</p>
<p>没有固定值，因为不同指令的指令周期长度不同</p>
<p>取指周期：取指、分析</p>
<p>执行周期：执行阶段完成执行</p>
<p>CPU工作顺序：取指——&gt;执行——&gt;再取指——&gt;再执行</p>
</li>
<li><p>指令流水：</p>
<p>目的：提高访存速度、提高IO设备与主机交换信息的速度、提高运算速度、提高处理机速度</p>
<p>性能：吞吐率、加速比、效率、</p>
<p>流水线的多发技术：超标量技术、超流水线技术</p>
<p>流水线结构：指令流水线结构、运算流水线</p>
</li>
<li><p>中断系统：</p>
<p>CPU和IO设备的交互导致，</p>
<p>中断请求标记、中断判优逻辑（硬件和软件实现）<br>中断响应：</p>
<p>保护现场：保护程序断点、保护CPU内部各寄存器内部的现场</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;程序断点的现场由中断隐指令完成，寄存器内的现场可在中断服务程序中由用户(或系统)用机器指令编程完成。</p>
<p>恢复现场：寄存器的内容恢复到中断处理前的状态。</p>
<p>中断屏蔽技术：屏蔽触发器与屏蔽字、屏蔽技术可改变优先等级</p>
</li>
</ol>
<h4 id="八、控制单元"><a href="#八、控制单元" class="headerlink" title="八、控制单元"></a>八、控制单元</h4><ol>
<li><p>微操作命令</p>
<p>取指周期、间址周期、执行周期、中断周期</p>
</li>
<li><p>控制单元</p>
<p>将一个机器周期分为若干个时间相等的时间段（节拍、状态、时钟周期）</p>
</li>
<li><p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p>
<p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p>
<p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p>
<p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p>
</li>
<li><p>微指令的编码格式：</p>
<p>直接编码方式、字段直接编码方式、字段间接编码方式、混合编码、其他</p>
</li>
</ol>
<h3 id="九、例题："><a href="#九、例题：" class="headerlink" title="九、例题："></a>九、例题：</h3><ol>
<li><p>指令周期、机器周期、时钟周期的概念及三者之间的关系</p>
<p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p>
<p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p>
<p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p>
<p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p>
</li>
<li><p>什么是指令周期？指令周期是否有一个固定值？为什么？</p>
<p>CPU去除并执行一条指令所需的全部时间</p>
<p>没有固定值，因为不同指令的指令周期长度不同</p>
</li>
<li><p>什么是中断设计，设计中断系统时要考虑哪些主要问题？</p>
<p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p>
<p>设计中断系统需解决的问题：</p>
<p>(1) 各中断源如何向CPU提出中断请求</p>
<p>(2) 当对个中断源同时提出中断请求时，中断系统如何确定优先响应哪个中断源的请求  </p>
<p>(3)CPU在什么条件、什么时候、以什么方式来响应中断</p>
<p>(4)CPU响应中断后如何保护现场</p>
<p>(5)CPU响应中断后，如何停止原程序的执行而转入中断服务程序的入口地址</p>
<p>(6)中断处理结束后，CPU如何恢复现场，如何返回到原程序的间断处。</p>
<p>(7)在中断处理过程中又出现了新的中断请求，CPU该如何处理。</p>
</li>
<li><p>指令流水线和运算流水线在结构上有何共同之处？</p>
<p>指令流水线和运算流水线的共同点是由于相邻两段在执行不同的操作，因此在相邻两段之间必须设置锁存器或寄存器，以保证在一个周期内流水线的输出信号不便。</p>
</li>
<li><p>什么是RISC？简述它的主要特点。</p>
<p>RISC即是精简指令集计算机。特点：</p>
<p>（1）选取使用频度高的简单指令</p>
<p>（2）指令长度固定、格式少、寻址方式少</p>
<p>（3）只有存数取数指令访存，其它指令不访存</p>
<p>（4）CPU内有多个通用寄存器</p>
<p>（5）采用流水线技术，大部分指令一个时钟完成</p>
<p>（6）控制器采用组合逻辑实现</p>
<p>（7）采用优化的编译程序</p>
</li>
<li><p>试比较RISC和CISC。</p>
<p>（1）RISC更能充分利用VLSI芯片的面积</p>
<p>（2）RISC更能提高计算及运行速度，指令数、指令格式、寻址方式少，通用寄存器多，采用组合逻辑，便于指令流水</p>
<p>（3）RISC便于设计，可减低成本，提高可靠性</p>
<p>（4）RISC有利于编译程序代码优化</p>
<p>（5）RISC不易实现指令系统兼容</p>
</li>
<li><p>什么叫刷新？为什么要刷新？说明刷新有几种方法。</p>
<p>刷新 —— 对 DRAM 定期进行的全部重写过程；</p>
<p>刷新原因 —— 因电容泄漏而引起的 DRAM 所存信息的衰减需要及时补充，因此安排了定期刷新操作；</p>
<p>常用的刷新方法有三种 —— 集中式、分散式、异步式。</p>
<p>集中式：在最大刷新间隔时间内，集中安排一段时间进行刷新；</p>
<p>分散式：在每个读 &#x2F; 写周期之后插入一个刷新周期，无 CPU 访存死时间；</p>
<p>异步式：是集中式和分散式的折衷</p>
</li>
<li><p>计算机中设置 Cache 的作用是什么？能不能把 Cache 的容量扩大，最后取代主存，为什么？</p>
<p>计算机中设置 Cache 主要是为了加速 CPU 访存速度；</p>
<p>不能把 Cache 的容量扩大到最后取代主存，价格以及体积原因不适合。</p>
</li>
<li><p>Cache 做在 CPU 芯片内有什么好处？将指令 Cache 和数据 Cache 分开又有什么好处？</p>
<p>可提高外部总线的利用率、可提高存取速度</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol>
<li><h4 id="TCP-IP五层协议"><a href="#TCP-IP五层协议" class="headerlink" title="TCP&#x2F;IP五层协议"></a>TCP&#x2F;IP五层协议</h4><table>
<thead>
<tr>
<th>层</th>
<th>内容</th>
<th>作用</th>
<th>协议</th>
<th>设备</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>报文：消息、数据传输的基本单位</td>
<td>提供网络服务的接口</td>
<td>文件传输FTP、域名服务DNS、超文本传输HTTP、SMTP邮件传输</td>
<td>网关</td>
</tr>
<tr>
<td>传输层</td>
<td>数据段：信息传递的协议数据单元</td>
<td>将上层数据分段并提供端到端的传输、差错控制和流量控制。</td>
<td>TCP面向连接、UDP</td>
<td>进程、端口</td>
</tr>
<tr>
<td>网络层</td>
<td>数据包&#x2F;分组</td>
<td>将网络地址翻译为物理地址，将数据从发送方路由到接收方。子网间的数据报进行路由选择，拥塞控制、网际互通。</td>
<td>IP、ARP地址解析、RARP反向地址转换、ICMP控制报文、IGMP组播</td>
<td>路由器、防火墙</td>
</tr>
<tr>
<td>数据链路层</td>
<td>帧（该层的传输单位）&#x3D;首+数据报+尾<br />星型拓扑</td>
<td>物理地址寻址、数据的成帧、流量控制、数据检错、重发等。</td>
<td>以太网协议、PPP点对点、CSMA&#x2F;CD载波监听和碰撞检测、ARQ纠错</td>
<td>网桥、网卡、交换机</td>
</tr>
<tr>
<td>物理层</td>
<td>比特流</td>
<td>物理媒体</td>
<td></td>
<td>中继器（放大信号）、集线器、网线、调制解调器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://bbs.huaweicloud.com/blogs/378087">链接</a></p>
<span id="more"></span>

<ol start="2">
<li><h4 id="IP地址："><a href="#IP地址：" class="headerlink" title="IP地址："></a>IP地址：</h4><h5 id="（1）传统"><a href="#（1）传统" class="headerlink" title="（1）传统"></a>（1）传统</h5><table>
<thead>
<tr>
<th>传统IP(32位)</th>
<th>Net-id</th>
<th>Host-id</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址</td>
<td>网络号</td>
<td>主机号</td>
</tr>
<tr>
<td>A类</td>
<td>0.（8位）</td>
<td>0.0.0（24位）</td>
</tr>
<tr>
<td>B类</td>
<td>0.0（16位）</td>
<td>0.0（16位）</td>
</tr>
<tr>
<td>C类</td>
<td>0.0.0（24位）</td>
<td>0（8位）</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>分类</th>
<th></th>
<th>补充</th>
<th>默认子网掩码</th>
</tr>
</thead>
<tbody><tr>
<td>A类</td>
<td>0.0.0.0~127.255.255.255</td>
<td>0.0.0.0(寻找自己的IP)和127.0.0.1(回环地址即本机地址，用于对本机的测试)一般不作为A类地址</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>B类</td>
<td>128.0.0.0~191.255.255.255</td>
<td></td>
<td>255.255.0.0</td>
</tr>
<tr>
<td>C类</td>
<td>192.0.0.0~223.255.255.255</td>
<td></td>
<td>255.255.255.0</td>
</tr>
<tr>
<td>D类</td>
<td>224.0.0.0~239.255.255.255</td>
<td>多播&#x2F;组播地址：（一对多）供特殊协议使用</td>
<td></td>
</tr>
<tr>
<td>E类</td>
<td>240.0.0.0~255.255.255.255</td>
<td>保留地址：供以后使用</td>
<td></td>
</tr>
</tbody></table>
<h5 id="（2）-VLSM-CIDR下"><a href="#（2）-VLSM-CIDR下" class="headerlink" title="（2）(VLSM&#x2F;CIDR下)"></a>（2）(VLSM&#x2F;CIDR下)</h5><table>
<thead>
<tr>
<th>新IP(32位)(VLSM(借主机号作为网络号)&#x2F;CIDR下)</th>
<th>Net-id</th>
<th>Subnet-id</th>
<th>Host-id</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址</td>
<td>网络号</td>
<td>子网号</td>
<td>主机号</td>
</tr>
<tr>
<td></td>
<td>新网络号</td>
<td>新网络号</td>
<td>主机号</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td>IP地址（常用）</td>
<td>网络部分</td>
<td>主机部分</td>
</tr>
<tr>
<td>广播地址</td>
<td>主机部分</td>
<td>网络部分</td>
</tr>
</tbody></table>
<p>例：（VLSM&#x2F;CIDR下）172.31.128.255&#x2F;18</p>
<p>18为子网掩码，表示32位中高18位是1，其他位为0</p>
<p>IP地址：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.11111111</strong>  </p>
<p>子网掩码二进制形式：11111111.11111111.11<strong>000000.00000000</strong></p>
<p>子网掩码十进制形式：&emsp;&emsp;255.&emsp;&emsp;255.&emsp;&emsp;&emsp;192.&emsp;&emsp;&emsp;0</p>
<p>网络号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.00000000</strong></p>
<p>子网掩码反码：&emsp;&emsp;&emsp;00000000.00000000.00111111.11111111</p>
<p>主机号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;00000000.00000000.00000000.11111111</p>
<p>‘与(&amp;)’运算：1&amp;1&#x3D;1，1&amp;0&#x3D;0，0&amp;1&#x3D;0，0&amp;0&#x3D;0；</p>
<p>IP地址与子网掩码‘与(&amp;)’运算得网络号；</p>
<p>IP地址与子网掩码反码‘与(&amp;)’运算得主机号；</p>
<p>广播地址：&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>111111.11111111</strong></p>
<p>广播地址就是在网络号的基础上，将网络号右边表示IP地址的主机部分(字体加粗)的二进制全部改为1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"><a href="#子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。" class="headerlink" title="子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"></a>子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。</h4><p>（1）当子网掩码不默认时，网络地址≠网络号</p>
<p>&emsp;&emsp;如：172.16.10.2（B类）</p>
<p>&emsp;&emsp;&emsp;此时子网掩码为：255.255.255.0，进行‘与’运算</p>
<p>&emsp;&emsp;&emsp;此时网络地址为：172.16.10.0</p>
<p>&emsp;&emsp;&emsp;而默认子网掩码为：255.255.0.0，得到网络号为：172.16.0.0 </p>
<p>&emsp;&emsp;&emsp;网络地址≠网络号</p>
<p>（2）子网掩码默认时，网络地址＝网络号</p>
<p>&emsp;&emsp;如：172.16.10.2</p>
<p>&emsp;&emsp;&emsp;默认子网掩码为255.255.0.0，进行‘与’运算</p>
<p>&emsp;&emsp;&emsp;此时网络地址为：172.16.0.0</p>
<p>&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p>
<p>（3）在无子网划分场景下，网络地址&#x3D;网络号；（传统子网号）</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p>
<p>&emsp;&emsp;在子网划分场景下，网络地址是网络号的扩展；（VLSM&#x2F;CIDR下）</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p>
<p>&emsp;&emsp;&emsp;&emsp;网络地址≠网络号</p>
</li>
<li><h4 id="划分子网：（VLSM-CIDR下）"><a href="#划分子网：（VLSM-CIDR下）" class="headerlink" title="划分子网：（VLSM&#x2F;CIDR下）"></a>划分子网：（VLSM&#x2F;CIDR下）</h4><p>（1）根据主机号中子网掩码借默认的子网掩码的位数n&#x3D;&gt;<strong>2^n为子网数</strong></p>
<p>&emsp;例：C类IP192.168.1.113</p>
<p>&emsp;&emsp;&emsp;默认子网掩码：255.255.255.0</p>
<p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>00</strong>000000</p>
<p>&emsp;&emsp;&emsp;现有子网掩码：255.255.255.192</p>
<p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>11</strong>000000</p>
<p>&emsp;&emsp;&emsp;网络号借了主机号<strong>两位</strong>，即<strong>子网号为11</strong>，则原IP可以被划分为2^2&#x3D;4个子网；</p>
<p>&emsp;&emsp;&emsp;&emsp;4个子网为：—.—.—.00000000&emsp;即255.255.255.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01000000&emsp;即255.255.255.64</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10000000&emsp;即255.255.255.128</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.11000000&emsp;即255.255.255.192</p>
<p>&emsp;&emsp;&emsp;&emsp;得网络地址为：192.168.1.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.64</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.128</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.192</p>
<p>&emsp;&emsp;&emsp;&emsp;广播地址为：—.—.—.11111111&emsp;即255.255.255.255</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10111111&emsp;即255.255.255.191</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01111111&emsp;即255.255.255.127</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.00111111&emsp;即255.255.255.63</p>
<p>&emsp;&emsp;&emsp;&emsp;得广播地址为：192.168.1.255</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.191</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.127</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.63</p>
<p>&emsp;&emsp;&emsp;&emsp;去除网络地址和广播地址即可用主机IP地址：</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.1  ——&gt; 192.168.1.62</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.65——-&gt; 192.168.1.126  </p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.129——&gt; 192.168.1.190</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.193——&gt; 192.168.1.254</p>
<p>&emsp;&emsp;划分子网过程：</p>
<p>&emsp;&emsp;&emsp;①根据IP分类和默认掩码得到子网号和划分子网个数；</p>
<p>&emsp;&emsp;&emsp;②根据划分区域推出子网，在转十进制；</p>
<p>&emsp;&emsp;&emsp;③组合原IP和子网。</p>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41207757/article/details/107839099">链接</a></p>
<p>（2）根据IP地址和子网掩码计算主机数：</p>
<p>&emsp;例：子网掩码为：255.255.255.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.11111111.<strong>00000000</strong></p>
<p>&emsp;&emsp;则有2^8-2&#x3D;254台主机（去除0.0.0.0和127.0.0.1）</p>
<p>&emsp;再例：255.255.240.0</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.1111<strong>0000.00000000</strong></p>
<p>&emsp;&emsp;则有2^12-2&#x3D;4094台</p>
</li>
<li><h4 id="TCP协议："><a href="#TCP协议：" class="headerlink" title="TCP协议："></a>TCP协议：</h4><h5 id="（1）三次握手，四次挥手"><a href="#（1）三次握手，四次挥手" class="headerlink" title="（1）三次握手，四次挥手"></a>（1）三次握手，四次挥手</h5><p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p>
<p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="TCP四次挥手"></p>
<p>&emsp;参考: <a href="https://blog.csdn.net/m0_56649557/article/details/119492899">链接</a></p>
<h5 id="（2）TCP协议与UDP协议区别："><a href="#（2）TCP协议与UDP协议区别：" class="headerlink" title="（2）TCP协议与UDP协议区别："></a>（2）TCP协议与UDP协议区别：</h5><table>
<thead>
<tr>
<th></th>
<th>连接性</th>
<th>可靠性</th>
<th>流量控制</th>
<th>开销</th>
<th>拥塞控制</th>
<th>数据传输顺序</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>TCP</td>
<td>面向连接</td>
<td>可靠</td>
<td>高延迟流</td>
<td>高</td>
<td>拥塞控制</td>
<td>保证数据包顺序到达</td>
<td>文件传输、电子邮件、远程登录</td>
</tr>
<tr>
<td>UDP</td>
<td>无连接性</td>
<td>不可靠</td>
<td>低延迟</td>
<td>低</td>
<td>数据报分组</td>
<td>不保证数据包顺序到达</td>
<td>视频流、在线游戏</td>
</tr>
</tbody></table>
<p>参考: <a href="https://developer.aliyun.com/article/1632460">链接</a></p>
</li>
<li><h4 id="RIP协议："><a href="#RIP协议：" class="headerlink" title="RIP协议："></a>RIP协议：</h4><p>A的路由器表：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
<th>下一跳</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>4</td>
<td>B</td>
</tr>
<tr>
<td>N2</td>
<td>2</td>
<td>C</td>
</tr>
<tr>
<td>N3</td>
<td>1</td>
<td>F</td>
</tr>
<tr>
<td>N4</td>
<td>5</td>
<td>G</td>
</tr>
</tbody></table>
<p>现A收到来自C的路由信息：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>2</td>
</tr>
<tr>
<td>N2</td>
<td>1</td>
</tr>
<tr>
<td>N3</td>
<td>3</td>
</tr>
<tr>
<td>N4</td>
<td>7</td>
</tr>
<tr>
<td>N5</td>
<td>10</td>
</tr>
</tbody></table>
<p>更新A的路由器表：</p>
<table>
<thead>
<tr>
<th>目的</th>
<th>距离</th>
<th>下一条</th>
<th>理由</th>
</tr>
</thead>
<tbody><tr>
<td>N1</td>
<td>2+1&#x3D;3</td>
<td>C</td>
<td>不同的下一条，收到的表距离更短，更新</td>
</tr>
<tr>
<td>N2</td>
<td>1+1&#x3D;2</td>
<td>C</td>
<td>相同的下一条，更新</td>
</tr>
<tr>
<td>N3</td>
<td>1</td>
<td>F</td>
<td>不同的下一条，收到的表距离更长，不变</td>
</tr>
<tr>
<td>N4</td>
<td>5</td>
<td>G</td>
<td>不同的下一条，收到的表距离更长，不变</td>
</tr>
<tr>
<td>N5</td>
<td>10+1&#x3D;11</td>
<td>C</td>
<td>新的下一条，更新</td>
</tr>
</tbody></table>
</li>
</ol>
<p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41904773/article/details/107103092">链接</a></p>
<h3 id="二、补充："><a href="#二、补充：" class="headerlink" title="二、补充："></a>二、补充：</h3><ol>
<li><p>计算机网络由若干结点和连接这些节点的链路组成。</p>
</li>
<li><p>1983年互联网诞生。</p>
</li>
<li><p>发展：单个网络ARPANET——&gt;三级结构互联网——&gt;多层次ISP结构互联网。</p>
</li>
<li><p>网络通信方式：C&#x2F;S和P2P。</p>
</li>
<li><p>网络核心部分其特殊作用的是路由器（实现分组交换）。</p>
</li>
<li><p>分组交换特点：</p>
<p>①采用存储转发技术</p>
<p>②报文-细分-&gt;数据段</p>
<p>③（包）分组&#x3D;数据段+首部（目的地址和源地址）</p>
<p>④优点：高效、灵活、迅速、可靠</p>
</li>
<li><p>电路交换：源——&gt;终</p>
<p>报文交换：起——&gt;相邻点——&gt;相邻点——&gt;……——&gt;终点</p>
<p>分组交换：类似于报文交换（分组比报文更小）</p>
</li>
<li><p>分类：</p>
<table>
<thead>
<tr>
<th>按作用</th>
<th>按使用者</th>
</tr>
</thead>
<tbody><tr>
<td>广域网WAN</td>
<td>公用网</td>
</tr>
<tr>
<td>城域网MAN</td>
<td>专用网</td>
</tr>
<tr>
<td>局域网LAN</td>
<td></td>
</tr>
<tr>
<td>个人局域网PAN</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>性能：</p>
<p>（1）速率：比特bit&#x2F;s</p>
<p>（2）带宽：赫</p>
<p>（3）吞吐量</p>
<p>（4）时延：发送时延、传播<del>、处理</del>、排队~</p>
<p>（5）时延带宽积</p>
<p>（6）往返时间RTT</p>
<p>（7）利用率</p>
</li>
<li><p>网络体系：</p>
<p>（1）OSI模型（7层）、TCP&#x2F;IP协议（4层）</p>
<p>（2）体系结构：计算机网络的各层及其协议的集合</p>
</li>
<li><p>物理层：</p>
<p>（1）信道</p>
<p>（2）媒介：双绞线——&gt;屏蔽双绞线STP、无屏蔽双绞线OTP</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;同轴电缆：有线电视</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;光缆、光纤</p>
<p>（3）信道复用技术：允许用户使用一个共享信道进行通信，降低成本，提高利用率；</p>
<p>（4）宽带接入技术：用户要连接到互联网，必须先连接到某个ISP。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据链路层：</p>
<p>（1）点对点信道（CSMA&#x2F;CD）</p>
<p>&emsp;&emsp;&emsp;接受网络层IP数据报、添加首尾部、封装成帧、发送到另一结点或上交（有检错过程）</p>
<p>&emsp;&emsp;&emsp;封装成帧、透明传输、差错检测。</p>
<p>&emsp;&emsp;&emsp;可采用转义字符ESC解决丢失问题。</p>
<p>（2）广播信道（PPP）</p>
<p>&emsp;&emsp;&emsp; ①全双工、</p>
<p>&emsp;&emsp;&emsp; ②简单、封装成帧、透明性、多种网络层协议、多种类型链路、差错检测、检测连接状态、最大传递单元、网络层地址协商、数据压缩协商。</p>
<p>&emsp;&emsp;&emsp;③用户——&gt;PPP协议——&gt;ISP——&gt;互联网</p>
<p>&emsp;&emsp;&emsp;④用户拨号——&gt;ISP——&gt;LCP——&gt;NCP——&gt;得到IP地址</p>
<p>&emsp;&emsp;&emsp;封装IP数据报到串行链路，测试、建立、配置数据链路连接的LCP，网络控制协议NCP</p>
<p>（3）封装成帧（首尾）</p>
<p>（4）广播信道的数据链路层：</p>
<p>&emsp;&emsp;&emsp;星形网、环形网、总线网；</p>
<p>&emsp;&emsp;&emsp;采用集线器的星形拓扑：双绞线；</p>
<p>&emsp;&emsp;&emsp;以太网的MAC层：硬件地址又称为物理地址或MAC地址；</p>
<p>&emsp;&emsp;&emsp;MAC帧：单播帧、广播帧、多播帧。</p>
<p>（5）集线器：所有站点共享总带宽，属于冲突域，同一时间只能与一个站点传输数据，带宽按站点数平均分配；</p>
<p>&emsp;&emsp;&emsp;交换机：每个站口独立带宽，支持全双工通信，站点间并行传输数据，每个站点的带宽等于端口速率。</p>
<p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%9B%86%E7%BA%BF%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png"></p>
<p>例：有10个站连接到以太网上，试计算三种情况下每个站所能得到的带宽。</p>
<p>&emsp; ①10个站都连接到一个10Mb&#x2F;s以太网集线器：1Mb&#x2F;s</p>
<p>&emsp; ②10个站都连接到一个100Mb&#x2F;s以太网集线器：10Mb&#x2F;s</p>
<p>&emsp; ③10个站都连接到一个10Mb&#x2F;s以太网交换机：10Mb&#x2F;s</p>
</li>
<li><p>网络层：</p>
<p>（1）数据链路层看不到封装后的IP地址；</p>
<p>&emsp;&emsp;IP地址的源和目的始终不变（被封装了，变不了）<br>&emsp;&emsp;MAC帧中的则要变化（负责带IP一层一层跑）</p>
</li>
<li><p>应用层</p>
<p>mail.cctv.com</p>
<table>
<thead>
<tr>
<th>mail.</th>
<th>cctv.</th>
<th>com</th>
</tr>
</thead>
<tbody><tr>
<td>三级域名</td>
<td>二级域名</td>
<td>顶级域名</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>路线</title>
    <url>/blog2025.github.io/2025/05/28/%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="军工软件国产化开发学习路线（综合精简版）"><a href="#军工软件国产化开发学习路线（综合精简版）" class="headerlink" title="军工软件国产化开发学习路线（综合精简版）"></a>军工软件国产化开发学习路线（综合精简版）</h2><h4 id="一、基础能力建设（6-8个月）"><a href="#一、基础能力建设（6-8个月）" class="headerlink" title="一、基础能力建设（6-8个月）"></a>一、基础能力建设（6-8个月）</h4><p><strong>学习重点：</strong></p>
<ol>
<li><strong>核心开发能力</strong><ul>
<li>编程语言：C++（内存管理&#x2F;并行计算）、Python（脚本&#x2F;AI）、Java（企业级开发）</li>
<li>操作系统：<strong>OpenEuler</strong>容器化部署、**银河麒麟V10 SP3（桌面&#x2F;服务器版）**安全加固</li>
<li>数据库：<strong>达梦&#x2F;人大金仓</strong>的分布式架构与国密加密存储</li>
</ul>
</li>
<li><strong>军工理论基础</strong><ul>
<li>工业软件体系：CAE&#x2F;CAD&#x2F;MBSE技术原理及国产替代瓶颈</li>
<li>行业标准：GJB 5000B（软件成熟度模型）、GJB 438B（文档规范）</li>
<li>安全规范：等保3.0、SM2&#x2F;SM4国密算法实现</li>
</ul>
</li>
</ol>
<p><strong>实践任务：</strong></p>
<ul>
<li>完成国产操作系统（麒麟&#x2F;UOS）基础环境搭建</li>
<li>开发军工场景高并发通信模块（C++多线程+达梦数据库）</li>
<li>实现国密算法加密传输demo（Python+SM4）</li>
</ul>
<hr>
<h4 id="二、核心技术突破（8-12个月）"><a href="#二、核心技术突破（8-12个月）" class="headerlink" title="二、核心技术突破（8-12个月）"></a>二、核心技术突破（8-12个月）</h4><p><strong>学习重点：</strong></p>
<ol>
<li><strong>工具链深度掌握</strong><ul>
<li>CAE软件：英特仿真&#x2F;安世亚太多物理场耦合仿真</li>
<li>MBSE工具：安怀信Modeler系统建模与SysML验证</li>
<li>国产AI框架：昇思MindSpore&#x2F;PaddlePaddle军事场景优化</li>
</ul>
</li>
<li><strong>安全可信开发</strong><ul>
<li>双机热备&#x2F;故障注入测试</li>
<li>硬件级安全：TCM&#x2F;TPM芯片集成</li>
<li>静态代码审计（Klocwork）</li>
</ul>
</li>
</ol>
<p><strong>实践任务：</strong></p>
<ul>
<li>导弹弹道联合仿真项目（CAE+国产芯片适配）</li>
<li>开发装备故障预测系统（MindSpore LSTM模型）</li>
<li>完成GJB5000B标准下的需求追溯矩阵构建</li>
</ul>
<hr>
<h4 id="三、系统集成实战（12-18个月）"><a href="#三、系统集成实战（12-18个月）" class="headerlink" title="三、系统集成实战（12-18个月）"></a>三、系统集成实战（12-18个月）</h4><p><strong>学习重点：</strong></p>
<ol>
<li><strong>跨平台开发</strong><ul>
<li>毕昇编译器国产芯片代码移植（鲲鹏&#x2F;飞腾）</li>
<li>FPGA硬件在环测试（HIL）</li>
<li>云边协同架构（KubeEdge+OpenEuler）</li>
</ul>
</li>
<li><strong>系统工程方法</strong><ul>
<li>DoDAF&#x2F;MBSE体系架构设计</li>
<li>SAFe敏捷框架与UOS DevOps平台</li>
<li>六性设计（可靠性&#x2F;维修性&#x2F;保障性）</li>
</ul>
</li>
</ol>
<hr>
<h4 id="四、生态贡献与进阶（持续）"><a href="#四、生态贡献与进阶（持续）" class="headerlink" title="四、生态贡献与进阶（持续）"></a>四、生态贡献与进阶（持续）</h4><p><strong>重点方向：</strong></p>
<ol>
<li><strong>行业认证</strong><ul>
<li>军工软件安全开发工程师</li>
<li>CISP注册信息安全工程师</li>
<li>华为鲲鹏应用开发认证</li>
</ul>
</li>
<li><strong>生态建设</strong><ul>
<li>参与OpenEuler&#x2F;OpenHarmony社区贡献</li>
<li>发表国产化替代技术论文（核心期刊）</li>
<li>主导编写军工软件接口规范草案</li>
</ul>
</li>
</ol>
<h2 id="Word课程设置分析："><a href="#Word课程设置分析：" class="headerlink" title="Word课程设置分析："></a>Word课程设置分析：</h2><h3 id="一、专业基础课（8学分）"><a href="#一、专业基础课（8学分）" class="headerlink" title="一、专业基础课（8学分）"></a><strong>一、专业基础课（8学分）</strong></h3><p>这些课程是软件工程领域的核心理论基础，侧重培养学生的专业基本功和解决复杂问题的能力。</p>
<ol>
<li><strong>高级软件工程</strong><ul>
<li><strong>内容</strong>：软件生命周期管理（需求分析、设计、编码、测试、维护）、软件架构设计、敏捷开发方法、软件项目管理、质量保证（QA）与质量改进（QC）。</li>
<li><strong>目标</strong>：掌握大规模软件开发的系统化方法，提升团队协作和项目管理能力。</li>
</ul>
</li>
<li><strong>基础软件与开源系统</strong><ul>
<li><strong>内容</strong>：操作系统原理（Linux&#x2F;Unix）、数据库系统（SQL&#x2F;NoSQL）、中间件技术、开源框架（如Spring、Django）的原理与应用。</li>
<li><strong>目标</strong>：理解底层系统运作机制，熟悉主流开源工具的使用与二次开发。</li>
</ul>
</li>
<li><strong>软件分析与测试</strong><ul>
<li><strong>内容</strong>：静态代码分析、动态测试技术（单元测试、集成测试）、测试用例设计、缺陷跟踪与管理、自动化测试工具（Selenium、JMeter）。</li>
<li><strong>目标</strong>：掌握软件质量保障的核心方法，具备设计高效测试方案的能力。</li>
</ul>
</li>
<li><strong>软件安全（信息安全）</strong><ul>
<li><strong>内容</strong>：安全开发生命周期（SDL）、漏洞分析（缓冲区溢出、XSS）、加密算法（AES、RSA）、身份认证与访问控制、安全审计。</li>
<li><strong>目标</strong>：构建安全可靠的软件系统，防范网络攻击与数据泄露。</li>
</ul>
</li>
<li><strong>算法分析与复杂性理论</strong><ul>
<li><strong>内容</strong>：算法设计与分析（分治、动态规划、贪心）、计算复杂性分类（P&#x2F;NP问题）、近似算法、随机化算法。</li>
<li><strong>目标</strong>：培养学生解决复杂计算问题的能力，为优化算法和系统性能奠定基础。</li>
</ul>
</li>
<li><strong>SDN技术（网络体系结构）</strong><ul>
<li><strong>内容</strong>：软件定义网络（SDN）架构、OpenFlow协议、网络虚拟化、NFV（网络功能虚拟化）、SD-WAN应用。</li>
<li><strong>目标</strong>：掌握新型网络架构的设计与管理，适应云原生和分布式系统的需求。</li>
</ul>
</li>
<li><strong>图形图像处理技术</strong><ul>
<li><strong>内容</strong>：图像采集与预处理、特征提取（SIFT、HOG）、计算机视觉（OpenCV）、GPU加速计算、医学图像分析（DICOM标准）。</li>
<li><strong>目标</strong>：应用于游戏开发、医疗影像、安防监控等领域，处理图像与视频数据。</li>
</ul>
</li>
<li><strong>多元统计分析与模式识别</strong><ul>
<li><strong>内容</strong>：回归分析、聚类算法（K-means、DBSCAN）、主成分分析（PCA）、支持向量机（SVM）、贝叶斯分类。</li>
<li><strong>目标</strong>：通过数据分析挖掘数据规律，为决策支持和智能系统提供依据。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、专业选修课（按兴趣与方向选择）"><a href="#二、专业选修课（按兴趣与方向选择）" class="headerlink" title="二、专业选修课（按兴趣与方向选择）"></a><strong>二、专业选修课（按兴趣与方向选择）</strong></h3><p>这些课程聚焦软件工程的前沿技术与行业应用，学生可根据职业规划或研究方向选修。</p>
<ol>
<li><strong>软件工程学科前沿</strong><ul>
<li><strong>内容</strong>：探讨软件工程的最新趋势（如AI驱动开发、DevOps、微服务架构）、新兴技术挑战与解决方案。</li>
<li><strong>目标</strong>：拓宽学术视野，把握行业动态。</li>
</ul>
</li>
<li><strong>人工智能与大数据算法</strong><ul>
<li><strong>内容</strong>：深度学习基础（神经网络）、强化学习、大数据处理框架（Hadoop&#x2F;Spark）、推荐系统算法。</li>
<li><strong>目标</strong>：掌握AI与大数据技术的核心算法，适用于智能系统开发。</li>
</ul>
</li>
<li><strong>机器学习理论与方法</strong><ul>
<li><strong>内容</strong>：监督&#x2F;无监督学习、特征工程、模型评估与调优、迁移学习。</li>
<li><strong>目标</strong>：为智能化软件开发提供算法支持，如个性化推荐、异常检测等。</li>
</ul>
</li>
<li><strong>自然语言处理与文本挖掘</strong><ul>
<li><strong>内容</strong>：中文分词、情感分析、语义角色标注、BERT模型、文本分类与生成。</li>
<li><strong>目标</strong>：应用于智能客服、舆情分析、知识图谱构建等领域。</li>
</ul>
</li>
<li><strong>国产基础软件技术及应用</strong><ul>
<li><strong>内容</strong>：国产操作系统（鸿蒙&#x2F;UOS）、数据库（OceanBase）、中间件（东方通）的开发与适配技术。</li>
<li><strong>目标</strong>：支持国产化替代战略，服务国家信息安全需求。</li>
</ul>
</li>
<li><strong>军事医学图像智能算法与实战</strong><ul>
<li><strong>内容</strong>：医学影像分割（CT&#x2F;MRI）、病灶检测、三维重建、FPGA加速算法。</li>
<li><strong>目标</strong>：结合军工需求，开发医疗影像智能诊断系统。</li>
</ul>
</li>
<li><strong>最优化理论与方法</strong><ul>
<li><strong>内容</strong>：线性规划、凸优化、遗传算法、模拟退火算法。</li>
<li><strong>目标</strong>：解决资源调度、路径规划等实际优化问题。</li>
</ul>
</li>
<li><strong>深度学习主流框架与工程实践</strong><ul>
<li><strong>内容</strong>：TensorFlow&#x2F;PyTorch框架、模型部署（TensorRT）、自动化机器学习（AutoML）。</li>
<li><strong>目标</strong>：快速实现深度学习模型的工业级应用。</li>
</ul>
</li>
<li><strong>大语言模型技术与工程实践</strong><ul>
<li><strong>内容</strong>：LLM（如GPT-4）架构、Prompt Engineering、微调技术、大模型推理优化。</li>
<li><strong>目标</strong>：开发智能对话系统、知识助手等应用。</li>
</ul>
</li>
<li><strong>软件安全技术与工程实践</strong><ul>
<li><strong>内容</strong>：安全编码规范、渗透测试、漏洞修复、安全合规标准（如GDPR、等保2.0）。</li>
<li><strong>目标</strong>：强化软件安全防护能力，应对日益严峻的网络威胁。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>路线</category>
      </categories>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="一-软件危机"><a href="#一-软件危机" class="headerlink" title="一. 软件危机"></a>一. 软件危机</h3><ol>
<li>定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。<br>表现：<br>（1）开发成本和进度的估计不准确；（开发滞后）<br>（2）用户对开发的软件不满意；<br>（3）软件的质量靠不住；<br>（4）软件不可维护；（重复开发相同的软件）<br>（5）文档不完备；<br>（6）软件开发成本在计算机系统总成本中所占的比例逐年上升；<br>（7）软件开发生产率跟不上计算机应用的发展；（供不应求）<br>等等。</li>
<li>产生原因：<br>（1）软件本身的特点有关；（软件本身）<br>（2）软件开发与维护的方法不正确；（软件开发不匹配计算机发展）<br>（3）对用户要求没有完整准确的认识就匆忙着手编写程序；（开发人员）</li>
<li>消除方法：<br>（1）对计算机软件有一个正确的认识；（消除软件就是程序的错误）<br>软件定义：软件是程序，数据及相关文档的完整集合；<br>（2）软件开发不是某个体劳动的神秘技巧，而是一种团队配合的工程项目，必须吸收和借鉴人类长期以来积累的原理、概念、技术和方法，尤其是教训；<br>（3）推广实践中总结出来的经验、技术和方法，并研究新的；<br>（4）开发和使用更好的软件工具。 </li>
<li><font color="red">总结：技术措施（方法、工具），必要的组织管理措施。</font></li>
</ol>
<span id="more"></span>

<h3 id="二-软件工程"><a href="#二-软件工程" class="headerlink" title="二. 软件工程"></a>二. 软件工程</h3><ol>
<li><p>定义：指导计算机软件开发和维护的一门工程学科。</p>
</li>
<li><p>本质特征：<br>（1）关注于大型程序的构造；<br>（2）中心课题是控制复杂性；<br>（3）软件的效率非常重要；<br>（4）开发软件的效率非常重要；<br>（5）和谐地合作是开发软件的关键；<br>（6）软件必须有效地支持它的用户；<br>（7）一种文化背景的人替另一种文化背景的人创造产品；</p>
</li>
<li><p>基本原理：<br>（1）用分阶段的生命周期计划严格管理；<br>（2）坚持进行阶段评审；<br>（3）实行严格的产品控制；<br>（4）采用现代化程序设计技术；<br>（5）结果应清除审查；<br>（6）开发小组的人员少二精；<br>（7）承认不断改进软件工程实践的必要性；</p>
</li>
<li><p>软件工程方法学：<br>（1） 软件工程包含技术和管理两方面的内容：<br>（2） <font color="red">范型（方法学）</font>：在软件生命周期全过程中使用的一整套技术方法的集合；<br>&emsp;&emsp;包含三个要素： 方法、工具、过程；<br>&emsp;&emsp;常用——&gt;<font color="red">传统方法学和面向对象方法学</font><br>（3）传统方法学（<font color="red">生命周期方法学 &#x2F; 结构化范型</font>）（大部分采用瀑布模型）<br>&emsp;&emsp;面向行为或数据，两者权重不同；（行为和数据分离）<br>&emsp;&emsp;🟪-&gt;🟪-&gt;🟪-&gt;🟪（一个阶段一个阶段地顺序开发）</p>
<p>&emsp;&emsp;优点：软件生命周期划分为若干个阶段，每个阶段任务相对独立，而且简单，便于分工协作，降低开发困难程度。</p>
<p>&emsp;&emsp;缺点：软件规模较大时，或者软件需求随时间变化时，开发出的软件往往不成功，且维护困难。</p>
<p>（4）面向对象方法学：（规模庞大，需求模糊或不断变化）<br>&emsp;&emsp;数据和行为的权重一样大；<br>&emsp;&emsp;特点：<br>&emsp;&emsp;① 对象；（数据和行为的统一）object<br>&emsp;&emsp;② 对象——&gt;类；（数据和操作）class<br>&emsp;&emsp;③ 父类、子类、派生类；<br>&emsp;&emsp;④ 对象间仅能通过发送消息互相联系；<br>&emsp;&emsp;对象间的所有私有private信息都被封装在该对象内，不可从外界直接访问（<font color="red">封装性</font>）<br>&emsp;&emsp;最终产品是由许多较小的基本独立的对象组成。</p>
<p>&emsp;&emsp;优点：符合人类思维方法，各阶段使用方法具有高度的连续性，各个阶段有机集成，有利于系统的稳定。</p>
</li>
</ol>
<h3 id="三、软件生命周期"><a href="#三、软件生命周期" class="headerlink" title="三、软件生命周期"></a>三、软件生命周期</h3><p>​	组成：软件定义、软件开发、运行维护；</p>
<ol>
<li><p>软件定义（系统分析）：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>问题定义</td>
<td>问题是什么？</td>
</tr>
<tr>
<td>可行性研究</td>
<td>问题能否解决？</td>
</tr>
<tr>
<td>需求分析</td>
<td>解决问题需要做什么？</td>
</tr>
</tbody></table>
</li>
<li><p>软件开发：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>分类</th>
<th>细分</th>
<th>解决</th>
</tr>
</thead>
<tbody><tr>
<td>系统设计</td>
<td>总体设计</td>
<td>如何实现</td>
</tr>
<tr>
<td></td>
<td>详细设计</td>
<td>如何具体实现</td>
</tr>
<tr>
<td>系统实现</td>
<td>编码和单元测试</td>
<td></td>
</tr>
<tr>
<td></td>
<td>综合测试</td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li><p>软件维护：</p>
<p>改正性维护、适应性维护、完善性维护、预防性维护；</p>
</li>
</ol>
<p><font color="red">总结：系统分析——&gt;系统设计——&gt;系统实现——&gt;维护</font></p>
<h3 id="四、软件过程（采用生命周期模型）（过程模型）"><a href="#四、软件过程（采用生命周期模型）（过程模型）" class="headerlink" title="四、软件过程（采用生命周期模型）（过程模型）"></a>四、软件过程（采用生命周期模型）（过程模型）</h3><ol>
<li><p>目的：为了开发出客户需要的软件；（who,when,what,how）</p>
</li>
<li><p>生命周期模型：<br>（1）<font color="red">瀑布模型</font>：（每个阶段都有文档）<br>特点：<br>① 阶段间具有顺序性和依赖性；<br>② 推迟实现的观点；（越大的项目越需要早期的准备）<br>③ 质量保证的观点；（文档）<br>优点：强迫开发人员采用规范，维护比较容易；（文档驱动）<br>缺点：交付给用户之前，用户只能通过文档了解产品，最终导致产品与用户需求发生争执；（文档驱动）</p>
<p>适用于：用户需求清晰，且开发过程无变化；开发人员的熟练，用户的使用环境非常稳定；开发中用户参与要求很低。</p>
</li>
</ol>
<img src="瀑布模型.png" style="zoom: 80%;" />

<p>​		（2） 快速原型模型：</p>
<p>&emsp;&emsp;特点：先开发一个原型，后续根据用户要求快速修改原型。（线性）</p>
<p>&emsp;&emsp;本质：快速，节约开发成本。</p>
<p>&emsp;&emsp;应用：UNIX Shell和超文本</p>
<p>&emsp;&emsp;优点：容易适应需求变化；有利于开发与培训的同步；开发费用低、周期短，对用户更友好。</p>
<p>&emsp;&emsp;缺点：客户与开发者对原型的理解不同；准确的原型设计比较困难；不利于开发人员的创新。</p>
<p>&emsp;&emsp;适用范围：对开发领域熟悉且有快速原型工具；项目投标时有原型展示；产品升级或移植，对已有产品进行服务。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%9E%8B.png"></p>
<p>​		（3）增量模型（渐增模型）</p>
<p>&emsp;&emsp;特点：将功能分为构件，逐步向用户提交产品，功能逐步推给用户；</p>
<p>&emsp;&emsp;&emsp;&emsp;与之相比，瀑布和快速模型则是一次把所有功能塞给用户；</p>
<p>&emsp;&emsp;优点：较短时间内向用户提交；</p>
<p>&emsp;&emsp;① 可完成部分工作的产品；</p>
<p>&emsp;&emsp;② 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品；</p>
<p>&emsp;&emsp;缺点：技术要求高。</p>
<p>&emsp;&emsp;适用范围：进行已有产品升级或新版本开发；对完成期限要求严格；所开发领域熟悉且已有原型系统。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png"></p>
<p>&emsp;&emsp;风险更大的增量模型：（并行开发）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B2.png"></p>
<p>​		（4）螺旋模型：（用于大项目、应对风险即风险驱动）</p>
<p>&emsp;&emsp;<font color="red">实质上是在每个阶段之前增加了风险分析过程的<strong>快速原型</strong>模型</font></p>
<p>&emsp;&emsp;优点：</p>
<p>&emsp;&emsp;① 强调已有软件的重用，有助于把软件质量作为软件开发的一个重要目标；</p>
<p>&emsp;&emsp;② 减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险。</p>
<p>&emsp;&emsp;缺点：风险驱动的同时也会使开发人员未意识到真正风险的发生。</p>
<p>&emsp;&emsp;适用范围：内部开发的大规模项目。</p>
<img src="螺旋模型.png" style="zoom: 50%;" />

<p>​		（5）喷泉模型：（迭代）<font color="red"><strong>面向对象范型</strong>中常见</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;解释：圆圈相互重叠代表活动存在交迭；向下的箭头代表该阶段内的迭代；较小的圆圈代表维护。</p>
<img src="喷泉模型.png" style="zoom: 50%;" />

<p>​		（6）RUP统一过程：</p>
<p>&emsp;&emsp;迭代开发，管理需求（用例分析），使用基于构件的体系结构（第三方架构Vue、Spring之类），可视化建模（UML），验证软件质量，控制软件变更。</p>
<p>&emsp;&emsp;优点：提高团队生产力。</p>
<p>&emsp;&emsp;缺点：没有涵盖软件工程的全部内容，缺少软件运行和支持方面的内容，不支持多项目的开发结构，重用可能性降低。</p>
<h3 id="五、可行性研究"><a href="#五、可行性研究" class="headerlink" title="五、可行性研究"></a>五、可行性研究</h3><ol>
<li><p>实质：是要进行一次大大压缩简化了的系统分析（抽象化）和设计的过程</p>
</li>
<li><p>目的：用最小的代价，在尽可能短的时间内研究并确定客户提出的问题是否有行得通的解决办法。</p>
</li>
<li><p>定义：</p>
<p>（1）进一步分析和澄清问题定义；</p>
<p>（2）导出系统的逻辑模型；</p>
<p>（3）探索若干种可供选择的主要解法：</p>
<p>&emsp;&emsp;① 技术可行性，② 经济可行性，③ 操作可行性，④ 法律</p>
</li>
<li><p>过程：8步</p>
<p>复查系统规模和目标、研究现有系统、导出新系统模型、进一步定义问题、导出和评价解法、推荐行动方针、草拟开发计划、写文档提交审查。</p>
</li>
<li><p>各类图：（详细看汇总图章节）</p>
<p>（1）系统流程图</p>
<p>（2）数据流图（数据流程图）</p>
<p>（3）数据字典：（开发数据库的第一步）</p>
<p>&emsp;&emsp;定义：关于数据的信息的集合，对数据流图中包含的所有元素的定义的集合；</p>
<p>&emsp;&emsp;包含：数据流（动态）、数据存储（静态）、数据流分量\数据元素（处理）</p>
</li>
</ol>
<h3 id="六、需求分析（访谈）"><a href="#六、需求分析（访谈）" class="headerlink" title="六、需求分析（访谈）"></a>六、需求分析（访谈）</h3><ol>
<li><p>实质：回答系统必须做什么。</p>
</li>
<li><p>任务：</p>
<p>（1）确定对系统的综合要求：</p>
<p>&emsp;&emsp;功能需求，性能<del>，可靠性和可用性</del>，出错处理<del>，接口</del>，约束，逆向<del>，将来可能提出的</del></p>
<p>（2）分析系统的数据要求；</p>
<p>（3）导出系统的逻辑模型：</p>
<p>&emsp;&emsp;采用数据流图、实体-联系图、状态转换图、数据字典和主要算法描述该模型。</p>
<p>（4）修正系统开发计划；</p>
</li>
<li><p>软件需求规格说明：（详细看汇总图章节）</p>
<p>（1）实体-联系图（E-R图）：数据对象、属性、联系（1:1，1:n，n:m）,（1NF冗余最高，2NF，3NF常用）</p>
<p>（2）状态转化图（两种画法）</p>
<p>（3）Warnier图</p>
<p>（4）IPO图</p>
</li>
</ol>
<h3 id="七、总体设计"><a href="#七、总体设计" class="headerlink" title="七、总体设计"></a>七、总体设计</h3><ol>
<li><p>阶段组成：系统设计、结构设计；</p>
</li>
<li><p>过程：9步</p>
<p>设想供选择的方案，选取合理的方案，推荐最佳~，功能分解，设计软件架构，设计数据库，确定测试计划，书写文档，审查和复审。</p>
</li>
<li><p>模块：构成程序的基本构件</p>
<p>（1）耦合：追求低耦合</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%80%A6%E5%90%88.png"></p>
<p>（2）内聚：追求高内聚</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%86%85%E8%81%9A.png"></p>
</li>
<li><p>描述软件架构工具：（详细看汇总图章节）</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
</ol>
<h3 id="八、详细设计（算法）"><a href="#八、详细设计（算法）" class="headerlink" title="八、详细设计（算法）"></a>八、详细设计（算法）</h3><ol>
<li><p>结构设计：顺序、选择、循环</p>
</li>
<li><p>过程设计工具：（描述程序处理过程的工具）（详细看汇总图章节）</p>
<p>（1）程序流程图</p>
<p>（2）盒图（N-S图）</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
</li>
<li><p>面向数据结构的设计方法：Jackson图</p>
</li>
<li><p>程序复杂程度：计算环形复杂度</p>
</li>
</ol>
<h3 id="九、实现"><a href="#九、实现" class="headerlink" title="九、实现"></a>九、实现</h3><ol>
<li><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4></li>
<li><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>（1）确认测试：需求分析阶段（Alpha测试、Beta测试）</p>
<p>（2）单元测试：详细设计&#x2F;编码阶段（代码审查）</p>
<p>（3）集成测试：概要设计阶段（回归测试）</p>
<p>（4）系统测试：整体系统实现</p>
<p>（5）黑盒测试</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
<p>（6）白盒测试：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p>
</li>
<li><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4></li>
</ol>
<h3 id="十、维护"><a href="#十、维护" class="headerlink" title="十、维护"></a>十、维护</h3><ol>
<li><p>决定软件的可维护性的因素：</p>
<p>可理解性、可测试性、可修改性、可重用性</p>
</li>
<li><p>提高软件产品的可维护性的方法：</p>
<p>①建立明确的软件直连目标；</p>
<p>②使用先进的软件开发技术和工具；</p>
<p>③建立明确的质量保证；</p>
<p>④选择可维护的程序设计语言；</p>
<p>⑤改进程序文档。</p>
</li>
<li><p>文档：</p>
<p>用户文档、系统文档</p>
</li>
</ol>
<h3 id="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"><a href="#十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）" class="headerlink" title="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"></a>十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）</h3><ol>
<li><p>什么是面向对象方法学？</p>
<p>尽可能模拟人类习惯，开发过程接近人类解决问题的方法与过程。</p>
<p>优点：与人类思维方法一致；软件稳定性好；软件可重用性好；较易开发大型软件产品；可维护性好。</p>
</li>
<li><p>什么是对象？</p>
<p>对问题域某个实体的抽象；既有静态的属性（姓名…），又有动态的属性（方法…）。</p>
</li>
<li><p>什么是类？</p>
<p>对具有相同数据结构和操作的一组相似对象的定义，即类是对具有相同属性和行为的一个或多个对象的描述。</p>
</li>
<li><p>用例图（详细看汇总图章节）</p>
</li>
<li><p>类图（详细看汇总图章节）</p>
</li>
</ol>
<h3 id="十二、面向对象分析"><a href="#十二、面向对象分析" class="headerlink" title="十二、面向对象分析"></a>十二、面向对象分析</h3><ol>
<li><p>状态图（详细看汇总图章节）</p>
</li>
<li><p>事件跟踪图</p>
</li>
<li><table>
<thead>
<tr>
<th>模型类型</th>
<th>图</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>对象模型</td>
<td>类图结合功能过程</td>
<td>最基础、最重要、最核心</td>
</tr>
<tr>
<td>动态模型</td>
<td>时间跟踪图或状态图</td>
<td></td>
</tr>
<tr>
<td>功能模型</td>
<td>数据流图或程序流程图</td>
<td></td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="十三、软件工程导论各类图汇总"><a href="#十三、软件工程导论各类图汇总" class="headerlink" title="十三、软件工程导论各类图汇总"></a>十三、软件工程导论各类图汇总</h3><h4 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h4><ol>
<li><p>可行性分析：</p>
<p>（1）系统流程图（整个系统功能）</p>
<p>（2）数据流(程)图</p>
<p>（3）数据字典</p>
</li>
<li><p>需求分析：</p>
<p>（1）实体联系图（E-R图）</p>
<p>（2）状态(转换)图（两种画法）</p>
<p>（3）IPO图</p>
</li>
<li><p>总体设计：</p>
<p>（1）层次图</p>
<p>（2）HIPO图</p>
<p>（3）软件结构图</p>
</li>
<li><p>详细设计：</p>
<p>（1）程序流程图（某一程序执行任务的过程）</p>
<p>（2）N-S盒图</p>
<p>（3）PAD图</p>
<p>（4）判定表</p>
<p>（5）判定树</p>
<p>（6）Jackson图</p>
</li>
<li><p>其他</p>
<p>（1）用例图</p>
<p>（2）类图</p>
<p>（3）事件跟踪图</p>
<p>（4）状态图（两种画法）</p>
</li>
</ol>
<h4 id="绘制："><a href="#绘制：" class="headerlink" title="绘制："></a>绘制：</h4><ol>
<li><h5 id="可行性分析："><a href="#可行性分析：" class="headerlink" title="可行性分析："></a>可行性分析：</h5><p>（1）系统流程图：</p>
<p>&emsp;&emsp;<img src="系统流程图1.png" style="zoom:50%;" /><img src="系统流程图2.png" style="zoom:50%;" /></p>
<p>&emsp;&emsp;例：</p>
<img src="系统流程图3.png" alt="系统流程图3" style="zoom:50%;" />

<p>（2）数据流(程)图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例1：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE2.png"></p>
<p>&emsp;&emsp;例2：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE3.png"></p>
<p>&emsp;&emsp;D1，D2，1，2：加这些编号是为了方便引用和追踪</p>
<p>（3）数据字典：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>描述</th>
<th>允许非空</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>char</td>
<td>编号</td>
<td>NO</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>姓名</td>
<td>NO</td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li><h5 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h5><p>（1）实体联系图（E-R图）：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE2.png"></p>
<p>（2）状态图&#x2F;状态转换图：（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE2.png"></p>
<p>（3）IPO图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/IPO%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;IPO表：</p>
<img src="IPO表.png"  />
</li>
<li><h5 id="总体设计："><a href="#总体设计：" class="headerlink" title="总体设计："></a>总体设计：</h5><p>（1）层次图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%A8%A1%E5%9D%97.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%B1%82%E6%AC%A1%E5%9B%BE.png"></p>
<p>（2）HIPO图：（IPO图+层次图）</p>
<p>&emsp;&emsp;在层次图除了最顶层的方框之外，每个方框中都加编号。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/HIPO%E5%9B%BE.png"></p>
<p>（3）软件结构图：</p>
<p>&emsp;&emsp;类似于层次图，但是为模块调用模块。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE1.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE2.png"></p>
</li>
<li><h5 id="详细设计："><a href="#详细设计：" class="headerlink" title="详细设计："></a>详细设计：</h5><p>（1）程序流程图：（环形复杂度计算）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p>（2）N-S盒图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE1.png"></p>
<p>（3）PAD图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE.png"></p>
<p>&emsp;&emsp;例：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE1.png"></p>
<p>（4）判定表：</p>
<p>&emsp;&emsp;例：某航空公司规定，乘客可以免费托运不超过20公斤的行李。当行李重量超过20公斤时，对头等舱的乘客超重部分每公斤收费4元，其它舱的乘客收费6元。对残疾乘客超重部分在舱位等次相同的情况下收费减半。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>未超重</td>
<td>T</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>超重</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>头等舱</td>
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
<td>F</td>
</tr>
<tr>
<td>其他舱</td>
<td>F</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>T</td>
</tr>
<tr>
<td>残疾乘客</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr>
<td>普通乘客</td>
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr>
<td>免费</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分2元&#x2F;公斤</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分3元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>超出部分4元&#x2F;公斤</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>超出部分6元&#x2F;公斤</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<p>（5）判定树：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%88%A4%E5%AE%9A%E6%A0%91.png"></p>
<p>（6）Jackson图：</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/Jackson%E5%9B%BE.png"></p>
</li>
<li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>（1）用例图</p>
<table>
<thead>
<tr>
<th>关系类型</th>
<th>说明</th>
<th>表示符号</th>
</tr>
</thead>
<tbody><tr>
<td>关联</td>
<td>参与者与用例之间的关系</td>
<td>—&gt;</td>
</tr>
<tr>
<td>泛化</td>
<td>参与者之间或用例之间的关系</td>
<td>—▷</td>
</tr>
<tr>
<td>包含</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;include&gt;&gt;—&gt;</td>
</tr>
<tr>
<td>扩展</td>
<td>用例之间的关系</td>
<td>—&lt;&lt;extend&gt;&gt;—-&gt;</td>
</tr>
</tbody></table>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p>
<p>（2）类图</p>
<p>&emsp;&emsp;参考：<a href="https://blog.csdn.net/realmagicboy/article/details/90289062">链接</a></p>
<p>（3）事件跟踪图</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B8%AA%E5%9B%BE.png"></p>
<p>（4）状态图（两种画法）</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<h3 id="十四、补充知识点："><a href="#十四、补充知识点：" class="headerlink" title="十四、补充知识点："></a>十四、补充知识点：</h3><ol>
<li><p>判定是否结构化：</p>
<p>程序流程图只有一个出口，则结构化；有多个出口，则非结构化。（非结构化&#x3D;&gt;结构化）</p>
</li>
<li><p>非渐增式测试：</p>
<p>先将模块进行单元测试然后组装到一起再测试整体；</p>
<p>渐增式测试：（自下而上、自上而下）</p>
<p>逐个将未经检测的模块组装到已经测试过的模块上进行集成测试。即加一个测一个，便于发现接口错误。</p>
</li>
<li><p>结构化设计方法（传统法）是面对数据流和功能的设计。</p>
</li>
<li><p>数据流设计方法：</p>
<p>（1）变换型：输入——&gt;处理——&gt;输出</p>
<p>（2）事务性：事务层、操作层、细节层（一起入、一起滚）</p>
</li>
<li><p>好的程序注释要占到程序总量的1&#x2F;3。</p>
</li>
<li><p>找到错误位置占排错总工作量的95%。</p>
</li>
<li><p>数据流和文件命名情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据流命名</th>
<th>文件命名</th>
</tr>
</thead>
<tbody><tr>
<td>数据流与文件交互</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>数据流再加工之间传递</td>
<td>需要</td>
<td>不需要</td>
</tr>
<tr>
<td>流入&#x2F;流出文件的数据流不同</td>
<td>需要</td>
<td>需要</td>
</tr>
</tbody></table>
</li>
<li><p>功能性内聚是最强的，偶然内聚是最弱的。</p>
</li>
<li><p>Jackson图是面向数据结构的.</p>
</li>
<li><p>模块中所以成分引用共同的数据，该模块内的联系类型为：通信内聚。</p>
</li>
<li><p>不适应于数据流图处理（加工）名称的是工资支票数据。（因为不存在计算&#x2F;操作）</p>
</li>
<li><p>采用结构化分析方法时，采用的基本手段是：分解与抽象。</p>
</li>
<li><table>
<thead>
<tr>
<th>阶段</th>
<th>产生</th>
</tr>
</thead>
<tbody><tr>
<td>系统分析</td>
<td>模块结构图与模块说明书</td>
</tr>
<tr>
<td>需求&#x2F;设计阶段</td>
<td>系统说明书</td>
</tr>
<tr>
<td>需求分析阶段</td>
<td>数据字典&#x2F;数据流图</td>
</tr>
</tbody></table>
</li>
<li><p>结构化设计是面向数据流的设计方法。</p>
</li>
<li><p>维护过程中，应先确定维护类型。</p>
</li>
<li><p>结构化设计方法：数据流图导出初始结构图，再以此为基础构件模块化的软件系统架构。</p>
</li>
<li><p>结构化系统分析主要通过处理功能进行分析。</p>
</li>
<li><p>结构化系统分析中，判定表和判定树常用于表达数据流图中的加工逻辑。</p>
</li>
<li><p>驱动模块：自底向上测试</p>
<p>桩模块：自顶向下测试</p>
</li>
<li><p>结构化设计采用模块化方法的主要出发点是：降低复杂度。</p>
</li>
<li><p>数据流图所描述的是实际系统的逻辑模型。</p>
</li>
<li><p>在软件生命周期中，占工作量比例最大的是：维护。</p>
</li>
<li><p>SA(结构化)方法再描述方式上的特点，是尽量采用图形表示。</p>
</li>
<li><p>决定软件系统中各个模块的外部特性（输入、输出和功能）是概要设计阶段的任务。</p>
</li>
<li><p>通过对软件的测试，可以证明错误所在。</p>
</li>
<li><p>决定软件工程方法论所有步骤的攻击目标是提高软件的可维护性。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>

<h3 id="十五、习题："><a href="#十五、习题：" class="headerlink" title="十五、习题："></a>十五、习题：</h3><ol>
<li><h4 id="可行性研究："><a href="#可行性研究：" class="headerlink" title="可行性研究："></a>可行性研究：</h4><p>该类题解法：①写出问题定义，②再根据技术、经济、操作可行性进行分析，③画出系统流程图和数据流图。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.2.png" alt="习题1.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.3.png" alt="习题1.3"></p>
</li>
<li><h4 id="需求分析：-1"><a href="#需求分析：-1" class="headerlink" title="需求分析："></a>需求分析：</h4><p>此类题解法：画数据流图，画E-R图。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.2.png" alt="习题2.2"></p>
</li>
<li><h4 id="总体设计：-1"><a href="#总体设计：-1" class="headerlink" title="总体设计："></a>总体设计：</h4><p>此类题解法：画数据流图和软件结构图，还会有HIPO图的绘制。</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.2.png" alt="习题3.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.3.png" alt="习题3.3"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.4.png" alt="习题3.4"></p>
</li>
<li><h4 id="详细设计：-1"><a href="#详细设计：-1" class="headerlink" title="详细设计："></a>详细设计：</h4><p>此类题解法：①根据代码绘制程序流程图和盒图。②根据图或代码判定是否结构化，若非结构化则&#x3D;&gt;结构化（画图）。③判定表和判定树的绘制。④画出程序的程序流程图并转化为程序流图，再计算环形复杂度。⑤Jackson图绘制？？？</p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.2.png" alt="习题4.2"></p>
</li>
</ol>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.1.png"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.2.png" alt="习题5.2"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.3.png" alt="习题5.3"></p>
<p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.4.png" alt="习题5.4"></p>
<ol start="5">
<li><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>此类题解法：①根据提供的伪代码，进行纠错，修改循环结构，画程序流程图，判定是否结构化，画盒图。</p>
<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;②进行各类测试。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
  </entry>
</search>
