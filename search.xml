<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/blog2025.github.io/2025/03/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h3><ol><li><p>冯·诺依曼计算机</p><p>组成：</p><p>运算器、存储器、控制器（控制、指挥程序和数据的输入运行及处理结果）、输入设备、输出设备；</p><p>特点：</p><p>指令和数据以同等地位存放于存储器内，可按地址寻访；</p><p>指令和数据均用二进制数表示；</p><p>指令由操作码（操作）和地址码（操作数在存储器中的位置）组成；</p><p>指令在存储器中是顺序存储的。</p><p>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成。</p></li><li><p>现代计算机组成：</p><p>CPU、存储器、IO设备</p><p>运算器：至少3个寄存器和1个算术逻辑单元ALU，ACC为累加器，MQ为乘商寄存器，累加寄存器AC</p><p>主寄存器（主存&#x2F;内存）：<strong>主存地址寄存器MAR</strong>、<strong>主存数据寄存器MDR</strong></p><p>控制器：神经中枢，由<strong>程序计数器PC</strong>（存放下一条指令的地址）、<strong>指令寄存器IR</strong>（存放当前正在执行的指令）、<strong>控制单元CU</strong>组成</p><p>关系：<img src="/blog2025.github.io/2025/03/19/JAVA/%E5%8E%9F%E7%90%86/1.png"></p></li><li><p>机器指令格式：</p><table><thead><tr><th>操作码（取数、存数、加、减、乘、除、停机、打印等）</th><th>地址码（操作数在存储器中的位置）</th></tr></thead><tbody><tr><td>6位</td><td>10位</td></tr></tbody></table></li><li><p>计算机硬件的主要技术指标：</p><p>机器字长：CPU一次能处理数据的位数（字长越长，数的表示范围越大，精度越高）</p><p>存储容量：主存容量和辅存容量</p><p>运算速度：吉普森（Gibson）法衡量运算速度（每条指令的执行时间以及他们在全部操作中所占的百分比）</p><p>或采用MIPS（百万条指令每秒）作为计量单位，或采用CPI（执行一条指令所需要的时钟周期（机器主频的倒数））</p></li><li><p>DMA技术：直接访问内存，无需 CPU 干预直接读写内存</p></li></ol><h3 id="二、系统总线：（可看可不看）"><a href="#二、系统总线：（可看可不看）" class="headerlink" title="二、系统总线：（可看可不看）"></a>二、系统总线：（可看可不看）</h3><ol><li><p>总线连接：将各部件连到<strong>一组</strong>公共信息传输线上。</p></li><li><p>分散连接：各部件之间使用单独的连线。</p></li><li><p>总线分类：</p><table><thead><tr><th>片内总线（芯片内部）</th><th>系统总线（CPU、主存、IO设备各大部件之间的信息传输线）</th><th>通信总线</th></tr></thead><tbody><tr><td></td><td>数据总线</td><td></td></tr><tr><td></td><td>地址总线</td><td></td></tr><tr><td></td><td>控制总线</td><td></td></tr></tbody></table></li><li><p>总线特性：</p><p>机械（插座标准）、电气（每一根传输线上信号的传递方向与有效的电平范围）</p></li><li><p>总线性能指标：</p><p>宽度、带宽、时钟同步&#x2F;异步、复用、信号线数、控制方式、负载、电源电压</p></li><li><p>总线标准：</p><p>ISA、EISA、VESA、PCI、AGP、RS-232C、USB</p></li><li><p>总线结构：</p><p>单总线、多总线</p></li><li><p>总线控制：</p><p>总线判优控制：</p><table><thead><tr><th>集中式（将控制逻辑集中在一处，如CPU）</th><th>分布式（将控制逻辑分散在与总线连接的各个部件或设备上）</th></tr></thead><tbody><tr><td>链式查询</td><td></td></tr><tr><td>计数器定时查询</td><td></td></tr><tr><td>独立请求查询</td><td></td></tr></tbody></table><p>总线通信控制：（总线周期4步）</p><p>&emsp;申请分配阶段、寻址阶段、传数阶段、结束阶段</p></li></ol><p>​&emsp;四种通信控制方式：同步、异步、半同步、分离式</p><h3 id="三、存储器"><a href="#三、存储器" class="headerlink" title="三、存储器"></a>三、存储器</h3><ol><li><p>分类：</p><table><thead><tr><th>存储介质</th><th>存取方式</th><th>在计算机中的作用</th></tr></thead><tbody><tr><td>半导体存储器（TTL半导体）（MOS半导体）</td><td>随机存储器RAM</td><td>主存储器（RAM、ROM）</td></tr><tr><td>磁表面存储器</td><td>只读存储器ROM（只能读不能重写）<br>包含：可编程只读PROM、紫外线擦除可编程EPROM、电擦除可编程EEPROM</td><td>辅助存储器（光盘、磁带、磁盘）</td></tr><tr><td>磁芯存储器</td><td>串行访问</td><td>缓冲存储器Cache</td></tr><tr><td>光盘存储器</td><td></td><td>闪速存储器</td></tr></tbody></table></li><li><p>存储器层次结构：</p><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%8E%9F%E7%90%86/2.png"></p><p>缓存-主存层次（解决CPU和主存速度不匹配问题）</p><p>主存-辅存层次（解决存储系统的容量问题）（数据调动是由硬件自动完成，程序员看不见）：</p><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%8E%9F%E7%90%86/3.png"></p></li><li><p>主存储器：</p><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%8E%9F%E7%90%86/4.png"></p><p>（1）主存中存储单元地址的分配：</p><p>​    高位字节地址为字地址：0 4 8</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>8</td><td>9</td><td>10</td><td>11</td></tr></tbody></table><p>​    低位字节为字地址：0 2 4</p><table><thead><tr><th>1</th><th>0</th></tr></thead><tbody><tr><td>3</td><td>2</td></tr><tr><td>5</td><td>4</td></tr></tbody></table><p>（2）技术指标：</p><p>​    存储容量、储速度（存取时间和存取周期）、存储器带宽（衡量数据传输率的重要技术指标）</p></li><li><p>半导体存储芯片：</p><p>（1）基本结构：</p><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%8E%9F%E7%90%86/5.png"></p><p>&emsp;存储芯片通过地址总线、数据总线和控制总线与外部连接。</p><p>&emsp;地址线是单向输入、其位数与芯片容量有关。</p><p>&emsp;数据线是双向的</p><p>（2）译码驱动方式：</p><p>&emsp;线选法、重合法</p></li><li><p>随机存取存储器</p><p>静态RAM、动态RAM</p><p>动态刷新RAM的刷新：</p><p>​        刷新的过程实质上是先将原存信息读出，再由刷新放大器形成原信息并重新写入的再生过程。</p><p>&emsp;&emsp;包含集中刷新、分散刷新、异步刷新。</p><p>动态RAM和静态RAM的比较：</p><table><thead><tr><th></th><th>动态RAM（电容）</th><th>静态RAM</th></tr></thead><tbody><tr><td>集成度</td><td>高</td><td>低</td></tr><tr><td>功耗</td><td>小</td><td>大</td></tr><tr><td>价格</td><td>便宜</td><td>贵</td></tr><tr><td>容量</td><td>高</td><td>低</td></tr><tr><td>存取周期</td><td>慢（唯一缺点）</td><td>快</td></tr></tbody></table></li><li><p>只读存储器</p><p>&emsp;看上述的分类表格</p></li><li><p>存储器和CPU的连接<font color="red">（<strong>画图</strong>）</font></p><p>（1）存储容量的扩展：</p><p>&emsp;位扩展（增加存储字长）</p><p>&emsp;字扩展（增加存储字的数量）</p><p>&emsp;字、位扩展（既增加存储字的数量、又增加存储字长）</p><p>（2）存储器与CPU的连接：</p><p>&emsp;①地址线的连接：存储芯片的容量不同，其地址线数也不同，CPU的地址线数目&gt;存储芯片的。</p><p>&emsp;&emsp;通常将CPU地址线的低位与存储芯片的地址线相连。</p><p>&emsp;&emsp;而CPU地址线的高位要么在存储芯片扩充时用，要么在其他用途。</p><p>&emsp;②数据线的连接：必须保证CPU的数据线数与存储芯片的数据位数相等。</p><p>&emsp;③读、写命令线的连接：高电平为读、低电平为写</p><p>&emsp;④片选线的连接：CPU与存储芯片正确工作的关键</p><p>&emsp;⑤合理选择存储芯片：类型RAM或ROM，数量的选择。</p></li><li><p>存储器的校验：<font color="red">（<strong>检错计算</strong>）</font></p><p>定义：检测到存储过程中可能出现的差错，并及时纠正。通常可将原数据配成<font color="red"><strong>汉明编码</strong></font></p><p><strong>汉明码</strong>：一位纠错能力。</p><p>n+k：欲检测的二进制代码为n位，需要增加k位检测位实现纠错能力。</p><p><strong>汉明码编码过程：</strong></p><p>①判定检验位个数：公式为：2^k≥n+k+1</p><p>②确定检验位的位置：校验位固定在第2^n次处，即第1 2 4 8 …处；</p><p>③检验位”_”的取值：（配偶原则）异或运算</p><p>第一位C1包含<strong>1</strong>，3，5，7，9，11…（取一个隔一个）</p><p>第二位C2包含<strong>2，3</strong>，6，7，10，11，14，15…（取二个隔二个）</p><p>第三位C4包含<strong>4，5，6，7</strong>，12，13，14，15…（取四个隔四个）</p><p>第四位C8包含**8，9，10，11，12，13，14，15，**24…（取八个隔八个）</p><p>C1&#x3D;1位㊉3位㊉5位㊉7位㊉…</p><p>C2&#x3D;2位㊉3位㊉6位㊉7位㊉…</p><p>C4&#x3D;4位㊉5位㊉6位㊉7位㊉…</p><p>C8&#x3D;8位㊉9位㊉10位㊉11位㊉…</p><p>例题：</p><hr><p>以10101编码为例，创建一个汉明码编码的空间，并且把源码填入编码的对应位中中，_ _ 1 _ 0 10 _ 1，并留出校验码位（校验位先设为0）。（因为2^4 - 1&gt;&#x3D; 5+4 &amp;&amp; 2^3 - 1 &lt; 5+ 3所以需要4位校验码）</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>C1</td><td>C2</td><td>1</td><td>C4</td><td>0</td><td>1</td><td>0</td><td>C8</td><td>1</td></tr></tbody></table><blockquote><ul><li><p>计算校验码的第一位C1（1,3,5,7,9进行异或）: 空㊉1㊉0㊉0㊉1&#x3D;0</p><p>结果为0，所以汉明码第2^0位为0，结果为0 _ 1 _ 0 10 _ 1</p></li><li><p>计算校验码的第二位C2（2,3,6,7进行异或）: 空㊉1㊉1㊉0&#x3D;0</p><p>结果为0，所以汉明码第2^1位为0，结果为001 _ 0 10 _ 1</p></li><li><p>计算校验码的第三位C4（4,5,6,7进行异或）: 空㊉0㊉1㊉0&#x3D;1</p><p>结果为1，所以汉明码第2^2位为0，结果为0011 0 10 _ 1</p></li><li><p>计算校验码的第四位C8（8, 9进行异或）: 空㊉1&#x3D;0</p><p>结果为0，所以汉明码第2^3位为0，结果为0011 0100 1</p></li><li><p>所以最终编码为001101001.</p></li></ul></blockquote><p>参考：<a href="https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html">https://www.cnblogs.com/Philip-Tell-Truth/p/6669854.html</a></p><p>1 ⊕ 1 &#x3D; 0</p><p>0 ⊕ 0 &#x3D; 0</p><p>1 ⊕ 0 &#x3D; 1</p><p>0 ⊕ 1 &#x3D; 1</p><p>同为 0，异为 1</p><p><strong>汉明码的纠错过程：</strong></p><p>①对接收到的错误汉明码进行异或运算即可。</p><p>②异或运算结果为0，则没有错误；运算结果为1，则存在错误。</p><p>③根据错误去判断错在哪个位置。（抑或结果反着排列，在转换为十进制即得错误位置）</p><p>例题：</p><p>假设我们现在收到的编码为001101001，我们可以发现汉明码的第8位与原来的汉明码001101011不同，那我们怎么找出这个第8位的错误编码呢？</p><p>​                       123456789</p><p>对错误汉明码001101001进行异或运算</p><blockquote><ul><li><p>P1&#x3D;0㊉1㊉0㊉0㊉1&#x3D;0（1,3,5,7,9进行异或），</p></li><li><p>P2&#x3D;0㊉1㊉1㊉0&#x3D;0（2,3,6,7进行异或），</p></li><li><p>P4&#x3D;1㊉0㊉1㊉0&#x3D;0（4,5,6,7进行异或）</p></li><li><p>P8&#x3D;0㊉1&#x3D;1（8, 9进行异或），</p><p>将上述结果反着排列得到1000转换为十进制即8，所以错误位置为8</p><p><strong>0</strong>×2^0 + <strong>0</strong>×2^1 + <strong>0</strong>×2^2 + <strong>1</strong>×2^3 &#x3D; 8</p></li></ul></blockquote></li><li><p>提高访存速度的措施</p><p>寻找高速元件、采用层次结构、调整主存的结构（单体多字系统（先取多条指令，再一条一条送至CPU执行）、多体并行系统（多体模块组成的寄存器，并行工作）、高性能存储芯片）</p></li><li><p>高速缓冲存储器：（时间和空间局限性导致出现）</p></li></ol><p>   （1）命中：主存块已调入缓存块，建立对应关系。</p><p>   &emsp;&emsp;未命中：为建立对应关系。</p><p>   （2）Cache的容量和块长是影响Cache效率的重要因素。</p><p>   （3）Cache的组成：</p><p>   &emsp;&emsp;Cache存储体、地址映射变换机构、替换机构、Cache的读写操作（写：写直达法、写回法）</p><p>   （4）Cache的改进：多级缓存（片内缓存、片外缓存）、统一缓存（数据和指令都在一起）和分立缓存（数据和指令分别存放）</p><p>   （5）Cache—主存地址映射</p><p>   &emsp;&emsp;地址映射：主存地址映射到Cache地址；</p><p>   &emsp;&emsp;地址映射方式：直接映射（固定）、全相联映射（灵活性大）、组相联映射（折中）</p><table><thead><tr><th>直接映射</th><th>全相联映射</th><th>组相联映射</th></tr></thead><tbody><tr><td>每个主存块只与一个缓存块相对应。</td><td>主存中每一字块映射到Cache中的任意位置。</td><td>主存的某一字块可以按模映射到Cache的任一字块中。</td></tr><tr><td>实现简单，直接可判断字块是否在缓存中</td><td>逻辑复杂、成本高</td><td>介于前两者之间</td></tr></tbody></table><p>   （6）替换策略：</p><p>   &emsp;&emsp;先进先出FIFO、近期最少使用LRU、随机法</p><p>   （7）辅助存储器（外存）：</p><p>   &emsp;&emsp;特点：容量大、速度慢、价格低、可脱机保存信息。</p><p>   &emsp;&emsp;光&#x2F;磁盘：记录密度（道密度、位密度、线密度）、存储容量、平均寻址时间、数据传输率、误码率</p><h3 id="四、输入输出系统"><a href="#四、输入输出系统" class="headerlink" title="四、输入输出系统"></a>四、输入输出系统</h3><ol><li><p>IO设备与主机的传送方式：</p><p>并行和串行</p></li><li><p>IO设备与主机的联络方式：</p><p>立即响应方式、异步工作采用应答信号联系。</p></li><li><p>IO设备与主机的连接方式：</p><p>辐射式、总线式</p></li><li><p>IO接口：</p><p>设置接口的原因：一台机器常配备多台IO设备、IO设备种类繁多，速度不一、IO设备传送方式不同、IO设备电平不同、CPU向IO设备发送各种控制信号、IO设备的状态需要及时向CPU汇报。</p></li><li><p>IO中断：</p><p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p></li><li><p>DMA技术：</p><p>主存和设备交换信息时，无需 CPU 干预。省去了保护现场和恢复现场。</p><table><thead><tr><th></th><th>程序中断</th><th>DMA</th></tr></thead><tbody><tr><td>数据传送依靠</td><td>程序</td><td>硬件</td></tr><tr><td>CPU响应时间</td><td>一条指令执行结束时响应</td><td>指令周期内的任一存取周期结束时响应</td></tr><tr><td>处理异常事件的能力</td><td>有处理异常事件的能力</td><td>无</td></tr><tr><td>是否需要保护现场</td><td>是</td><td>否</td></tr><tr><td>优先级</td><td>低</td><td>高</td></tr></tbody></table><p>DMA接口的类型：</p><p>选择性DMA接口、多路型DMA接口</p></li></ol><h3 id="五、计算机的运算（正数的原码、反码、补码都一致）"><a href="#五、计算机的运算（正数的原码、反码、补码都一致）" class="headerlink" title="五、计算机的运算（正数的原码、反码、补码都一致）"></a>五、计算机的运算（<strong>正数的原码、反码、补码都一致</strong>）</h3><ol><li><p>符号：0正1负</p></li><li><p>原码：带符号的绝对值表示</p><p>例：</p><p>（1）x&#x3D;+1100，x原&#x3D;0，1100</p><p>&emsp;&emsp;x&#x3D;-1100，x原&#x3D;1，1100</p><p>&emsp;&emsp;x&#x3D;0.1101，x原&#x3D;0.1101</p><p>&emsp;&emsp;x&#x3D;-0.1101，x原&#x3D;1-（-0.1101）&#x3D;1.1101</p><p>（2）x&#x3D;+0，x原&#x3D;0.0000</p><p>&emsp;&emsp;x&#x3D;-0，x原&#x3D;1.0000</p><p>&emsp;&emsp;<strong>所以0的原码有两种表示方式，</strong></p></li><li><p>补码：<strong>负数的补码等于反码+1</strong>。</p><p>正数相对于模的补数就是模本身。</p><p>（1）例：+7≡-7</p><p>&emsp;&emsp;&emsp;-3≡+7（mod10）</p><p>（2）补码详解：</p><p>&emsp;&emsp;例：</p><p>&emsp;&emsp;&emsp;x&#x3D;+1010，x补&#x3D;0，1010</p><p>&emsp;&emsp;&emsp;x&#x3D;-1101，x补&#x3D;2^(n+1)+x&#x3D;100000-1101&#x3D;1，0011</p><p><font color="red"><strong>快捷方式：在原码的基础上，符号位不变，其余各位取反，最后+1；</strong></font></p><p>或者说，在原码的基础上，符号位不变，数值位从右向左找第一个1，1右边的不变，1左面的取反。</p><p>（1）例：</p><p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p><p>&emsp;&emsp;&emsp;①x原&#x3D;1，1101</p><p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1，0010</p><p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1，0011</p><p>（2）x&#x3D;-0.0110</p><p>&emsp;&emsp;&emsp;①x原&#x3D;1.0110</p><p>&emsp;&emsp;&emsp;②符号位不变，其余位取反&#x3D;1.1001</p><p>&emsp;&emsp;&emsp;③最后+1&#x3D; 1.1010（进了一位1+1&#x3D;0）</p><p>（3）x&#x3D;+0，x补&#x3D;0.0000</p><p>&emsp;&emsp;x&#x3D;-0，x补&#x3D;0.0000</p><p>&emsp;&emsp;<strong>所以0的补码有一种表示方式，</strong></p></li><li><p>反码：</p><p>在原码的基础上，符号位不变，其余各位取反即可。</p><p>（1）例：</p><p>&emsp;&emsp;&emsp;x&#x3D;-1101，</p><p>&emsp;&emsp;&emsp;x原&#x3D;1，1101</p><p>&emsp;&emsp;&emsp;x反&#x3D;1，0010</p><p>（2）再例：</p><p>&emsp;&emsp;&emsp;x&#x3D;-0.0110</p><p>&emsp;&emsp;&emsp;x原&#x3D;1.0110</p><p>&emsp;&emsp;&emsp;x反&#x3D;1.1001</p><p>（3）x&#x3D;+0，x反&#x3D;0.0000</p><p>&emsp;&emsp;x&#x3D;-0，x反&#x3D;1.1111</p><p>&emsp;&emsp;<strong>所以0的反码有两种表示方式，</strong></p></li><li><p>移码：</p><p>补码的符号位从0变为1，或者从1变为0，即得到移码</p><p>如：</p><p>x&#x3D;-10101</p><p>x原&#x3D;1，10101</p><p>x补&#x3D;1，01010+1&#x3D;1，01011</p><p>x移&#x3D;0，01011</p><p><strong>所以0的移码有一种表示方式，</strong></p></li><li><p>数的定点表示和浮点表示</p><p>定点溢出（数符+数值），浮点阶码（阶码+数值+数符+尾数值）</p></li><li><p>定点运算</p><p>移位运算、加减运算、乘法运算、除法运算</p></li><li><p>浮点运算</p><p>加减运算、乘除运算、</p></li></ol><h3 id="六、指令系统"><a href="#六、指令系统" class="headerlink" title="六、指令系统"></a>六、指令系统</h3><ol><li><p>格式：操作码OP字段（固定或变化）+地址码字段（该指令的源地址、结果地址、下一条指令地址）</p><p>地址码字段：四地址、三地址、二地址、一地址指令。</p></li><li><p>指令字长：</p><p>取决于操作码的长度、操作数地址的长度、操作数地址的个数。</p></li><li><p>操作数类型：</p><p>地址、数字、字符、逻辑数据</p></li><li><p>存放方式：</p><p>对准边界、不对准边界</p></li><li><p>操作类型：</p><p>数据传送、算术逻辑操作、移位、转移、输入输出、其他</p></li><li><p>寻址方式：</p><p>指令寻址（顺序寻址、跳跃寻址）、数据寻址（立即寻址、直接<del>、隐含</del>、寄存器<del>、间接</del>、寄存器间接<del>、基址</del>、变址<del>、相对</del>）</p></li><li><p>RISC，精简指令系统计算机，目的就是继承、简化指令，提升效率和正确性</p><p>CISC，复杂指令系统计算机</p><table><thead><tr><th></th><th>RISC</th><th>CISC</th></tr></thead><tbody><tr><td>指令复杂程度</td><td>简单</td><td>复杂</td></tr><tr><td>指令字长是否固定</td><td>固定</td><td>不固定</td></tr><tr><td>指令格式种类</td><td>少</td><td>多</td></tr><tr><td>寻址方式</td><td>少</td><td>多</td></tr><tr><td>CPU设有寄存器</td><td>多个</td><td>专用</td></tr></tbody></table></li></ol><h3 id="七、CPU结构和功能"><a href="#七、CPU结构和功能" class="headerlink" title="七、CPU结构和功能"></a>七、CPU结构和功能</h3><ol><li><p>CPU组成部分：</p><p>寄存器、终端系统、运算ALU、指令控制部件CU</p></li><li><p>寄存器类型：</p><p>通用、数据、地址、条件码</p></li><li><p>指令周期：</p><p>CPU去除并执行一条指令所需的全部时间</p><p>没有固定值，因为不同指令的指令周期长度不同</p><p>取指周期：取指、分析</p><p>执行周期：执行阶段完成执行</p><p>CPU工作顺序：取指——&gt;执行——&gt;再取指——&gt;再执行</p></li><li><p>指令流水：</p><p>目的：提高访存速度、提高IO设备与主机交换信息的速度、提高运算速度、提高处理机速度</p><p>性能：吞吐率、加速比、效率、</p><p>流水线的多发技术：超标量技术、超流水线技术</p><p>流水线结构：指令流水线结构、运算流水线</p></li><li><p>中断系统：</p><p>CPU和IO设备的交互导致，</p><p>中断请求标记、中断判优逻辑（硬件和软件实现）<br>中断响应：</p><p>保护现场：保护程序断点、保护CPU内部各寄存器内部的现场</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;程序断点的现场由中断隐指令完成，寄存器内的现场可在中断服务程序中由用户(或系统)用机器指令编程完成。</p><p>恢复现场：寄存器的内容恢复到中断处理前的状态。</p><p>中断屏蔽技术：屏蔽触发器与屏蔽字、屏蔽技术可改变优先等级</p></li></ol><h4 id="八、控制单元"><a href="#八、控制单元" class="headerlink" title="八、控制单元"></a>八、控制单元</h4><ol><li><p>微操作命令</p><p>取指周期、间址周期、执行周期、中断周期</p></li><li><p>控制单元</p><p>将一个机器周期分为若干个时间相等的时间段（节拍、状态、时钟周期）</p></li><li><p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p><p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p><p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p><p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p></li><li><p>微指令的编码格式：</p><p>直接编码方式、字段直接编码方式、字段间接编码方式、混合编码、其他</p></li></ol><h3 id="九、例题："><a href="#九、例题：" class="headerlink" title="九、例题："></a>九、例题：</h3><ol><li><p>指令周期、机器周期、时钟周期的概念及三者之间的关系</p><p>指令周期：CPU去除并执行<strong>一条指令</strong>所需的全部时间</p><p>机器周期：CPU周期，把一条指令的执行过程划分为若干个阶段，完成一个<strong>阶段</strong>所需要的时间</p><p>时钟周期：一个机器周期里可完成的若干微操作，每个微操作需要的时间</p><p><font color="red"><strong>指令周期由若干个机器周期组成，而机器周期又包含若干个时钟周期，基本总线周期由4个时钟周期组成</strong></font></p></li><li><p>什么是指令周期？指令周期是否有一个固定值？为什么？</p><p>CPU去除并执行一条指令所需的全部时间</p><p>没有固定值，因为不同指令的指令周期长度不同</p></li><li><p>什么是中断设计，设计中断系统时要考虑哪些主要问题？</p><p>CPU启动后不等待设备，直接执行任务，当设备准备好后向CPU发出请求，CPU被迫停止当前任务去响应设备就会导致IO中断。</p><p>设计中断系统需解决的问题：</p><p>(1) 各中断源如何向CPU提出中断请求</p><p>(2) 当对个中断源同时提出中断请求时，中断系统如何确定优先响应哪个中断源的请求  </p><p>(3)CPU在什么条件、什么时候、以什么方式来响应中断</p><p>(4)CPU响应中断后如何保护现场</p><p>(5)CPU响应中断后，如何停止原程序的执行而转入中断服务程序的入口地址</p><p>(6)中断处理结束后，CPU如何恢复现场，如何返回到原程序的间断处。</p><p>(7)在中断处理过程中又出现了新的中断请求，CPU该如何处理。</p></li><li><p>指令流水线和运算流水线在结构上有何共同之处？</p><p>指令流水线和运算流水线的共同点是由于相邻两段在执行不同的操作，因此在相邻两段之间必须设置锁存器或寄存器，以保证在一个周期内流水线的输出信号不便。</p></li><li><p>什么是RISC？简述它的主要特点。</p><p>RISC即是精简指令集计算机。特点：</p><p>（1）选取使用频度高的简单指令</p><p>（2）指令长度固定、格式少、寻址方式少</p><p>（3）只有存数取数指令访存，其它指令不访存</p><p>（4）CPU内有多个通用寄存器</p><p>（5）采用流水线技术，大部分指令一个时钟完成</p><p>（6）控制器采用组合逻辑实现</p><p>（7）采用优化的编译程序</p></li><li><p>试比较RISC和CISC。</p><p>（1）RISC更能充分利用VLSI芯片的面积</p><p>（2）RISC更能提高计算及运行速度，指令数、指令格式、寻址方式少，通用寄存器多，采用组合逻辑，便于指令流水</p><p>（3）RISC便于设计，可减低成本，提高可靠性</p><p>（4）RISC有利于编译程序代码优化</p><p>（5）RISC不易实现指令系统兼容</p></li><li><p>什么叫刷新？为什么要刷新？说明刷新有几种方法。</p><p>刷新 —— 对 DRAM 定期进行的全部重写过程；</p><p>刷新原因 —— 因电容泄漏而引起的 DRAM 所存信息的衰减需要及时补充，因此安排了定期刷新操作；</p><p>常用的刷新方法有三种 —— 集中式、分散式、异步式。</p><p>集中式：在最大刷新间隔时间内，集中安排一段时间进行刷新；</p><p>分散式：在每个读 &#x2F; 写周期之后插入一个刷新周期，无 CPU 访存死时间；</p><p>异步式：是集中式和分散式的折衷</p></li><li><p>计算机中设置 Cache 的作用是什么？能不能把 Cache 的容量扩大，最后取代主存，为什么？</p><p>计算机中设置 Cache 主要是为了加速 CPU 访存速度；</p><p>不能把 Cache 的容量扩大到最后取代主存，价格以及体积原因不适合。</p></li><li><p>Cache 做在 CPU 芯片内有什么好处？将指令 Cache 和数据 Cache 分开又有什么好处？</p><p>可提高外部总线的利用率、可提高存取速度</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>练习题</title>
      <link href="/blog2025.github.io/2025/03/22/%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/blog2025.github.io/2025/03/22/%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念题："><a href="#一、概念题：" class="headerlink" title="一、概念题："></a>一、概念题：</h3><ol><li>在软件项目工程中为什么不能用单纯增加人数的方法缩短开发时间？</li></ol><p>   答：沟通成本激增、新人适配期长、 管理复杂度上升、任务不可分割性</p><ol start="2"><li><p>为学校图书馆管理系统提供五条系统需求？</p><p>答：多角色权限管理、自动化借阅与逾期处理、预约与续借功能、数据统计与可视化报表、图书全生命周期管理。</p></li><li><p>存取款流程图设计？</p><p>答：插卡—&gt;输入密码—&gt;选择存款—&gt;放入现金—&gt;系统读取存款数目存入卡内—&gt;用户退出，取卡</p><p>插卡—&gt;输入密码—&gt;选择取款—&gt;输入取款数目—&gt;系统判断余额是否充足，充足则出钱—&gt;用户退出，取卡</p><span id="more"></span></li><li><p>比较面向对象法和结构化法的特点，并说明为啥面向对象法更加优越?</p><p>结构化方法：模块化开发（函数&#x2F;过程划分模块）</p><p>&emsp;&emsp;&emsp;以“过程”为核心、数据和处理过程独立、适用于小型系统；</p><p>&emsp;&emsp;&emsp;数据与函数分离；</p><p>&emsp;&emsp;&emsp;通过函数复用，维护复杂。</p><p>面向对象法：模块化开发（类&#x2F;对象划分模块）（封装，继承，多态）</p><p>​    &emsp;&emsp;以对象为核心、容易理解，扩展性和复用性强、适用于大型系统；</p><p>&emsp;&emsp;&emsp;数据封装在对象内；</p><p>&emsp;&emsp;&emsp;通过继承&#x2F;组合复用，利用多态扩展行为，高内聚低耦合设计，维护简单。</p><p>‌<strong>总结</strong>‌：结构化适合小型&#x2F;性能敏感场景，面向对象在复杂系统、高扩展性需求中优势显著。</p><p>结构性程序的优点：</p><p>&emsp;<strong>模块化</strong>‌：功能拆分明确，便于复用和维护；</p><p><strong>&emsp;可读性强</strong>‌：逻辑清晰（顺序&#x2F;分支&#x2F;循环），降低理解成本；</p><p>‌&emsp;<strong>易调试</strong>‌：减少goto等混乱跳转，错误定位更精准；</p><p>&emsp;‌<strong>可扩展性</strong>‌：分层结构方便功能增删改。</p></li><li><p>解释一下软件技术和软件安全技术的不同之处？</p><p><strong>软件技术</strong>‌：侧重系统开发全生命周期（设计、编码、测试等），实现功能与性能目标。</p><p><strong>软件安全技术</strong>‌：专注在开发中预防漏洞（如加密、权限控制）、防御攻击（渗透测试、漏洞修复），保障系统抗风险能力。</p></li><li><p>软件工程的意义是什么？</p><p>①解决软件危机，保障开发可控性、②提升软件质量与可维护性、③优化资源利用与成本控制。</p></li><li><p>类和对象的区别是什么？</p><p><strong>类</strong>‌：抽象模板，加载到内存中仅一次，class关键字</p><p><strong>对象</strong>‌：类的具体实例，可创建多个实例，new动态实例化</p></li><li><p>两种测试方法？</p><p>‌<strong>单元测试</strong>：白盒测试为主、发现编码错误和设计缺陷</p><p><strong>集成测试</strong>：黑盒与灰盒（需要关心模块与模块之间的交互。）结合、接口交互和数据传递的可靠性</p></li><li><p>什么是软件工程增量模型？</p><p>答：将系统拆分为多个功能模块（增量），分阶段开发、集成并交付‌。</p></li><li><p>什么是回归测试？</p><p>答：修改代码后重新测试，确保原有功能正常。防止代码改动引发意外错误（如修复A功能导致B功能异常）</p></li><li><p>什么是指针？</p><p>答：指针是存储变量内存地址的变量（如 int *p 指向整型变量地址）</p><p>&emsp;&emsp;取地址（&amp;a 获取变量a的地址）；解引用（*p 访问指针指向的值）。</p></li><li><p>白盒测试、黑盒测试名词解释</p><p><strong>白盒测试</strong>‌：基于代码内部结构的测试, 需了解程序逻辑.</p><p><strong>黑盒测试</strong>‌：基于功能需求的测试, 无需了解代码.</p></li><li><p>软件工程导论生命周期</p><p><strong>软件定义时期</strong>‌：问题定义‌、可行性研究‌、需求分析</p><p><strong>软件开发时期</strong>‌：总体设计、详细设计、编码‌、测试</p><p><strong>运行维护时期</strong>‌：维护‌</p></li><li><p>需求分析是什么，主要任务是什么</p><p><strong>定义‌</strong>：确定用户与系统目标，明确软件应实现的功能和约束条件。<br><strong>‌主要任务‌</strong>：</p><p>&emsp;‌收集需求‌：通过访谈、问卷等方式获取用户&#x2F;业务需求。</p><p>‌&emsp;分类整理‌：区分‌功能需求‌（如登录功能）与‌非功能需求‌（如响应速度≤1秒）。</p><p>‌&emsp;验证可行性‌：评估技术、成本与时间是否可实现。</p><p>&emsp;‌文档化‌：编写‌需求规格说明书（SRS）‌，作为开发基准。</p><p>&emsp;‌管理变更‌：跟踪需求变动，避免范围蔓延（Scope Creep）。<br><strong>‌核心目的‌</strong>：确保开发方向与用户期望一致，减少后期返工风险。</p></li><li><p>软件维护</p><p>答：软件生命周期的最终阶段，指软件交付使用后为修正错误、适应环境或扩展功能而进行的持续修改过程，贯穿软件运行的整个生命周期‌。</p><p><strong>改正性维护</strong>：修复运行中的错误。</p><p><strong>适应性维护</strong>：适配环境变化（如系统升级）。</p><p><strong>完善性维护</strong>：新增功能或优化性能。</p><p><strong>预防性维护</strong>：重构代码以降低未来维护成本。</p><p><strong>核心目标</strong>‌：延长软件生命周期，确保稳定性和用户需求匹配。</p></li><li><p>MVC解释？</p><p>答：数据管理、用户界面和控制逻辑，提升代码的可维护性与扩展性‌。</p><p><strong>模型（Model）</strong>：管理数据与业务逻辑</p><p><strong>视图（View）</strong>：呈现数据给用户，接收用户输入</p><p><strong>控制器（Controller）</strong>：协调模型与视图，处理用户请求并更新两者</p></li><li><p>Spring MVC流程：</p><p>答：用户请求—&gt;Servlet接受请求—&gt;Mapper解析请求—&gt;Controller处理业务—&gt;ModelAndView返回数据与视图—&gt;ViewResolver解析视图—&gt;渲染视图—&gt;响应。</p></li><li><p>JAVA中JDBC运行过程</p><p><strong>加载驱动</strong>‌：注册数据库驱动（如Class.forName(“com.mysql.jdbc.Driver”)）。</p><p><strong>建立连接</strong>‌：通过DriverManager.getConnection(url,     user, password)获取连接。</p><p><strong>创建Statement</strong>：使用Connection生成Statement或PreparedStatement。</p><p>‌<strong>执行SQL</strong>‌：调用executeQuery()（查询）或executeUpdate()（增删改）。</p><p><strong>处理结果</strong>‌：遍历ResultSet（查询）或获取影响行数（更新）。</p><p>‌<strong>关闭资源</strong>‌：依次关闭ResultSet、Statement、Connection。</p><p><strong>核心点</strong>‌：驱动→连接→执行→结果→关闭，全程需处理SQLException</p></li><li><p>一个员工可以查看员工的总工资和他个人的工资，但是有一个问题是，如果部门里面只有两个人的话，那么一个人就能通过这两个信息来间接查询到另一个人的工资，如何解决这个问题？</p><p>①<strong>调整薪资披露范围</strong>、②<strong>复杂化薪资结构</strong>‌、③<strong>增设保密协议</strong></p><p><strong>核心原则</strong>‌：保障员工对自身工资的知情权‌，同时通过管理手段规避隐私泄露风险。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure></li><li><p>人机交互界面的设计原则以及命令行交互需要注意什么？</p><p><strong>直观性</strong>‌：操作逻辑清晰，减少学习成本。</p><p>‌<strong>一致性</strong>‌：界面风格、交互流程统一。</p><p>‌<strong>反馈机制</strong>‌：实时反馈操作结果（如加载状态、成功&#x2F;失败提示）。</p><p>‌<strong>容错性</strong>‌：提供撤销&#x2F;重做功能，避免误操作导致严重问题。</p><p>‌<strong>简洁性</strong>‌：避免冗余信息，聚焦核心功能。</p></li><li><p>做一个密码检验，第一个条件是长度是8-16位，第二个条件是必须在提供的码表内，大小写字母，数字，一些符号。</p><p><strong>长度校验</strong>‌：检查密码长度是否在8-16位之间。</p><p><strong>字符范围校验</strong>‌：遍历每个字符，确认是否在预设码表内</p></li><li><p>面向对象继承的题，类似于解决系统升级如何用以前的功能</p><p>答：<strong>基类保留旧功能</strong>‌、<strong>子类继承并扩展</strong>‌；<strong>原则</strong>‌：开闭原则（扩展开放，修改关闭）。</p></li><li><p>什么是面向对象方法学?它有哪些优点? </p><p>面向对象方法是一种运用对象、类、继承、封装、聚合、消息、多态等概念来构造系统的软件开发方法。 </p><p>面向对象方法的优点是：符合人们习惯的思维方式、稳定性好、可重用性好、可维护性好、容易开发大型的软件产品。</p></li><li><p>什么是对象模型？建立对象模型时主要使用那些图形符号？这些符号的含义是什么？ </p><p><strong>对象模型</strong>‌：描述系统中类、对象及其关系的静态结构模型，聚焦属性、方法及交互。</p><p><strong>常用图形符号</strong>‌（以UML类图为例）：</p><p>&emsp;‌①<strong>类</strong>‌（矩形）：分三栏（类名、属性、方法），如 类名 | -属性: 类型 | +方法。</p><p>&emsp;‌②<strong>关联</strong>‌（实线箭头）：类间引用关系（如 用户→订单），可标注角色名或多重性。</p><p>&emsp;‌③<strong>继承</strong>‌（空心三角箭头）：子类继承父类（如 猫→动物）。</p><p>&emsp;④<strong>组合&#x2F;聚合</strong>（实心&#x2F;空心菱形）：整体与部分关系（组合强，聚合弱，如 汽车◉发动机）。</p><p>‌<strong>含义</strong>‌：通过类与关系抽象系统结构，明确职责与协作逻辑。</p></li><li><p>什么是动态模型？建立功能模型时主要使用哪些图形符号？这些符号的含义是什么？ </p><p><strong>动态模型</strong>‌：描述系统行为或状态<strong>变化</strong>的模型（如交互流程、实时响应）。</p><p><strong>常用图形符号</strong>‌（以数据流图为例）：</p><p>&emsp;①<strong>外部实体</strong>‌（矩形）：系统输入&#x2F;输出的来源或终点（如用户、设备）。</p><p>&emsp;②<strong>过程</strong>‌（圆角矩形）：数据处理功能（如“计算订单”）。</p><p>&emsp;③<strong>数据存储</strong>‌（横线或开口矩形）：数据持久化位置（如数据库、文件）。</p><p>&emsp;④<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“订单信息”）。</p><p>‌<strong>含义</strong>‌：通过符号组合清晰表达系统功能的数据输入、处理、存储与输出逻辑。 </p></li><li><p>什么是功能模型？建立功能模型时主要使用哪些图形符号？</p><p><strong>功能模型</strong>‌：描述系统数据处理<strong>逻辑</strong>的模型，明确输入、输出及内部功能转换。</p><p>‌<strong>常用图形符号</strong>‌（以数据流图为主）：</p><p>&emsp;①<strong>外部实体</strong>‌（矩形）：数据源或终点（如用户、外部系统）。</p><p>‌&emsp;②<strong>处理过程</strong>‌（圆角矩形）：数据变换或计算（如“验证登录”）。</p><p>&emsp;③<strong>数据流</strong>‌（箭头）：数据流动方向及内容（如“请求信号”）。</p><p>&emsp;‌④<strong>数据存储</strong>‌（横线&#x2F;开口矩形）：数据持久化位置（如数据库、缓存）。</p><p>‌<strong>作用</strong>‌：通过符号组合直观展现数据如何被系统功能处理、存储与传递。</p></li><li><p>面向对象设计应该遵循哪些准则?简述每条准则的内容，并说明遵循这条准则的必要性。 </p><p>答: 模块化、抽象、信息隐藏、弱耦合、强内聚、可重用</p></li><li><p>简述有助于提高面向对象设计质量的每条主要启发规则的内容和必要性</p><p><strong>提高面向对象设计质量的主要启发规则</strong>‌：</p><p>单一职责原则（SRP）‌<br>&emsp;o    ‌内容‌：一个类只承担一个职责。<br>&emsp;o    ‌必要性‌：降低复杂度，提升可维护性和复用性。</p><p>‌开闭原则（OCP）‌<br>&emsp;o    ‌内容‌：对扩展开放，对修改关闭。<br>&emsp;o    ‌必要性‌：通过扩展而非修改适应变化，减少风险。</p><p>‌里氏替换原则（LSP）‌<br>&emsp;o    ‌内容‌：子类必须能完全替代父类。<br>&emsp;o    ‌必要性‌：确保继承体系的逻辑正确性。</p><p>‌接口隔离原则（ISP）‌<br>&emsp;o    ‌内容‌：客户端不应依赖不需要的接口。<br>&emsp;o    ‌必要性‌：避免接口臃肿，降低耦合。</p><p>‌依赖倒置原则（DIP）‌<br>&emsp;o    ‌内容‌：依赖抽象而非具体实现。<br>&emsp;o    ‌必要性‌：提高灵活性，支持模块解耦。</p><p>‌组合优于继承‌<br>&emsp;o    ‌内容‌：优先用组合实现功能复用。<br>&emsp;o    ‌必要性‌：减少继承的强耦合，增强扩展性。</p><p>迪米特法则（Law of Demeter）‌<br>&emsp;o    ‌内容‌：对象仅与直接关联的类交互。<br>&emsp;o    ‌必要性‌：减少依赖链，提高模块独立性。</p><p>‌高内聚低耦合‌<br>&emsp;o    ‌内容‌：模块内部紧密相关，模块间依赖最小化。<br>&emsp;o    ‌必要性‌：增强可维护性和可测试性。</p><p>‌封装变化点‌<br>&emsp;o    ‌内容‌：将易变逻辑隔离到独立模块。<br>&emsp;o    ‌必要性‌：降低修改影响，提升系统稳定性。</p><p>‌避免重复（DRY）‌<br>&emsp;o    内容‌：相同逻辑仅出现一次。<br>&emsp;o    ‌必要性‌：减少维护成本，保证一致性。</p><p>‌<strong>总结</strong>‌：通过遵循这些规则，可构建更清晰、灵活、可扩展的系统，降低开发与维护成本。</p></li><li><p>面向对象程序设计语言主要有哪些技术特点？</p><p><strong>面向对象程序设计语言的主要技术特点</strong>‌：</p><p>&emsp;‌<strong>封装</strong>‌：将数据与操作绑定在类中，隐藏实现细节，提供安全性和模块化。</p><p><strong>&emsp;继承</strong>‌：子类复用父类属性和方法，支持层次化设计与代码复用。</p><p>&emsp;‌<strong>多态</strong>‌：同一操作在不同对象中表现不同行为（如重载、覆盖），增强灵活性。</p><p><strong>&emsp;抽象化</strong>‌：通过接口&#x2F;抽象类定义规范，分离“做什么”与“怎么做”。</p><p><strong>&emsp;动态绑定</strong>‌：运行时根据对象类型确定调用方法，支持多态行为。</p><p>&emsp;<strong>消息传递</strong>‌：对象间通过方法调用通信，降低耦合。</p><p><strong>&emsp;组合与聚合</strong>‌：通过对象组合实现复杂功能，替代继承的强依赖。</p><p>&emsp;‌<strong>类与对象</strong>‌：以类为模板创建对象，实例化具体实体，封装状态与行为。</p><p>‌<strong>核心作用</strong>‌：提升代码复用性、扩展性、维护性，贴近现实问题建模。</p></li><li><p>选择面向对象程序设计语言时主要应该考虑哪些因素？</p><p>&emsp;<strong>语法简洁性</strong>‌：是否易于理解与开发（如Python vs C++）。</p><p>‌&emsp;<strong>性能需求</strong>‌：对执行效率要求高时选编译型语言（如C++&#x2F;C#）。</p><p>‌&emsp;<strong>跨平台能力</strong>‌：是否需支持多平台运行（如Java&#x2F;Kotlin）。</p><p>&emsp;‌<strong>生态系统</strong>‌：社区活跃度、框架&#x2F;库丰富性（如Java的Spring）。</p><p>&emsp;‌<strong>团队熟悉度</strong>‌：开发者对语言的熟练程度，降低学习成本。</p><p><strong>&emsp;行业标准</strong>‌：特定领域的主流语言（如游戏开发常用C#）。</p><p>&emsp;<strong>工具链支持</strong>‌：IDE、调试器、测试工具的成熟度。</p><p>&emsp;‌<strong>安全性与维护性</strong>‌：内存管理、类型系统严格性（如C#强类型）。</p><p>‌&emsp;<strong>项目规模</strong>‌：大型系统倾向静态语言（如Java），小型项目可选动态语言（如Python）。</p><p>‌<strong>核心目标</strong>‌：平衡开发效率、运行性能、长期维护成本与应用场景适配性。</p></li><li><p>工厂模式：</p><p><strong>一种‌创建型设计模式</strong>‌，封装对象实例化过程，通过接口统一创建逻辑，客户端无需关心具体类。</p><p>‌<strong>核心作用</strong>‌：</p><p>‌&emsp;<strong>解耦</strong>‌：分离对象创建与使用，避免代码依赖具体类。</p><p><strong>&emsp;扩展性</strong>‌：新增产品类型时，无需修改客户端代码（如支持MySQL&#x2F;Oracle数据库切换）。</p><p>‌&emsp;<strong>统一入口</strong>‌：集中管理创建逻辑（如根据配置生成不同文件解析器）。</p><p>‌<strong>典型实现</strong>‌：</p><ul><li>‌<strong>简单工厂</strong>‌：单一方法根据参数返回不同对象。</li><li>‌<strong>工厂方法</strong>‌：子类重写工厂方法，决定实例化目标类。</li><li>‌<strong>抽象工厂</strong>‌：创建产品族（如跨平台UI组件库）。</li></ul><p>‌<strong>适用场景</strong>‌：对象类型频繁变化、创建逻辑复杂或需全局统一控制（如依赖注入框架）</p></li><li><p>计算机软件的分类，各个分类分别介绍</p><p>**系统软件：**操作系统‌、‌语言处理程序、数据库管理系统、驱动程序‌</p><p>**应用软件：**通用软件（Web）、专用软件（Ps）、网络软件（微信）</p><p>**其他分类：**单机游戏、服务器软件等</p></li><li><p>静态测试和动态测试的定义</p><p><strong>静态测试</strong></p><ul><li>‌<strong>定义</strong>‌：不运行程序，通过检查文档、代码或设计来发现缺陷。</li><li>‌<strong>方法</strong>‌：代码审查、需求走查、设计评审、检查清单。</li></ul><p><strong>动态测试</strong></p><ul><li>‌<strong>定义</strong>‌：通过运行程序验证其行为是否符合预期，检查输入输出的正确性。</li><li>‌<strong>方法</strong>‌：单元测试、集成测试、系统测试（如功能测试、性能测试）。</li></ul><p>‌<strong>核心区别</strong>‌：静态测试基于静态分析，动态测试依赖代码执行。</p></li><li><p>时间复杂度概念</p><p>答：<strong>时间复杂度</strong>‌：衡量算法执行时间随‌数据规模增长的趋势，用大O符号表示。</p><p>‌<strong>常见阶</strong>‌：O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²)。</p></li><li><p>区分静态测试和动态测试，并分别举例</p><p><strong>静态测试</strong>‌：不运行代码，检查代码结构&#x2F;设计（例：代码审查、静态分析工具）。<br><strong>动态测试</strong>‌：运行程序，验证实际输出（例：单元测试（JUnit）、功能测试）。</p></li><li><p>Springboot原理：</p><p><strong>启动入口</strong>‌：@SpringBootApplication</p><p><strong>加载配置</strong>‌：读取 spring.factories 中的自动配置类，按条件初始化 Bean。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;Bean 的作用也就是把一组数据组合成一个特殊的类便于传输。（getter、setter）</p><p>‌<strong>运行应用</strong>‌：启动内嵌服务器，处理请求</p></li></ol><p>二、编程题目：</p><ol><li>x小于0时y等于-1，x大于0时y等于1，x等于0时，y等于0。</li></ol><p>   Java：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt; <span class="number">0</span>) ? <span class="number">1</span> : (x &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sign(-<span class="number">5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">        System.out.println(sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">        System.out.println(sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   C：</p>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sign</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt; <span class="number">0</span>) - (x &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">-5.0</span>));  <span class="comment">// 输出 -1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">0.0</span>));   <span class="comment">// 输出 0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sign(<span class="number">3.14</span>));  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>3*3矩阵倒置行列互换写程序：</p><p>伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="type">int</span>[][] result=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]<span class="comment">//逆转的矩阵；</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixTranspose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(matrix);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] transposed = transpose(matrix);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n转置后矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(transposed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵转置方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j]; <span class="comment">// 行列索引互换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>给了15个（A,B,C），键盘输入（a,b,c），然后计算之间的距离那个最短，题中会给出计算公式，用函数判断最小距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortDistance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] points = <span class="keyword">new</span> <span class="title class_">int</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>; i &lt; <span class="number">15</span>; x = ++i %<span class="number">5</span>, y = i /<span class="number">5</span>)</span><br><span class="line">            points[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;输入三个点（如A B C）: &quot;</span>);</span><br><span class="line">        String[] input = sc.nextLine().toUpperCase().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] selected = &#123;</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>],</span><br><span class="line">            points[input.charAt(<span class="number">0</span>) - <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Math.hypot(selected[i]-selected[j], selected[i]-selected[j]);</span><br><span class="line">                <span class="keyword">if</span> (d &lt; min) &#123;</span><br><span class="line">                    min = d;</span><br><span class="line">                    pair = input[i] + <span class="string">&quot;-&quot;</span> + input[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;最短距离：%.2f (%s)&quot;</span>, min, pair);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Scanner类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入字符串”);</span></span><br><span class="line"><span class="string">String a = input.nextLine();</span></span><br></pre></td></tr></table></figure></li><li><p>求一个数的平方，且平方值的数两两相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AABBSquare</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历四位数平方的范围（32²=1024 到 99²=9801）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">32</span>; n &lt;= <span class="number">99</span>; n++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">square</span> <span class="operator">=</span> n * n;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(square);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否为四位数且符合AABB模式</span></span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">4</span> </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">0</span>) == s.charAt(<span class="number">1</span>) </span><br><span class="line">                &amp;&amp; s.charAt(<span class="number">2</span>) == s.charAt(<span class="number">3</span>)) &#123;</span><br><span class="line">                System.out.println(n + <span class="string">&quot;² = &quot;</span> + square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：88² = 7744</span></span><br></pre></td></tr></table></figure></li><li><p>编程输入十个数，将最小的与第一个数互换，最大的与第十个数互换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>;  <span class="comment">// 输入10个数存入数组  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>, maxIndex = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找最小值和最大值的索引  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) minIndex = i;  </span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) maxIndex = i;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最小值和第一个数  </span></span><br><span class="line">swap(arr, <span class="number">0</span>, minIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 若原最大值是第一个数，更新maxIndex（因第一个数已被交换）  </span></span><br><span class="line"><span class="keyword">if</span> (maxIndex == <span class="number">0</span>) maxIndex = minIndex;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换最大值和第十个数  </span></span><br><span class="line">swap(arr, <span class="number">9</span>, maxIndex);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编程输入一个字符串，字符串中大写字母转换为小写字母，小写字母转换为大写字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> ...;  <span class="comment">// 获取输入字符串  </span></span><br><span class="line"><span class="type">char</span>[] chars = input.toCharArray();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (Character.isUpperCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toLowerCase(chars[i]);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(chars[i])) &#123;  </span><br><span class="line">        chars[i] = Character.toUpperCase(chars[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);  <span class="comment">// 输出result  </span></span><br><span class="line">利用Character类方法直接翻转字母大小写，非字母字符保持原样</span><br></pre></td></tr></table></figure></li><li><p>转换进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入：num(十进制整数), base(目标进制，范围2-36)</span></span><br><span class="line"><span class="comment">// 输出：目标进制的字符串形式</span></span><br><span class="line">String <span class="title function_">convertBase</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;  <span class="comment">// 边界情况：输入为0</span></span><br><span class="line">    <span class="keyword">if</span> (base &lt; <span class="number">2</span> || base &gt; <span class="number">36</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 进制不合法</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] digits = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>.toCharArray();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNegative</span> <span class="operator">=</span> num &lt; <span class="number">0</span>;</span><br><span class="line">    num = abs(num);  <span class="comment">// 处理负数</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> num % base;  <span class="comment">// 取余数</span></span><br><span class="line">        result.append(digits[remainder]);  <span class="comment">// 映射字符</span></span><br><span class="line">        num = num / base;  <span class="comment">// 更新num</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isNegative) result.append(<span class="string">&#x27;-&#x27;</span>);  <span class="comment">// 还原负号</span></span><br><span class="line">    <span class="keyword">return</span> result.reverse().toString();  <span class="comment">// 反转余数序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给定两个数组，将一组数据从一个数组替换到另一个数组，时间复杂度为n。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReplacer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span>[] source, <span class="type">int</span>[] target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.min(source.length, target.length);</span><br><span class="line">        System.arraycopy(source, <span class="number">0</span>, target, <span class="number">0</span>, n); <span class="comment">// O(n) 时间复制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经典算法（01背包等）动态规划问题</p><p><strong>背包问题描述：</strong></p><ul><li>‌<strong>给定</strong>‌：物品重量数组 weight[]，价值数组 value[]，背包容量 capacity</li><li>‌<strong>要求</strong>‌：在不超过背包容量的前提下，求能装入物品的最大总价值</li><li>‌<strong>限制</strong>‌：每个物品只能选一次（0-1选择）</li></ul><p><strong>‌动态规划解法：</strong></p><p>&emsp;①<strong>状态定义</strong></p><p>&emsp;&emsp;dp[j]：容量为 j 的背包能装的最大价值。</p><p>&emsp;②<strong>状态转移方程‌</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</span><br></pre></td></tr></table></figure><p>&emsp;③<strong>初始化‌</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0.</span>..capacity] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>&emsp;④<strong>遍历顺序‌</strong></p><ul><li><strong>外层循环</strong>‌：遍历每个物品（保证每个物品只选一次）</li><li>‌<strong>内层循环</strong>‌：‌倒序遍历背包容量（防止重复选择）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knapsack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01</span><span class="params">(<span class="type">int</span>[] weight, <span class="type">int</span>[] value, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weight.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 必须倒序遍历容量，避免重复选择</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> capacity; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weight = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;    <span class="comment">// 物品重量</span></span><br><span class="line">        <span class="type">int</span>[] value = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;     <span class="comment">// 物品价值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">8</span>;               <span class="comment">// 背包容量</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> knapsack01(weight, value, capacity);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大价值: &quot;</span> + maxValue);  <span class="comment">// 输出: 10（选物品0、1、3）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA</title>
      <link href="/blog2025.github.io/2025/03/19/JAVA/"/>
      <url>/blog2025.github.io/2025/03/19/JAVA/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Java历史"><a href="#一-Java历史" class="headerlink" title="一.Java历史"></a>一.Java历史</h3><ol><li><p>运行流程：</p><p>&emsp;&emsp;代码——&gt;字节码——&gt;虚拟机——&gt;执行（一次编写，处处运行）</p></li><li><p>版本：</p><p>&emsp;&emsp;Java SE：标准版（JVM和标准库）；</p><p>&emsp;&emsp;Java EE：企业版（SE基础上增加大量API和库）Spring框架等；</p><p>&emsp;&emsp;Java ME：嵌入式版本。</p></li><li><p>JDK：（开发工具包）包含JRE、编译器、调试器等，</p><p>&emsp;&emsp;JRE：（开发环境）运行Java字节码的虚拟机、库。</p></li><li><p>第一个Java程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span></li></ol><h3 id="二、Java基础"><a href="#二、Java基础" class="headerlink" title="二、Java基础"></a>二、Java基础</h3><ol><li><h4 id="命名格式："><a href="#命名格式：" class="headerlink" title="命名格式："></a>命名格式：</h4><p>类名格式：大写字母开头+数字&#x2F;下划线</p><p>方法名格式：小写字母开头+数字&#x2F;下划线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()：方法名</span><br><span class="line">String[]：参数类型</span><br><span class="line">args：参数名</span><br><span class="line"></span><br><span class="line">HelloWorld.java（源码）—编译—&gt;HelloWorld.class（字节码）—执行—&gt;JVM</span><br></pre></td></tr></table></figure></li><li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内容</span></span><br><span class="line"><span class="comment">/*内容*/</span></span><br><span class="line"><span class="comment">/**内容*/</span></span><br></pre></td></tr></table></figure></li><li><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + a);</span><br></pre></td></tr></table></figure></li><li><h4 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h4><table><thead><tr><th>类型</th><th></th><th>字节数</th><th>格式</th><th>包装（引用类型）</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1</td><td>127</td><td>java.lang.Byte</td></tr><tr><td></td><td>short</td><td>2</td><td>100</td><td>java.lang.Short</td></tr><tr><td></td><td>int</td><td>4</td><td>100</td><td>java.lang.Integer</td></tr><tr><td></td><td>long</td><td>8</td><td>100L</td><td>java.lang.Long</td></tr><tr><td>浮点型</td><td>float</td><td>4</td><td>3.14f</td><td>java.lang.Float</td></tr><tr><td></td><td>double</td><td>8</td><td>3.14</td><td>java.lang.Double</td></tr><tr><td>字符型</td><td>char</td><td>2</td><td></td><td>java.lang.Character</td></tr><tr><td>布尔型</td><td>boolean</td><td>1</td><td>true&#x2F;false</td><td>java.lang.Boolean</td></tr></tbody></table></li><li><h4 id="引用数据类型："><a href="#引用数据类型：" class="headerlink" title="引用数据类型："></a>引用数据类型：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String</span><br><span class="line"><span class="type">String</span> <span class="variable">sentence</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="省略变量类型："><a href="#省略变量类型：" class="headerlink" title="省略变量类型："></a>省略变量类型：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 代替方法名</span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> 方法名();</span><br></pre></td></tr></table></figure></li><li><h4 id="运算："><a href="#运算：" class="headerlink" title="运算："></a>运算：</h4><p>简写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a += <span class="number">100</span>；等价于a = a + <span class="number">100</span>；</span><br><span class="line">a -+ <span class="number">100</span>；等价于a = a — <span class="number">100</span>；</span><br><span class="line">a *= <span class="number">100</span>；等价于a = a * <span class="number">100</span>；</span><br><span class="line">a /= <span class="number">100</span>；等价于a = a / <span class="number">100</span>；</span><br></pre></td></tr></table></figure><p>自增自减：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>；</span><br><span class="line">a++;<span class="comment">//先引用a，再+1</span></span><br><span class="line">a--;<span class="comment">//先引用a，再100</span></span><br><span class="line">++a;<span class="comment">//先+1，再引用a</span></span><br><span class="line">--a;<span class="comment">//先-1，再引用a</span></span><br></pre></td></tr></table></figure><p>三元运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt; <span class="number">1</span> ? a : <span class="number">50</span></span><br><span class="line">    判断a是否大于<span class="number">1</span>，若大于<span class="number">1</span>，则b = a，否则b = <span class="number">50</span></span><br></pre></td></tr></table></figure></li><li><h4 id="字符和字符串："><a href="#字符和字符串：" class="headerlink" title="字符和字符串："></a>字符和字符串：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">\：转义字符</span><br></pre></td></tr></table></figure></li><li><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[个数];</span><br><span class="line"><span class="type">int</span>[] 变量名 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;等价于<span class="type">int</span> [] 变量名 = &#123;值<span class="number">1</span>，值<span class="number">2</span>，值<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&quot;王麻子&quot;</span>;<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h3><ol><li><h4 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();<span class="comment">//读取输入并获取字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//读取输入并获取整数</span></span><br><span class="line">输出：</span><br><span class="line">    System.out.println();<span class="comment">//输出换行</span></span><br><span class="line">System.out.print();<span class="comment">//输出</span></span><br></pre></td></tr></table></figure></li><li><h4 id="if条件："><a href="#if条件：" class="headerlink" title="if条件："></a>if条件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断相等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==：比较值</span><br><span class="line">equals()：比较内存地址</span><br></pre></td></tr></table></figure></li><li><h4 id="Switch多重选择："><a href="#Switch多重选择：" class="headerlink" title="Switch多重选择："></a>Switch多重选择：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:条件;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="while循环："><a href="#while循环：" class="headerlink" title="while循环："></a>while循环：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先判断再执行：</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="do-while循环："><a href="#do-while循环：" class="headerlink" title="do while循环："></a>do while循环：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先执行再判断：</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure></li><li><h4 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;布尔表达式;自增或自减)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for each循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量类型 变量值 : 循环对象)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a : num)&#123;</span><br><span class="line">    sout(a);</span><br><span class="line">&#125;</span><br><span class="line">结果为：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><h4 id="break、continue、return"><a href="#break、continue、return" class="headerlink" title="break、continue、return"></a>break、continue、return</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>：终止所有循环，跳出循环体。</span><br><span class="line"><span class="keyword">continue</span>：终止本次循环，开始下一次循环。</span><br><span class="line"><span class="keyword">return</span>：结束方法。</span><br></pre></td></tr></table></figure></li></ol><h3 id="四、数组："><a href="#四、数组：" class="headerlink" title="四、数组："></a>四、数组：</h3><ol><li><h4 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i&lt;num.length ; i++)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num[i];</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n : num)&#123;</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java 标准库遍历：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sout(Arrays.toString(num));</span><br></pre></td></tr></table></figure></li><li><h4 id="数组排序："><a href="#数组排序：" class="headerlink" title="数组排序："></a>数组排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">各类排序算法：</span><br><span class="line">插入排序：</span><br><span class="line">    - 直接插入排序</span><br><span class="line">    - 希尔排序</span><br><span class="line">交换排序：</span><br><span class="line">    - 冒泡排序</span><br><span class="line">    - 快速排序</span><br><span class="line">选择排序：</span><br><span class="line">    - 简单选择排序</span><br><span class="line">    - 树形选择排序</span><br><span class="line">    - 堆排序</span><br><span class="line">归并排序</span><br><span class="line">基数排序 </span><br><span class="line"></span><br><span class="line">典型：</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num[i];</span><br><span class="line">num[i] = num2[i+<span class="number">1</span>];</span><br><span class="line">num2[i+<span class="number">1</span>] = temp;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java 标准库排序：</span><br><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">Arrays.sort(num);</span><br></pre></td></tr></table></figure></li><li><h4 id="多维数组："><a href="#多维数组：" class="headerlink" title="多维数组："></a>多维数组：</h4><p>二维数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多维数组从0开始</span><br><span class="line"> arr[0][0],arr[0][1],arr[0][2];</span><br><span class="line">    arr[1][0],arr[1][1],arr[1][2];</span><br><span class="line">arr[2][0],arr[2][1],arr[2][2];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] num = new int[3][4];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] num = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">调用：sout(num[<span class="number">1</span>][<span class="number">2</span>]);=&gt;<span class="number">6</span></span><br><span class="line">    </span><br><span class="line">打印二维数组：<span class="keyword">for</span> each</span><br><span class="line"><span class="title function_">for</span><span class="params">(<span class="type">int</span>[] arr : num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n : arr)&#123;</span><br><span class="line">        sout(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java标准库打印：</span><br><span class="line">sout(Arrays.deepToString(num));</span><br></pre></td></tr></table></figure><p>三维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][][] num = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,</span><br><span class="line">        &#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">16</span>,<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="number">18</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印：</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[][] arr : num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] arr2 : arr)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> n : arr2)&#123;</span><br><span class="line">                sout(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h3><ol><li><h4 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:所有类可见</span><br><span class="line"><span class="keyword">private</span>:同一类可见（该种类只能通过get、set方法被外部类访问）</span><br><span class="line"><span class="keyword">protected</span>:对同一包内的类和所有子类可见</span><br><span class="line">    <span class="keyword">static</span>: 静态变量、方法</span><br><span class="line">    <span class="keyword">final</span>: 常量方法、类、变量（常量方法无法被继承、常量无法被修改）</span><br><span class="line">    <span class="keyword">abstract</span>: 抽象类和抽象方法</span><br><span class="line">    <span class="keyword">synchronized</span>: 该方法同一时间只能被一个线程访问</span><br><span class="line">    <span class="keyword">transient</span>: 不会持久化变量</span><br><span class="line">    <span class="keyword">volatile</span>: 线程访问中强制同步变量值</span><br></pre></td></tr></table></figure></li><li><h4 id="类：（对象的蓝图-原型）"><a href="#类：（对象的蓝图-原型）" class="headerlink" title="类：（对象的蓝图\原型）"></a>类：（对象的蓝图\原型）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="对象：（类的实例化）"><a href="#对象：（类的实例化）" class="headerlink" title="对象：（类的实例化）"></a>对象：（类的实例化）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span>  <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">访问成员：</span><br><span class="line">ps.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">ps.age = <span class="number">10</span>;</span><br><span class="line">ps.<span class="keyword">do</span>();</span><br></pre></td></tr></table></figure></li><li><h4 id="this关键字：（引用当前对象的实例）"><a href="#this关键字：（引用当前对象的实例）" class="headerlink" title="this关键字：（引用当前对象的实例）"></a>this关键字：（引用当前对象的实例）</h4><p>this必须在构造方法的首行，(static)静态方法中不能使用this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）指向当前对象的成员变量</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name1)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name1; <span class="comment">// this.name 是成员变量，name1 是参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）在构造方法中调用其他构造方法</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(<span class="number">10</span>, <span class="number">10</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.width = width;</span><br><span class="line">            <span class="built_in">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">（<span class="number">3</span>）<span class="built_in">this</span>在getter和setter中使用（JavaBean，在IDE中可以快速生成getter和setter）</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            </span><br><span class="line">            ps.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ps.setAge(<span class="number">10</span>);</span><br><span class="line">            sout(ps.getName()+ps.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><h4 id="静态方法和动态方法区别："><a href="#静态方法和动态方法区别：" class="headerlink" title="静态方法和动态方法区别："></a>静态方法和动态方法区别：</h4><table><thead><tr><th>静态方法</th><th>动态方法</th></tr></thead><tbody><tr><td>使用static修饰，属于类本身</td><td>不使用static修饰，属于对象实例</td></tr><tr><td>通过类名调用<br>MathUtils.add(1,1)</td><td>通过对象实例调用<br>Person ps &#x3D; new Pserson()<br>ps.getName()</td></tr><tr><td>只能访问静态变量、方法</td><td>可以访问实例变量、方法和静态变量、方法</td></tr><tr><td>不支持多态，无法重写</td><td>支持多态，可以被重写</td></tr></tbody></table></li><li><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numAdd</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;和为&quot;</span>+numAdd(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">HelloMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        HelloMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="构造方法：-方法名与类名相同"><a href="#构造方法：-方法名与类名相同" class="headerlink" title="构造方法：(方法名与类名相同)"></a>构造方法：(方法名与类名相同)</h4><p>无参数构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">10</span>;</span><br><span class="line">        sout(name +<span class="string">&quot;&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含参数构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//含参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;10&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="方法重载-Overload：（方法名称相同，参数不同）"><a href="#方法重载-Overload：（方法名称相同，参数不同）" class="headerlink" title="方法重载 Overload：（方法名称相同，参数不同）"></a>方法重载 Overload：（方法名称相同，参数不同）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;张三;</span></span><br><span class="line"><span class="string">    private int age=10;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1()&#123;</span></span><br><span class="line"><span class="string">        sout(&quot;</span>hah1<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func1(String name)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public void func2(String name, int age)&#123;</span></span><br><span class="line"><span class="string">        sout(name + &quot;</span><span class="string">&quot; + age)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><p>子类无法访问父类的private字段或者private方法，需要把private改为protected</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ww</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">        </span><br><span class="line">        dog1.ww();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="方法重写-Override：子类的方法覆盖父类中的方法。"><a href="#方法重写-Override：子类的方法覆盖父类中的方法。" class="headerlink" title="方法重写 Override：子类的方法覆盖父类中的方法。"></a>方法重写 Override：子类的方法覆盖父类中的方法。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Class Animal&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog1.eat();</span><br><span class="line">        dog1.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="重写-运行时执行-和重载-编译时执行-的区别："><a href="#重写-运行时执行-和重载-编译时执行-的区别：" class="headerlink" title="重写(运行时执行)和重载(编译时执行)的区别："></a>重写(运行时执行)和重载(编译时执行)的区别：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD.png" alt="重写和重载"></p></li><li><h4 id="super关键字：（访问父类-超类中的方法、构造器、变量）"><a href="#super关键字：（访问父类-超类中的方法、构造器、变量）" class="headerlink" title="super关键字：（访问父类\超类中的方法、构造器、变量）"></a>super关键字：（访问父类\超类中的方法、构造器、变量）</h4><p><strong>super()必须在构造器第一行‌：与this()冲突，二者不能共存。</strong></p><p>(static)静态方法中不能使用super</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）访问父类的成员变量</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Dog&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">printNames</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">super</span>.name); <span class="comment">// 父类的name：输出 &quot;Animal&quot;</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);  <span class="comment">// 子类的name：输出 &quot;Dog&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">2</span>）调用父类的方法</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.makeSound(); <span class="comment">// 先调用父类方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Dog barks&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">（<span class="number">3</span>）调用父类的构造器</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String breed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name); <span class="comment">// 调用父类有参构造器</span></span><br><span class="line">            <span class="built_in">this</span>.breed = breed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="抽象类和抽象方法-Abstract："><a href="#抽象类和抽象方法-Abstract：" class="headerlink" title="抽象类和抽象方法 Abstract："></a>抽象类和抽象方法 Abstract：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">抽象类：无法实例化的类</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类无法实例化，需要通过继承该抽象类才能访问该抽象类的成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法：</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象构造函数</span></span><br><span class="line">    Animal()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//重写抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现抽象构造函数</span></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用抽象方法</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//抽象类无法实例化,需要通过继承该抽象类才能访问该抽象类的成员：</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//实现非抽象方法</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="接口-Interface：-一个类可以实现多个接口"><a href="#接口-Interface：-一个类可以实现多个接口" class="headerlink" title="接口 Interface：(一个类可以实现多个接口)"></a>接口 Interface：(一个类可以实现多个接口)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(<span class="type">int</span> food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.sleep();</span><br><span class="line">        dog.eat(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h4><p>运行时多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">方法重写Override   </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">          sout(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Dog</span>  <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">          dog.eat();</span><br><span class="line"></span><br><span class="line">          <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">          cat.eat();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译时多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法重载：方法名相同，参数不同</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;food&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;肉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food,String drink)</span>&#123;</span><br><span class="line">            sout(food+<span class="string">&quot;鱼&quot;</span>+drink+<span class="string">&quot;水&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="封装：（将字段和方法绑定到单个类中）"><a href="#封装：（将字段和方法绑定到单个类中）" class="headerlink" title="封装：（将字段和方法绑定到单个类中）"></a>封装：（将字段和方法绑定到单个类中）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常用<span class="keyword">private</span>和<span class="keyword">protected</span>隐藏数据和方法，用于实现封装</span><br></pre></td></tr></table></figure></li><li><h4 id="内部类：（在一个类中定义另一个类）"><a href="#内部类：（在一个类中定义另一个类）" class="headerlink" title="内部类：（在一个类中定义另一个类）"></a>内部类：（在一个类中定义另一个类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;内部类&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建外部类Outer的对象</span></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//使用外部类Outer创建内部类Inner的对象</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        sout(inner.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）"><a href="#匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务-利于代码简洁）" class="headerlink" title="匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）"></a>匿名类：（在该类中，只要有需要就创建对象，以执行某些特定任务&#x3D;&gt;利于代码简洁）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">havePet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建匿名类，继承Animal</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">                sout(<span class="string">&quot;匿名类内部+吃饭&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        ps.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======&gt;匿名类内部+吃饭</span><br></pre></td></tr></table></figure></li><li><h4 id="枚举类："><a href="#枚举类：" class="headerlink" title="枚举类："></a>枚举类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span>&#123;</span><br><span class="line">    Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="常用工具类："><a href="#常用工具类：" class="headerlink" title="常用工具类："></a>常用工具类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Math: 计算</span><br><span class="line">Random: 随机数</span><br><span class="line">DateUtils: 时间</span><br><span class="line">StringBuilder: 处理字符串(字符串拼装、增删改查、反转、)====&gt;非线程安全(常用)</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">1024</span>);  <span class="comment">// 初始容量1024</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">        .append(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">        .append(user.getName())</span><br><span class="line">        .append(<span class="string">&quot;! Your age is &quot;</span>)</span><br><span class="line">        .append(user.getAge())</span><br><span class="line">        .toString();</span><br><span class="line">=======&gt;Hello,Your age is </span><br><span class="line">StringBuffer: 多线程====&gt;线程安全(<span class="keyword">synchronized</span>保证线程安全)</span><br></pre></td></tr></table></figure></li><li><h4 id="反射：reflection"><a href="#反射：reflection" class="headerlink" title="反射：reflection"></a>反射：reflection</h4><p>允许程序在运行时动态<strong>获取类的信息并操作对象</strong>，</p><p>包括：类信息(类名、父类、接口、字段、方法、构造方法)；</p><p>&emsp;&emsp;&emsp;操作对象(创建实例、调用方法、修改字段值)；</p><p>&emsp;&emsp;&emsp;访问权限。</p><p>应用于：<strong>Spring依赖注入</strong>、动态配置与插件开发、动态代理与Spring AOP编程(日志和事务)、测试框架(<strong>JUnit</strong>自动运行测试方法)、<strong>序列化与反序列化(JSON&#x2F;XML)</strong>。</p><p>参考:<a href="https://www.cainiaojc.com/java/java-reflection.html">链接</a></p></li></ol><h3 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h3><ol><li><h4 id="异常层次及类型："><a href="#异常层次及类型：" class="headerlink" title="异常层次及类型："></a>异常层次及类型：</h4><p><img src="/blog2025.github.io/2025/03/19/JAVA/%E5%BC%82%E5%B8%B8.png"></p></li><li><h4 id="捕获异常："><a href="#捕获异常：" class="headerlink" title="捕获异常："></a>捕获异常：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType e<span class="comment">/*异常类型*/</span>)&#123;</span><br><span class="line">捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1)&#123;</span><br><span class="line">捕获块</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e2)&#123;</span><br><span class="line"></span><br><span class="line">&#125;...<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 e1 | 异常类型 e2)&#123;</span><br><span class="line">捕获块</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="throw抛出异常："><a href="#throw抛出异常：" class="headerlink" title="throw抛出异常："></a>throw抛出异常：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化异常，再抛出异常</span><br><span class="line">例子：</span><br><span class="line">    <span class="type">NullPointerException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">或者：</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br></pre></td></tr></table></figure></li><li><h4 id="throws声明其中可能发生的异常类型："><a href="#throws声明其中可能发生的异常类型：" class="headerlink" title="throws声明其中可能发生的异常类型："></a>throws声明其中可能发生的异常类型：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() <span class="keyword">throws</span> 异常类型<span class="number">1</span>，异常类型<span class="number">2</span>，异常类型<span class="number">3</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">例：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">继承RuntimeException或者Exception实现自定义异常。</span><br><span class="line">自定义的异常需要提供多个构造方法。</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">SleepException</span><span class="params">(<span class="type">int</span> code,String message,Throwable cause)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(code,message,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepException</span> <span class="keyword">extends</span> <span class="title class_">BaseException</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="断言-Assertion：调试"><a href="#断言-Assertion：调试" class="headerlink" title="断言 Assertion：调试"></a>断言 Assertion：调试</h4><p>参考:<a href="https://liaoxuefeng.com/books/java/exception/assert/index.html">链接</a></p><p>参考:<a href="https://www.cainiaojc.com/java/java-assertions.html">链接</a></p></li><li><h4 id="日志-Logging：Log4j"><a href="#日志-Logging：Log4j" class="headerlink" title="日志 Logging：Log4j"></a>日志 Logging：Log4j</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(类名.class.getName());</span><br></pre></td></tr></table></figure><p>参考:<a href="https://liaoxuefeng.com/books/java/exception/jdk-logging/index.html">链接</a></p><p>参考:<a href="https://www.cainiaojc.com/java/java-logging.html">链接</a></p></li></ol><h3 id="七、泛型"><a href="#七、泛型" class="headerlink" title="七、泛型"></a>七、泛型</h3><p>&emsp;&emsp;模板：用来适应任意类型，不必对类型进行强制转换。</p><h3 id="八、集合"><a href="#八、集合" class="headerlink" title="八、集合"></a>八、集合</h3><p><img src="/blog2025.github.io/2025/03/19/JAVA/JAVA%E9%9B%86%E5%90%88.png"></p><table><thead><tr><th>Collection</th><th>包含</th></tr></thead><tbody><tr><td>List（有序可重复）</td><td>ArrayList(查)、LinkedList(增，删)、Vector、Stack</td></tr><tr><td>Set（无序不可重复）</td><td>HashSet(去重)(无序)、TreeSet(用于排序)(有序)</td></tr><tr><td>Queue</td><td></td></tr></tbody></table><ol><li><h4 id="Collection："><a href="#Collection：" class="headerlink" title="Collection："></a>Collection：</h4><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add() - 将指定的元素插入到集合中</span><br><span class="line">size() - 返回集合的大小</span><br><span class="line">remove() - 从集合中删除指定的元素</span><br><span class="line">iterator() - 返回一个迭代器以访问集合的元素</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">removeAll() - 从集合中删除指定集合的所有元素</span><br><span class="line">clear() - 删除集合中的所有元素</span><br><span class="line">sort() - 排序</span><br><span class="line">shuffle() - 随机输出</span><br><span class="line">reverse() - 反转元素的顺序</span><br><span class="line">fill() - 用指定的值替换集合中的每个元素</span><br><span class="line">copy() - 创建从指定源到目标的元素副本</span><br><span class="line">swap() - 交换集合中两个元素的位置</span><br><span class="line">binarySearch() - 搜索指定元素，返回该元素在集合中的位置</span><br><span class="line">disjoint() - 检查两个集合是否包含一些公共元素</span><br><span class="line">frequency() - 返回元素在集合中存在的次数计数</span><br><span class="line">min() - 查找最小元素</span><br><span class="line">max() - 查找最大元素</span><br></pre></td></tr></table></figure><h5 id="1-1-List"><a href="#1-1-List" class="headerlink" title="1.1 List:"></a>1.1 List:</h5><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">add() - 将元素添加到列表</span><br><span class="line">addAll() - 将一个列表的所有元素添加到另一个</span><br><span class="line">get() - 有助于从列表中随机访问元素</span><br><span class="line">iterator() - 返回迭代器对象，该对象可用于顺序访问列表的元素</span><br><span class="line">set() - 更改列表的元素</span><br><span class="line">remove() - 从列表中删除一个元素</span><br><span class="line">removeAll() - 从列表中删除所有元素</span><br><span class="line">clear() - 从列表中删除所有元素（比removeAll()效率更高）</span><br><span class="line">size() - 返回列表的长度</span><br><span class="line">toArray() - 将列表转换为数组</span><br><span class="line">contains() -  如果列表包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">indexOf</span><span class="params">()</span> - 返回元素第一次出现的索引</span><br><span class="line">lastIndexOf() - 返回元素最后一次出现的索引</span><br><span class="line">addFirst() - 将指定的元素添加到链接列表的开头</span><br><span class="line">addLast() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">getFirst() - 返回第一个元素</span><br><span class="line">getLast() - 返回最后一个元素</span><br><span class="line">removeFirst() - 删除第一个元素</span><br><span class="line">removeLast() - 删除最后一个元素</span><br><span class="line">peek() - 返回链表的第一个元素（头）</span><br><span class="line">poll() - 返回并从链表中删除第一个元素   </span><br><span class="line">offer() - 将指定的元素添加到链接列表的末尾</span><br><span class="line">toString() - 转换为字符串</span><br><span class="line">clone() - 创建相同的新数组列表</span><br></pre></td></tr></table></figure><p>创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">Linkedlist</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h6 id="（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）"><a href="#（1）ArrayList：（使用Collections-synchronizedList-方法对整个列表进行同步。）" class="headerlink" title="（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）"></a>（1）ArrayList：（使用Collections.synchronizedList()方法对整个列表进行同步。）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现ArrayList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//②使用ArrayList创建</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法①：for循环遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numbers.size();i++ )&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法②：迭代器遍历所有元素</span></span><br><span class="line">        <span class="comment">//boolean hasNext() - 判断是否有下一个元素；</span></span><br><span class="line">        <span class="comment">//next() - 返回下一个元素</span></span><br><span class="line">        <span class="comment">//remove() -删除next()返回的最后一个元素</span></span><br><span class="line">        <span class="comment">//forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Integer&gt; num = numbers.iterator();numbers.hasNext();)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> num.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法③：迭代器for each遍历所有元素</span></span><br><span class="line">        <span class="keyword">for</span>(String s : numbers)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法④：while循环</span></span><br><span class="line">        Iterator&lt;Integer&gt;  num = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">            System.out.print(num.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）LinkedList："><a href="#（2）LinkedList：" class="headerlink" title="（2）LinkedList："></a>（2）LinkedList：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//①使用List实现LinkedList类创建列表</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//②使用LinkedList创建</span></span><br><span class="line">        LinkedList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将元素添加到列表</span></span><br><span class="line">        numbers.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        numbers.add(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;List: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中访问元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用indexOf()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> numbers.indexOf(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;位置3的元素是 &quot;</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + removedNumber);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//和ArrayList遍历相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>List转换为Array：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Integer[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>Array转换为List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = List.of(array);<span class="comment">//JDK11之后</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(array);<span class="comment">//JDK11之前</span></span><br></pre></td></tr></table></figure><h6 id="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"><a href="#（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）" class="headerlink" title="（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）"></a>（3）向量Vector：（可以对整个列表同步）（线程不安全，效率低）</h6><p>创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;Type&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vector&lt;String&gt; mammals= <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用add()方法</span></span><br><span class="line">        mammals.add(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        mammals.add(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用索引号</span></span><br><span class="line">        mammals.add(<span class="number">2</span>, <span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Vector: &quot;</span> + mammals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 addAll() 方法</span></span><br><span class="line">        Vector&lt;String&gt; animals = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        animals.add(<span class="string">&quot;Crocodile&quot;</span>);</span><br><span class="line"></span><br><span class="line">        animals.addAll(mammals);</span><br><span class="line">        System.out.println(<span class="string">&quot;New Vector: &quot;</span> + animals);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-Set："><a href="#1-2-Set：" class="headerlink" title="1.2 Set："></a>1.2 Set：</h5><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add() - 将指定的元素添加到集合中</span><br><span class="line">addAll() - 将指定集合的所有元素添加到集合中</span><br><span class="line">iterator() -返回一个迭代器，该迭代器可用于顺序访问集合中的元素</span><br><span class="line">remove() - 从集合中移除指定的元素</span><br><span class="line">removeAll() - 从存在于另一个指定集合中的集合中删除所有元素</span><br><span class="line">keepAll()  -保留集合中所有还存在于另一个指定集合中的所有元素</span><br><span class="line">clear() - 从集合中删除所有元素</span><br><span class="line">size() - 返回集合的长度（元素数）</span><br><span class="line">toArray() - 返回包含集合中所有元素的数组</span><br><span class="line">contains() -  如果集合包含指定的元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">containsAll</span><span class="params">()</span> - 如果集合包含指定集合的所有元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">hashCode</span><span class="params">()</span> -返回哈希码值（集合中元素的地址）</span><br><span class="line">retainAll() - 找出两个集合中的相同值</span><br></pre></td></tr></table></figure><h6 id="（1）HashSet："><a href="#（1）HashSet：" class="headerlink" title="（1）HashSet："></a>（1）HashSet：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到set1</span></span><br><span class="line">        set1.add(<span class="number">2</span>);</span><br><span class="line">        set1.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set1: &quot;</span> + set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用HashSet类创建另一个集合</span></span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set2.add(<span class="number">1</span>);</span><br><span class="line">        set2.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Set2: &quot;</span> + set2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个集合的并集</span></span><br><span class="line">        set2.addAll(set1);</span><br><span class="line">        System.out.println(<span class="string">&quot;并集是: &quot;</span> + set2);</span><br><span class="line">        <span class="comment">//交集</span></span><br><span class="line">        set1.retainAll(set2);</span><br><span class="line">        <span class="comment">//差集</span></span><br><span class="line">        set1.removeAll(set2);</span><br><span class="line">        <span class="comment">//子集</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> set1.containsAll(set2);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//①迭代器循环：</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//②for循环</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set1)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）TreeSet："><a href="#（2）TreeSet：" class="headerlink" title="（2）TreeSet："></a>（2）TreeSet：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeSet类创建集合</span></span><br><span class="line">        Set&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将元素添加到set集合</span></span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用iterator()访问元素</span></span><br><span class="line">        System.out.print(<span class="string">&quot;使用iterator()访问元素: &quot;</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterate = numbers.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterate.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterate.next());</span><br><span class="line">            System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-迭代器："><a href="#1-3-迭代器：" class="headerlink" title="1.3 迭代器："></a>1.3 迭代器：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> - 判断是否有下一个元素；</span><br><span class="line">next() - 返回下一个元素</span><br><span class="line">remove() -删除next()返回的最后一个元素</span><br><span class="line">forEachRemaining() - 对集合的每个剩余元素执行指定的操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; num = numbers.iterator();</span><br><span class="line"><span class="comment">//迭代器1</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    System.out.print(num.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器2</span></span><br><span class="line"><span class="keyword">while</span>(num.hasNext())&#123;</span><br><span class="line">    num.forEachRemaining((value)-&gt;System.out.print(value+<span class="string">&quot;,&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListIterator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hasNext() - 如果列表中存在元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="title function_">next</span><span class="params">()</span> - 返回列表的下一个元素</span><br><span class="line">nextIndex() - 返回next()方法将返回的元素的索引</span><br><span class="line">previous() - 返回列表的前一个元素</span><br><span class="line">previousIndex()- 返回previous()方法将返回的元素的索引</span><br><span class="line">remove()- 删除由next()或previous()返回的元素</span><br><span class="line">set() - 将next()或previous()返回的元素替换为指定的元素</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个ArrayList</span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ListIterator的实例</span></span><br><span class="line">        ListIterator&lt;Integer&gt; iterate = numbers.listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用next()方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> iterate.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素: &quot;</span> + number1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用nextIndex()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> iterate.nextIndex();</span><br><span class="line">        System.out.println(<span class="string">&quot;下一元素位置: &quot;</span> + index1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用hasNext()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还有下一个元素吗? &quot;</span> + iterate.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-队列Queue：先进先出"><a href="#1-4-队列Queue：先进先出" class="headerlink" title="1.4 队列Queue：先进先出"></a>1.4 队列Queue：先进先出</h5><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add() - 将指定的元素插入队列。如果任务成功，则add()返回<span class="literal">true</span>，否则将引发异常。</span><br><span class="line">offer() - 将指定的元素插入队列。如果任务成功，则offer()返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line">element() - 返回队列的开头。如果队列为空，则引发异常。</span><br><span class="line">peek() - 返回队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">remove() - 返回并删除队列的头部。如果队列为空，则引发异常。</span><br><span class="line">poll() - 返回并删除队列的开头。 如果队列为空，则返回<span class="literal">null</span>。</span><br><span class="line">    </span><br><span class="line">Queue和PriorityQueue区别：</span><br><span class="line">    PriorityQueue的出队顺序与元素的优先级有关。</span><br><span class="line">    PriorityQueue 调用 remove()或 poll()方法，返回的总是优先级最高的元素。</span><br><span class="line">PriorityQueue的优先级默认（必须实现Comparable接口）为按照字符，但可以通过Comparator实现自定义。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Queue 使用LinkedList 类</span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 使用 ArrayDeque 创建</span></span><br><span class="line">Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 使用PriorityQueue类创建队列 </span></span><br><span class="line">        Queue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加元素到 Queue</span></span><br><span class="line">        numbers.offer(<span class="number">1</span>);</span><br><span class="line">        numbers.offer(<span class="number">2</span>);</span><br><span class="line">        numbers.offer(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Queue: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问队列的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">accessedNumber</span> <span class="operator">=</span> numbers.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问元素： &quot;</span> + accessedNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队列中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedNumber</span> <span class="operator">=</span> numbers.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素： &quot;</span> + removedNumber);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的 Queue： &quot;</span> + numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-栈Stack：先进后出"><a href="#1-5-栈Stack：先进后出" class="headerlink" title="1.5 栈Stack：先进后出"></a>1.5 栈Stack：先进后出</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Type&gt; stacks = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; animals= <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素添加到Stack</span></span><br><span class="line">        animals.push(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        animals.push(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Stack: &quot;</span> + animals);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除堆栈元素，后进先出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从顶部访问元素，后进先出的原则</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> animals.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;顶部元素: &quot;</span> + element);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//搜索元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> animals.search(<span class="string">&quot;Horse&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素Horse的位置: &quot;</span> + position);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//检查堆栈是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> animals.empty();</span><br><span class="line">        System.out.println(<span class="string">&quot;堆栈是空的吗? &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-其他"><a href="#1-6-其他" class="headerlink" title="1.6 其他"></a>1.6 其他</h5><p>双端队列Deque：参考:<a href="https://www.cainiaojc.com/java/java-deque.html">链接</a></p><p>堆栈ArrayDeque：参考:<a href="https://www.cainiaojc.com/java/java-arraydeque.html">链接</a></p></li><li><h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4><table><thead><tr><th>Map</th><th></th></tr></thead><tbody><tr><td>HashMap（无序）（键值映射）</td><td></td></tr><tr><td>TreeMap（有序）（用于排序）</td><td></td></tr></tbody></table><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Key, Value&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map包含Collection的所有方法，自己特殊方法：</span><br><span class="line">put(K,V) - 将键K和值V的关联插入到map中。如果键已经存在，则新值将替换旧值。</span><br><span class="line">putAll() - 将指定Map集合中的所有条目插入此Map集合中。</span><br><span class="line">putIfAbsent(K,V) - 如果键K尚未与value关联，则插入关联V。</span><br><span class="line">get(K) - 返回与指定键K关联的值。如果找不到该键，则返回<span class="literal">null</span>。</span><br><span class="line">getOrDefault(K,defaultValue) - 返回与指定键K关联的值。如果找不到键，则返回defaultValue。</span><br><span class="line">containsKey(K） - 检查指定的键K是否在map中。</span><br><span class="line">containsValue(V) - 检查指定的值V是否存在于map中。</span><br><span class="line">replace(K,V) - 将键K的值替换为新的指定值V。</span><br><span class="line">replace(K,oldValue,newValue) - 仅当键K与值oldValue相关联时，才用新值newValue替换键K的值。</span><br><span class="line">replaceAll(function) - 用指定函数的结果替换映射的每个值</span><br><span class="line">remove(K) - 从键K表示的Map中删除条目。</span><br><span class="line">remove(K,V) - 从Map集合中删除键K与值V相关联的条目。。</span><br><span class="line">keySet() -返回Map集合中存在的所有键的集合。</span><br><span class="line">values() -返回一组包含在Map集合中的所有值。</span><br><span class="line">entrySet() -返回map中存在的所有键/值映射的集合。</span><br><span class="line">compute() - 使用指定的函数计算新值。然后将计算值与指定的键相关联。</span><br><span class="line">computeIfAbsent() - 如果指定的键没有映射到任何值，该方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">computeIfPresent() - 如果指定的键已经映射到任何值，此方法将使用指定的函数计算一个新值。然后将新值与键关联。</span><br><span class="line">merge() - 方法将指定的值与指定的键关联。</span><br><span class="line">clear()- 从映射中删除所有条目</span><br><span class="line">isEmpty() -检查map是否为空并返回布尔值</span><br><span class="line">size()- 返回map的大小</span><br></pre></td></tr></table></figure><h5 id="2-1-HashMap："><a href="#2-1-HashMap：" class="headerlink" title="2.1 HashMap："></a>2.1 HashMap：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity,loadFactor);</span><br><span class="line"></span><br><span class="line">capacity - HashMap的容量为<span class="number">8</span>。意味着，它可以存储<span class="number">8</span>个条目。</span><br><span class="line">loadFactor -  hashmap的负载因子为<span class="number">0.6</span>。这意味着，每当哈希表被填满<span class="number">60</span>%时，条目就会被移动到一个新哈希表，其大小是原始哈希表的两倍。</span><br><span class="line"></span><br><span class="line">HashMap为空时的容量默认为<span class="number">16</span>，负载因子为<span class="number">0.75</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用HashMap类创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素插入map集合</span></span><br><span class="line">        numbers.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        numbers.put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Map: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的键</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Keys: &quot;</span> + numbers.keySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Values: &quot;</span> + numbers.values());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//map的条目</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Entries: &quot;</span> + numbers.entrySet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> numbers.remove(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的值是: &quot;</span> + value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String key : numbers.keySet())&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for each循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry : numbers.entrySet())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器循环</span></span><br><span class="line">        <span class="comment">/*key-value*/</span></span><br><span class="line">        Iterator&lt;Entry&lt;String, Integer&gt;&gt; it = numbers.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*key*/</span></span><br><span class="line">        Iterator&lt;String&gt; it2 = numbers.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.println(it2.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*value*/</span></span><br><span class="line">        Iterator&lt;Integer&gt; it3 = numbers.values().iterator();</span><br><span class="line">        <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">            System.out.println(it3.nexy());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-TreeMap："><a href="#2-2-TreeMap：" class="headerlink" title="2.2 TreeMap："></a>2.2 TreeMap：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用TreeMap创建map</span></span><br><span class="line">        Map&lt;String, Integer&gt; values = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入元素到map</span></span><br><span class="line">        values.put(<span class="string">&quot;Second&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        values.put(<span class="string">&quot;First&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用TreeMap创建map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换值</span></span><br><span class="line">        values.replace(<span class="string">&quot;First&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        values.replace(<span class="string">&quot;Second&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新的Map: &quot;</span> + values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从map集合中删除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedValue</span> <span class="operator">=</span> values.remove(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;被移除的值: &quot;</span> + removedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-其他"><a href="#2-3-其他" class="headerlink" title="2.3 其他"></a>2.3 其他</h5><p>双向链表LinkedHashMap：<a href="https://www.cainiaojc.com/java/java-linkedhashmap.html">链接</a></p></li></ol><h3 id="九、IO流"><a href="#九、IO流" class="headerlink" title="九、IO流"></a>九、IO流</h3><ol><li><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字节流<span class="type">byte</span>：InputStream、OutputStream</span><br><span class="line">字符流<span class="type">char</span>：Reader、Writer</span><br><span class="line"></span><br><span class="line">同步：数据返回——&gt;执行后续代码，（代码编写简单，但CPU执行效率低。）上述的皆为同步。</span><br><span class="line">异步：发出请求——&gt;执行后续代码，（代码编写复杂，但CPU执行效率高。）</span><br></pre></td></tr></table></figure></li><li><h4 id="File文件："><a href="#File文件：" class="headerlink" title="File文件："></a>File文件：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用路径创建File对象 </span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(String pathName);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">createNewFile() - 创建文件</span><br><span class="line">read() - 读取文件</span><br><span class="line">write() - 写入文件</span><br><span class="line">delete() - 删除文件</span><br><span class="line">    </span><br><span class="line">读文件：</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;文件名&quot;</span>)<span class="comment">//创建Reader</span></span><br><span class="line">fr.read(字符)<span class="comment">//读取字符</span></span><br><span class="line">fr.close()<span class="comment">//关闭reader</span></span><br><span class="line">写文件：</span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;文件名&quot;</span>);<span class="comment">//创建Writer</span></span><br><span class="line">fw.write(<span class="string">&quot;&quot;</span>)<span class="comment">//将字符串写入文件</span></span><br><span class="line">fw.close()<span class="comment">//关闭writer</span></span><br></pre></td></tr></table></figure></li><li><h4 id="InputStream："><a href="#InputStream：" class="headerlink" title="InputStream："></a>InputStream：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileInputStream</span><br><span class="line">    ByteArrayInputStream</span><br><span class="line">    ObjectInputStream</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个InputStream</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ead() - 从输入流中读取一个字节的数据</span><br><span class="line">read(<span class="type">byte</span>[] array) - 从流中读取字节并存储在指定的数组中</span><br><span class="line">available() - 返回输入流中可用的字节数</span><br><span class="line">mark() - 标记输入流中数据所在的位置</span><br><span class="line">reset() -将控制点返回到流中设置标记的点</span><br><span class="line">markSupported()- 检查流中是否支持mark()和reset()方法</span><br><span class="line">skips(数字) - 跳过和丢弃输入流中的指定字节数</span><br><span class="line">close() - 关闭输入流   </span><br></pre></td></tr></table></figure><p>FileInputStream：文件输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//InputStream使用FileInputStream</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件路径</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(stringPath);</span><br><span class="line">            <span class="comment">//FileInputStream：使用文件的对象</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File fileObject);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//返回可用字节数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件中的可用字节: &quot;</span> + input.available());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从输入流中读取字节</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;从文件读取的数据: &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字节数组转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            System.out.println(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ByteArrayInputStream ：数据数组输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取整个数组</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个ByteArrayInputStream来读取数组的一部分</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="type">byte</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> length);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read()  - 从输入流中存在的数组中读取单个字节</span><br><span class="line">read(<span class="type">byte</span>[] array)  - 从输入流中读取字节并存储在指定的数组中</span><br><span class="line">read(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length) - 从流中读取等于length的字节数，并从位置start开始存储在指定的数组中</span><br></pre></td></tr></table></figure><p>ObjectInputStream：对象输入流（相应的流转换为Java对象—&gt;<strong>反序列化</strong>）ObjectOutputStream<strong>序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建与指定文件链接的文件输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用文件输入流创建对象输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">read() - 从输入流中读取一个字节的数据</span><br><span class="line">readBoolean() - 以布尔形式读取数据</span><br><span class="line">readChar() - 以字符形式读取数据</span><br><span class="line">readInt() - 以整数形式读取数据</span><br><span class="line">readObject() - 从输入流中读取对象 </span><br></pre></td></tr></table></figure></li><li><h4 id="OutputStream："><a href="#OutputStream：" class="headerlink" title="OutputStream："></a>OutputStream：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子类：</span><br><span class="line">    FileOutputStream</span><br><span class="line">    ByteArrayOutputStream</span><br><span class="line">    ObjectOutputStream</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将指定的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array) - 将指定数组中的字节写入输出流</span><br><span class="line">write(<span class="type">byte</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)-从位置start开始将等于length的字节数写入数组的输出流</span><br><span class="line">flush() -  强制将输出流中存在的所有数据写入目标</span><br><span class="line">close() - 关闭输出流</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;这是文件内的一行文本。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串转换为字节</span></span><br><span class="line">            <span class="type">byte</span>[] dataBytes = data.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数据写入输出流</span></span><br><span class="line">            out.write(dataBytes);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据被写入文件。&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输出流</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FileOutputStream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用文件路径</span></span><br><span class="line"><span class="comment">//包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path, <span class="type">boolean</span> value);</span><br><span class="line"><span class="comment">//不包括布尔型参数</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(File fileObject);</span><br></pre></td></tr></table></figure><p>ByteArrayOutputStream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个默认大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="comment">//创建具有指定大小的ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="type">int</span> size);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">writeTo(ByteArrayOutputStream out1) - 将当前输出流的全部数据写入指定的输出流</span><br><span class="line">toByteArray() - 返回输出流中存在的数组</span><br><span class="line">toString() - 以字符串形式返回输出流的全部数据</span><br></pre></td></tr></table></figure><p>ObjectOutputStream：Java对象转换为流—&gt;<strong>序列化</strong></p><p>ObjectOutputStream仅写入那些实现Serializable接口的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个FileOutputStream，其中写入ObjectOutputStream中的对象</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String file);</span><br><span class="line"><span class="comment">//创建ObjectOutputStream</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileStream);</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">write() - 将字节数据写入输出流</span><br><span class="line">writeBoolean() - 以布尔形式写入数据</span><br><span class="line">writeChar() - 以字符形式写入数据</span><br><span class="line">writeInt() - 以整数形式写入数据</span><br><span class="line">writeObject() - 将对象写入输出流</span><br></pre></td></tr></table></figure></li><li><h4 id="Reader："><a href="#Reader：" class="headerlink" title="Reader："></a>Reader：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">子类：</span><br><span class="line">BufferedReader</span><br><span class="line">InputStreamReader</span><br><span class="line">FileReader</span><br><span class="line">StringReader</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Reader</span></span><br><span class="line"><span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">ready() - 检查Reader是否准备好读取</span><br><span class="line">read(<span class="type">char</span>[] array)  - 从流中读取字符并存储在指定的数组中</span><br><span class="line">read(<span class="type">char</span>[] array, <span class="type">int</span> start, <span class="type">int</span> length)- 从流中读取length相等的字符数，并从start开始存储在指定的数组中</span><br><span class="line">mark() - 标记流中已读取数据的位置</span><br><span class="line">reset() - 重置流。如果流已被标记，然后尝试进行标记，以重新定位。如果该流未被标注，然后尝试将其复位在适当的特定流的一些方法，例如通过将其重新定位到其起始点。</span><br><span class="line">skip() -从流中丢弃指定数量的字符</span><br><span class="line">close() - 关闭reader</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字符数组</span></span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileReader创建Reader</span></span><br><span class="line">            <span class="type">Reader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//检查Reader是否准备就绪 </span></span><br><span class="line">            System.out.println(<span class="string">&quot;流中有数据吗?  &quot;</span> + input.ready());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取字符</span></span><br><span class="line">            input.read(array);</span><br><span class="line">            System.out.println(<span class="string">&quot;流中的数据:&quot;</span>);</span><br><span class="line">            System.out.println(array);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭reader</span></span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>BufferedReader：磁盘读取字符—&gt;存储在内部缓冲区—&gt;单独读取字符。(更快地读取字符)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个FileReader</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String file);</span><br><span class="line"><span class="comment">//创建一个BufferedReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个具有指定大小的内部缓冲区的BufferdReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file, <span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>InputStreamReader：字节流和字符流之间的桥梁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个InputStream</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file);</span><br><span class="line"><span class="comment">//创建一个InputStreamReader，指定字符编码</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于在输入流中存储数据的编码类型</span><br></pre></td></tr></table></figure><p>FileReader：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(File fileObj);</span><br></pre></td></tr></table></figure><p>StringReader：从字符串读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 StringReader</span></span><br><span class="line"><span class="type">StringReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(String data);</span><br></pre></td></tr></table></figure></li><li><h4 id="Writer："><a href="#Writer：" class="headerlink" title="Writer："></a>Writer：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">子类：</span><br><span class="line">    BufferedWriter</span><br><span class="line">OutputStreamWriter</span><br><span class="line">FileWriter</span><br><span class="line">StringWriter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 Writer</span></span><br><span class="line"><span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>();</span><br><span class="line">方法：</span><br><span class="line">write(<span class="type">char</span>[] array) - 将指定数组中的字符写入输出流</span><br><span class="line">write(String data) - 将指定的字符串写入写入器</span><br><span class="line">append(<span class="type">char</span> c) - 将指定字符插入当前写入器</span><br><span class="line">flush() - 强制将写入器中存在的所有数据写入相应的目的地</span><br><span class="line">close() - 关闭写入器</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;This is the data in the output file&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用FileWriter创建一个Writer</span></span><br><span class="line">            <span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//将字符串写入文件</span></span><br><span class="line">            output.write(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭写入器</span></span><br><span class="line">            output.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferedWriter：字符被写入内部缓冲区而不是磁盘，写入字符更快</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 FileWriter</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//创建 BufferedWriter</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(file);</span><br></pre></td></tr></table></figure><p>OutputStreamWriter：字节流和字符流之间的桥梁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个OutputStream</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file);</span><br><span class="line"><span class="comment">//创建一个OutputStreamWriter，指定字符编码</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(file, Charset cs);</span><br><span class="line">方法：</span><br><span class="line">getEncoding() - 可用于获取用于将数据写入输出流的编码类型</span><br></pre></td></tr></table></figure><p>FileWriter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringWriter<span class="comment">//使用文件名</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(String name);</span><br><span class="line"><span class="comment">//使用文件的对象</span></span><br><span class="line"><span class="type">FileWriter</span>  <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(File fileObj);</span><br></pre></td></tr></table></figure><p>StringWriter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"><span class="comment">//创建具有指定字符串缓冲区容量的StringWriter</span></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(<span class="type">int</span> size);</span><br></pre></td></tr></table></figure><p>StringBuffer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getBuffer() - 返回字符串缓冲区中存在的数据</span><br><span class="line">toString() -将字符串缓冲区中存在的数据作为字符串返回</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回字符串缓冲区</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> output.getBuffer();</span><br><span class="line">System.out.println(<span class="string">&quot;StringBuffer: &quot;</span> + stringBuffer);</span><br><span class="line"><span class="comment">//以字符串形式返回字符串缓冲区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> output.toString();</span><br><span class="line">System.out.println(<span class="string">&quot;String: &quot;</span> + string);</span><br></pre></td></tr></table></figure></li></ol><h3 id="十、线程"><a href="#十、线程" class="headerlink" title="十、线程"></a>十、线程</h3><ol><li><p>状态</p><p>创建、就绪、执行、阻塞、终止、挂起、激活</p></li><li><p>创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过实现 Runnable 接口；</span><br><span class="line">通过继承  Thread 类本身；</span><br><span class="line">通过 Callable 和 Future 创建线程。</span><br></pre></td></tr></table></figure><p>详细实现：<a href="https://www.cainiaojc.com/java/java-multithreading.html">链接</a></p></li></ol><h3 id="十一、泛型"><a href="#十一、泛型" class="headerlink" title="十一、泛型"></a>十一、泛型</h3><ol><li><p>集合框架中使用泛型，可以实现存储任类型的数据、代码可复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">泛型类：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">fx</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">fx</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">泛型方法：</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fx</span><span class="params">(T data)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ol><h3 id="十二、Lambda-表达式"><a href="#十二、Lambda-表达式" class="headerlink" title="十二、Lambda 表达式"></a>十二、Lambda 表达式</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameter list) -&gt; lambda body</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><p>本文参考1:<a href="https://www.cainiaojc.com/java/java-tutorial.html">链接</a></p><p>本文参考2:<a href="https://liaoxuefeng.com/books/java/introduction/index.html">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol><li>常用数据类型</li></ol><p>&emsp;&emsp;层次、网状、关系（表）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数据库系统的结构</p><p>三层模式结构：外模式+模式+内模式</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;用户+公共数据+物理结构和存储方式</p><table><thead><tr><th>外模式</th><th>模式</th><th>内模式</th></tr></thead><tbody><tr><td>用户</td><td>公共数据</td><td>物理结构和存储方式</td></tr></tbody></table></li></ol><p><img src="/blog2025.github.io/2025/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%BB%93%E6%9E%84.png"></p><h3 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h3><ol><li><h4 id="表："><a href="#表：" class="headerlink" title="表："></a>表：</h4><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table 表名 add 新列名 数据类型</span><br></pre></td></tr></table></figure></li><li><h4 id="视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。"><a href="#视图View：-数据较大时用（虚拟表）-本身不包含任何数据，只包含映射到实际表的一个查询语句。" class="headerlink" title="视图View：(数据较大时用（虚拟表）)本身不包含任何数据，只包含映射到实际表的一个查询语句。"></a>视图View：(数据较大时用（<strong>虚拟表</strong>）)本身不包含任何数据，只包含映射到实际表的一个查询语句。</h4><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create view 视图名称 as （增删改查SQL语句）[with check option]</span><br><span class="line">with check option:同步更新到实际表</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名称 [cascade]</span><br><span class="line">cascade：级联删除（该视图链接多个视图）</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 属性 from 视图名称 where 条件</span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">视图是不存在的，对视图操作，实际就是更新对应的实际表</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/liangzai215/article/details/142438705">链接</a></p><ol start="3"><li><h4 id="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。"><a href="#模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括-管理多个表、视图、索引。" class="headerlink" title="模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。"></a>模式：等价于数据库创建模式其实就是创建逻辑容器，一个模式包括&#x2F;管理多个表、视图、索引。</h4><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create schema &lt;模式名&gt; authorization &lt;用户名&gt;</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop schema &lt;模式名&gt; &lt;cascade|restrict&gt;</span><br><span class="line">cascade:级联删除</span><br><span class="line">restrict：限制（如果存在下属数据如表，则不可删除）</span><br></pre></td></tr></table></figure></li><li><h4 id="索引：数据量较大时使用，可以建立在一列或者多列上。"><a href="#索引：数据量较大时使用，可以建立在一列或者多列上。" class="headerlink" title="索引：数据量较大时使用，可以建立在一列或者多列上。"></a>索引：数据量较大时使用，可以建立在一列或者多列上。</h4><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create [unique][cluster] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;)</span><br><span class="line">unique：唯一索引</span><br><span class="line">cluster:聚簇索引，即物理顺序和逻辑顺序相同</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert index &lt;旧索引名&gt; rename to &lt;新索引名&gt;</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index &lt;索引名&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"><a href="#审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。" class="headerlink" title="审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。"></a>审计：所有操作都被记录到审计日志中，通过审计该日志可以发现非法操作。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">audit 操作 on 数据</span><br><span class="line">操作：insert/update/delete等</span><br><span class="line">数据：表/数据库</span><br></pre></td></tr></table></figure></li><li><h4 id="断言：（限制数据大小）"><a href="#断言：（限制数据大小）" class="headerlink" title="断言：（限制数据大小）"></a>断言：（限制数据大小）</h4><p>触发器：</p><p>创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create trigger &lt;触发器名称&gt; before|after &lt;触发事件&gt; on &lt;表名&gt;</span><br><span class="line">beforencting new|old row as &lt;变量&gt;</span><br><span class="line">for each row|statement//定义触发器的类型，指明动作体执行的频率</span><br><span class="line">when &lt;触发条件&gt; &lt;触发动作体&gt;</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger &lt;触发器名称&gt; on &lt;表名&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="权限："><a href="#权限：" class="headerlink" title="权限："></a>权限：</h4><p>授权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant &lt;权限&gt; on table &lt;表名&gt; to &lt;用户名称&gt;</span><br><span class="line">with grant option子句：普通用户获得权限后，可以将权限授予其他用户。</span><br></pre></td></tr></table></figure><p>回收权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke &lt;权限&gt; on table &lt;表名&gt; from &lt;用户名称&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="常用SQL语句："><a href="#常用SQL语句：" class="headerlink" title="常用SQL语句："></a>常用SQL语句：</h4><p>（1）查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select * from user</span><br><span class="line"></span><br><span class="line">select name from user</span><br><span class="line"></span><br><span class="line">select distinct title from 表名</span><br><span class="line">distinct：去重</span><br><span class="line"></span><br><span class="line">select name from user where address like &#x27;%西&#x27;</span><br><span class="line">like “%”可代替多个字符，“_”仅能替换一个字符</span><br><span class="line"></span><br><span class="line">select 别名 as （查出来是展示为别名属性）</span><br><span class="line">例子：</span><br><span class="line">select username as name from user：查username，展示为name</span><br></pre></td></tr></table></figure><p><strong>聚合函数</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count()/count(distinct去重 title)</span><br><span class="line">avg()</span><br><span class="line">max()</span><br><span class="line">min()</span><br></pre></td></tr></table></figure><p>分组查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">group by</span><br><span class="line">select title from book group by title</span><br><span class="line"></span><br><span class="line">筛选Having</span><br><span class="line">select title from book group by title having title=&quot;西游记&quot;</span><br></pre></td></tr></table></figure><p><strong>Having和Where区别</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">having是在分组后对数据进行过滤，</span><br><span class="line">where是在分组前对数据进行过滤，</span><br><span class="line">having后可以使用聚合函数</span><br><span class="line">where后则不可以使用聚合函数</span><br><span class="line">查询顺序：from&gt;where&gt;group&gt;having&gt;order&gt;select</span><br></pre></td></tr></table></figure><p>排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">order by </span><br><span class="line">desc：降序</span><br><span class="line">asc：升序</span><br></pre></td></tr></table></figure><p>多表查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sn.id cn.id from student_name sn,class_name cn where sn.id=cn.id</span><br></pre></td></tr></table></figure><p>嵌套查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title from book in (select author from book where price&lt;100)</span><br></pre></td></tr></table></figure><p>Exists：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exists：子查询存在则返回1，否则为0</span><br><span class="line">not exists：</span><br></pre></td></tr></table></figure><p>UNION并：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title from book UNION select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure><p>INTERSECT交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title from book INTERSECT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure><p>EXCEPT差：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select title from book EXCEPT select author from book=&#x27;hah&#x27;</span><br></pre></td></tr></table></figure><p><strong>内连接</strong>Where：结果仅包含符合条件的值。</p><p>**外连接：**不仅包含符合条件的，也包含不符合条件的。</p><p>Left_join：左连接</p><p>Left_outer_join：左外连接：左边表全部保留、右边表只保留符合条件的。</p><p>Right_join：右连接</p><p>Right_outer_join：右外连接：右边表全部保留、左边表只保留符合条件的。</p><p>Full_join：全连接</p><p>Full_outer_join：全外连接：左边表UNION右边表（全都保留）</p><p>参考: <a href="https://blog.csdn.net/mazhenzhu1272/article/details/79696097">链接</a></p><p>（2）插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(属性) values (值)</span><br></pre></td></tr></table></figure><p>（3）修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 字段1=值1，字段2=值2</span><br></pre></td></tr></table></figure><p>（4）删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、范式"><a href="#三、范式" class="headerlink" title="三、范式"></a>三、范式</h3><p>&emsp;&emsp;范式越高，冗余度越低，一般开发采用3NF即可，最高5NF。</p><p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_45737068/article/details/106185907">链接</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol><li><p>计算机系统上配置操作系统，主要目标是：方便性、有效性、可扩充性、开放性。</p></li><li><p>操作系统作用：①用户与硬件交互；②资源管理者；③资源的抽象。</p></li><li><p>发展过程：</p><table><thead><tr><th>类型</th><th>特性</th><th>优点</th><th>缺点</th><th>内容</th></tr></thead><tbody><tr><td>未配置操作系统的计算机系统</td><td></td><td></td><td></td><td>人工（纸带）、脱机IO（磁带）</td></tr><tr><td>单道批处理系统</td><td>单道性、顺序性、自动性</td><td></td><td>不能充分利用资源</td><td></td></tr><tr><td>多道批处理系统</td><td>多道性、无序性、调度性</td><td>能提高整个系统的性能，吞吐量大，利用率高</td><td>资源竞争问题，不能提高任何单个进程的性能。</td><td></td></tr><tr><td>分时系统</td><td>单主机、多用户、（多路、独立、及时、交互）</td><td>可靠、交互性强、响应快</td><td></td><td>多路卡64位，缓冲区、内存、轮转运行（时间片）</td></tr><tr><td>实时系统</td><td>工业化、信息查询、多媒体、嵌入式</td><td>高可靠性，交互性仅对特定服务</td><td></td><td>①周期、非周期</br>②硬实时，软实时</br>③截止时间（最后期限）</td></tr><tr><td>微机系统</td><td></td><td></td><td></td><td>Windows</td></tr></tbody></table><span id="more"></span></li></ol><h3 id="二、特性（多道、分时、实时）"><a href="#二、特性（多道、分时、实时）" class="headerlink" title="二、特性（多道、分时、实时）"></a>二、特性（多道、分时、实时）</h3><ol><li><p>最基本特性：</p><table><thead><tr><th>特性</th><th>内容</th></tr></thead><tbody><tr><td>并发</td><td>并行与并发、进程</td></tr><tr><td>共享</td><td>资源共享或复用、互斥（只允许一个）（临界资源）（栈、变量）</td></tr><tr><td>虚拟</td><td>时分复用、空分复用</td></tr><tr><td>异步</td><td>进程的不可预知性</td></tr></tbody></table></li></ol><h3 id="三、功能"><a href="#三、功能" class="headerlink" title="三、功能"></a>三、功能</h3><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>处理机</td><td>进程控制、进程同步、进程通信、调度</td></tr><tr><td>存储器</td><td>内存分配、内存保护、地址映射、内存扩充</td></tr><tr><td>设备</td><td>缓存管理、设备分配、设备处理</td></tr><tr><td>文件</td><td>文件存储空间、目录管理、文件的读&#x2F;写管理和保护</td></tr><tr><td>操作系统与用户之间的接口</td><td>用户接口、程序接口</td></tr><tr><td>现代操作系统的新功能</td><td>系统安全、网络的功能和服务、支持多媒体</td></tr></tbody></table><h3 id="四、结构"><a href="#四、结构" class="headerlink" title="四、结构"></a>四、结构</h3><table><thead><tr><th>类型</th><th>包含</th><th></th></tr></thead><tbody><tr><td>传统结构OS</td><td>无结构OS、模块化OS（高内聚低耦合）、分层式OS</td><td></td></tr><tr><td>现代结构OS</td><td>微内核</td><td></td></tr><tr><td>C&#x2F;S</td><td>客户端&#x2F;服务端</td><td></td></tr></tbody></table><h3 id="五、进程"><a href="#五、进程" class="headerlink" title="五、进程"></a>五、进程</h3><ol><li><p>概念：前趋图（有向无循环）记为：DAG（类似于拓扑图）,</p><p>前趋图中不允许有玄幻，所以是<strong>单向的</strong>。</p><p>pi—weight权—&gt;pj；pi是pj的直接前趋，pj是pi的直接后继</p><p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/DAG.png"></p></li><li><p>程序执行：</p><p>①顺序：</p><p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B1.png"></p><p>特性：顺序性（严格一个接一个）、封闭性（独占资源）、可再现性（条件不改变，结果总相同）</p><p>②并发：（不存在前趋关系）</p><p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B2.png"></p><p>特性：间断性、失去封闭性、不可再现性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure></li><li><p>进程定义：</p><p>①进程控制块PCB:记录了OS所需要的，用于描述进程的当前情况以及管理进程运行的全部信息。</p><p>②程序段</p><p>③相关数据段</p><p>特征：动态性、并发性、独立性、异步性</p></li><li><p>进程形态：</p><p>就绪Ready、执行Running、阻塞Block、创建、终止、挂起Suspend、激活Active</p></li></ol><p><img src="/blog2025.github.io/2025/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.png"></p><ol start="5"><li><p>进程控制块PCB：</p><p>包含信息：进程标识符、处理机状态、进程调度信息、进程控制信息</p><p>组织方式：线性方式（线性表）、链接方式（队列）、索引方式（索引表）</p></li><li><p>进程控制</p><p>（1）OS内核：</p><p>&emsp;&emsp;&emsp;&emsp;①支撑功能：中断处理、时钟管理、原语操作（完成一定功能的若干条指令）</p><p>&emsp;&emsp;&emsp;&emsp;②资源管理功能：进程管理、存储器管理、设备管理。</p><p>（2）进程的层次结构：</p><p>&emsp;&emsp;&emsp;&emsp;UNIX存在层次结构，Windows不存在层次结构，所有进程都有相同的地位。</p><p>&emsp;&emsp;&emsp;&emsp;进程图：树型结构。</p><p>（3）引起进程创建的事件：</p><p>&emsp;&emsp;&emsp;&emsp;用户登录、作业调度、提供服务、应用请求</p><p>（4）进程的创建：</p><p>&emsp;&emsp;&emsp;&emsp;①申请空白PCB</p><p>&emsp;&emsp;&emsp;&emsp;②分配资源</p><p>&emsp;&emsp;&emsp;&emsp;③初始化PCB</p><p>&emsp;&emsp;&emsp;&emsp;④就绪队列</p><p>（5）引起进程终止的事件：</p><p>&emsp;&emsp;&emsp;&emsp;正常结束、异常结束、外界干预</p><p>（6）进程的终止：</p><p>&emsp;&emsp;&emsp;&emsp;①根据终止标识符检查PCB</p><p>&emsp;&emsp;&emsp;&emsp;②处于执行状态的进程——&gt;终止</p><p>&emsp;&emsp;&emsp;&emsp;③子孙进程——&gt;终止</p><p>&emsp;&emsp;&emsp;&emsp;④归还资源</p><p>&emsp;&emsp;&emsp;&emsp;⑤将终止PCB移除所在队列或链表</p><p>（7）引起进程阻塞和唤醒的事件：</p><p>&emsp;&emsp;&emsp;&emsp;请求共享资源失败、等待操作完成、新数据尚未到达、等待新任务的到达。</p><p>（8）进程同步：</p><p>&emsp;&emsp;&emsp;&emsp;原则：空闲让进、忙则等待、有限等待、让权等待。</p><p>&emsp;&emsp;&emsp;临界资源：打印机、磁带。</p><p>&emsp;&emsp;&emsp;临界区：临界资源所在的区域</p></li><li><p><font color="red">信号量机制：PV操作</font></p><p>wait()；申请资源</p><p>signal()；释放资源</p><p>典型问题：生产者-消费者问题</p></li><li><p>进程和管程：</p><table><thead><tr><th></th><th>类型</th><th>特性</th></tr></thead><tbody><tr><td>进程</td><td>私有数据结构PCB</td><td>顺序执行、并发、主动</td></tr><tr><td>管程</td><td>公共数据结构</td><td>同步、初始化、互斥、被动</td></tr></tbody></table></li><li><p>进程通信：</p><p>类型：共享存储器系统、管道pipe通信系统、消息传递系统、客户机-服务器系统</p><p>实现方式：直接消息传递系统、信箱通信</p></li><li><p>线程：提高程序并发执行的程度。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>进程</td><td>可拥有资源的独立单位，可独立调度和分派的基本单位（传统OS）</td><td>PCB、拥有系统资源、开销大</td></tr><tr><td>线程</td><td>可独立调度和分派的基本单位（引入线程的OS）</td><td>TCB、不拥有系统资源，仅拥有控制线程运行的TCB、共享进程资源、开销小</td></tr></tbody></table></li><li><p>线程的实现：</p><p>（1）分类：</p><p>&emsp;&emsp;&emsp;内核支持线程KST：阻塞在线程一级；</p><p>&emsp;&emsp;&emsp;用户级线程ULT：阻塞在用户进程</p><p>（2）实现：内核支持、用户级</p></li></ol><h3 id="六、处理及调度与死锁"><a href="#六、处理及调度与死锁" class="headerlink" title="六、处理及调度与死锁"></a>六、处理及调度与死锁</h3><ol><li><p>处理机调度的层次：</p><table><thead><tr><th>层次</th><th>调度对象</th><th>目的</th><th>应用于</th><th>调度算法（看下）</th></tr></thead><tbody><tr><td>高级调度（长程调度、作业调度）</td><td>作业</td><td>外存调入内存</td><td>多道批处理系统</td><td></td></tr><tr><td>低级调度（短程调度、进程调度）</td><td>进程</td><td>决定哪个进程获得处理机</td><td>多道批、分时、实时系统</td><td></td></tr><tr><td>中级调度（内存调度）</td><td>内外存交互</td><td>将暂时不能运行的进程从内存调至外存</td><td></td><td></td></tr></tbody></table></li><li><p>处理机调度算法目标：</p><table><thead><tr><th>类型</th><th>目标</th></tr></thead><tbody><tr><td>处理机调度</td><td>资源利用率、公平、平衡、策略强制执行</td></tr><tr><td>批处理系统</td><td>平均周转时间短、系统吞吐量高、处理机利用率高</td></tr><tr><td>分时系统</td><td>响应时间快、均衡</td></tr><tr><td>实时系统</td><td>截止时间的保证、可预测</td></tr></tbody></table></li><li><p><strong>作业调度算法：</strong></p><p>（1）作业、作业步、作业控制块JCB</p><p>（2）状态：收容阶段（后备状态）、运行阶段（运行状态）、完成阶段（完成状态）</p><p>（3）算法：</p><p>&emsp;&emsp;①先来先服务FCFS</p><p>&emsp;&emsp;②短作业优先SJF</p><p>&emsp;&emsp;③优先级调度PSA</p><p>&emsp;&emsp;④高响应比优先调度HRRN：</p><p>&emsp;&emsp;&emsp;&emsp;优先权&#x3D;（等待时间+要求服务时间）&#x2F;要求服务时间&#x3D;1+（等待时间&#x2F;要求服务时间）</p><p>完成时刻&#x3D;开始时刻+运行时间</p><p>周转时间&#x3D;完成时刻-进入时刻</p><p>带权周转时间&#x3D;周转时间&#x2F;运行时间</p><p>平均等待时间&#x3D;Σ（周转时间-运行时间）÷ n</p><p>平均带权周转时间&#x3D;带权周转时间&#x2F;作业个数</p></li><li><p><strong>进程调度算法：</strong></p><p>调度方式：</p><p>&emsp;&emsp;非抢占方式：</p><p>&emsp;&emsp;抢占方式：优先权原则、短进程优先原则、时间片原则</p><p>算法：</p><p>（1）轮转调度算法RR（round robin）</p><p>（2）优先级调度算法：分为：非抢占式和抢占式。</p><p>&emsp;&emsp;优先级类型：静态、动态（每次调度都要计算响应比增加系统开销）</p><p>（3）多队列调度算法</p><p>（4）多级反馈队列调度算法（multileved feedback queue）</p><p>（5）基于公平原则的调度算法</p></li><li><p><strong>实时调度算法：</strong></p><p>调度方式：</p><p>&emsp;&emsp;非抢占方式：轮转、优先级</p><p>&emsp;&emsp;抢占方式：时钟中断、立即抢占的优先级</p><p>算法：</p><p>（1）最早截止时间优先EDF（Earliest Deadline First）:分为抢占式和非抢占式</p><p>（2）最低松弛度优先LLF（Least Laxity First）：松弛度越高任务越紧急</p><p>&emsp;&emsp;松弛度&#x3D;必须完成时间-其本身的运行时间-当前时间</p><p>（3）优先级倒置（priority inversion problem）</p><p>参考： <a href="https://blog.csdn.net/m0_48241022/article/details/142188201">链接</a></p></li><li><p>死锁：</p><p>（1）类型：</p><p>&emsp;&emsp;①竞争不可抢占资源</p><p>&emsp;&emsp;②竞争可消耗资源</p><p>&emsp;&emsp;③进程推进顺序不当</p><p>（2）定义：</p><p>&emsp;&emsp;进程A一直等待进程B所占有的资源。</p><p>（3）发生必要条件：</p><p>&emsp;&emsp;①互斥</p><p>&emsp;&emsp;②请求和保持</p><p>&emsp;&emsp;③不可抢占</p><p>&emsp;&emsp;④循环等待</p><p>（4）处理方法：</p><table><thead><tr><th>方法类型</th><th>是否允许死锁</th><th>破坏条件</th></tr></thead><tbody><tr><td>预防死锁</td><td>不允许</td><td>（1）两种协议：<br>①一次性申请全部资源<br>②仅获取运行初期资源<br>（2）破坏不可抢占条件<br>破坏循环等待条件</td></tr><tr><td>避免死锁</td><td>不允许</td><td>安全态&#x3D;可避免发生死锁；<br>不安全态，可能进入死锁<br>安全态-&gt;不安全态<br>银行家算法、安全性算法</td></tr><tr><td>检测死锁</td><td>允许</td><td></td></tr><tr><td>解除死锁</td><td>允许</td><td></td></tr></tbody></table><p>&emsp;&emsp;①<strong>银行家算法：</strong>（确定Request过程）</p><p>&emsp;&emsp;&emsp;系统中有五个进程{P0,P1,P2,P3,P4}和三类资源{A,B,C}，各种资源的数量分别为10，5，7，在<strong>T0</strong>时刻的资源分配情况为：</p><table><thead><tr><th>进程\资源情况</th><th>Max（总共需要资源）</th><th>Allocation（已匹配）</th><th>Need（ 还需要）</th><th>Available（现在可用）</th></tr></thead><tbody><tr><td></td><td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td><td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td><td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td><td>&emsp;A&emsp;&emsp;B&emsp;&emsp;C</td></tr><tr><td>P0</td><td>&emsp;7&emsp;&emsp;5&emsp;&emsp;3</td><td>&emsp;0&emsp;&emsp;1&emsp;&emsp;0</td><td>&emsp;7&emsp;&emsp;4&emsp;&emsp;3</td><td>&emsp;3&emsp;&emsp;3&emsp;&emsp;2</td></tr><tr><td>P1</td><td>&emsp;3&emsp;&emsp;2&emsp;&emsp;2</td><td>&emsp;2&emsp;&emsp;0&emsp;&emsp;0</td><td>&emsp;1&emsp;&emsp;2&emsp;&emsp;2</td><td></td></tr><tr><td>P2</td><td>&emsp;9&emsp;&emsp;0&emsp;&emsp;2</td><td>&emsp;3&emsp;&emsp;0&emsp;&emsp;2</td><td>&emsp;6&emsp;&emsp;0&emsp;&emsp;0</td><td></td></tr><tr><td>P3</td><td>&emsp;2&emsp;&emsp;2&emsp;&emsp;2</td><td>&emsp;2&emsp;&emsp;1&emsp;&emsp;1</td><td>&emsp;0&emsp;&emsp;1&emsp;&emsp;1</td><td></td></tr><tr><td>P4</td><td>&emsp;4&emsp;&emsp;3&emsp;&emsp;3</td><td>&emsp;0&emsp;&emsp;0&emsp;&emsp;2</td><td>&emsp;4&emsp;&emsp;3&emsp;&emsp;1</td><td></td></tr></tbody></table><p>&emsp;&emsp;②<strong>安全性算法：</strong>（确定安全序列）</p><p>&emsp;&emsp;（起始）Work&#x3D;Available</p><p>&emsp;&emsp;（后续）Work&#x3D;Work+Allocation</p><p>&emsp;&emsp;<strong>（安全性判定）Need≤Work（这是一个全程操作，每进行一次请求(Request)都要进行安全检查）</strong></p><p>&emsp;借助于该安全性算法，可以<strong>确定安全序列</strong>，如下：</p><p>&emsp;推断<strong>T0</strong>时刻的安全序列：</p><p>&emsp;此时Available&#x3D;3 3 2，<strong>Work1</strong>&#x3D;3 3 2</p><p>&emsp;P1的Need&#x3D;1 2 2&lt;<strong>Work1</strong>&#x3D;3 3 2安全，释放P1的Allocation资源，</p><p>&emsp;&emsp;&emsp;<font color="red"><strong>Work2</strong>&#x3D;Work1+P1的Allocation&#x3D;3 3 2+2 0 0&#x3D;5 3 2</font></p><p>&emsp;P2的Need&#x3D;6 0 0&gt;<strong>Work2</strong>&#x3D;5 3 2不安全，舍去；</p><p>&emsp;P3的Need&#x3D;0 1 1&lt;<strong>Work2</strong>&#x3D;5 3 2安全，释放P3的Allocation资源，<br>&emsp;&emsp;&emsp;<font color="red"><strong>Work3</strong>&#x3D;Work2+P3的Allocation&#x3D;5 3 2+2 1 1&#x3D;7 4 3</font></p><p>&emsp;P4的Need&#x3D;4 3 1&lt;<strong>Work3</strong>&#x3D;7 4 3安全，释放P4的Allocation资源，</p><p>&emsp;&emsp;&emsp;<font color="red"><strong>Work4</strong>&#x3D;Work3+P4的Allocation&#x3D;7 4 3+0 0 2&#x3D;7 4 5</font></p><p>&emsp;P2的Need&#x3D;6 0 0&lt;<strong>Work4</strong>&#x3D;7 4 5安全，释放P2的Allocation资源，</p><p>&emsp;&emsp;&emsp;<font color="red"><strong>Work5</strong>&#x3D;Work4+P2的Allocation&#x3D;7 4 5+3 0 2&#x3D;10 4 7</font></p><p>&emsp;P0的Need&#x3D;7 4 3&lt;<strong>Work5</strong>&#x3D;10 4 7安全，释放P0的Allocation资源，</p><p>&emsp;&emsp;&emsp;<font color="red"><strong>Work6</strong>&#x3D;Work5+P0的Allocation&#x3D;10 4 7+0 1 0&#x3D;10 5 7</font></p><p>&emsp;&emsp;&emsp;到此资源全部释放。</p><p>&emsp;得到安全序列为：{P1,P3,P4,P2,P0}。</p><p>&emsp;如果不存在安全序列，则该系统不安全。</p><table><thead><tr><th>进程\资源情况</th><th>Work（工作向量）</th><th>Need（ 还需要）</th><th>Allocation（已匹配）</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P1</td><td><font color="red">3     3     2</font></td><td>1     2     2</td><td>2     0     0</td><td><font color="blue">5     3     2</font></td></tr><tr><td>P3</td><td><font color="blue">5     3     2</font></td><td>0     1     1</td><td>2     1     1</td><td><font color="green">7     4     3</font></td></tr><tr><td>P4</td><td><font color="green">7     4     3</font></td><td>4     3     1</td><td>0     0     2</td><td><font color="orange">7     4     5</font></td></tr><tr><td>P2</td><td><font color="orange">7     4     5</font></td><td>6     0     0</td><td>3     0     2</td><td><font color="purple">10     4     7</font></td></tr><tr><td>P0</td><td><font color="purple">10     4     7</font></td><td>7     4     3</td><td>0     1     0</td><td><font color="red">10     5     7</font></td></tr></tbody></table><p>&emsp;&emsp;③银行家算法续：</p><p>&emsp;&emsp;对Pi发出Request请求后，启用Request去比较对Pi得分Need[i]和Available[i]，</p><p>&emsp;&emsp;&emsp;&emsp;如果Request&lt;Need[i]，则继续比较Request&lt;Available[i]；否则报错。</p><p>&emsp;&emsp;&emsp;&emsp;当Request&lt;Available[i]时，Available[i]&#x3D;Available[i]-Request；</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Allocation[i]&#x3D;Allocation[i]+Request；</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;Need[i]&#x3D;Need[i]-Request；</p><p>&emsp;&emsp;再次确认安全序列；</p><p>&emsp;&emsp;进行下一轮Request。</p><p>&emsp;&emsp;例1：当前安全序列为{P1,P3,P4,P2,P0}：P1发出请求Request(1，0，2)，采用银行家算法进行检查：</p><p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Need[1]&#x3D;1，2，2</p><p>&emsp;&emsp;&emsp;&emsp;Request(1，0，2)&lt;Available(3，3，2)</p><p>&emsp;&emsp;&emsp;&emsp;<strong>Available[1]</strong>&#x3D;Available[1]-Request(1，0，2)&#x3D;3 3 2 - 1 0 2 &#x3D; <font color="red"><strong>2，3，0</strong>；</font></p><p>&emsp;&emsp;&emsp;&emsp;Allocation[1]&#x3D;Allocation[1]+Request(1，0，2)&#x3D;2 0 0 + 1 0 2 &#x3D; 3，0，2；</p><p>&emsp;&emsp;&emsp;&emsp;Need[1]&#x3D;Need[1]-Request(1，0，2)&#x3D;1 2 2 - 1 0 2 &#x3D; 0，2，0；</p><table><thead><tr><th>进程\资源情况</th><th>Work（Work1&#x3D;Available）</th><th>Need（ 还需要）</th><th>Allocation（已匹配）</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P1</td><td><strong><font color="red">2 3 0</font></strong></td><td>0     2     0</td><td>3     0     2</td><td><font color="blue">5     3     2</font></td></tr></tbody></table><p>根据目前的安全序列{P1,P3,P4,P2,P0}进行安全检查：</p><p>⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️</p><table><thead><tr><th>进程\资源情况</th><th>Work（Work1&#x3D;Available）</th><th>Need（ 还需要）初始</th><th>Allocation（已匹配）初始</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P1</td><td><strong><font color="red">2 3 0</font></strong></td><td>0     2     0</td><td>3     0     2</td><td><font color="blue">5     3     2</font></td></tr><tr><td>P3</td><td><font color="blue">5     3     2</font></td><td>0     1     1</td><td>2     1     1</td><td><font color="green">7     4     3</font></td></tr><tr><td>P4</td><td><font color="green">7     4     3</font></td><td>4     3     1</td><td>0     0     2</td><td><font color="orange">7     4     5</font></td></tr><tr><td>P2</td><td><font color="orange">7     4     5</font></td><td>6     0     0</td><td>3     0     2</td><td><font color="purple">10 4 7</font></td></tr><tr><td>P0</td><td><font color="purple">10 4 7</font></td><td>7     4     3</td><td>0     1     0</td><td><font color="red">10     5     7</font></td></tr></tbody></table><p>得到安全序列1{P1,P3,P4,P2,P0}，或者：</p><table><thead><tr><th>进程\资源情况</th><th>Work（Work1&#x3D;Available）</th><th>Need（ 还需要）初始</th><th>Allocation（已匹配）初始</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P1</td><td><font color="red">2 3 0</font></td><td>0     2     0</td><td>3     0     2</td><td><font color="blue">5     3     2</font></td></tr><tr><td>P3</td><td><font color="blue">5     3     2</font></td><td>0     1     1</td><td>2     1     1</td><td><font color="green">7     4     3</font></td></tr><tr><td>P4</td><td><font color="green">7     4     3</font></td><td>4     3     1</td><td>0     0     2</td><td><font color="orange">7     4     5</font></td></tr><tr><td>P0</td><td><font color="orange">7     4     5</font></td><td>7     4     3</td><td>0     1     0</td><td><font color="purple">7 5 5</font></td></tr><tr><td>P2</td><td><font color="purple">7 5 5</font></td><td>6     0     0</td><td>3     0     2</td><td><font color="red">10     5     7</font></td></tr></tbody></table><p>得到安全序列2{P1,P3,P4,P0,P2}。</p><p>&emsp;&emsp;例2：继P1发出Request(1，0，2)请求后，P0发出请求Request(0，2，0)，采用银行家算法进行检查：</p><p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Need[0]&#x3D;7，4，3</p><p>&emsp;&emsp;&emsp;&emsp;Request(0，2，0)&lt;Available(<strong>2，3，0</strong>)</p><p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，2，0)&#x3D;2 3 0 - 0 2 0 &#x3D; <font color="red"><strong>2，1，0；</strong></font></p><p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，2，0)&#x3D;0 1 0 + 0 2 0&#x3D; 0，3，0；</p><p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，2，0)&#x3D;7 4 3 - 0 2 0 &#x3D; 7，2，3；</p><table><thead><tr><th>进程\资源情况</th><th>Work（Work1&#x3D;Available）</th><th>Need（ 还需要）</th><th>Allocation（已匹配）</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P0</td><td><strong><font color="red">2 1 0</font></strong></td><td>7     2     3</td><td>0     3     0</td><td><font color="blue">2 4 0</font></td></tr><tr><td>P1</td><td></td><td>1 2 2-&gt;0 2 0<br>这里是因为例1的P1请求(Request)引得变化</td><td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td><td></td></tr><tr><td>P2</td><td></td><td>6     0     0</td><td>3     0     2</td><td></td></tr><tr><td>P3</td><td></td><td>0     1     1</td><td>2     1     1</td><td></td></tr><tr><td>P4</td><td></td><td>4     3     1</td><td>0     0     2</td><td></td></tr></tbody></table><p>此时的Work1+available&#x3D;210已经不能满足剩下的进程Need，所以此时系统进入不安全状态，此时系统不分配资源。</p><p>&emsp;&emsp;例3：当P0发出请求Request(0，1，0)，采用银行家算法进行检查：</p><p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Need[0]&#x3D;7，4，3</p><p>&emsp;&emsp;&emsp;&emsp;Request(0，1，0)&lt;Available(<strong>2，3，0</strong>)</p><p>&emsp;&emsp;&emsp;&emsp;Available[0]&#x3D;Available[0]-Request(0，1，0)&#x3D;2 3 0 - 0 1 0 &#x3D;<font color="red"> <strong>2，2，0</strong>；</font></p><p>&emsp;&emsp;&emsp;&emsp;Allocation[0]&#x3D;Allocation[0]+Request(0，1，0)&#x3D;0 1 0 + 0 1 0&#x3D; 0，2，0；</p><p>&emsp;&emsp;&emsp;&emsp;Need[0]&#x3D;Need[0]-Request(0，1，0)&#x3D;7 4 3 - 0 1 0 &#x3D; 7，3，3；</p><table><thead><tr><th>进程\资源情况</th><th>Work（Work1&#x3D;Available）</th><th>Need（ 还需要）</th><th>Allocation（已匹配）</th><th>Work+Allocation</th></tr></thead><tbody><tr><td>P1</td><td><strong><font color="red">2 2 0</font></strong></td><td>1 2 2-&gt;<strong>0 2 0</strong><br/>这里是因为例1的P1请求(Request)引得变化</td><td>2 0 0-&gt;3 0 2<br/>这里是因为例1的P1请求(Request)引得变化</td><td><font color="blue">5 2 2</font></td></tr><tr><td>P3</td><td><font color="blue">5 2 2</font></td><td>0     1     1</td><td>2     1     1</td><td><font color="green">7 3 3</font></td></tr><tr><td>P2</td><td><font color="green">7 3 3</font></td><td>6     0     0</td><td>3     0     2</td><td><font color="orange">10 3 5</font></td></tr><tr><td>P0</td><td><font color="orange">10 3 5</font></td><td>7     3     3</td><td>0     2     0</td><td><font color="purple">10 5 5</font></td></tr><tr><td>P4</td><td><font color="purple">10 5 5</font></td><td>4     3     1</td><td>0     0     2</td><td>10 5 7</td></tr></tbody></table><p>得到安全序列：{P1,P3,P2,P0,P4}</p><p>（5）死锁检测：</p><p>&emsp;&emsp;死锁定理：进程处于死锁状态的充分条件是当且仅当该进程的资源分布图是不可简化的。</p><p>&emsp;&emsp;资源分布图的简化：P1释放资源后，便可使P2获得资源而继续运行，在进行一些的简化后，若能消除途中所有的边，使所有的的进程节点都成为孤立结点，则称该图是可完全简化的。</p><p>（6）死锁解除：</p><p>&emsp;&emsp;抢占资源、终止或撤销进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格七、存储器管理</span><br></pre></td></tr></table></figure></li></ol><h3 id="七、存储器管理"><a href="#七、存储器管理" class="headerlink" title="七、存储器管理"></a>七、存储器管理</h3><ol><li><p>程序的接入：</p><table><thead><tr><th>内存接入情况</th><th>适用于</th></tr></thead><tbody><tr><td>绝对接入方式</td><td>单道程序环境</td></tr><tr><td>可重定位装入方式</td><td>单道程序环境</td></tr><tr><td>动态运行时的装入方式</td><td>多道程序环境</td></tr></tbody></table></li><li><p>程序的链接：</p><p>静态链接方式、装入时动态链接、运行时动态链接。</p></li><li><p>连续分配存储器管理方式：</p><p>（1）单一连续分配：程序独占空间。</p><p>（2）固定分区分配：每个分区装入一道作业。</p><p>&emsp;&emsp;&emsp;划分分区方法：①分区大小相等；②分区大小不等。</p><p>&emsp;&emsp;&emsp;内存分配：分区表（分区的起始地址、大小、状态）</p><p>&emsp;&emsp;&emsp;&emsp;外碎片：在分区外未使用。内碎片：在分区内未使用。</p><p>（3）动态分区分配：</p><p>&emsp;&emsp;&emsp;①基于顺序搜索的动态分区分配算法：</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;首次适应算法First fit(FF)、循环首次适应算法Next fit(NF)、最佳适应算法Best fit(BF)、</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;最坏适应算法Worst fit(WF)</p><p>&emsp;&emsp;&emsp;②基于索引搜索的动态分区分配算法：</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;快速适应算法Quick fit、伙伴系统Buddy system、哈希算法</p><p>（4）动态可重定位分区分配：紧凑、动态重定位</p></li><li><p>对换：将内存中暂时无法运行或不用的程序和数据换出到外存上，以便腾出足够的内存空间，再把需要运行的换入内存。</p><p>类型：整体对换、页面（分段）对换</p></li><li><p>分页存储管理方式：</p><p>页块、物理块、地址结构（页号|位偏移）、页表、多级页表、反置页表</p></li><li><p>分段存储管理方式：</p><p>地址结构（段号|段内地址）、段表、信息共享、越界</p><p>分页与分段区别：页是信息的物理单位、页的大小固定且由系统决定、分页的用户程序地址空间是一位的</p></li><li><p>段页式存储管理方式：</p><p>用户程序——&gt;若干段——&gt;若干页；</p><p>地址变换过程：</p><p>&emsp;&emsp;访问数据需要3次内存调用：第1次：内存段表，第2次：内存页表，第3次：数据</p><p>&emsp;&emsp;高速缓冲寄存器的设定便是为了提升该3次内存调用速度</p></li></ol><h3 id="八、虚拟存储器"><a href="#八、虚拟存储器" class="headerlink" title="八、虚拟存储器"></a>八、虚拟存储器</h3><ol><li><p>实现方式：请求分页系统、请求分段系统</p></li><li><p>请求分页系统：缺页中断</p></li><li><p>页面置换算法：</p><p>①最佳置换算法Optimal</p><p>②先进先出页面置换算法FIFO</p><p>③最近最久未使用置换算法LRU</p><p>④最少使用置换算法LFU</p><p>⑤Clock置换算法</p><p>⑥页面缓冲算法PBA（Page Buffering Algorithm）</p><p>缺页次数&#x3D;缺页中断：即当所要访问的页面不在内存中时，便产生缺页中断。</p><p>缺页率&#x3D;缺页次数&#x2F;总页数（总访问次数）</p><p>例：LRU</p><table><thead><tr><th></th><th>7</th><th></th><th>0</th><th></th><th>1</th><th></th><th>2</th><th></th><th>0</th><th>3</th><th></th><th>0</th><th>4</th><th></th><th>2</th><th></th><th>3</th><th></th><th>0</th><th></th><th>3</th><th>2</th><th>1</th><th></th><th>2</th><th>0</th><th></th><th>1</th><th>7</th><th></th><th>0</th><th>1</th><th></th></tr></thead><tbody><tr><td></td><td></td><td>7</td><td></td><td>7</td><td></td><td>7</td><td></td><td>2</td><td></td><td></td><td>2</td><td></td><td></td><td>4</td><td></td><td>4</td><td></td><td>4</td><td></td><td>0</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td>1</td><td></td><td></td><td>1</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>0</td><td></td><td>0</td><td></td><td>0</td><td></td><td></td><td>0</td><td></td><td></td><td>0</td><td></td><td>0</td><td></td><td>3</td><td></td><td>3</td><td></td><td></td><td></td><td>3</td><td></td><td></td><td>0</td><td></td><td></td><td>0</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td></td><td>1</td><td></td><td></td><td>3</td><td></td><td></td><td>3</td><td></td><td>2</td><td></td><td>2</td><td></td><td>2</td><td></td><td></td><td></td><td>2</td><td></td><td></td><td>2</td><td></td><td></td><td>7</td><td></td><td></td><td></td></tr><tr><td>缺页中断：</td><td></td><td>1次</td><td></td><td>2</td><td></td><td>3</td><td></td><td>4</td><td></td><td></td><td>5</td><td></td><td></td><td>6</td><td></td><td>7</td><td></td><td>8</td><td></td><td>9</td><td></td><td></td><td></td><td>10</td><td></td><td></td><td>11</td><td></td><td></td><td>12</td><td></td><td></td><td></td></tr></tbody></table><p>缺页率为：12&#x2F;20&#x3D;60%</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><ol><li><h4 id="TCP-IP五层协议"><a href="#TCP-IP五层协议" class="headerlink" title="TCP&#x2F;IP五层协议"></a>TCP&#x2F;IP五层协议</h4><table><thead><tr><th>层</th><th>内容</th><th>作用</th><th>协议</th><th>设备</th></tr></thead><tbody><tr><td>应用层</td><td>报文：消息、数据传输的基本单位</td><td>提供网络服务的接口</td><td>文件传输FTP、域名服务DNS、超文本传输HTTP、SMTP邮件传输</td><td>网关</td></tr><tr><td>传输层</td><td>数据段：信息传递的协议数据单元</td><td>将上层数据分段并提供端到端的传输、差错控制和流量控制。</td><td>TCP面向连接、UDP</td><td>进程、端口</td></tr><tr><td>网络层</td><td>数据包&#x2F;分组</td><td>将网络地址翻译为物理地址，将数据从发送方路由到接收方。子网间的数据报进行路由选择，拥塞控制、网际互通。</td><td>IP、ARP地址解析、RARP反向地址转换、ICMP控制报文、IGMP组播</td><td>路由器、防火墙</td></tr><tr><td>数据链路层</td><td>帧（该层的传输单位）&#x3D;首+数据报+尾<br />星型拓扑</td><td>物理地址寻址、数据的成帧、流量控制、数据检错、重发等。</td><td>以太网协议、PPP点对点、CSMA&#x2F;CD载波监听和碰撞检测、ARQ纠错</td><td>网桥、网卡、交换机</td></tr><tr><td>物理层</td><td>比特流</td><td>物理媒体</td><td></td><td>中继器（放大信号）、集线器、网线、调制解调器</td></tr></tbody></table></li></ol><p>&emsp;&emsp;参考: <a href="https://bbs.huaweicloud.com/blogs/378087">链接</a></p><span id="more"></span><ol start="2"><li><h4 id="IP地址："><a href="#IP地址：" class="headerlink" title="IP地址："></a>IP地址：</h4><h5 id="（1）传统"><a href="#（1）传统" class="headerlink" title="（1）传统"></a>（1）传统</h5><table><thead><tr><th>传统IP(32位)</th><th>Net-id</th><th>Host-id</th></tr></thead><tbody><tr><td>IP地址</td><td>网络号</td><td>主机号</td></tr><tr><td>A类</td><td>0.（8位）</td><td>0.0.0（24位）</td></tr><tr><td>B类</td><td>0.0（16位）</td><td>0.0（16位）</td></tr><tr><td>C类</td><td>0.0.0（24位）</td><td>0（8位）</td></tr></tbody></table><table><thead><tr><th>分类</th><th></th><th>补充</th><th>默认子网掩码</th></tr></thead><tbody><tr><td>A类</td><td>0.0.0.0~127.255.255.255</td><td>0.0.0.0(寻找自己的IP)和127.0.0.1(回环地址即本机地址，用于对本机的测试)一般不作为A类地址</td><td>255.0.0.0</td></tr><tr><td>B类</td><td>128.0.0.0~191.255.255.255</td><td></td><td>255.255.0.0</td></tr><tr><td>C类</td><td>192.0.0.0~223.255.255.255</td><td></td><td>255.255.255.0</td></tr><tr><td>D类</td><td>224.0.0.0~239.255.255.255</td><td>多播&#x2F;组播地址：（一对多）供特殊协议使用</td><td></td></tr><tr><td>E类</td><td>240.0.0.0~255.255.255.255</td><td>保留地址：供以后使用</td><td></td></tr></tbody></table><h5 id="（2）-VLSM-CIDR下"><a href="#（2）-VLSM-CIDR下" class="headerlink" title="（2）(VLSM&#x2F;CIDR下)"></a>（2）(VLSM&#x2F;CIDR下)</h5><table><thead><tr><th>新IP(32位)(VLSM(借主机号作为网络号)&#x2F;CIDR下)</th><th>Net-id</th><th>Subnet-id</th><th>Host-id</th></tr></thead><tbody><tr><td>IP地址</td><td>网络号</td><td>子网号</td><td>主机号</td></tr><tr><td></td><td>新网络号</td><td>新网络号</td><td>主机号</td></tr></tbody></table><table><thead><tr><th></th><th>1</th><th>0</th></tr></thead><tbody><tr><td>IP地址（常用）</td><td>网络部分</td><td>主机部分</td></tr><tr><td>广播地址</td><td>主机部分</td><td>网络部分</td></tr></tbody></table><p>例：（VLSM&#x2F;CIDR下）172.31.128.255&#x2F;18</p><p>18为子网掩码，表示32位中高18位是1，其他位为0</p><p>IP地址：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.11111111</strong>  </p><p>子网掩码二进制形式：11111111.11111111.11<strong>000000.00000000</strong></p><p>子网掩码十进制形式：&emsp;&emsp;255.&emsp;&emsp;255.&emsp;&emsp;&emsp;192.&emsp;&emsp;&emsp;0</p><p>网络号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>000000.00000000</strong></p><p>子网掩码反码：&emsp;&emsp;&emsp;00000000.00000000.00111111.11111111</p><p>主机号：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;00000000.00000000.00000000.11111111</p><p>‘与(&amp;)’运算：1&amp;1&#x3D;1，1&amp;0&#x3D;0，0&amp;1&#x3D;0，0&amp;0&#x3D;0；</p><p>IP地址与子网掩码‘与(&amp;)’运算得网络号；</p><p>IP地址与子网掩码反码‘与(&amp;)’运算得主机号；</p><p>广播地址：&emsp;&emsp;&emsp;&emsp;&emsp;10101100.00011111.10<strong>111111.11111111</strong></p><p>广播地址就是在网络号的基础上，将网络号右边表示IP地址的主机部分(字体加粗)的二进制全部改为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure></li><li><h4 id="子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"><a href="#子网划分场景下-VLSM-CIDR下-：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。" class="headerlink" title="子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。"></a>子网划分场景下(VLSM&#x2F;CIDR下)：网络地址（包括网络号与子网号两部分）是IP地址与子网掩码的‘与’运算结果。</h4><p>（1）当子网掩码不默认时，网络地址≠网络号</p><p>&emsp;&emsp;如：172.16.10.2（B类）</p><p>&emsp;&emsp;&emsp;此时子网掩码为：255.255.255.0，进行‘与’运算</p><p>&emsp;&emsp;&emsp;此时网络地址为：172.16.10.0</p><p>&emsp;&emsp;&emsp;而默认子网掩码为：255.255.0.0，得到网络号为：172.16.0.0 </p><p>&emsp;&emsp;&emsp;网络地址≠网络号</p><p>（2）子网掩码默认时，网络地址＝网络号</p><p>&emsp;&emsp;如：172.16.10.2</p><p>&emsp;&emsp;&emsp;默认子网掩码为255.255.0.0，进行‘与’运算</p><p>&emsp;&emsp;&emsp;此时网络地址为：172.16.0.0</p><p>&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p><p>（3）在无子网划分场景下，网络地址&#x3D;网络号；（传统子网号）</p><p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p><p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;网络号</p><p>&emsp;&emsp;在子网划分场景下，网络地址是网络号的扩展；（VLSM&#x2F;CIDR下）</p><p>&emsp;&emsp;&emsp;&emsp;网络地址&#x3D;IP地址&amp;子网掩码</p><p>&emsp;&emsp;&emsp;&emsp;网络地址≠网络号</p></li><li><h4 id="划分子网：（VLSM-CIDR下）"><a href="#划分子网：（VLSM-CIDR下）" class="headerlink" title="划分子网：（VLSM&#x2F;CIDR下）"></a>划分子网：（VLSM&#x2F;CIDR下）</h4><p>（1）根据主机号中子网掩码借默认的子网掩码的位数n&#x3D;&gt;<strong>2^n为子网数</strong></p><p>&emsp;例：C类IP192.168.1.113</p><p>&emsp;&emsp;&emsp;默认子网掩码：255.255.255.0</p><p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>00</strong>000000</p><p>&emsp;&emsp;&emsp;现有子网掩码：255.255.255.192</p><p>&emsp;&emsp;&emsp;二进制形式：11111111.11111111.11111111.<strong>11</strong>000000</p><p>&emsp;&emsp;&emsp;网络号借了主机号<strong>两位</strong>，即<strong>子网号为11</strong>，则原IP可以被划分为2^2&#x3D;4个子网；</p><p>&emsp;&emsp;&emsp;&emsp;4个子网为：—.—.—.00000000&emsp;即255.255.255.0</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01000000&emsp;即255.255.255.64</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10000000&emsp;即255.255.255.128</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.11000000&emsp;即255.255.255.192</p><p>&emsp;&emsp;&emsp;&emsp;得网络地址为：192.168.1.0</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.64</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.128</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.192</p><p>&emsp;&emsp;&emsp;&emsp;广播地址为：—.—.—.11111111&emsp;即255.255.255.255</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.10111111&emsp;即255.255.255.191</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.01111111&emsp;即255.255.255.127</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—.—.—.00111111&emsp;即255.255.255.63</p><p>&emsp;&emsp;&emsp;&emsp;得广播地址为：192.168.1.255</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.191</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.127</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.63</p><p>&emsp;&emsp;&emsp;&emsp;去除网络地址和广播地址即可用主机IP地址：</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.1  ——&gt; 192.168.1.62</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.65——-&gt; 192.168.1.126  </p><p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.129——&gt; 192.168.1.190</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;192.168.1.193——&gt; 192.168.1.254</p><p>&emsp;&emsp;划分子网过程：</p><p>&emsp;&emsp;&emsp;①根据IP分类和默认掩码得到子网号和划分子网个数；</p><p>&emsp;&emsp;&emsp;②根据划分区域推出子网，在转十进制；</p><p>&emsp;&emsp;&emsp;③组合原IP和子网。</p><p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41207757/article/details/107839099">链接</a></p><p>（2）根据IP地址和子网掩码计算主机数：</p><p>&emsp;例：子网掩码为：255.255.255.0</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.11111111.<strong>00000000</strong></p><p>&emsp;&emsp;则有2^8-2&#x3D;254台主机（去除0.0.0.0和127.0.0.1）</p><p>&emsp;再例：255.255.240.0</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;11111111.11111111.1111<strong>0000.00000000</strong></p><p>&emsp;&emsp;则有2^12-2&#x3D;4094台</p></li><li><h4 id="TCP协议："><a href="#TCP协议：" class="headerlink" title="TCP协议："></a>TCP协议：</h4><h5 id="（1）三次握手，四次挥手"><a href="#（1）三次握手，四次挥手" class="headerlink" title="（1）三次握手，四次挥手"></a>（1）三次握手，四次挥手</h5><p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p><p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="TCP四次挥手"></p><p>&emsp;参考: <a href="https://blog.csdn.net/m0_56649557/article/details/119492899">链接</a></p><h5 id="（2）TCP协议与UDP协议区别："><a href="#（2）TCP协议与UDP协议区别：" class="headerlink" title="（2）TCP协议与UDP协议区别："></a>（2）TCP协议与UDP协议区别：</h5><table><thead><tr><th></th><th>连接性</th><th>可靠性</th><th>流量控制</th><th>开销</th><th>拥塞控制</th><th>数据传输顺序</th><th>应用场景</th></tr></thead><tbody><tr><td>TCP</td><td>面向连接</td><td>可靠</td><td>高延迟流</td><td>高</td><td>拥塞控制</td><td>保证数据包顺序到达</td><td>文件传输、电子邮件、远程登录</td></tr><tr><td>UDP</td><td>无连接性</td><td>不可靠</td><td>低延迟</td><td>低</td><td>数据报分组</td><td>不保证数据包顺序到达</td><td>视频流、在线游戏</td></tr></tbody></table><p>参考: <a href="https://developer.aliyun.com/article/1632460">链接</a></p></li><li><h4 id="RIP协议："><a href="#RIP协议：" class="headerlink" title="RIP协议："></a>RIP协议：</h4><p>A的路由器表：</p><table><thead><tr><th>目的</th><th>距离</th><th>下一跳</th></tr></thead><tbody><tr><td>N1</td><td>4</td><td>B</td></tr><tr><td>N2</td><td>2</td><td>C</td></tr><tr><td>N3</td><td>1</td><td>F</td></tr><tr><td>N4</td><td>5</td><td>G</td></tr></tbody></table><p>现A收到来自C的路由信息：</p><table><thead><tr><th>目的</th><th>距离</th></tr></thead><tbody><tr><td>N1</td><td>2</td></tr><tr><td>N2</td><td>1</td></tr><tr><td>N3</td><td>3</td></tr><tr><td>N4</td><td>7</td></tr><tr><td>N5</td><td>10</td></tr></tbody></table><p>更新A的路由器表：</p><table><thead><tr><th>目的</th><th>距离</th><th>下一条</th><th>理由</th></tr></thead><tbody><tr><td>N1</td><td>2+1&#x3D;3</td><td>C</td><td>不同的下一条，收到的表距离更短，更新</td></tr><tr><td>N2</td><td>1+1&#x3D;2</td><td>C</td><td>相同的下一条，更新</td></tr><tr><td>N3</td><td>1</td><td>F</td><td>不同的下一条，收到的表距离更长，不变</td></tr><tr><td>N4</td><td>5</td><td>G</td><td>不同的下一条，收到的表距离更长，不变</td></tr><tr><td>N5</td><td>10+1&#x3D;11</td><td>C</td><td>新的下一条，更新</td></tr></tbody></table></li></ol><p>&emsp;&emsp;参考: <a href="https://blog.csdn.net/qq_41904773/article/details/107103092">链接</a></p><h3 id="二、补充："><a href="#二、补充：" class="headerlink" title="二、补充："></a>二、补充：</h3><ol><li><p>计算机网络由若干结点和连接这些节点的链路组成。</p></li><li><p>1983年互联网诞生。</p></li><li><p>发展：单个网络ARPANET——&gt;三级结构互联网——&gt;多层次ISP结构互联网。</p></li><li><p>网络通信方式：C&#x2F;S和P2P。</p></li><li><p>网络核心部分其特殊作用的是路由器（实现分组交换）。</p></li><li><p>分组交换特点：</p><p>①采用存储转发技术</p><p>②报文-细分-&gt;数据段</p><p>③（包）分组&#x3D;数据段+首部（目的地址和源地址）</p><p>④优点：高效、灵活、迅速、可靠</p></li><li><p>电路交换：源——&gt;终</p><p>报文交换：起——&gt;相邻点——&gt;相邻点——&gt;……——&gt;终点</p><p>分组交换：类似于报文交换（分组比报文更小）</p></li><li><p>分类：</p><table><thead><tr><th>按作用</th><th>按使用者</th></tr></thead><tbody><tr><td>广域网WAN</td><td>公用网</td></tr><tr><td>城域网MAN</td><td>专用网</td></tr><tr><td>局域网LAN</td><td></td></tr><tr><td>个人局域网PAN</td><td></td></tr></tbody></table></li><li><p>性能：</p><p>（1）速率：比特bit&#x2F;s</p><p>（2）带宽：赫</p><p>（3）吞吐量</p><p>（4）时延：发送时延、传播<del>、处理</del>、排队~</p><p>（5）时延带宽积</p><p>（6）往返时间RTT</p><p>（7）利用率</p></li><li><p>网络体系：</p><p>（1）OSI模型（7层）、TCP&#x2F;IP协议（4层）</p><p>（2）体系结构：计算机网络的各层及其协议的集合</p></li><li><p>物理层：</p><p>（1）信道</p><p>（2）媒介：双绞线——&gt;屏蔽双绞线STP、无屏蔽双绞线OTP</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;同轴电缆：有线电视</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;光缆、光纤</p><p>（3）信道复用技术：允许用户使用一个共享信道进行通信，降低成本，提高利用率；</p><p>（4）宽带接入技术：用户要连接到互联网，必须先连接到某个ISP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure></li><li><p>数据链路层：</p><p>（1）点对点信道（CSMA&#x2F;CD）</p><p>&emsp;&emsp;&emsp;接受网络层IP数据报、添加首尾部、封装成帧、发送到另一结点或上交（有检错过程）</p><p>&emsp;&emsp;&emsp;封装成帧、透明传输、差错检测。</p><p>&emsp;&emsp;&emsp;可采用转义字符ESC解决丢失问题。</p><p>（2）广播信道（PPP）</p><p>&emsp;&emsp;&emsp; ①全双工、</p><p>&emsp;&emsp;&emsp; ②简单、封装成帧、透明性、多种网络层协议、多种类型链路、差错检测、检测连接状态、最大传递单元、网络层地址协商、数据压缩协商。</p><p>&emsp;&emsp;&emsp;③用户——&gt;PPP协议——&gt;ISP——&gt;互联网</p><p>&emsp;&emsp;&emsp;④用户拨号——&gt;ISP——&gt;LCP——&gt;NCP——&gt;得到IP地址</p><p>&emsp;&emsp;&emsp;封装IP数据报到串行链路，测试、建立、配置数据链路连接的LCP，网络控制协议NCP</p><p>（3）封装成帧（首尾）</p><p>（4）广播信道的数据链路层：</p><p>&emsp;&emsp;&emsp;星形网、环形网、总线网；</p><p>&emsp;&emsp;&emsp;采用集线器的星形拓扑：双绞线；</p><p>&emsp;&emsp;&emsp;以太网的MAC层：硬件地址又称为物理地址或MAC地址；</p><p>&emsp;&emsp;&emsp;MAC帧：单播帧、广播帧、多播帧。</p><p>（5）集线器：所有站点共享总带宽，属于冲突域，同一时间只能与一个站点传输数据，带宽按站点数平均分配；</p><p>&emsp;&emsp;&emsp;交换机：每个站口独立带宽，支持全双工通信，站点间并行传输数据，每个站点的带宽等于端口速率。</p><p><img src="/blog2025.github.io/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%9B%86%E7%BA%BF%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA.png"></p><p>例：有10个站连接到以太网上，试计算三种情况下每个站所能得到的带宽。</p><p>&emsp; ①10个站都连接到一个10Mb&#x2F;s以太网集线器：1Mb&#x2F;s</p><p>&emsp; ②10个站都连接到一个100Mb&#x2F;s以太网集线器：10Mb&#x2F;s</p><p>&emsp; ③10个站都连接到一个10Mb&#x2F;s以太网交换机：10Mb&#x2F;s</p></li><li><p>网络层：</p><p>（1）数据链路层看不到封装后的IP地址；</p><p>&emsp;&emsp;IP地址的源和目的始终不变（被封装了，变不了）<br>&emsp;&emsp;MAC帧中的则要变化（负责带IP一层一层跑）</p></li><li><p>应用层</p><p>mail.cctv.com</p><table><thead><tr><th>mail.</th><th>cctv.</th><th>com</th></tr></thead><tbody><tr><td>三级域名</td><td>二级域名</td><td>顶级域名</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程导论</title>
      <link href="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/"/>
      <url>/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一-软件危机"><a href="#一-软件危机" class="headerlink" title="一. 软件危机"></a>一. 软件危机</h3><ol><li>定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。<br>表现：<br>（1）开发成本和进度的估计不准确；（开发滞后）<br>（2）用户对开发的软件不满意；<br>（3）软件的质量靠不住；<br>（4）软件不可维护；（重复开发相同的软件）<br>（5）软件不可维护；（重复开发相同的软件）<br>（6）软件开发成本在计算机系统总成本中所占的比例逐年上升；<br>（7）软件开发生产率跟不上计算机应用的发展；（供不应求）<br>等等。</li><li>产生原因：<br>（1）软件本身的特点有关；（软件本身）<br>（2）软件开发与维护的方法不正确；（软件开发不匹配计算机发展）<br>（3）对用户要求没有完整准确的认识就匆忙着手编写程序；（开发人员）</li><li>消除方法：<br>（1）对计算机软件有一个正确的认识；（消除软件就是程序的错误）<br>软件定义：软件是程序，数据及相关文档的完整集合；<br>（2）软件开发不是某个体劳动的神秘技巧，而是一种团队配合的工程项目，必须吸收和借鉴人类长期以来积累的原理、概念、技术和方法，尤其是教训；<br>（3）推广实践中总结出来的经验、技术和方法，并研究新的；<br>（4）开发和使用更好的软件工具。 </li><li><font color="red">总结：技术措施（方法、工具），必要的组织管理措施。</font></li></ol><span id="more"></span><h3 id="二-软件工程"><a href="#二-软件工程" class="headerlink" title="二. 软件工程"></a>二. 软件工程</h3><ol><li><p>定义：指导计算机软件开发和维护的一门工程学科。</p></li><li><p>本质特征：<br>（1）关注于大型程序的构造；<br>（2）中心课题是控制复杂性；<br>（3）软件的效率非常重要；<br>（4）开发软件的效率非常重要；<br>（5）和谐地合作是开发软件的关键；<br>（6）软件必须有效地支持它的用户；<br>（7）一种文化背景的人替另一种文化背景的人创造产品；</p></li><li><p>基本原理：<br>（1）用分阶段的生命周期计划严格管理；<br>（2）坚持进行阶段评审；<br>（3）实行严格的产品控制；<br>（4）采用现代化程序设计技术；<br>（5）结果应清除审查；<br>（6）开发小组的人员少二精；<br>（7）承认不断改进软件工程实践的必要性；</p></li><li><p>软件工程方法学：<br>（1） 软件工程包含技术和管理两方面的内容：<br>（2） <font color="red">范型（方法学）</font>：在软件生命周期全过程中使用的一整套技术方法的集合；<br>&emsp;&emsp;包含三个要素： 方法、工具、过程；<br>&emsp;&emsp;常用——&gt;<font color="red">传统方法学和面向对象方法学</font><br>（3）传统方法学（<font color="red">生命周期方法学 &#x2F; 结构化范型</font>）（大部分采用瀑布模型）<br>&emsp;&emsp;面向行为或数据，两者权重不同；（行为和数据分离）<br>&emsp;&emsp;🟪-&gt;🟪-&gt;🟪-&gt;🟪（一个阶段一个阶段地顺序开发）</p><p>&emsp;&emsp;优点：软件生命周期划分为若干个阶段，每个阶段任务相对独立，而且简单，便于分工协作，降低开发困难程度。</p><p>&emsp;&emsp;缺点：软件规模较大时，或者软件需求随时间变化时，开发出的软件往往不成功，且维护困难。</p><p>（4）面向对象方法学：（规模庞大，需求模糊或不断变化）<br>&emsp;&emsp;数据和行为的权重一样大；<br>&emsp;&emsp;特点：<br>&emsp;&emsp;① 对象；（数据和行为的统一）object<br>&emsp;&emsp;② 对象——&gt;类；（数据和操作）class<br>&emsp;&emsp;③ 父类、子类、派生类；<br>&emsp;&emsp;④ 对象间仅能通过发送消息互相联系；<br>&emsp;&emsp;对象间的所有私有private信息都被封装在该对象内，不可从外界直接访问（<font color="red">封装性</font>）<br>&emsp;&emsp;最终产品是由许多较小的基本独立的对象组成。</p><p>&emsp;&emsp;优点：符合人类思维方法，各阶段使用方法具有高度的连续性，各个阶段有机集成，有利于系统的稳定。</p></li></ol><h3 id="三、软件生命周期"><a href="#三、软件生命周期" class="headerlink" title="三、软件生命周期"></a>三、软件生命周期</h3><p>​组成：软件定义、软件开发、运行维护；</p><ol><li><p>软件定义（系统分析）：</p><table><thead><tr><th>分类</th><th>解决</th></tr></thead><tbody><tr><td>问题定义</td><td>问题是什么？</td></tr><tr><td>可行性研究</td><td>问题能否解决？</td></tr><tr><td>需求分析</td><td>解决问题需要做什么？</td></tr></tbody></table></li><li><p>软件开发：</p></li></ol><table><thead><tr><th>分类</th><th>细分</th><th>解决</th></tr></thead><tbody><tr><td>系统设计</td><td>总体设计</td><td>如何实现</td></tr><tr><td></td><td>详细设计</td><td>如何具体实现</td></tr><tr><td>系统实现</td><td>编码和单元测试</td><td></td></tr><tr><td></td><td>综合测试</td><td></td></tr></tbody></table><ol start="3"><li><p>软件维护：</p><p>改正性维护、适应性维护、完善性维护、预防性维护；</p></li></ol><p><font color="red">总结：系统分析——&gt;系统设计——&gt;系统实现——&gt;维护</font></p><h3 id="四、软件过程（采用生命周期模型）（过程模型）"><a href="#四、软件过程（采用生命周期模型）（过程模型）" class="headerlink" title="四、软件过程（采用生命周期模型）（过程模型）"></a>四、软件过程（采用生命周期模型）（过程模型）</h3><ol><li><p>目的：为了开发出客户需要的软件；（who,when,what,how）</p></li><li><p>生命周期模型：<br>（1）<font color="red">瀑布模型</font>：（每个阶段都有文档）<br>特点：<br>① 阶段间具有顺序性和依赖性；<br>② 推迟实现的观点；（越大的项目越需要早期的准备）<br>③ 质量保证的观点；（文档）<br>优点：强迫开发人员采用规范，维护比较容易；（文档驱动）<br>缺点：交付给用户之前，用户只能通过文档了解产品，最终导致产品与用户需求发生争执；（文档驱动）</p><p>适用于：用户需求清晰，且开发过程无变化；开发人员的熟练，用户的使用环境非常稳定；开发中用户参与要求很低。</p></li></ol><img src="瀑布模型.png" style="zoom: 80%;" /><p>​（2） 快速原型模型：</p><p>&emsp;&emsp;特点：先开发一个原型，后续根据用户要求快速修改原型。（线性）</p><p>&emsp;&emsp;本质：快速，节约开发成本。</p><p>&emsp;&emsp;应用：UNIX Shell和超文本</p><p>&emsp;&emsp;优点：容易适应需求变化；有利于开发与培训的同步；开发费用低、周期短，对用户更友好。</p><p>&emsp;&emsp;缺点：客户与开发者对原型的理解不同；准确的原型设计比较困难；不利于开发人员的创新。</p><p>&emsp;&emsp;适用范围：对开发领域熟悉且有快速原型工具；项目投标时有原型展示；产品升级或移植，对已有产品进行服务。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%BF%AB%E9%80%9F%E6%A8%A1%E5%9E%8B.png"></p><p>​（3）增量模型（渐增模型）</p><p>&emsp;&emsp;特点：将功能分为构件，逐步向用户提交产品，功能逐步推给用户；</p><p>&emsp;&emsp;&emsp;&emsp;与之相比，瀑布和快速模型则是一次把所有功能塞给用户；</p><p>&emsp;&emsp;优点：较短时间内向用户提交；</p><p>&emsp;&emsp;① 可完成部分工作的产品；</p><p>&emsp;&emsp;② 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品；</p><p>&emsp;&emsp;缺点：技术要求高。</p><p>&emsp;&emsp;适用范围：进行已有产品升级或新版本开发；对完成期限要求严格；所开发领域熟悉且已有原型系统。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png"></p><p>&emsp;&emsp;风险更大的增量模型：（并行开发）</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B2.png"></p><p>​（4）螺旋模型：（用于大项目、应对风险即风险驱动）</p><p>&emsp;&emsp;<font color="red">实质上是在每个阶段之前增加了风险分析过程的<strong>快速原型</strong>模型</font></p><p>&emsp;&emsp;优点：</p><p>&emsp;&emsp;① 强调已有软件的重用，有助于把软件质量作为软件开发的一个重要目标；</p><p>&emsp;&emsp;② 减少了过多测试（浪费资金）或测试不足（产品故障多）所带来的风险。</p><p>&emsp;&emsp;缺点：风险驱动的同时也会使开发人员未意识到真正风险的发生。</p><p>&emsp;&emsp;适用范围：内部开发的大规模项目。</p><img src="螺旋模型.png" style="zoom: 50%;" /><p>​（5）喷泉模型：（迭代）<font color="red"><strong>面向对象范型</strong>中常见</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;解释：圆圈相互重叠代表活动存在交迭；向下的箭头代表该阶段内的迭代；较小的圆圈代表维护。</p><img src="喷泉模型.png" style="zoom: 50%;" /><p>​（6）RUP统一过程：</p><p>&emsp;&emsp;迭代开发，管理需求（用例分析），使用基于构件的体系结构（第三方架构Vue、Spring之类），可视化建模（UML），验证软件质量，控制软件变更。</p><p>&emsp;&emsp;优点：提高团队生产力。</p><p>&emsp;&emsp;缺点：没有涵盖软件工程的全部内容，缺少软件运行和支持方面的内容，不支持多项目的开发结构，重用可能性降低。</p><h3 id="五、可行性研究"><a href="#五、可行性研究" class="headerlink" title="五、可行性研究"></a>五、可行性研究</h3><ol><li><p>实质：是要进行一次大大压缩简化了的系统分析（抽象化）和设计的过程</p></li><li><p>目的：用最小的代价，在尽可能短的时间内研究并确定客户提出的问题是否有行得通的解决办法。</p></li><li><p>定义：</p><p>（1）进一步分析和澄清问题定义；</p><p>（2）导出系统的逻辑模型；</p><p>（3）探索若干种可供选择的主要解法：</p><p>&emsp;&emsp;① 技术可行性，② 经济可行性，③ 操作可行性，④ 法律</p></li><li><p>过程：8步</p><p>复查系统规模和目标、研究现有系统、导出新系统模型、进一步定义问题、导出和评价解法、推荐行动方针、草拟开发计划、写文档提交审查。</p></li><li><p>各类图：（详细看汇总图章节）</p><p>（1）系统流程图</p><p>（2）数据流图（数据流程图）</p><p>（3）数据字典：（开发数据库的第一步）</p><p>&emsp;&emsp;定义：关于数据的信息的集合，对数据流图中包含的所有元素的定义的集合；</p><p>&emsp;&emsp;包含：数据流（动态）、数据存储（静态）、数据流分量\数据元素（处理）</p></li></ol><h3 id="六、需求分析（访谈）"><a href="#六、需求分析（访谈）" class="headerlink" title="六、需求分析（访谈）"></a>六、需求分析（访谈）</h3><ol><li><p>实质：回答系统必须做什么。</p></li><li><p>任务：</p><p>（1）确定对系统的综合要求：</p><p>&emsp;&emsp;功能需求，性能<del>，可靠性和可用性</del>，出错处理<del>，接口</del>，约束，逆向<del>，将来可能提出的</del></p><p>（2）分析系统的数据要求；</p><p>（3）导出系统的逻辑模型：</p><p>&emsp;&emsp;采用数据流图、实体-联系图、状态转换图、数据字典和主要算法描述该模型。</p><p>（4）修正系统开发计划；</p></li><li><p>软件需求规格说明：（详细看汇总图章节）</p><p>（1）实体-联系图（E-R图）：数据对象、属性、联系（1:1，1:n，n:m）,（1NF冗余最高，2NF，3NF常用）</p><p>（2）状态转化图（两种画法）</p><p>（3）Warnier图</p><p>（4）IPO图</p></li></ol><h3 id="七、总体设计"><a href="#七、总体设计" class="headerlink" title="七、总体设计"></a>七、总体设计</h3><ol><li><p>阶段组成：系统设计、结构设计；</p></li><li><p>过程：9步</p><p>设想供选择的方案，选取合理的方案，推荐最佳~，功能分解，设计软件架构，设计数据库，确定测试计划，书写文档，审查和复审。</p></li><li><p>模块：构成程序的基本构件</p><p>（1）耦合：追求低耦合</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%80%A6%E5%90%88.png"></p><p>（2）内聚：追求高内聚</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%86%85%E8%81%9A.png"></p></li><li><p>描述软件架构工具：（详细看汇总图章节）</p><p>（1）层次图</p><p>（2）HIPO图</p><p>（3）软件结构图</p></li></ol><h3 id="八、详细设计（算法）"><a href="#八、详细设计（算法）" class="headerlink" title="八、详细设计（算法）"></a>八、详细设计（算法）</h3><ol><li><p>结构设计：顺序、选择、循环</p></li><li><p>过程设计工具：（描述程序处理过程的工具）（详细看汇总图章节）</p><p>（1）程序流程图</p><p>（2）盒图（N-S图）</p><p>（3）PAD图</p><p>（4）判定表</p><p>（5）判定树</p></li><li><p>面向数据结构的设计方法：Jackson图</p></li><li><p>程序复杂程度：计算环形复杂度</p></li></ol><h3 id="九、实现"><a href="#九、实现" class="headerlink" title="九、实现"></a>九、实现</h3><ol><li><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4></li><li><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>（1）确认测试：需求分析阶段（Alpha测试、Beta测试）</p><p>（2）单元测试：详细设计&#x2F;编码阶段（代码审查）</p><p>（3）集成测试：概要设计阶段（回归测试）</p><p>（4）系统测试：整体系统实现</p><p>（5）黑盒测试</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p><p>（6）白盒测试：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.png"></p></li><li><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4></li></ol><h3 id="十、维护"><a href="#十、维护" class="headerlink" title="十、维护"></a>十、维护</h3><ol><li><p>决定软件的可维护性的因素：</p><p>可理解性、可测试性、可修改性、可重用性</p></li><li><p>提高软件产品的可维护性的方法：</p><p>①建立明确的软件直连目标；</p><p>②使用先进的软件开发技术和工具；</p><p>③建立明确的质量保证；</p><p>④选择可维护的程序设计语言；</p><p>⑤改进程序文档。</p></li><li><p>文档：</p><p>用户文档、系统文档</p></li></ol><h3 id="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"><a href="#十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）" class="headerlink" title="十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）"></a>十一、面向对象方法学（类是对象的蓝图或模板，而对象是类的实例。）</h3><ol><li><p>什么是面向对象方法学？</p><p>尽可能模拟人类习惯，开发过程接近人类解决问题的方法与过程。</p><p>优点：与人类思维方法一致；软件稳定性好；软件可重用性好；较易开发大型软件产品；可维护性好。</p></li><li><p>什么是对象？</p><p>对问题域某个实体的抽象；既有静态的属性（姓名…），又有动态的属性（方法…）。</p></li><li><p>什么是类？</p><p>对具有相同数据结构和操作的一组相似对象的定义，即类是对具有相同属性和行为的一个或多个对象的描述。</p></li><li><p>用例图（详细看汇总图章节）</p></li><li><p>类图（详细看汇总图章节）</p></li></ol><h3 id="十二、面向对象分析"><a href="#十二、面向对象分析" class="headerlink" title="十二、面向对象分析"></a>十二、面向对象分析</h3><ol><li><p>状态图（详细看汇总图章节）</p></li><li><p>事件跟踪图</p></li><li><table><thead><tr><th>模型类型</th><th>图</th><th>注释</th></tr></thead><tbody><tr><td>对象模型</td><td>类图结合功能过程</td><td>最基础、最重要、最核心</td></tr><tr><td>动态模型</td><td>时间跟踪图或状态图</td><td></td></tr><tr><td>功能模型</td><td>数据流图或程序流程图</td><td></td></tr></tbody></table></li></ol><h3 id="十三、软件工程导论各类图汇总"><a href="#十三、软件工程导论各类图汇总" class="headerlink" title="十三、软件工程导论各类图汇总"></a>十三、软件工程导论各类图汇总</h3><h4 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h4><ol><li><p>可行性分析：</p><p>（1）系统流程图（整个系统功能）</p><p>（2）数据流(程)图</p><p>（3）数据字典</p></li><li><p>需求分析：</p><p>（1）实体联系图（E-R图）</p><p>（2）状态(转换)图（两种画法）</p><p>（3）IPO图</p></li><li><p>总体设计：</p><p>（1）层次图</p><p>（2）HIPO图</p><p>（3）软件结构图</p></li><li><p>详细设计：</p><p>（1）程序流程图（某一程序执行任务的过程）</p><p>（2）N-S盒图</p><p>（3）PAD图</p><p>（4）判定表</p><p>（5）判定树</p><p>（6）Jackson图</p></li><li><p>其他</p><p>（1）用例图</p><p>（2）类图</p><p>（3）事件跟踪图</p><p>（4）状态图（两种画法）</p></li></ol><h4 id="绘制："><a href="#绘制：" class="headerlink" title="绘制："></a>绘制：</h4><ol><li><h5 id="可行性分析："><a href="#可行性分析：" class="headerlink" title="可行性分析："></a>可行性分析：</h5><p>（1）系统流程图：</p><p>&emsp;&emsp;<img src="系统流程图1.png" style="zoom:50%;" /><img src="系统流程图2.png" style="zoom:50%;" /></p><p>&emsp;&emsp;例：</p><img src="系统流程图3.png" alt="系统流程图3" style="zoom:50%;" /><p>（2）数据流(程)图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE1.png"></p><p>&emsp;&emsp;例1：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE2.png"></p><p>&emsp;&emsp;例2：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE3.png"></p><p>&emsp;&emsp;D1，D2，1，2：加这些编号是为了方便引用和追踪</p><p>（3）数据字典：</p></li></ol><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th><th>允许非空</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>char</td><td>编号</td><td>NO</td><td></td></tr><tr><td>name</td><td>varchar</td><td>姓名</td><td>NO</td><td></td></tr></tbody></table><ol start="2"><li><h5 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h5><p>（1）实体联系图（E-R图）：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE1.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/ER%E5%9B%BE2.png"></p><p>（2）状态图&#x2F;状态转换图：（两种画法）</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE1.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE2.png"></p><p>（3）IPO图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/IPO%E5%9B%BE1.png"></p><p>&emsp;&emsp;IPO表：</p><img src="IPO表.png"  /></li><li><h5 id="总体设计："><a href="#总体设计：" class="headerlink" title="总体设计："></a>总体设计：</h5><p>（1）层次图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E6%A8%A1%E5%9D%97.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%B1%82%E6%AC%A1%E5%9B%BE.png"></p><p>（2）HIPO图：（IPO图+层次图）</p><p>&emsp;&emsp;在层次图除了最顶层的方框之外，每个方框中都加编号。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/HIPO%E5%9B%BE.png"></p><p>（3）软件结构图：</p><p>&emsp;&emsp;类似于层次图，但是为模块调用模块。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE1.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE2.png"></p></li><li><h5 id="详细设计："><a href="#详细设计：" class="headerlink" title="详细设计："></a>详细设计：</h5><p>（1）程序流程图：（环形复杂度计算）</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p>（2）N-S盒图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%9B%92%E5%9B%BE1.png"></p><p>（3）PAD图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE.png"></p><p>&emsp;&emsp;例：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/PAD%E5%9B%BE1.png"></p><p>（4）判定表：</p><p>&emsp;&emsp;例：某航空公司规定，乘客可以免费托运不超过20公斤的行李。当行李重量超过20公斤时，对头等舱的乘客超重部分每公斤收费4元，其它舱的乘客收费6元。对残疾乘客超重部分在舱位等次相同的情况下收费减半。</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>未超重</td><td>T</td><td>F</td><td>F</td><td>F</td><td>F</td></tr><tr><td>超重</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>头等舱</td><td>F</td><td>T</td><td>T</td><td>F</td><td>F</td></tr><tr><td>其他舱</td><td>F</td><td>F</td><td>F</td><td>T</td><td>T</td></tr><tr><td>残疾乘客</td><td>F</td><td>T</td><td>F</td><td>T</td><td>F</td></tr><tr><td>普通乘客</td><td>F</td><td>F</td><td>T</td><td>F</td><td>T</td></tr><tr><td>免费</td><td>√</td><td></td><td></td><td></td><td></td></tr><tr><td>超出部分2元&#x2F;公斤</td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>超出部分3元&#x2F;公斤</td><td></td><td></td><td></td><td>√</td><td></td></tr><tr><td>超出部分4元&#x2F;公斤</td><td></td><td></td><td>√</td><td></td><td></td></tr><tr><td>超出部分6元&#x2F;公斤</td><td></td><td></td><td></td><td></td><td>√</td></tr></tbody></table><p>（5）判定树：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E5%88%A4%E5%AE%9A%E6%A0%91.png"></p><p>（6）Jackson图：</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/Jackson%E5%9B%BE.png"></p></li><li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>（1）用例图</p><table><thead><tr><th>关系类型</th><th>说明</th><th>表示符号</th></tr></thead><tbody><tr><td>关联</td><td>参与者与用例之间的关系</td><td>—&gt;</td></tr><tr><td>泛化</td><td>参与者之间或用例之间的关系</td><td>—▷</td></tr><tr><td>包含</td><td>用例之间的关系</td><td>—&lt;&lt;include&gt;&gt;—&gt;</td></tr><tr><td>扩展</td><td>用例之间的关系</td><td>—&lt;&lt;extend&gt;&gt;—-&gt;</td></tr></tbody></table><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p><p>（2）类图</p><p>&emsp;&emsp;参考：<a href="https://blog.csdn.net/realmagicboy/article/details/90289062">链接</a></p><p>（3）事件跟踪图</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B8%AA%E5%9B%BE.png"></p><p>（4）状态图（两种画法）</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><h3 id="十四、补充知识点："><a href="#十四、补充知识点：" class="headerlink" title="十四、补充知识点："></a>十四、补充知识点：</h3><ol><li><p>判定是否结构化：</p><p>程序流程图只有一个出口，则结构化；有多个出口，则非结构化。（非结构化&#x3D;&gt;结构化）</p></li><li><p>非渐增式测试：</p><p>先将模块进行单元测试然后组装到一起再测试整体；</p><p>渐增式测试：（自下而上、自上而下）</p><p>逐个将未经检测的模块组装到已经测试过的模块上进行集成测试。即加一个测一个，便于发现接口错误。</p></li><li><p>结构化设计方法（传统法）是面对数据流和功能的设计。</p></li><li><p>数据流设计方法：</p><p>（1）变换型：输入——&gt;处理——&gt;输出</p><p>（2）事务性：事务层、操作层、细节层（一起入、一起滚）</p></li><li><p>好的程序注释要占到程序总量的1&#x2F;3。</p></li><li><p>找到错误位置占排错总工作量的95%。</p></li><li><p>数据流和文件命名情况：</p><table><thead><tr><th>场景</th><th>数据流命名</th><th>文件命名</th></tr></thead><tbody><tr><td>数据流与文件交互</td><td>不需要</td><td>需要</td></tr><tr><td>数据流再加工之间传递</td><td>需要</td><td>不需要</td></tr><tr><td>流入&#x2F;流出文件的数据流不同</td><td>需要</td><td>需要</td></tr></tbody></table></li><li><p>功能性内聚是最强的，偶然内聚是最弱的。</p></li><li><p>Jackson图是面向数据结构的.</p></li><li><p>模块中所以成分引用共同的数据，该模块内的联系类型为：通信内聚。</p></li><li><p>不适应于数据流图处理（加工）名称的是工资支票数据。（因为不存在计算&#x2F;操作）</p></li><li><p>采用结构化分析方法时，采用的基本手段是：分解与抽象。</p></li><li><table><thead><tr><th>阶段</th><th>产生</th></tr></thead><tbody><tr><td>系统分析</td><td>模块结构图与模块说明书</td></tr><tr><td>需求&#x2F;设计阶段</td><td>系统说明书</td></tr><tr><td>需求分析阶段</td><td>数据字典&#x2F;数据流图</td></tr></tbody></table></li><li><p>结构化设计是面向数据流的设计方法。</p></li><li><p>维护过程中，应先确定维护类型。</p></li><li><p>结构化设计方法：数据流图导出初始结构图，再以此为基础构件模块化的软件系统架构。</p></li><li><p>结构化系统分析主要通过处理功能进行分析。</p></li><li><p>结构化系统分析中，判定表和判定树常用于表达数据流图中的加工逻辑。</p></li><li><p>驱动模块：自底向上测试</p><p>桩模块：自顶向下测试</p></li><li><p>结构化设计采用模块化方法的主要出发点是：降低复杂度。</p></li><li><p>数据流图所描述的是实际系统的逻辑模型。</p></li><li><p>在软件生命周期中，占工作量比例最大的是：维护。</p></li><li><p>SA(结构化)方法再描述方式上的特点，是尽量采用图形表示。</p></li><li><p>决定软件系统中各个模块的外部特性（输入、输出和功能）是概要设计阶段的任务。</p></li><li><p>通过对软件的测试，可以证明错误所在。</p></li><li><p>决定软件工程方法论所有步骤的攻击目标是提高软件的可维护性。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;空格</span><br></pre></td></tr></table></figure><h3 id="十五、习题："><a href="#十五、习题：" class="headerlink" title="十五、习题："></a>十五、习题：</h3><ol><li><h4 id="可行性研究："><a href="#可行性研究：" class="headerlink" title="可行性研究："></a>可行性研究：</h4><p>该类题解法：①写出问题定义，②再根据技术、经济、操作可行性进行分析，③画出系统流程图和数据流图。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.1.png"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.2.png" alt="习题1.2"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%981.3.png" alt="习题1.3"></p></li><li><h4 id="需求分析：-1"><a href="#需求分析：-1" class="headerlink" title="需求分析："></a>需求分析：</h4><p>此类题解法：画数据流图，画E-R图。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.1.png"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%982.2.png" alt="习题2.2"></p></li><li><h4 id="总体设计：-1"><a href="#总体设计：-1" class="headerlink" title="总体设计："></a>总体设计：</h4><p>此类题解法：画数据流图和软件结构图，还会有HIPO图的绘制。</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.1.png"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.2.png" alt="习题3.2"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.3.png" alt="习题3.3"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%983.4.png" alt="习题3.4"></p></li><li><h4 id="详细设计：-1"><a href="#详细设计：-1" class="headerlink" title="详细设计："></a>详细设计：</h4><p>此类题解法：①根据代码绘制程序流程图和盒图。②根据图或代码判定是否结构化，若非结构化则&#x3D;&gt;结构化（画图）。③判定表和判定树的绘制。④画出程序的程序流程图并转化为程序流图，再计算环形复杂度。⑤Jackson图绘制？？？</p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.1.png"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%984.2.png" alt="习题4.2"></p></li></ol><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.1.png"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.2.png" alt="习题5.2"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.3.png" alt="习题5.3"></p><p><img src="/blog2025.github.io/2025/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/%E4%B9%A0%E9%A2%985.4.png" alt="习题5.4"></p><ol start="5"><li><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>此类题解法：①根据提供的伪代码，进行纠错，修改循环结构，画程序流程图，判定是否结构化，画盒图。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;②进行各类测试。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用、博客编写教程：</title>
      <link href="/blog2025.github.io/2025/03/10/hello-world/"/>
      <url>/blog2025.github.io/2025/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="一、流程"><a href="#一、流程" class="headerlink" title="一、流程"></a>一、流程</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd进入hexo-blog目录本地库，</span><br><span class="line">使用命令进行操作，</span><br><span class="line">操作完成后使用 <span class="attribute">hexo</span> g -d 生成静态页面并上传到GitHub。</span><br></pre></td></tr></table></figure><h3 id="二、创建新帖子"><a href="#二、创建新帖子" class="headerlink" title="二、创建新帖子"></a>二、创建新帖子</h3><p>方法一：直接生成文章：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure><p>方法二：生成文章和对应同名目录(用于存储图片资源等)：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> new post <span class="comment"># 文章名称</span></span><br></pre></td></tr></table></figure><p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313130306915.png"></p><p>注：文章存储路径为：hexo-blog&#x2F;source&#x2F;_posts</p><h3 id="三、Hexo命令："><a href="#三、Hexo命令：" class="headerlink" title="三、Hexo命令："></a>三、Hexo命令：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init <span class="comment"># 初始化 </span></span><br><span class="line">npm install <span class="comment"># (一般来讲，这个只会在第一次安装hexo时使用)</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo d <span class="comment"># 上传到GitHub</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br><span class="line">hexo g -d <span class="comment"># 生成静态页面并上传到github</span></span><br><span class="line">ssh -T git<span class="variable">@github</span>.com <span class="comment"># 测试连通性</span></span><br></pre></td></tr></table></figure><p>更多命令: <a href="https://hexo.io/zh-cn/docs/commands">链接</a></p><h3 id="四、注意事项："><a href="#四、注意事项：" class="headerlink" title="四、注意事项："></a>四、注意事项：</h3><p>问题一:   “You’ve successfully authenticated, but GitHub does not provide shell access.”</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">·需要生成本地<span class="attribute">SSH</span> ，再配置到GitHub中。</span><br><span class="line">·因为本次采用SSH进行远程连接，所以对于本地hexo-blog中的_config.xml进行配置为SSH格式。</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: git<span class="variable">@github</span>.com:lsdyun/blog2025.github.io.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure><p>问题二：采用Http和SSH区别:(!!!推荐使用SSH)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">采用Http每次都需要输入账号和密码，使用SSH则不需要。</span><br><span class="line">此外，GitHub已经禁止密码验证，强制要求使用个人访问令牌(PAT),所以此处才使用SSH。</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">认证机制：</span><br><span class="line">  SSH：</span><br><span class="line">     ·基于非对称加密，通过本机生成的密钥对（公钥+私钥）进行身份验证，无需每次输入密码。</span><br><span class="line">     ·密钥需手动生成并添加至GitHub账户的SSH Keys配置页，实现一次性配置长期生效。</span><br><span class="line">  HTTP(S)：</span><br><span class="line">     ·依赖用户名+密码或令牌(PAT)认证。GitHub已禁用密码验证，强制要求使用个人访问令牌(PAT)。</span><br><span class="line">     ·令牌需在GitHub账户中生成并赋予权限(如repo权限)，操作时需手动输入或依赖凭证缓存。</span><br></pre></td></tr></table></figure><p>生成SSH和配置到GitHub参考: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p><h3 id="五：补充："><a href="#五：补充：" class="headerlink" title="五：补充："></a>五：补充：</h3><p>·Hexo默认主题存放在node_modules&#x2F;hexo-theme-landscape目录下，可对_config.yml进行处理。</p><p><font color="red">·当使用steam++加速GitHub时，会导致本地host被污染，导致无法上传项目到GitHub，最好先关闭加速在上传。</font></p><h3 id="六、Hexo渲染和Typora图片问题"><a href="#六、Hexo渲染和Typora图片问题" class="headerlink" title="六、Hexo渲染和Typora图片问题"></a>六、Hexo渲染和Typora图片问题</h3><p>1.修改 Hexo 根目录的 <code>_config.yml</code>，确保以下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="attribute">true</span>  <span class="comment"># 自动生成文章同名资源夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>     <span class="comment"># 禁止生成相对路径</span></span><br><span class="line"></span><br><span class="line">同时增加：(没这个也会导致渲染出问题)</span><br><span class="line"><span class="comment"># 解决typera和hexo图片加载问题  </span></span><br><span class="line">marked:</span><br><span class="line">  prependRoot: <span class="literal">true</span></span><br><span class="line">  postAsset: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2.安装官方推荐的渲染插件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> uninstall hexo-renderer-marked --save  <span class="comment"># 先卸载旧版本（如有）</span></span><br><span class="line">npm install hexo-renderer-marked<span class="variable">@latest</span> --save</span><br></pre></td></tr></table></figure><p>3.Typora 设置路径：</p><p>偏好设置 → 图像 → 插入图片时选择 “复制到指定路径”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">保存路径填：./$&#123;filename&#125;.assets/  </span><br><span class="line">勾选：优先使用相对路径</span><br></pre></td></tr></table></figure><p><img src="/blog2025.github.io/2025/03/10/hello-world/image-20250313225230399.png" alt="image-20250313225230399"></p><p>4.格式→图像→设置图片根目录 “选择对应文件的存储位置”</p><p>5‌.插入图片后检查格式：</p><p>在 Markdown 中必须显示为 <code>![描述](图片名.jpg)</code>，而不是 <code>![描述](文章名/图片名.jpg)</code><br>（若出现多余路径，手动删除前缀）</p><p>6.<font color="red">添加图片步骤</font></p><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一步、使用截图工具,不保存；</span><br><span class="line">第二步、直接将图片复制到Typora中；</span><br><span class="line">第三步、从Typora将图片保存到对应文件夹中；</span><br><span class="line">第四步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure><p>方法二：（图片最后格式一定没有”&#x2F;“）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步、使用截图工具，保存到对应目录；</span><br><span class="line">第二步、在Typora中，右击插入图像；</span><br><span class="line">第三步、将Typora中的文件名的&quot;/&quot;删除，格式为：![描述](image.png)</span><br></pre></td></tr></table></figure><h3 id="七、Hexo高亮问题："><a href="#七、Hexo高亮问题：" class="headerlink" title="七、Hexo高亮问题："></a>七、Hexo高亮问题：</h3><p>1.Hexo 7.x的配置文件(_config.xml)中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>syntax_highlighter: 可选Hexo默认的highlight.js,也可选prismjs</p><p>2.Next 8.22.0主题的配置文件(_config.xml)中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default  ##这里决定了最后展示的效果</span><br><span class="line">    dark: stackoverflow-dark ##这里决定了最后展示的效果</span><br><span class="line">  prism:</span><br><span class="line">    light: prism-tomorrow  ##这里决定了最后展示的效果</span><br><span class="line">    dark: prism-tomorrow-dark ##这里决定了最后展示的效果</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: </span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false</span><br><span class="line">    height: 500</span><br></pre></td></tr></table></figure><p><img src="/blog2025.github.io/2025/03/10/hello-world/BB1msOOV.jpg"></p><h3 id="八、个性化Next主题："><a href="#八、个性化Next主题：" class="headerlink" title="八、个性化Next主题："></a>八、个性化Next主题：</h3><p>1.开启themes&#x2F;next_config.xml中的选项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><p>2.在hexo-blog&#x2F;source&#x2F;_data中新建styles.styl</p><p>3.开始在styles.styl中自定义CSS</p><h3 id="九、开启动态背景："><a href="#九、开启动态背景：" class="headerlink" title="九、开启动态背景："></a>九、开启动态背景：</h3><p>在themes&#x2F;next_config.xml中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure><h3 id="十、参考资料："><a href="#十、参考资料：" class="headerlink" title="十、参考资料："></a>十、参考资料：</h3><p>安装教程一: <a href="https://blog.csdn.net/yaorongke/article/details/119089190">链接</a></p><p>安装教程二: <a href="https://zhuanlan.zhihu.com/p/392994381">链接</a></p><p>Next主题使用方法：<a href="https://zhuanlan.zhihu.com/p/618864711">链接</a></p><p>Next 8 版本使用方法：<a href="https://www.cnblogs.com/jinwei26/articles/18460312">链接</a>（代码块，动态人物|本项目采用该版本）</p><p>Next新旧版本对比：<a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#%E9%BB%98%E8%AE%A4%E9%A1%B5%E5%A4%84%E7%90%86">链接</a></p><p>图标icon：<a href="https://fontawesome.dashgame.com/">链接</a></p><p>分类和标签功能：<a href="https://juejin.cn/post/6921750181297782798">链接</a></p><p>阅读全文功能：<a href="https://blog.csdn.net/codejoker_7/article/details/123235687">链接</a>要搭配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Typora中编写文档时配合&lt;!--more--&gt;使用，可以将文章内容截断，解决网页首页展示过多内容。</span><br></pre></td></tr></table></figure><p>暗黑模式：<a href="https://blog.csdn.net/rqh656418510/article/details/123676457">链接</a></p><p>Hexo 7.x 语法高亮：<a href="https://hexo.io/zh-cn/docs/syntax-highlight">链接</a></p><p>Hexo-Next:<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自建网站 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
